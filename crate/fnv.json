{"root":"0:0:2024","crate_version":"1.0.7","includes_private":false,"index":{"2:11333:51962":{"id":"2:11333:51962","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:48030:174"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48028:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9119:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9119:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11411:58538":{"id":"2:11411:58538","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11356:52007":{"id":"2:11356:52007","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"2:11022:3118","prim@char":"1:12357:2154"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11027:3117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11353:52006":{"id":"2:11353:52006","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"2:11022:3118","prim@char":"1:12357:2154"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11027:3117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2515:127":{"id":"2:2515:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:39273:2397","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"2:11441:51847":{"id":"2:11441:51847","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11344:51989":{"id":"2:11344:51989","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11343:51988"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11423:51753":{"id":"2:11423:51753","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:11022:3118","prim@char":"1:12357:2154"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48028:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11027:3117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11400:58534":{"id":"2:11400:58534","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11022:3118","`DoubleEndedIterator`":"2:7062:120","prim@char":"1:12357:2154","str::matches":"2:11397:2239"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:50218:3397","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11027:3117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11027:3117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11042:3121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2510:127":{"id":"2:2510:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2481:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"2:2224:2224":{"id":"2:2224:2224","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2512-0:10:1593":{"id":"b:2:2512-0:10:1593","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2471:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2481:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2515:127","2:2516:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11406:58536":{"id":"2:11406:58536","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"prim@char":"1:12357:2154","`DoubleEndedIterator`":"2:7062:120","str::match_indices":"2:11403:58535","self::pattern":"2:11022:3118"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:50164:3394","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11027:3117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11027:3117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11042:3121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11373:51998":{"id":"2:11373:51998","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12357:2154","self::pattern":"2:11022:3118"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:10846:2835","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11027:3117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11376:52000":{"id":"2:11376:52000","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"prim@char":"1:12357:2154","self::pattern":"2:11022:3118","str::split":"2:11370:51996","`DoubleEndedIterator`":"2:7062:120"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:50014:2829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11027:3117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11027:3117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11042:3121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11347:1601":{"id":"2:11347:1601","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49982:2708","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2511:1420":{"id":"2:2511:1420","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48172:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2481:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11350:3957":{"id":"2:11350:3957","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:50250:2711","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11446:2845":{"id":"2:11446:2845","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4455:2845"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:50304:2846","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2222-0:10:1593":{"id":"b:2:2222-0:10:1593","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2653:2287","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2216:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2224:2224"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:13":{"id":"0:13","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[91,0],"end":[97,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2548:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:14:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11351:58529":{"id":"2:11351:58529","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:50260:3398","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2501-0:10:1593":{"id":"b:2:2501-0:10:1593","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2474:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2503:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:18:1599":{"id":"0:18:1599","crate_id":0,"name":"finish","span":{"filename":"lib.rs","begin":[110,4],"end":[112,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11417:58542":{"id":"2:11417:58542","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"2:11022:3118","prim@char":"1:12357:2154"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11027:3117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11027:3117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11047:3122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11326:58525":{"id":"2:11326:58525","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11324:58524"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5093:2712":{"id":"5:5093:2712","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:6978:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11027:3117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5110:51846":{"id":"5:5110:51846","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:11442:51844"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:20:1605":{"id":"0:20:1605","crate_id":0,"name":"FnvBuildHasher","span":{"filename":"lib.rs","begin":[128,0],"end":[128,56]},"visibility":"public","docs":"A builder for default FNV hashers.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"BuildHasherDefault","id":"2:8854:1588","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"2:11331:306":{"id":"2:11331:306","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"1:12374:2168","str::as_mut_ptr":"2:11332:51966"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11320":{"id":"2:11320","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:10585:1345","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11321:783","2:11322:2326","2:11323:58523","2:11324:58524","2:11326:58525","2:11329:51682","2:11330:58526","2:11331:306","2:11332:51966","2:11333:51962","2:11335:51963","2:11337:51964","2:11339:51965","2:11341:58527","2:11342:58528","2:11343:51988","2:11344:51989","2:11345:3421","2:11346:3149","2:11347:1601","2:11348:56956","2:11349:56970","2:11350:3957","2:11351:58529","2:11352:56958","2:11353:52006","2:11356:52007","2:11359:52008","2:11362:2366","2:11366:2325","2:11370:51996","2:11373:51998","2:11376:52000","2:11379:58530","2:11382:58531","2:11385:52002","2:11388:52004","2:11391:58532","2:11394:58533","2:11397:2239","2:11400:58534","2:11403:58535","2:11406:58536","2:11409:58537","2:11411:58538","2:11413:58539","2:11415:58540","2:11416:58541","2:11417:58542","2:11420:58543","2:11423:51753","2:11426:52009","2:11429:58544","2:11432:58545","2:11435:58546","2:11438:3258","2:11440:3598","2:11441:51847","2:11442:51844","2:11443:51843","2:11444:58547","2:11446:2845","2:11447:58548"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3307:1433":{"id":"2:3307:1433","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:46501:2851","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11438:3258":{"id":"2:11438:3258","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"2:10983:2421","FromStr::Err":"2:10984:126"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48172:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:10983:2421","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:10983:2421","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2227:51412":{"id":"2:2227:51412","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11426:52009":{"id":"2:11426:52009","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12357:2154","self::pattern":"2:11022:3118"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48028:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11027:3117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11027:3117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11042:3121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:21:1607":{"id":"0:21:1607","crate_id":0,"name":"FnvHashMap","span":{"filename":"lib.rs","begin":[132,0],"end":[132,58]},"visibility":"public","docs":"A `HashMap` using a default FNV hasher.","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"HashMap","id":"1:771:140","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"resolved_path","inner":{"name":"FnvBuildHasher","id":"0:20:1605","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"b:2:3305-0:10:1593":{"id":"b:2:3305-0:10:1593","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2653:2287","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3303:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3307:1433"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11366:2325":{"id":"2:11366:2325","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"self::pattern":"2:11022:3118","prim@char":"1:12357:2154","`None`":"2:48030:174"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48028:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11027:3117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11027:3117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11042:3121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11391:58532":{"id":"2:11391:58532","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48028:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11027:3117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11339:51965":{"id":"2:11339:51965","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9119:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9119:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11442:51844":{"id":"2:11442:51844","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11416:58541":{"id":"2:11416:58541","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:15":{"id":"0:15","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[99,0],"end":[106,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:16:1597"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11403:58535":{"id":"2:11403:58535","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"str::rmatch_indices":"2:11406:58536","`DoubleEndedIterator`":"2:7062:120","self::pattern":"2:11022:3118","prim@char":"1:12357:2154"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:50146:3393","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11027:3117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11415:58540":{"id":"2:11415:58540","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11345:3421":{"id":"2:11345:3421","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12357:2154"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49966:3384","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5099:59182":{"id":"5:5099:59182","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:6978:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11322:2326":{"id":"2:11322:2326","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5111:51845":{"id":"5:5111:51845","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:11443:51843"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11346:3149":{"id":"2:11346:3149","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12357:2154"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49972:3385","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11432:58545":{"id":"2:11432:58545","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12357:2154","self::pattern":"2:11022:3118"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11027:3117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2516:1419":{"id":"2:2516:1419","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48172:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"name":"TryFrom","id":"2:2481:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11447:58548":{"id":"2:11447:58548","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4452:58548"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:50313:3403","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11321:783":{"id":"2:11321:783","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12357:2154"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11429:58544":{"id":"2:11429:58544","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:11022:3118","prim@char":"1:12357:2154"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11027:3117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11027:3117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11042:3121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11342:58528":{"id":"2:11342:58528","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"crate::ops::IndexMut":"2:2975:2588","`str`":"1:12363:2159","str::slice_unchecked":"2:11341:58527"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11394:58533":{"id":"2:11394:58533","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48028:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11027:3117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11027:3117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11042:3121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11348:56956":{"id":"2:11348:56956","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11349:56970"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:50270:3399","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11341:58527":{"id":"2:11341:58527","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12363:2159","str::slice_mut_unchecked":"2:11342:58528","crate::ops::Index":"2:2971:2512"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11443:51843":{"id":"2:11443:51843","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11352:56958":{"id":"2:11352:56958","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:50288:3401","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11444:58547":{"id":"2:11444:58547","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4454:58547"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:50295:3402","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2710:2288-0:10:1593":{"id":"a:2:2710:2288-0:10:1593","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2710:2288","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:2660:222-0:10:1593":{"id":"a:2:2660:222-0:10:1593","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2660:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:5109:2731":{"id":"5:5109:2731","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:6978:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:16:1597":{"id":"0:16:1597","crate_id":0,"name":"with_key","span":{"filename":"lib.rs","begin":[103,4],"end":[105,5]},"visibility":"public","docs":"Create an FNV hasher starting with a state corresponding\nto the hash `key`.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["key",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11435:58546":{"id":"2:11435:58546","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:11022:3118","prim@char":"1:12357:2154"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11027:3117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11027:3117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11042:3121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11349:56970":{"id":"2:11349:56970","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11348:56956"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:50279:3400","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:14:59":{"id":"0:14:59","crate_id":0,"name":"default","span":{"filename":"lib.rs","begin":[94,4],"end":[96,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:19:1600":{"id":"0:19:1600","crate_id":0,"name":"write","span":{"filename":"lib.rs","begin":[115,4],"end":[124,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["bytes",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11343:51988":{"id":"2:11343:51988","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11344:51989"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11379:58530":{"id":"2:11379:58530","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11022:3118","prim@char":"1:12357:2154","`DoubleEndedIterator`":"2:7062:120","str::rsplit_terminator":"2:11382:58531","str::split":"2:11370:51996"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:50046:3389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11027:3117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:24:1611":{"id":"0:24:1611","crate_id":0,"name":"FnvHashSet","span":{"filename":"lib.rs","begin":[136,0],"end":[136,52]},"visibility":"public","docs":"A `HashSet` using a default FNV hasher.","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"HashSet","id":"1:1473:142","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"resolved_path","inner":{"name":"FnvBuildHasher","id":"0:20:1605","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"2:11359:52008":{"id":"2:11359:52008","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12357:2154","self::pattern":"2:11022:3118"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11027:3117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11027:3117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11042:3121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2507-0:10:1593":{"id":"b:2:2507-0:10:1593","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2481:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2477:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2510:127","2:2511:1420"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11324:58524":{"id":"2:11324:58524","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5108:59184":{"id":"5:5108:59184","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2295","`String`":"5:6978:218"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:276:2295","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6723:2806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11337:51964":{"id":"2:11337:51964","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9119:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9119:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11335:51963":{"id":"2:11335:51963","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:48030:174"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48028:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9119:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9119:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11388:52004":{"id":"2:11388:52004","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"self::pattern":"2:11022:3118","str::splitn":"2:11385:52002","prim@char":"1:12357:2154"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:50118:2831","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11027:3117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11027:3117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11042:3121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11409:58537":{"id":"2:11409:58537","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:17":{"id":"0:17","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[108,0],"end":[125,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["write_u64","write_u8","write_i128","write_i16","write_u128","write_u16","write_str","write_isize","write_i32","write_usize","write_u32","write_length_prefix","write_i64","write_i8"],"trait":{"name":"Hasher","id":"2:8814:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:18:1599","0:19:1600"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2646:214-0:10:1593":{"id":"a:2:2646:214-0:10:1593","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2646:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:0:2024":{"id":"0:0:2024","crate_id":0,"name":"fnv","span":{"filename":"lib.rs","begin":[1,0],"end":[367,1]},"visibility":"public","docs":"An implementation of the [Fowler–Noll–Vo hash function][chongo].\n\n## About\n\nThe FNV hash function is a custom `Hasher` implementation that is more\nefficient for smaller hash keys.\n\n[The Rust FAQ states that][faq] while the default `Hasher` implementation,\nSipHash, is good in many cases, it is notably slower than other algorithms\nwith short keys, such as when you have a map of integers to other values.\nIn cases like these, [FNV is demonstrably faster][graphs].\n\nIts disadvantages are that it performs badly on larger inputs, and\nprovides no protection against collision attacks, where a malicious user\ncan craft specific keys designed to slow a hasher down. Thus, it is\nimportant to profile your program to ensure that you are using small hash\nkeys, and be certain that your program could not be exposed to malicious\ninputs (including being a networked server).\n\nThe Rust compiler itself uses FNV, as it is not worried about\ndenial-of-service attacks, and can assume that its inputs are going to be\nsmall—a perfect use case for FNV.\n\n\n## Using FNV in a `HashMap`\n\nThe `FnvHashMap` type alias is the easiest way to use the standard library’s\n`HashMap` with FNV.\n\n```rust\nuse fnv::FnvHashMap;\n\nlet mut map = FnvHashMap::default();\nmap.insert(1, \"one\");\nmap.insert(2, \"two\");\n\nmap = FnvHashMap::with_capacity_and_hasher(10, Default::default());\nmap.insert(1, \"one\");\nmap.insert(2, \"two\");\n```\n\nNote, the standard library’s `HashMap::new` and `HashMap::with_capacity`\nare only implemented for the `RandomState` hasher, so using `Default` to\nget the hasher is the next best option.\n\n## Using FNV in a `HashSet`\n\nSimilarly, `FnvHashSet` is a type alias for the standard library’s `HashSet`\nwith FNV.\n\n```rust\nuse fnv::FnvHashSet;\n\nlet mut set = FnvHashSet::default();\nset.insert(1);\nset.insert(2);\n\nset = FnvHashSet::with_capacity_and_hasher(10, Default::default());\nset.insert(1);\nset.insert(2);\n```\n\n[chongo]: http://www.isthe.com/chongo/tech/comp/fnv/index.html\n[faq]: https://www.rust-lang.org/en-US/faq.html#why-are-rusts-hashmaps-slow\n[graphs]: https://cglab.ca/~abeinges/blah/hash-rs/","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:10:1593","0:20:1605","0:21:1607","0:24:1611"],"is_stripped":false}},"2:2503:668":{"id":"2:2503:668","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5107:59183":{"id":"5:5107:59183","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:6978:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11382:58531":{"id":"2:11382:58531","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"str::split_terminator":"2:11379:58530","self::pattern":"2:11022:3118","prim@char":"1:12357:2154","str::split":"2:11370:51996"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:50064:3390","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11027:3117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11027:3117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11042:3121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7719:2470-0:10:1593":{"id":"a:2:7719:2470-0:10:1593","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7719:2470","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11413:58539":{"id":"2:11413:58539","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11370:51996":{"id":"2:11370:51996","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11022:3118","str::split_whitespace":"2:11348:56956","`DoubleEndedIterator`":"2:7062:120","prim@char":"1:12357:2154","str::rsplit":"2:11376:52000"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49996:2710","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11027:3117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11332:51966":{"id":"2:11332:51966","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12374:2168"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5096:59181":{"id":"5:5096:59181","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:6978:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11027:3117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5092:59180":{"id":"5:5092:59180","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:276:2295","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6723:2806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:276:2295","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6723:2806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:10:1593":{"id":"0:10:1593","crate_id":0,"name":"FnvHasher","span":{"filename":"lib.rs","begin":[89,0],"end":[89,26]},"visibility":"public","docs":"An implementation of the Fowler–Noll–Vo hash function.\n\nSee the [crate documentation](index.html) for more details.","links":{},"attrs":["#[allow(missing_copy_implementations)]"],"deprecation":null,"kind":"struct","inner":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:15","a:2:2646:214-0:10:1593","a:2:7718:2471-0:10:1593","a:2:2660:222-0:10:1593","a:2:7719:2470-0:10:1593","a:2:2710:2288-0:10:1593","b:2:2225-0:10:1593","b:2:2501-0:10:1593","b:2:3305-0:10:1593","b:2:2512-0:10:1593","b:2:2222-0:10:1593","b:2:2507-0:10:1593","b:2:2497-0:10:1593","0:13","0:17"]}},"2:11440:3598":{"id":"2:11440:3598","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7718:2471-0:10:1593":{"id":"a:2:7718:2471-0:10:1593","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7718:2471","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11362:2366":{"id":"2:11362:2366","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:48030:174","self::pattern":"2:11022:3118","prim@char":"1:12357:2154"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48028:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11027:3117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11329:51682":{"id":"2:11329:51682","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:10590:3555"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2497-0:10:1593":{"id":"b:2:2497-0:10:1593","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2474:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2471:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2500:2319"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11385:52002":{"id":"2:11385:52002","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12357:2154","str::rsplitn":"2:11388:52004","self::pattern":"2:11022:3118"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:50100:2833","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11027:3117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11330:58526":{"id":"2:11330:58526","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11420:58543":{"id":"2:11420:58543","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12357:2154","self::pattern":"2:11022:3118"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11027:3117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5091":{"id":"5:5091","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5002:1345","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5092:59180","5:5093:2712","5:5096:59181","5:5099:59182","5:5107:59183","5:5108:59184","5:5109:2731","5:5110:51846","5:5111:51845"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:2500:2319":{"id":"2:2500:2319","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2474:132"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11397:2239":{"id":"2:11397:2239","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"prim@char":"1:12357:2154","`DoubleEndedIterator`":"2:7062:120","str::matches":"2:11397:2239","self::pattern":"2:11022:3118"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:50200:3396","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11027:3117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2225-0:10:1593":{"id":"b:2:2225-0:10:1593","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2653:2287","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2219:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2227:51412"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11323:58523":{"id":"2:11323:58523","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"12:1555:3922":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"6:4247:40362":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"5:1216:2502":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:51677:56776":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"6:4346:40374":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"6:4489:3028":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:11734:49566":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:12370:2164":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"6:1887:38154":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"16:2921:3994":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:21790:2951":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"16:4318:43515":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:13536:50861":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:4298:2756":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"6:5782:41049":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:47073:2555":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"16:5472:4067":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:13459:50828":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"6:1525:37998":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"6:5541:41032":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:2764:2574":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"5:676:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:48417:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:13580:50869":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:52776:3230":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"16:4777:43638":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:47095:2881":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:10445:4469":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"2:1643:3316":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"16:4597:43602":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:12307:49672":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:11340:51806":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"6:4367:40377":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"16:4288:43509":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"5:1201:2503":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:2789:2649":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"6:1695:38014":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:10270:44926":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:49329:143":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:49359:4796":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"16:5817:4081":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"16:6450:3927":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:678:7712":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:11617:30024":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:9507:4805":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:52700:3223":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:2835:2666":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:11546:2780":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"17:9691:4441":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"14:202:3690":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:8705:3029":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:56563:3431":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:3267:2725":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"16:7868:4025":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:53902:3211":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"6:6479:41462":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"12:2069:2502":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"16:6441:4096":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"16:2984:4303":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:9930:44851":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:50910:30021":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:0:481":{"crate_id":2,"path":["core"],"kind":"module"},"16:5739:4077":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:48146:3485":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"16:7521:4012":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:50570:3134":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"18:564:4547":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:1623:2552":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:48113:3483":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"17:13082:50733":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:46886:3577":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:8092:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"18:491:61235":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"6:4565:40394":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:8475:4355":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:10532:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:4437:3072":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:52320:3209":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:7286:56422":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:4356:2610":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:2250:2966":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"9:800:42278":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"5:667:225":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:542:2943":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"17:13158:50765":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"12:444:140":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:49144:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"6:6409:41457":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"6:4611:40400":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:46501:2851":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"6:4629:40402":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"12:697:2495":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:50953:3424":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"12:1859:2552":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:7925:7711":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"16:3254:42984":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"17:12609:50138":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:2784:2583":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:11974:49583":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"6:1678:38012":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:8356:2735":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:9681:44760":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:10921:45083":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:410:4691":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"2:47208:2897":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"5:3326:158":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:13024:50725":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"16:7189:4001":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"16:6721:4102":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"16:3393:42985":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:7772:4680":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:8586:2595":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"9:592:3785":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"1:7835:2917":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"16:5519:4070":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:10796:4466":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"16:7366:4033":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:2269:183":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"6:7249:40550":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:2752:2568":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"1:3150:2993":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"16:5681:4075":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:10520:44957":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:5570:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"6:5480:41026":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:51789:3200":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"5:4029:4641":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:48155:36351":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:48164:188":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:1473:142":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:50739:3410":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:21042:3441":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"6:4354:40375":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:10845:4469":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"6:646:37150":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"5:859:2413":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:12323:4818":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"15:175:3929":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:2245:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"17:12349:49736":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"12:274:60294":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"18:755:4539":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:21658:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"16:5715:4076":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:3466:54606":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:9577:2834":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:20195:3171":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"17:10233:44949":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"6:1595:38005":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:50711:3409":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"1:5656:2519":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"12:1628:4637":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"6:4673:40408":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:1808:592":{"crate_id":1,"path":["std","env"],"kind":"module"},"6:6524:41465":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:4698:40410":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"16:4626:43607":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:962:2494":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:8592:189":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"1:2510:2719":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:9440:3042":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:8069:2965":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:54005:18500":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:10296:44924":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:12176:49610":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:8527:2442":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:8636:3011":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"1:11740:54446":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:2710:2288":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"9:33:3835":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"2:2742:2559":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"5:1943:3624":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:49776:2818":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:8680:3068":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:11495:2525":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"16:5194:4733":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:56959:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:50146:3393":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:11087:4756":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:4212:2585":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:6071:3046":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"5:36:3634":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:9283:44719":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:51873:3225":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:49070:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:48767:2595":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:5009:2642":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:9539:4410":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"3:0:429":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"1:12362:2158":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:10928:2726":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"5:2968:2553":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:10088:44837":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"16:7276:4113":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:10350:4396":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:3590:2443":{"crate_id":1,"path":["std","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:6437:4806":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:54036:18503":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"12:1044:3906":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:8991:61208":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:4312:2762":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:11742:57236":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"16:6881:4105":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:4902:54267":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"17:9021:44651":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"6:4761:40416":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"16:7887:4027":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"6:560:37114":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"5:0:279":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:11358:2527":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"16:2358:4291":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:12630:50191":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:49785:2817":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"5:6317:3667":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"2:21225:3260":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"6:5841:40263":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"16:5771:4079":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:2811:2654":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"12:2053:2501":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"5:768:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"0:21:1607":{"crate_id":0,"path":["fnv","FnvHashMap"],"kind":"typedef"},"2:46528:56950":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"6:5772:41048":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"6:5876:41078":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"16:7535:4013":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:49814:2820":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:9590:212":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:10507:54351":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"6:6329:11062":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:11997:2630":{"crate_id":2,"path":["core","const_closure","ConstFnMutClosure"],"kind":"struct"},"9:111:3802":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"17:10822:44656":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"6:1668:38011":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:9512:4812":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:8814:143":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:49312:4794":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:12860:50292":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:951:2492":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"6:5568:40999":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:52174:3229":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"6:5727:41045":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:966:2495":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:29617:3470":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:11665:187":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:20029:57156":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:4206:2586":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"5:5422:2491":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"16:5941:189":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:2477:231":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"17:8241:4471":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:10751:2524":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:2548:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1:9454:4802":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"12:300:3913":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"5:6747:2491":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:11022:3118":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"6:1722:38017":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"6:5605:41036":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"5:3417:4639":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:46857:2846":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"6:7279:42026":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:13506:50858":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:7416:2869":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"5:6879:2277":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:21350:3526":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"16:6219:4091":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:11197:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"2:4706:767":{"crate_id":2,"path":["core","iter"],"kind":"module"},"16:2456:4315":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"16:2816:4300":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:11617:49497":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:10590:3555":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:12322:49673":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:7143:4679":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:3373:2696":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:2912:2289":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:10186:4665":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"16:4840:43653":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:2737:2563":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:51697:56799":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:0:2132":{"crate_id":17,"path":["object"],"kind":"module"},"2:11833:106":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"1:11207:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"1:10973:2928":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"17:11774:49569":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:51891:56812":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:10374:4453":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:51922:3213":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:11843:3007":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"18:719:4536":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"16:7227:4109":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:7720:2679":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:8599:2455":{"crate_id":1,"path":["std","net","socket_addr","SocketAddrV4"],"kind":"struct"},"5:3094:2492":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"17:9328:4492":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"16:7113:4286":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:9549:2833":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"14:31:42905":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:11528:44870":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"6:5498:41027":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"5:6723:2806":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"13:220:4780":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:54062:18505":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"6:545:37112":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"18:766:4540":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:7224:3004":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:2026:179":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:50014:2829":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"5:276:2295":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:9585:162":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:3146:134":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:21260:56669":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:13091:50734":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:2468:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"17:9401:44716":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:6778:3043":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:12382:2176":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:8596:2599":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:46321:3305":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"14:215:42907":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"6:4621:40401":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:11199:45312":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:3418:2532":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:12756:50243":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:54077:18506":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:5313:51736":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:12379:2173":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"16:4536:43589":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:46879:3402":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:47043:2807":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:8666:4742":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:46893:3578":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"16:4135:43428":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"5:215:3680":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:21237:3261":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:46966:3480":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"6:4575:40395":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"6:5733:41046":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"6:4726:40413":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:46796:3110":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:6492:2788":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:12372:2166":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:9422:44715":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"13:0:2122":{"crate_id":13,"path":["std_detect"],"kind":"module"},"17:8510:4734":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:5676:2520":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:1634:2554":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"6:6322:41456":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:13327:50780":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:11436:49385":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"12:2190:60301":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"6:4605:40399":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:9553:4422":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:29545:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"16:6668:4017":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:50581:3135":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:2274:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"17:8526:4457":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:10973:45092":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:46494:3160":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:2916:2290":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"18:707:3120":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:8594:2598":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:9778:4443":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:48240:178":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:2378:2969":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:39309:3715":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"1:6389:3426":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:11054:4750":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"5:771:3696":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:2646:214":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:46933:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:53996:18499":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:54025:18502":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"12:387:60293":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:6837:211":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:13039:50727":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:7139:155":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:13436:50825":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"16:7803:4118":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:11047:3122":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"6:4598:40398":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"6:1511:37996":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:6311:4670":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"16:5175:42981":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"14:7:42905":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:3125:44840":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:50279:3400":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:8055:4394":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:10708:4468":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:658:2960":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:54016:18501":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:21148:56824":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"1:9353:2790":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"12:762:2492":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"1:595:2755":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"6:501:37107":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:8142:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:49877:2825":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:5223:11068":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:13557:50862":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:571:2948":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"17:9947:44867":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:12237:49662":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:9873:44864":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:11813:49572":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"16:5536:4071":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"12:777:3905":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"2:20027:57161":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"5:6755:3699":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"16:6139:4088":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"16:4808:43645":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:50164:3394":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"16:3448:42986":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:4313:2609":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"6:4126:40351":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:976:2497":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:10931:2728":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"2:2901:2479":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:10109:2824":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"2:47244:2900":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"16:2784:4301":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:884:2413":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"5:4014:238":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:9805:4498":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:6212:2788":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:9309:2526":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:12073:49590":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"16:2332:4309":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"16:7850:4026":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:11174:45310":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:420:3978":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"16:0:2131":{"crate_id":16,"path":["gimli"],"kind":"module"},"18:582:2629":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:6503:2879":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:9061:4422":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"16:3557:42994":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:8110:44638":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:9385:2792":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"12:738:2490":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"1:9339:2787":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:56933:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:9277:2523":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:46780:3108":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"5:6156:4639":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:50604:3494":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"6:135:36793":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"17:9458:4361":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:9701:5269":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:5444:2888":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:13492:50852":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:6600:161":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:52936:3203":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:50200:3396":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:38117:2629":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"1:3949:2457":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:10385:4454":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"6:7220:40546":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:7846:54462":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"6:1550:38001":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:8398:2555":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"7:79:42128":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"12:1120:3909":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:9362:4422":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:928:2490":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:339:160":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"5:6895:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:11978:54441":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"5:6912:3599":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:1617:2551":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"5:6405:237":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"16:7934:4022":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:13141:50742":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:2465:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1:3343:2734":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:12972:50695":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:52441:56787":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"18:671:4532":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:8752:2708":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:47530:4664":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:7791:4682":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"6:4810:40421":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"16:6632:4101":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:8434:151":{"crate_id":1,"path":["std","net","ip_addr","IpAddr"],"kind":"enum"},"1:11713:51764":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"12:1872:2554":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"17:10062:44838":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:49058:109":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"2:21:660":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:3228:2729":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:8393:4360":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:20427:2587":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:12884:50356":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:454:2922":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:53046:3192":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:5822:2530":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:29723:3471":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:1672:1048":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"16:7144:4107":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:4250:2758":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:6781:2482":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:10182:44839":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:10420:4512":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"16:5438:4065":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:915:2489":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:21724:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:7409:2420":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:48265:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:47174:2889":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:21201:4788":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"5:3337:2413":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:11909:49578":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:9183:44654":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:12797:50247":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:9895:2963":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"1:4010:3007":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"16:6768:4103":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"18:521:4541":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:47551:31810":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:4421:3069":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:49896:2826":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:56985:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:20246:3293":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"2:10772:3391":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"16:6323:4014":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:1823:8706":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:54153:18510":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:9595:213":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:52268:3202":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"6:600:37120":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"16:7958:4055":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:13572:50867":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:49128:2593":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"9:586:3783":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"17:11939:49581":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:51721:3232":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"16:2526:4293":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"5:4974:4646":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"5:2019:59387":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:50288:3401":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:9317:4491":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:9372:2791":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"12:861:2500":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"6:4745:40415":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"6:4239:40361":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"5:5511:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"12:1866:2553":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"5:5962:2491":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:11883:3008":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:11434:4687":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:8203:2447":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:12103:49592":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:2922:2292":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:12674:50194":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:4264:2760":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:9347:2331":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:11651:4807":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"6:4329:40372":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:11661:49504":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:12291:49671":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:4890:2760":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"6:1686:38013":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:21314:56779":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"6:1541:38000":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"9:622:3786":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"17:9303:4420":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:13192:50769":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:2573:2720":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:13100:50735":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:6002:3034":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"16:4740:43625":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:11500:49387":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"6:581:37117":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"6:4335:40373":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"12:669:2494":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:9738:4444":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"16:3845:43162":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:9520:4105":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:4178:202":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"5:2726:59298":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:47165:2894":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"5:1338:2413":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:11217:45313":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"9:0:2125":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"16:2859:4273":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"5:4932:2801":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"5:6008:4639":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:10403:4398":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:20275:2587":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"6:6572:41469":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:9844:4502":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"12:810:2493":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:8057:2963":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:12118:49593":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:46820:3581":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:50715:3412":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:11288:45484":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:9577:4414":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:9108:44652":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:52746:3227":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"6:4816:40422":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:10490:44955":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"6:6981:41838":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"16:2252:4275":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:11559:49393":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:2562:127":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"6:7226:40547":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:4113:2511":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"1:11527:3505":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"1:11519:53786":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:8596:4740":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:12211:49660":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"5:3792:2488":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"18:481:4542":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"12:853:2499":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:13404:50821":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"6:4475:40385":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:10795:3392":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:52542:56804":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:50270:3399":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:21889:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"17:13478:50834":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:10870:4685":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"6:4653:40405":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:12514:50136":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"6:7214:40545":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:10546:44655":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:48531:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:4581:3025":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"6:1532:37999":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:10752:4398":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"6:4534:40390":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:12850:50291":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"5:2935:2413":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:13114:50737":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:47133:2885":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:20951:3176":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"11:44:3897":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"17:13279:50779":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:29559:3469":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"17:13354:50782":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"16:4432:43533":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"16:5424:4064":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:53794:3228":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"16:2622:4306":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:562:44644":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:50723:3413":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:10997:45093":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"16:2273:4274":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"5:5547:3607":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:49794:2821":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:5611:56451":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"2:47064:2878":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:9671:4363":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"6:4581:40396":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:7964:8719":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:50747:3505":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"6:4659:40406":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"16:6820:60403":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"0:24:1611":{"crate_id":0,"path":["fnv","FnvHashSet"],"kind":"typedef"},"12:320:3912":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:46352:193":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:2216:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"6:5741:41047":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:2697:2685":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"6:6375:37936":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"18:531:4545":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"18:614:61238":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"6:1654:38010":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:52076:3234":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:12060:49589":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:4249:3335":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:54192:18511":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:12739:50200":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:13031:50726":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"6:4515:40388":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"5:1415:2495":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:1964:2959":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:14:1600":{"crate_id":2,"path":["core","write"],"kind":"macro"},"5:1301:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:13184:50768":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:12369:2163":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"6:1562:38002":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:3068:3472":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:54130:18509":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"6:6392:37939":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"5:1933:2943":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:9274:44703":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:8580:111":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"1:1120:2504":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"16:5402:4063":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"5:7055:2492":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"17:10159:44841":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:7948:8712":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:4429:3070":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:9382:44718":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"6:7243:40549":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:8631:3010":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:8631:4741":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:11853:49575":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"6:5554:40998":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:56998:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:8365:2531":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:56920:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:6354:4095":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"6:4804:40420":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"5:1230:2504":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"5:6978:218":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:2827:2662":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:48028:176":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:11997:49584":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:10488:8717":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"2:48788:2597":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:12148:49595":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:2552:115":{"crate_id":2,"path":["core","default","Default"],"kind":"proc_derive"},"16:7245:4110":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:11175:51802":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"16:6597:4100":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:50046:3389":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"12:646:2488":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"16:4653:43610":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:8890:2411":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"17:3249:4386":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"12:2080:2503":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:8421:2710":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"17:11149:45308":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:11746:54457":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"9:676:3832":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"17:12816:4764":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"16:2596:4346":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"5:4888:4639":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"18:80:51252":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:2394:2974":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:20436:3175":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"16:8047:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"16:6048:4000":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:2396:2975":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"12:659:2331":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:12836:50289":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:49725:3383":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"16:7335:4031":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:12011:3938":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"5:1385:2490":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:9897:44866":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:52622:3235":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:11247:45365":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"12:119:3914":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:1111:2503":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"16:5503:4069":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:11141:2645":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:10983:2421":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:11547:44869":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:8822:61209":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"6:4683:40409":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"5:6793:3625":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:50900:200":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:52344:3191":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:4187:3330":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:2653:2287":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"5:7072:3661":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"12:2205:2276":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:10332:4518":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"16:2696:4296":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"6:4398:40379":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:9470:2829":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"5:6307:3666":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"6:5699:41042":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:9223:44700":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"6:4737:40414":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"6:4179:40354":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"6:7289:42027":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:12375:2169":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:2840:2669":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"6:6352:37962":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:21277:56819":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"6:6448:41461":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"16:7307:4116":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:12934:50361":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:52488:56784":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"18:548:139":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:9619:2780":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:47023:9242":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:49031:130":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"17:2916:4373":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:8782:11069":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"16:6759:4029":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"6:5720:41044":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:3226:2728":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:47156:2886":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"5:620:58356":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:46580:3095":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:4904:54269":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:21625:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:8701:4743":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:5344:51736":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:13382:50819":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:11152:54091":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:49007:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:46535:2608":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"12:2198:60303":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"6:5835:41076":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:20855:57090":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"16:4912:43677":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:21169:3265":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"16:3680:43045":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:2481:230":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:1737:3531":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"16:7615:4024":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:8117:2987":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"5:3350:2488":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"5:6474:4657":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:10455:4513":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:48079:2330":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"16:5379:4062":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:46810:3580":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:47124:2884":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"5:4614:2696":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:46832:3403":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:29523:3319":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:12134:49594":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"5:6955:3601":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:13007:50724":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:50991:2677":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:4231:40360":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"5:4519:199":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:12964:50694":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:4659:7716":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"17:11014:45205":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"16:7825:4119":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:2647:2722":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:9323:2527":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:1636:571":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:12730:50199":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:8873:2410":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:10846:2835":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"5:2730:59299":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"16:6164:4010":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:48645:3489":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"16:7287:4114":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"6:4527:40389":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"16:4208:43477":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"6:507:37108":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:11507:2526":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:47218:2898":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"12:815:2496":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:21185:4782":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:8685:3071":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"5:939:4639":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:2747:2566":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:897:2488":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:12251:49663":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:12781:50246":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:4073:3328":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"5:3751:4639":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"4:0:2123":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"17:10625:4402":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"6:4551:40392":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:11036:3120":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"5:1033:59513":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"15:193:3930":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:11690:30025":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:907:2331":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:1771:4413":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:52122:3222":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:19989:57087":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"17:10854:4438":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:8137:44645":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:12980:50722":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"5:1067:3707":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"5:5619:2696":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"6:519:37110":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:12948:50362":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:11300:45485":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"5:2465:3711":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:8951:61214":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"5:4735:3606":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"6:6998:41839":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"6:5660:41038":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"16:4680:43613":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:46274:3295":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"2:48104:2331":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"16:2548:4294":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:12360:2156":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:52029:56807":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"6:539:37111":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"16:5365:4009":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"16:7581:4036":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"6:6538:41466":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"17:1931:4409":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"12:1681:142":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"9:863:3744":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:53732:3208":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:49351:4795":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"6:1580:38004":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:1612:2492":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"9:920:3743":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:52982:3207":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:11638:57810":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:46759:29458":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"5:6814:2331":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:13413:50824":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:487:44643":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:3220:3239":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"12:393:60297":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:13059:50731":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:10221:44948":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:49886:2828":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:20234:2587":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"2:7719:2470":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:4113:3015":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:4900:54265":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"17:8494:4733":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"18:660:4531":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:49092:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"1:7834:2587":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"6:4307:40370":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:6417:2339":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:12364:2160":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:5060:2643":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"16:6654:4016":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"16:6308:4093":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:3153:2994":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"16:6545:4028":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"16:6337:4094":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:10245:44950":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"5:6288:3665":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"16:6807:4327":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"6:5713:41043":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:386:44642":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:46336:195":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:8133:2723":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:12337:4469":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:11093:3125":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:10721:4749":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:11787:49570":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:9109:2587":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:53012:3210":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"19:0:992":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:21343:57100":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:48096:2488":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:56946:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:586:37118":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:247:61213":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:10934:2724":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:50118:2831":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:11874:200":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"2:2311:184":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:4308:2761":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:3354:2850":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"16:7350:4333":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"16:2740:4298":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:8418:4381":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:7823:3117":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:6705:2466":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:987:2498":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:11137:45273":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:10557:2434":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"17:10207:44939":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:48607:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:3892:2696":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"18:609:61242":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:46521:4054":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"17:9371:44652":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:19961:2629":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:29517:2469":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:9193:61210":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:49940:3490":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:8590:2597":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:53196:3216":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"14:160:42905":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"6:4716:40412":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"16:4376:43525":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:4320:2764":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"16:2424:4288":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:4762:2772":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:46950:3479":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:10528:4465":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"16:2885:4307":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:10583:4400":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"16:2762:4299":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"16:7920:4121":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:11698:51737":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:12225:49661":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"6:1500:37994":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:8611:2456":{"crate_id":1,"path":["std","net","socket_addr","SocketAddrV6"],"kind":"struct"},"6:1643:38009":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:49804:2819":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:10076:2823":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"2:1552:2696":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"17:13518:50859":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:56972:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:6449:4651":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:9118:61207":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:8272:4474":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:50556:3133":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:9831:4501":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"18:690:4534":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"6:4206:40203":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:3168:3159":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:12358:2155":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:12768:50245":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:9071:61217":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"16:6571:4099":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:47512:31807":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:21691:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:2023:180":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:8981:44650":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:5007:2641":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:9820:4499":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:11106:4763":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"0:10:1593":{"crate_id":0,"path":["fnv","FnvHasher"],"kind":"struct"},"2:47185:2895":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:9508:2830":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:7021:133":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:4965:2637":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:50918:190":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"5:1680:2492":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"1:3310:2716":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"6:5749:60238":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"5:2981:3622":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:2239:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"5:1376:2489":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:6798:57073":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"16:2380:4287":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:1629:2553":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"5:4988:4649":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"6:1636:38008":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:4333:2467":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"5:5358:226":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"16:7637:4007":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:2780:2581":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"16:7037:3483":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:10360:4511":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"6:5861:41077":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:8441:4470":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:11800:49571":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:11639:49498":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"16:6713:4032":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"10:0:2126":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:12363:2159":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1:8062:2769":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:9465:2947":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"15:0:2130":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:6597:2870":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:49851:2807":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"16:5793:4080":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"6:1714:38016":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:48223:2488":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"5:6777:2331":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:10949:45091":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:19974:57087":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"2:46235:2862":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"5:1394:2493":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:11606:49496":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:52222:3214":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:11951:49582":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:8625:3009":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:9315:2710":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:50313:3403":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"6:1600:38006":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:10827:2523":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:10257:44927":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"6:592:37119":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"5:1404:2494":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"6:4665:40407":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:13340:50781":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:12371:2165":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:48455:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"6:6311:41455":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"5:1426:193":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:12357:2154":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"9:977:3747":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:29313:3521":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:3303:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"12:985:2501":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"12:2178:60302":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:9331:2413":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:7718:2471":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"18:96:51253":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:50413:3126":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:50735:3416":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:52858:3215":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"12:834:2498":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"5:6785:193":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"6:5510:41029":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"16:5574:4072":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:29483:3318":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"18:538:4546":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:12380:2174":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:49320:2266":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"5:1584:4639":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:21298:56678":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"6:4212:40358":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"13:108:60348":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:49906:2827":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:8079:2770":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:8948:2415":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"1:521:4666":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:52011:3190":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:2219:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"6:608:37121":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"6:1738:38018":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:9885:44865":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:10139:4422":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:52390:3195":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:12361:49739":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:8850:2409":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"16:2674:4295":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:7062:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"16:7430:193":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:3265:2724":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:4680:57845":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:6750:2733":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:2433:2398":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:967:44717":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:11828:49573":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:7861:2946":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"18:736:4538":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:11327:8719":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:53856:3193":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:2806:2558":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:957:2493":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:9791:44762":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:48774:2594":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"16:6794:4326":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"6:5684:41040":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:7882:2928":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:20006:57160":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"16:5488:4068":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:9488:4354":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:11034:45206":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"16:3623:43012":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:11027:3117":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"6:4191:40356":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:11955:2672":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:4501:3017":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:4740:2635":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"6:1574:38003":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:50492:3131":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:12265:49664":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:49864:2808":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:48341:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"12:353:3911":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:242:61219":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:46753:2846":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"12:1085:3908":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:11227:53782":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"12:1845:2492":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"2:50398:3123":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:5083:2638":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"12:60:60292":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:771:140":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"14:165:42906":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"6:4437:40382":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:20221:3244":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"6:5523:41030":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:4399:3067":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:8871:44648":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:11576:49396":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"16:4879:43668":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:13071:50732":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"6:4102:40349":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"6:513:37109":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"16:6294:4038":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:1861:8717":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:3190:2727":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"6:4592:40397":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:11594:49440":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:8673:2454":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:8415:2708":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:50591:3136":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:1102:2502":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:5832:2890":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:12367:2161":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"5:2976:2551":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:8588:2596":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:12033:49587":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:7412:2867":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:11843:3426":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"16:7404:4035":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"6:4115:40350":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"6:5504:41028":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"5:6867:2276":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:8428:2711":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:12926:50360":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:8941:44649":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:5887:2789":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:48569:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"12:2184:56982":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:8749:2640":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"6:1608:38007":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:7525:54411":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:11659:2536":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:9475:4351":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:50250:2711":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"18:699:4535":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"16:6682:4030":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"6:4300:40369":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:5819:2528":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"16:153:3998":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:21252:56786":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"6:4139:40352":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:11343:45490":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:13176:50767":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:2919:2291":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:11761:49568":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:12199:4692":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:51767:3212":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:11515:49388":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"17:10894:4378":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:51992:56798":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:10394:4455":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"6:4635:40403":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:9563:2831":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:21955:164":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:2864:2452":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:47104:2882":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:49982:2708":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:11187:2965":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"2:20691:12961":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"12:1832:2413":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:46863:3576":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"17:9627:4418":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:11684:49505":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"6:6277:37935":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:9165:61206":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:2723:2687":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"1:9417:2794":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:2607:2713":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:7941:2506":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"2:47295:2903":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:7910:7708":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:20686:3177":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"2:46900:3579":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"5:5531:3606":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:8208:2449":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:11161:45309":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:9250:44701":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:2898:205":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"17:10108:4376":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"6:4294:40368":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:12328:7715":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:49551:3596":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"5:4059:2696":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"12:1003:2502":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:9712:4744":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:11042:3121":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"6:0:788":{"crate_id":6,"path":["libc"],"kind":"module"},"5:6081:2331":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:1605:2331":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:8212:4467":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"6:7266:40552":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"16:6037:4290":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:3152:2876":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:6550:3290":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:9638:2781":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:21988:3446":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"5:6926:3479":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:4096:40348":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:3987:2680":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"16:7374:4117":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"5:6972:59380":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"1:993:2499":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:48172:205":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"1:9888:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"2:20158:3292":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"5:3472:3692":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:48231:2331":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"9:709:2409":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:13134:50741":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:20277:2857":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:46396:197":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:11820:2459":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:9339:4493":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:4:977":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:8691:3020":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:8932:2412":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"17:1962:4439":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"16:3179:42983":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"12:632:2413":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:51743:3220":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"16:4404:43529":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"16:5154:4276":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:48493:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"16:7095:4285":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"6:1707:3021":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:39273:2397":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"6:7166:41998":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:8582:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:8942:2413":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:53978:3196":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:49040:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"17:11708:49564":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"14:0:2129":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:7734:51782":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"16:7948:4023":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"16:5210:4734":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:50295:3402":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:1601:2413":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:2583:4668":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:8540:3063":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"6:554:37113":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"5:5808:13155":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"5:6989:3687":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"6:4267:40364":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:12368:2162":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:11604:135":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"6:4257:40363":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"9:896:3746":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:9897:4684":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"6:4274:40365":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"7:0:1484":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:8368:4397":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:50974:156":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:3475:2540":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"1:7210:3003":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"2:51952:3201":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:58294:56790":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"2:49025:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"2:49996:2710":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"6:5534:41031":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:49825:2809":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"12:822:2497":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"16:6178:4089":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:21095:3443":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:47503:2472":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"6:7208:40544":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:8727:11062":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"5:3529:2492":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"6:5472:41025":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"16:5959:4270":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"6:495:37106":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"16:2718:4297":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:21922:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"16:7447:4019":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"16:6506:4098":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"12:1840:2491":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:5390:186":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"17:9433:44714":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:9459:106":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:3141:227":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"16:5927:4083":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:13221:50777":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:7085:2293":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:6035:3037":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:47269:2902":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"6:6554:41468":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:13231:50778":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:11186:45311":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:625:2843":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:11564:51607":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:8408:2707":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:49304:2267":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"5:5894:4651":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"7:32:42121":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"5:2039:3708":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:11423:4686":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:8849:2263":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:1884:5269":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"5:2947:3621":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"18:590:56924":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:9295:2525":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"6:6545:41467":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"12:1852:2551":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"5:1185:2501":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:49954:2855":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"16:4510:43587":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:2380:2970":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"6:4506:40387":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:6269:37027":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:11873:49576":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:50624:3495":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"6:5582:41033":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:54115:18508":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:4152:40353":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"16:5642:4074":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"6:6953:37064":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:12355:2152":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:46440:198":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:7723:44644":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:2776:2579":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:50064:3390":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:12485:50135":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:11904:3015":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:3600:2331":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"18:727:4537":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:11070:4754":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:10774:4396":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:8520:4811":{"crate_id":1,"path":["std","net","ip_addr","fmt","Span"],"kind":"struct"},"1:941:2491":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:11536:44868":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:9751:4442":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"5:4092:4641":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"18:515:4544":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:8316:2737":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"0:0:2024":{"crate_id":0,"path":["fnv"],"kind":"module"},"1:9283:181":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:683:7713":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:47310:2893":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"6:5625:41037":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"6:487:37105":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:9031:61211":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"12:725:2489":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:11440:4688":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:53402:3236":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"16:7071:4106":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:8774:4395":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"6:4768:40417":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"16:6012:4086":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:12356:2153":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:9263:44702":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:50218:3397":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"16:7907:4120":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:47259:2901":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"9:956:3742":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:6540:201":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"16:6843:4329":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:3952:3246":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"12:0:2128":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"2:50444:3130":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"5:6732:2331":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"6:5595:41035":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"5:2942:2552":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:50743:3411":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:9397:2822":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:47521:2734":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:8576:2454":{"crate_id":1,"path":["std","net","socket_addr","SocketAddr"],"kind":"enum"},"1:11157:54449":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:2758:2571":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:12695:50195":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:10121:4377":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"6:4690:967":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:2471:146":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:21364:3460":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:8052:2771":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"16:5606:4073":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:10476:44954":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"6:62:36726":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"1:8457:2439":{"crate_id":1,"path":["std","net","ip_addr","Ipv4Addr"],"kind":"struct"},"6:4417:40380":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:4517:3572":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:10643:2534":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:51821:3233":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"16:2500:4304":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:4304:3336":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:8730:56972":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"17:13393:50820":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:51003:2675":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"17:12909:50359":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:50100:2833":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:6810:2473":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:8959:2416":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"5:1049:3706":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"16:2570:4345":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:8796:4401":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:52152:3226":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:3156:2995":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"12:1518:3920":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:46376:194":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:8699:3009":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:11217:2531":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"2:6988:2891":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:49966:3384":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"17:13047:50730":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:3158:3102":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:8295:44646":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"6:4200:40357":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:4361:40376":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:12198:49659":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:50787:2783":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:10642:4475":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:6009:3036":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:8800:139":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1:4013:3008":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:12046:49588":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:8563:3064":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"2:2971:2512":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"18:599:61229":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:48379:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:50719:3414":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"6:6975:41837":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:3457:2442":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:2772:2577":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"12:1065:3907":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:20008:57158":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"5:6763:58361":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:46919:3112":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:11162:2769":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"17:9631:4408":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:2247:2964":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"1:4968:2635":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:3081:2736":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"16:7475:4015":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:8349:2733":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:20843:2858":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:2657:219":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:6636:51768":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"16:7992:4054":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:999:2500":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"16:6087:4034":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:448:2921":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"5:5199:3665":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"16:5856:4082":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"16:6474:4097":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:13168:50766":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:2900:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:10310:44951":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:53654:3224":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:8310:3370":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"6:567:37115":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"6:5587:41034":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:11748:49567":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:8911:61218":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"6:4185:40355":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:52366:3194":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:10384:3022":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"17:11315:45488":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:7931:2505":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"2:8305:3369":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"6:4224:40359":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:1886:8724":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"16:7489:3990":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:3940:3245":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:21823:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"17:10283:44925":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:50427:3129":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:9501:4420":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"6:131:36792":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"1:10729:54352":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"1:4653:3026":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"5:6820:2331":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:2660:222":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"1:12377:2171":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:8881:61216":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"16:6262:4021":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:20283:2859":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:10608:4382":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:6405:4677":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"5:1435:3704":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:10075:44836":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:47496:31805":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:2796:2556":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"16:2291:4316":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"16:3590:43003":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:6677:3047":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"16:7256:4111":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"6:6500:41463":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:13126:50740":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:4182:3329":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:48781:2596":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:9350:4494":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"16:7545:4039":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:48215:2413":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:3964:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"16:5974:4084":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:8584:2594":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"11:36:60291":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"17:9764:44761":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:54051:18504":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:11841:49574":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:675:7710":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:46768:3107":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"18:0:2133":{"crate_id":18,"path":["memchr"],"kind":"module"},"9:188:3810":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"1:8213:2450":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"6:4797:40419":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:4043:3327":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"6:4427:40381":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"0:20:1605":{"crate_id":0,"path":["fnv","FnvBuildHasher"],"kind":"typedef"},"1:7856:2926":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:9119:216":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"16:2833:4272":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"6:7237:40548":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"11:0:2127":{"crate_id":11,"path":["adler"],"kind":"module"},"17:9700:4440":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"6:1701:38015":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"16:5592:4264":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"16:524:4266":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"6:4449:40383":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"14:221:42913":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:13366:50817":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:12955:50374":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:47142:56946":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:6984:2892":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:10811:3395":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:8537:131":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:1751:56710":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"16:6248:4011":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"16:6115:4006":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:13203:50770":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:12378:2172":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:47540:31808":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"16:6855:4104":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:47086:2880":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:8377:2705":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"16:6188:4090":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"5:7000:3688":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:9446:44720":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:50961:3425":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:7034:2294":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:9857:4385":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:8162:4383":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"6:4706:40411":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:2305:177":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"6:5692:41041":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:11900:138":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"6:1505:37995":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:50799:3507":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"18:113:51254":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"17:10434:44952":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:2768:2562":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:9722:4745":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:51851:3221":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"16:6697:4322":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:5367:2887":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:11485:49386":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:11635:4689":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"1:9534:51606":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:3188:2726":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"6:4379:40378":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:9658:44759":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"5:3002:2554":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:4834:2752":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:12339:53789":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:48088:2413":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:47013:4658":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"16:4712:43621":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"14:187:42914":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"16:2478:4292":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:3366:2849":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"1:11960:4817":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"12:1029:2503":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:9601:4412":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:1825:8707":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:50731:3415":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:0:1337":{"crate_id":1,"path":["std"],"kind":"module"},"17:12874:50294":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:5642:2518":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"6:5672:41039":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:11728:51693":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:8577:111":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:8854:1588":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:9435:2836":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:12278:49665":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:58273:56791":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"1:716:7714":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"6:4496:40386":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:51974:3205":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:11356:45503":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:9358:2835":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:2665:2468":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"1:6872:51768":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"17:12550:50137":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"16:4253:43498":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:9909:4746":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:8723:2636":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:2406:2980":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"17:10875:4379":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:2658:108":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"18:681:4533":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"6:1518:37997":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:22387:3297":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"16:8034:3991":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:10682:4473":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:12087:49591":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:8800:2399":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"5:1971:3709":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"16:3707:43048":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"16:7215:4108":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"5:2725:59304":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"16:7461:4020":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:2817:2657":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:5873:201":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:11330:45489":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:38100:178":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"17:11235:45364":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:5704:2522":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:8491:2441":{"crate_id":1,"path":["std","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:12617:50139":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"16:7297:4115":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"16:5758:4078":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"5:3898:2413":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"16:7413:4051":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"16:5226:60588":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:10497:44956":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"16:3017:42982":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:12381:2175":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"16:7022:4282":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:13148:50743":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:49972:3385":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"6:5443:40969":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:12374:2168":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:10560:3592":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"16:2648:4305":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:11259:45474":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:1825:2548":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:46418:196":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:8339:44647":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:7101:54033":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:3482:2538":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"9:382:3739":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:11271:45477":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"5:2734:59300":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:1608:2491":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:1021:4496":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"9:827:3741":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:4259:2608":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"6:6509:41464":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:11331:2433":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:1935:2958":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"16:6230:4092":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"6:7255:40551":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:10735:3388":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:10466:44953":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"6:4559:40393":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"6:4461:40384":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:2953:3294":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"5:6942:3600":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:11368:45504":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:9477:51466":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"9:505:3734":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:2656:220":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"18:644:61225":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"6:4644:40404":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:10506:44928":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:12361:2157":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"17:13214:50776":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:47227:2899":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:53940:3231":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:53544:3204":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:13374:50818":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:12164:49596":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:46840:3575":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"2:46938:3478":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"12:1836:2331":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:25197:3243":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:10576:3594":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"17:9526:4411":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"9:649:3787":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"18:507:61225":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:20949:2587":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"18:574:61225":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:4242:2757":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"8:0:2124":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"3:223:205":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:47280:2707":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:2432:2587":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"6:6293:36986":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:48303:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:50519:3132":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:21757:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"17:9293:4495":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:9290:2488":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"6:6302:41454":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"6:6430:41460":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:4280:40366":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"12:751:2491":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"5:1359:2331":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"5:2244:3712":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:10712:2522":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:50304:2846":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:9644:4407":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:2474:132":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"16:6495:3926":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:2888:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:11893:49577":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"16:7321:4018":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"16:4565:43594":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"5:4936:2799":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:9155:44653":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:10670:4472":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:39313:2848":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"16:2402:4310":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"14:40:45093":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:2831:2664":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:20324:3175":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"12:98:3910":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:13527:50860":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"5:842:3697":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:12638:50193":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:6228:201":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:3131:3473":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:3400:2539":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:2253:2704":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:1760:3530":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"12:1138:2504":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:7968:3715":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"1:9500:51748":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"16:6101:4008":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:54100:18507":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:5502:185":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:2801:2557":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:3183:3240":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:12896:50358":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"5:3548:4639":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"16:6276:4037":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:1088:2501":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:970:2496":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:8814:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"1:12376:2170":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:2142:572":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"16:5450:4066":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:8125:2721":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:13594:50903":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"16:2311:3993":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"5:3721:2491":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"5:2906:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"6:4778:40418":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:5690:2521":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:9600:2779":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:47194:2896":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:49555:2810":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"18:636:61226":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"18:652:61225":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:8109:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:9591:2832":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"6:575:37116":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"6:4317:40371":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"12:1534:3921":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:20408:12943":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"2:50260:3398":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:11125:45272":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"16:5995:4085":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"16:6124:4058":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:9401:2793":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"16:6646:4324":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:5165:2776":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:8474:2440":{"crate_id":1,"path":["std","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:8561:4437":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:6132:4670":{"crate_id":1,"path":["std","sync","mpmc","array","Channel"],"kind":"struct"},"6:6424:41459":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:5880:2788":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"5:6738:3698":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"16:4348:43521":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:49341:2409":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:12748:50201":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:1903:44748":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:8147:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:11583:2779":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"15:214:3934":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:47114:2883":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:50766:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:39322:2686":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:11721:49565":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:12008:49585":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:12004:3938":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:7008:2856":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:12373:2167":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"5:3460:2723":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:2654:2683":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:2823:2660":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:52519:56822":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:46462:2270":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"18:624:61241":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:20403:2587":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"2:50376:3119":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:2975:2588":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:5005:2639":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:5174:2865":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:21856:165":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"9:19:3834":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"1:6673:2472":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:12022:49586":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:9555:4814":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"5:2724:2388":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"6:4540:40391":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:52298:3206":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"5:1348:2488":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"16:7266:4112":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"16:5113:43854":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"6:4286:40367":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:11762:4691":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"16:6149:4059":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:9266:2413":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:11248:111":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:5759:2524":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:1919:2681":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"16:6030:4087":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:4450:3073":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:4258:2759":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:7025:148":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:20434:3188":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:21376:3459":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:50727:3417":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:10321:4510":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"6:6415:41458":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"16:3001:4302":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"}},"external_crates":{"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":23}