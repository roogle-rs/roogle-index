{"root":"0:0:2428","crate_version":"1.0.7","includes_private":false,"index":{"2:2898:136":{"id":"2:2898:136","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:31938:3782","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:13195:23847":{"id":"2:13195:23847","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41580:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:9132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13154:27475":{"id":"2:13154:27475","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43716:3598","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13250:25033":{"id":"2:13250:25033","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:974:38001"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13255:30738":{"id":"2:13255:30738","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4896:30738"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43779:9148","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2884-0:10:1999":{"id":"b:2:2884-0:10:1999","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2886:817"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32014:236-0:10:1999":{"id":"a:2:32014:236-0:10:1999","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32014:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2890-0:10:1999":{"id":"b:2:2890-0:10:1999","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2860:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2893:136","2:2894:1786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13127:30716":{"id":"2:13127:30716","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:13125:30715"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13170:2745":{"id":"2:13170:2745","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41582:190","prim@char":"1:12296:458","self::pattern":"2:12812:9136"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41580:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:9132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12818:9132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12833:9133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13201:2658":{"id":"2:13201:2658","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12812:9136","`DoubleEndedIterator`":"2:8201:129","prim@char":"1:12296:458","str::rmatches":"2:13204:30723"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43666:9153","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:9132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13147:23836":{"id":"2:13147:23836","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-L√∂f\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13146:23835"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41580:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41674:3429-0:10:1999":{"id":"a:2:41674:3429-0:10:1999","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41674:3429","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13244:22864":{"id":"2:13244:22864","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5619:31437":{"id":"5:5619:31437","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13189:23843":{"id":"2:13189:23843","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12296:458","self::pattern":"2:12812:9136","str::rsplitn":"2:13192:23845"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43566:9125","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:9132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:20:2011":{"id":"0:20:2011","crate_id":0,"name":"FnvBuildHasher","span":{"filename":"lib.rs","begin":[128,0],"end":[128,56]},"visibility":"public","docs":"A builder for default FNV hashers.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"std::hash::BuildHasherDefault","id":"2:10508:1994","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"FnvHasher","id":"0:10:1999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"2:2893:136":{"id":"2:2893:136","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"2:13149:28549":{"id":"2:13149:28549","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12296:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43432:9143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13224:30732":{"id":"2:13224:30732","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12296:458","self::pattern":"2:12812:9136"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:9132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13123:2746":{"id":"2:13123:2746","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13124:30714":{"id":"2:13124:30714","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13152:28585":{"id":"2:13152:28585","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13153:28577"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43736:9139","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13146:23835":{"id":"2:13146:23835","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13147:23836"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41580:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13155:30720":{"id":"2:13155:30720","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43726:9150","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13227:23380":{"id":"2:13227:23380","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12296:458","self::pattern":"2:12812:9136"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41580:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:9132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13207:30724":{"id":"2:13207:30724","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12812:9136","`DoubleEndedIterator`":"2:8201:129","prim@char":"1:12296:458","str::rmatch_indices":"2:13210:30725"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43612:9151","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:9132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2895-0:10:1999":{"id":"b:2:2895-0:10:1999","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2898:136","2:2899:1784"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5622:22866":{"id":"5:5622:22866","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13247:22869"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2607-0:10:1999":{"id":"b:2:2607-0:10:1999","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32015:2703","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2601:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2609:2643"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13121":{"id":"2:13121","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13122:981","2:13123:2746","2:13124:30714","2:13125:30715","2:13127:30716","2:13130:23788","2:13131:30717","2:13132:334","2:13133:23808","2:13134:22005","2:13136:22010","2:13138:23806","2:13140:23807","2:13142:30718","2:13143:30719","2:13144:23831","2:13145:23832","2:13146:23835","2:13147:23836","2:13149:28549","2:13150:28621","2:13151:2007","2:13152:28585","2:13153:28577","2:13154:27475","2:13155:30720","2:13156:28550","2:13157:22376","2:13160:23445","2:13163:23447","2:13166:2786","2:13170:2745","2:13174:23837","2:13177:23839","2:13180:23841","2:13183:30721","2:13186:30722","2:13189:23843","2:13192:23845","2:13195:23847","2:13198:23848","2:13201:2658","2:13204:30723","2:13207:30724","2:13210:30725","2:13213:30726","2:13215:30727","2:13217:30728","2:13219:30729","2:13220:30730","2:13221:30731","2:13224:30732","2:13227:23380","2:13230:23849","2:13233:30733","2:13236:30734","2:13239:30735","2:13242:30736","2:13244:22864","2:13245:25029","2:13246:22868","2:13247:22869","2:13248:22870","2:13249:25032","2:13250:25033","2:13251:25034","2:13252:30737","2:13254:3416","2:13255:30738"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13177:23839":{"id":"2:13177:23839","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12296:458","self::pattern":"2:12812:9136"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12628:9127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:9132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13143:30719":{"id":"2:13143:30719","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12302:1700","crate::ops::IndexMut":"2:3379:3478","str::slice_unchecked":"2:13142:30718"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:3721:1799":{"id":"2:3721:1799","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39315:9205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2883:2739":{"id":"2:2883:2739","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2857:143"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13140:23807":{"id":"2:13140:23807","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10903:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10903:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:16:2003":{"id":"0:16:2003","crate_id":0,"name":"with_key","span":{"filename":"lib.rs","begin":[103,4],"end":[105,5]},"visibility":"public","docs":"Create an FNV hasher starting with a state corresponding\nto the hash `key`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["key",{"primitive":"u64"}]],"output":{"resolved_path":{"name":"FnvHasher","id":"0:10:1999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13245:25029":{"id":"2:13245:25029","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39501:2684","Self::is_ascii":"2:13244:22864"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41580:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39501:2684","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3103:246-0:10:1999":{"id":"a:2:3103:246-0:10:1999","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3103:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13217:30728":{"id":"2:13217:30728","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13133:23808":{"id":"2:13133:23808","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12313:1829"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13160:23445":{"id":"2:13160:23445","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12296:458","self::pattern":"2:12812:9136"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:9132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13230:23849":{"id":"2:13230:23849","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12296:458","self::pattern":"2:12812:9136"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41580:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:9132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12818:9132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12833:9133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13254:3416":{"id":"2:13254:3416","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4899:3416"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43770:3417","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3719-0:10:1999":{"id":"b:2:3719-0:10:1999","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32015:2703","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3717:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3721:1799"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5608:31435":{"id":"5:5608:31435","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:9132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13252:30737":{"id":"2:13252:30737","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4898:30737"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43761:9147","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:17":{"id":"0:17","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[108,0],"end":[125,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["write_isize","write_i32","write_usize","write_u32","write_str","write_length_prefix","write_i64","write_i8","write_u64","write_u8","write_i128","write_i16","write_u128","write_u16"],"trait":{"name":"Hasher","id":"2:10468:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:18:2005","0:19:2006"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13136:22010":{"id":"2:13136:22010","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41582:190"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41580:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10903:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10903:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13125:30715":{"id":"2:13125:30715","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13153:28577":{"id":"2:13153:28577","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13152:28585"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43745:9138","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13138:23806":{"id":"2:13138:23806","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10903:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10903:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13239:30735":{"id":"2:13239:30735","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12296:458","self::pattern":"2:12812:9136"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:9132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12818:9132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12833:9133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13247:22869":{"id":"2:13247:22869","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2886:817":{"id":"2:2886:817","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:21:2013":{"id":"0:21:2013","crate_id":0,"name":"FnvHashMap","span":{"filename":"lib.rs","begin":[132,0],"end":[132,58]},"visibility":"public","docs":"A `HashMap` using a default FNV hasher.","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"std::collections::HashMap","id":"1:733:153","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"resolved_path":{"name":"FnvBuildHasher","id":"0:20:2011","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"2:13166:2786":{"id":"2:13166:2786","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41582:190","prim@char":"1:12296:458","self::pattern":"2:12812:9136"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41580:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:9132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5623:22867":{"id":"5:5623:22867","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13248:22870"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13180:23841":{"id":"2:13180:23841","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12812:9136","`DoubleEndedIterator`":"2:8201:129","prim@char":"1:12296:458","str::split":"2:13174:23837"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43480:9121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:9132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12818:9132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12833:9133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2610-0:10:1999":{"id":"b:2:2610-0:10:1999","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32015:2703","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2604:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2612:22541"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:19:2006":{"id":"0:19:2006","crate_id":0,"name":"write","span":{"filename":"lib.rs","begin":[115,4],"end":[124,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["bytes",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13157:22376":{"id":"2:13157:22376","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12296:458","self::pattern":"2:12812:9136"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:9132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:15":{"id":"0:15","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[99,0],"end":[106,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:16:2003"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13210:30725":{"id":"2:13210:30725","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12812:9136","`DoubleEndedIterator`":"2:8201:129","prim@char":"1:12296:458","str::match_indices":"2:13207:30724"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43630:9152","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:9132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12818:9132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12833:9133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13246:22868":{"id":"2:13246:22868","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13151:2007":{"id":"2:13151:2007","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43448:2897","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13251:25034":{"id":"2:13251:25034","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:974:38001"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13233:30733":{"id":"2:13233:30733","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12296:458","self::pattern":"2:12812:9136"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:9132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12818:9132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12833:9133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13130:23788":{"id":"2:13130:23788","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12360:9140"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5603":{"id":"5:5603","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5604:31434","5:5605:9465","5:5608:31435","5:5611:31436","5:5619:31437","5:5620:31438","5:5621:3623","5:5622:22866","5:5623:22867"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13145:23832":{"id":"2:13145:23832","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:13144:23831","str::split_at_mut_checked":"2:13147:23836"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13132:334":{"id":"2:13132:334","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13133:23808","`u8`":"1:12313:1829"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13213:30726":{"id":"2:13213:30726","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41675:3750-0:10:1999":{"id":"a:2:41675:3750-0:10:1999","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41675:3750","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:24:2017":{"id":"0:24:2017","crate_id":0,"name":"FnvHashSet","span":{"filename":"lib.rs","begin":[136,0],"end":[136,52]},"visibility":"public","docs":"A `HashSet` using a default FNV hasher.","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"std::collections::HashSet","id":"1:1456:155","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"FnvBuildHasher","id":"0:20:2011","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"2:13142:30718":{"id":"2:13142:30718","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12302:1700","str::slice_mut_unchecked":"2:13143:30719","crate::ops::Index":"2:39146:3477"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32073:2704-0:10:1999":{"id":"a:2:32073:2704-0:10:1999","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32073:2704","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:10:1999":{"id":"0:10:1999","crate_id":0,"name":"FnvHasher","span":{"filename":"lib.rs","begin":[89,0],"end":[89,26]},"visibility":"public","docs":"An implementation of the Fowler‚ÄìNoll‚ÄìVo hash function.\n\nSee the [crate documentation](index.html) for more details.","links":{},"attrs":["#[allow(missing_copy_implementations)]"],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:15","a:2:3103:246-0:10:1999","a:2:32014:236-0:10:1999","a:2:41675:3750-0:10:1999","a:2:41674:3429-0:10:1999","a:2:32073:2704-0:10:1999","a:2:3138:9455-0:10:1999","b:2:2895-0:10:1999","b:2:2884-0:10:1999","b:2:2610-0:10:1999","b:2:2607-0:10:1999","b:2:2880-0:10:1999","b:2:3719-0:10:1999","b:2:2890-0:10:1999","0:13","0:17"]}}},"0:13":{"id":"0:13","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[91,0],"end":[97,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2932:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:14:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13249:25032":{"id":"2:13249:25032","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:974:38001"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3138:9455-0:10:1999":{"id":"a:2:3138:9455-0:10:1999","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3138:9455","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13221:30731":{"id":"2:13221:30731","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12296:458","self::pattern":"2:12812:9136"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:9132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12818:9132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12838:9131","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5605:9465":{"id":"5:5605:9465","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:9132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:18:2005":{"id":"0:18:2005","crate_id":0,"name":"finish","span":{"filename":"lib.rs","begin":[110,4],"end":[112,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13219:30729":{"id":"2:13219:30729","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13215:30727":{"id":"2:13215:30727","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13163:23447":{"id":"2:13163:23447","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12296:458","self::pattern":"2:12812:9136"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:9132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12818:9132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12833:9133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2880-0:10:1999":{"id":"b:2:2880-0:10:1999","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2883:2739"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2894:1786":{"id":"2:2894:1786","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:41713:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5621:3623":{"id":"5:5621:3623","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13198:23848":{"id":"2:13198:23848","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41580:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:9132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12818:9132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12833:9133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13192:23845":{"id":"2:13192:23845","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12296:458","str::splitn":"2:13189:23843","self::pattern":"2:12812:9136"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43584:9123","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:9132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12818:9132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12833:9133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13174:23837":{"id":"2:13174:23837","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12812:9136","`DoubleEndedIterator`":"2:8201:129","prim@char":"1:12296:458","str::split_whitespace":"2:13152:28585","str::rsplit":"2:13180:23841"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43462:3600","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:9132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:14:60":{"id":"0:14:60","crate_id":0,"name":"default","span":{"filename":"lib.rs","begin":[94,4],"end":[96,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"FnvHasher","id":"0:10:1999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13236:30734":{"id":"2:13236:30734","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12296:458","self::pattern":"2:12812:9136"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:9132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13131:30717":{"id":"2:13131:30717","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:2612:22541":{"id":"2:2612:22541","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13156:28550":{"id":"2:13156:28550","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43754:9137","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13204:30723":{"id":"2:13204:30723","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12812:9136","`DoubleEndedIterator`":"2:8201:129","prim@char":"1:12296:458","str::matches":"2:13201:2658"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43684:9154","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:9132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12818:9132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12833:9133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13248:22870":{"id":"2:13248:22870","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13242:30736":{"id":"2:13242:30736","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12773:135","`FromStr`":"2:12772:3540"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41713:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12772:3540","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12772:3540","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13220:30730":{"id":"2:13220:30730","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5620:31438":{"id":"5:5620:31438","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:295:2708","`String`":"5:7632:242"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:295:2708","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2899:1784":{"id":"2:2899:1784","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:41713:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13122:981":{"id":"2:13122:981","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12296:458"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13134:22005":{"id":"2:13134:22005","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41582:190"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41580:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10903:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10903:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5604:31434":{"id":"5:5604:31434","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:295:2708","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:295:2708","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13183:30721":{"id":"2:13183:30721","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12812:9136","str::split":"2:13174:23837","prim@char":"1:12296:458","`DoubleEndedIterator`":"2:8201:129","str::rsplit_terminator":"2:13186:30722"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43512:9156","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:9132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2609:2643":{"id":"2:2609:2643","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2428":{"id":"0:0:2428","crate_id":0,"name":"fnv","span":{"filename":"lib.rs","begin":[1,0],"end":[367,1]},"visibility":"public","docs":"An implementation of the [Fowler‚ÄìNoll‚ÄìVo hash function][chongo].\n\n## About\n\nThe FNV hash function is a custom `Hasher` implementation that is more\nefficient for smaller hash keys.\n\n[The Rust FAQ states that][faq] while the default `Hasher` implementation,\nSipHash, is good in many cases, it is notably slower than other algorithms\nwith short keys, such as when you have a map of integers to other values.\nIn cases like these, [FNV is demonstrably faster][graphs].\n\nIts disadvantages are that it performs badly on larger inputs, and\nprovides no protection against collision attacks, where a malicious user\ncan craft specific keys designed to slow a hasher down. Thus, it is\nimportant to profile your program to ensure that you are using small hash\nkeys, and be certain that your program could not be exposed to malicious\ninputs (including being a networked server).\n\nThe Rust compiler itself uses FNV, as it is not worried about\ndenial-of-service attacks, and can assume that its inputs are going to be\nsmall‚Äîa perfect use case for FNV.\n\n\n## Using FNV in a `HashMap`\n\nThe `FnvHashMap` type alias is the easiest way to use the standard library‚Äôs\n`HashMap` with FNV.\n\n```rust\nuse fnv::FnvHashMap;\n\nlet mut map = FnvHashMap::default();\nmap.insert(1, \"one\");\nmap.insert(2, \"two\");\n\nmap = FnvHashMap::with_capacity_and_hasher(10, Default::default());\nmap.insert(1, \"one\");\nmap.insert(2, \"two\");\n```\n\nNote, the standard library‚Äôs `HashMap::new` and `HashMap::with_capacity`\nare only implemented for the `RandomState` hasher, so using `Default` to\nget the hasher is the next best option.\n\n## Using FNV in a `HashSet`\n\nSimilarly, `FnvHashSet` is a type alias for the standard library‚Äôs `HashSet`\nwith FNV.\n\n```rust\nuse fnv::FnvHashSet;\n\nlet mut set = FnvHashSet::default();\nset.insert(1);\nset.insert(2);\n\nset = FnvHashSet::with_capacity_and_hasher(10, Default::default());\nset.insert(1);\nset.insert(2);\n```\n\n[chongo]: http://www.isthe.com/chongo/tech/comp/fnv/index.html\n[faq]: https://www.rust-lang.org/en-US/faq.html#why-are-rusts-hashmaps-slow\n[graphs]: https://cglab.ca/~abeinges/blah/hash-rs/","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:10:1999","0:20:2011","0:21:2013","0:24:2017"],"is_stripped":false}}},"2:13150:28621":{"id":"2:13150:28621","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12296:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43438:9142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13186:30722":{"id":"2:13186:30722","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12812:9136","str::split":"2:13174:23837","prim@char":"1:12296:458","str::split_terminator":"2:13183:30721"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43530:9155","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:9132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12818:9132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12833:9133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13144:23831":{"id":"2:13144:23831","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_checked":"2:13146:23835","str::split_at_mut":"2:13145:23832"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5611:31436":{"id":"5:5611:31436","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"2:21572:3854":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:4:1239":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:44200:9627":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:6854:29719":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"17:11567:17444":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"2:45575:3874":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"6:6788:32677":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:11072:3066":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:14325:20812":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:7591:9263":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:22335:3987":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"6:8351:16000":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:11653:22548":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"6:1585:11153":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"16:6543:17197":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:44089:9158":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"6:6900:15042":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"0:20:2011":{"crate_id":0,"path":["fnv","FnvBuildHasher"],"kind":"type_alias"},"6:7467:15423":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"5:3037:32205":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:44071:9157":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:30421:3127":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:22480:3977":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"5:7714:3434":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"6:4811:14206":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:8824:3063":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"16:7098:33196":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:5902:3794":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"5:6600:30596":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:46135:3882":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"6:5445:14272":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"16:6263:33493":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"16:6560:3004":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:45590:3880":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:16187:21775":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"1:2206:128":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"2:4394:9220":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"1:9125:3063":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:5652:3776":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"5:4309:3063":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:35867:9487":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"14:202:9177":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:10244:119":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"17:2175:17430":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"16:6427:3000":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"17:15356:21573":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:40129:9554":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:4461:3094":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"16:2768:16266":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"14:160:16174":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:8616:3736":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"6:6629:14994":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"5:5457:9094":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:2996:23201":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:42819:156":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"6:1686:11162":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:45406:3896":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:13272:20275":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:44023:9173":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"5:1536:3435":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:8458:3572":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"1:938:3437":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"6:1485:11141":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:6791:3286":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"6:6609:14992":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"6:5002:14226":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:40444:9438":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"6:4897:14213":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:15266:21564":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:12584:17327":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"1:5547:3773":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"5:1568:209":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:5392:202":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"17:15748:21601":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"6:7359:15419":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:6650:14996":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:3576:29114":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"6:6670:14999":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:46525:3917":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:15624:21593":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"11:2542:29623":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:21464:28474":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"16:2548:16256":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:10299:25945":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"16:3810:16298":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:10044:17321":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:3347:140":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:15368:21574":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:8222:3296":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:8309:177":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"16:3669:16281":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:8197:2687":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"2:43277:9115":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:40319:28560":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:12628:9127":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:10664:3618":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"6:7389:11286":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:12297:1851":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:39955:9255":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:11802:3646":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"6:6409:14978":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:13116:17600":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"5:7632:242":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:43408:9149":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:8514:3643":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:12514:9632":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:261:33500":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:6737:3803":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:11156:3274":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"16:4718:16884":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:45846:28934":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"6:6880:14119":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"18:754:21811":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:3625:3593":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:9240:3279":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:43584:9123":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:4251:3583":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:46040:3864":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"11:396:33099":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:44184:9625":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:10949:23396":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"6:5630:14291":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"6:1699:11163":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:11755:17451":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"6:6657:14997":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:39929:9256":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:9720:91":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:12310:882":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"5:7609:3524":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:44188:9624":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:21513:3855":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"3:0:492":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"17:12056:17463":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:42075:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:15102:21551":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:45662:3903":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:7941:3414":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:14489:20823":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"5:1557:3072":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:4764:25613":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"6:4837:14208":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:12647:17559":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"1:928:3072":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:2932:123":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:42542:3092":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:12316:1823":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"16:5107:16974":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:14246:20806":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"16:2478:16253":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:3615:3571":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"3:234:225":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"16:6532:17196":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:12268:3428":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:12201:17543":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"6:5352:14262":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"1:11316:3542":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"16:6813:17205":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:7964:3403":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:11269:17381":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"17:1207:17366":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:7485:2758":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"5:5409:30596":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:12516:17570":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"2:41696:9569":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:11647:17445":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:15249:21563":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"11:2369:16168":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"5:7119:30626":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"9:447:16045":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"6:1526:11147":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:14994:21534":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"16:7014:17211":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:11877:16206":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"5:2103:3463":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"5:3661:3066":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:14356:20814":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:12082:23208":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"6:5020:14228":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"18:481:21813":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"6:5344:14261":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"2:10249:128":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:8126:9434":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"5:2289:31826":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"16:2902:16272":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"9:392:16046":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:15:2006":{"crate_id":2,"path":["core","write"],"kind":"macro"},"17:14386:20816":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:45633:3850":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:5203:25953":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:6895:17208":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"16:6433:3002":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"16:6385:17189":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:10439:2870":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:11180:23362":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"16:2438:16251":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:33217:9480":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:39278:2694":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:22882:3573":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"11:1891:3433":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"16:5769:17174":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"16:5075:16965":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"6:479:10245":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:4250:27341":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:2848:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:45797:3930":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:5243:961":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:9902:29793":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:12312:869":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:14876:21541":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"18:613:34327":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:2864:256":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"6:6524:14987":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:5390:14267":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"5:7422:31831":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:8621:3458":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"18:635:34332":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:42794:2690":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:7706:9424":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"6:6441:14981":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"6:5617:14289":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:5909:3795":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:13235:20273":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:12295:1157":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:40808:3625":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"16:5831:2972":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:2601:102":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"1:9133:3817":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:12213:17544":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:4051:3669":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"5:3250:32149":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:14131:20800":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"6:5565:14285":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"16:4771:16891":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"6:4959:14220":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:15190:21558":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:3254:23111":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:40184:3539":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:12308:894":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"16:150:2944":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"6:8253:14456":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:13477:204":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"0:0:2428":{"crate_id":0,"path":["fnv"],"kind":"module"},"17:11841:17500":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:44212:3118":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"6:1535:11148":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"5:2757:30690":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:12307:740":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:46592:9026":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:3591:9057":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"11:742:3072":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:8612:3734":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:3103:246":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:4614:9224":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"6:4992:14225":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"5:7412:3465":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"1:1978:3514":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:21968:3857":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"17:15456:21584":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:41880:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:22297:3984":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"1:2289:3544":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"11:787:3070":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"6:5489:14278":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"5:1191:32153":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:14560:20828":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"6:6678:15000":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:44208:9622":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:43716:3598":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"16:8216:17243":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:10670:3616":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"16:7379:33515":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"6:5588:14287":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:3294:3618":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:13723:20776":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:11354:17394":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:10137:17290":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"5:723:249":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:5720:3777":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"16:6758:16193":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:2030:9517":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:12302:1700":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:10715:28961":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:2673:3609":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:41486:29153":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"11:299:33086":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"6:5244:14248":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"6:5423:14270":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"6:5191:14242":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:41374:3637":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:11016:17346":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:16198:21776":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"1:11858:3304":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:8508:3598":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"16:2355:2936":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:40569:3599":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"5:280:30596":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:7306:10296":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:7273:23213":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"1:5583:3775":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"16:2660:16261":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:15301:21568":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:9715:84":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"5:5717:9200":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:8186:127":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"16:6335:2964":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"16:6026:2947":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:13509:20287":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:43438:9142":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:10617:9597":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"5:7436:2750":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:3540:3570":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:14968:21544":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"5:218:9065":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:13844:20782":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"5:1726:30596":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"14:7:16174":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:13485:20285":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:9513:3499":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"2:43334:9099":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:4109:3672":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:46173:3865":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"11:2569:2700":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"14:165:16175":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"16:867:33536":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"17:10905:17329":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:43666:9153":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:8627:9433":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:15426:21581":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"5:830:3449":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"16:7428:17217":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:10593:23211":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"2:21493:28487":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"17:15616:21592":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"18:623:34321":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"6:5407:1226":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:4328:28958":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:13568:20291":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:41624:2750":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"6:4824:14207":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"16:5006:16942":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"16:2572:16257":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:8671:3744":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:12362:17548":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"16:2303:16219":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"16:6480:3003":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:39150:9493":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"6:4924:14216":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:2287:137":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"5:295:2708":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:486:23203":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:14271:20808":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:5788:3808":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:10173:22576":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"1:513:3390":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"18:670:21808":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"16:7633:33303":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:15390:21577":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"5:7402:3453":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:8478:3100":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"1:903:3433":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"6:8247:14455":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:5981:3277":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:33335:9481":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:43726:9150":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:11764:17452":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"17:11063:17365":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"16:2374:16248":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:12043:17462":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:9227:3796":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"6:1692:3696":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:13211:20272":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"16:3475:16279":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"6:5361:14263":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:46152:3931":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:22730:29142":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"5:3271:3447":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:9245:115":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"6:6874:15041":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:11313:17383":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"1:9291:3299":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"17:11392:17393":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:12494:17519":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:14449:20820":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:11217:9128":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"4:0:2543":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:42155:97":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:4742:9234":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"18:563:2859":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:4874:3688":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:13497:20286":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:2699:201":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:9886:17317":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:11915:17503":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:12306:724":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:33645:9483":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"16:4856:16907":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:11405:17392":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"6:5671:14296":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"16:6802:16192":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:13375:20277":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:44373:149":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:12301:1666":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:40385:9445":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:40118:3520":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:16032:20274":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"2:30859:3128":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"17:15383:21576":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:5954:3583":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"6:7485:15424":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:43630:9152":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:12371:17334":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"6:5581:14286":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:13606:20294":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"6:6738:15007":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"17:15116:21552":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"6:7330:10125":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:5219:14245":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:9858:17316":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:11026:17347":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"2:25892:266":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:11256:17380":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"2:3108:3093":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"9:0:2545":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"6:5283:14253":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:45537:3862":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:11345:9123":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:12127:17467":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"6:5502:14279":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"16:0:2551":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:44176:9620":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"17:10982:17344":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"2:3628:9061":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:43745:9138":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"15:288:16198":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:3324:3460":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"5:943:3063":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"6:6729:15006":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"2:45765:3875":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:11169:3781":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:3350:141":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:1050:3441":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:1897:3500":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:4149:3674":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:39997:3417":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:40786:9426":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:43268:9111":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:10185:2890":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:955:3439":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:12574:9631":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:30204:3648":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:1588:2750":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:2709:3601":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"5:1342:3442":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:16259:20278":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"11:2326:3442":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"11:2423:2750":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"6:8341:15999":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:42532:28921":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:15957:21764":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"6:5336:14260":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"6:5200:14243":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:919:3435":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:12572:2874":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"16:2878:16271":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:12278:17545":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:2693:194":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"17:12597:17566":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"1:6405:3808":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:11188:3118":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"17:9671:17292":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"5:6681:2750":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:9431:3842":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"5:3397:3434":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"17:11051:17371":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:39968:9257":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"6:8294:14462":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:11373:9124":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"11:1582:16166":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:8158:3564":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:22752:28922":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"16:7888:17234":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:43448:2897":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:6626:3799":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"15:394:16209":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"16:7052:17212":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:31998:9232":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"6:4876:14211":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:9104:3781":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:8012:3426":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"6:1639:11157":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"6:5306:14256":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:40363:9444":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:3138:9455":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:39200:211":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"11:1887:2750":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"5:4438:30604":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:15206:21560":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"6:5134:14238":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:40272:3104":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:9147:3814":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:44230:130":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"16:6160:16218":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:21584:3119":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:40166:3525":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"17:15769:21603":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:15822:21607":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"6:7602:15431":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"6:4909:14214":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"6:5557:14284":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"6:7314:11100":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"16:7132:33346":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"18:643:34310":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:11089:17357":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"14:220:16184":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"5:7655:9179":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:597:17314":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:9164:3812":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:46629:9029":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:11223:23400":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"16:3196:16277":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:12296:458":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:10468:156":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:12089:17460":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"6:8306:14464":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:5234:25953":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:4802:16899":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:3293:9058":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"1:11046:23192":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:12557:2886":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"1:8131:3565":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:41713:225":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"11:102:33089":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"6:5039:14230":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:46446:3911":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:46023:3916":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:3597:17484":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:11812:17458":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"16:8226:17244":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:1073:3443":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"16:5367:17169":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"16:7590:3013":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:1082:3444":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"16:7085:33184":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"5:3807:3463":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"6:7584:15430":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:15734:21600":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:4508:3700":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:11781:3644":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"5:1171:32173":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:41633:3748":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:3563:9217":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"11:2352:3443":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"1:9279:25944":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:31938:3782":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"16:6782:17204":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:15569:21588":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:39328:9213":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:10251:9069":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"1:4619:3711":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:729:3652":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"2:8163:164":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:3789:3641":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"6:1503:11144":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"10:0:2546":{"crate_id":10,"path":["adler"],"kind":"module"},"17:14855:21539":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:12318:17335":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:650:3422":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:9377:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"16:6872:17207":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:12263:3305":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:1834:3483":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"6:5636:14292":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"2:3536:9494":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:6654:9452":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:14868:21540":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"11:687:3066":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"5:2114:3464":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"17:13774:17504":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:14091:20798":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:13046:17300":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:3854:3644":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:10983:23355":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"7:0:1880":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:23029:28890":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"2:21447:28481":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"6:8288:14461":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"5:7480:2750":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"16:6620:17200":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:40156:2897":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"2:43379:9118":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:2828:9272":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:4605:220":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"16:7604:3014":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:6143:219":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"5:3027:32204":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:12863:17333":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:10524:17323":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:15655:21596":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:10878:3563":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"17:14284:20809":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"5:6402:3995":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"6:4787:14204":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:9674:137":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"2:42306:9076":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:8300:3612":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:15023:21548":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"16:6948:3008":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:8579:3699":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"16:7769:17230":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:0:1692":{"crate_id":1,"path":["std"],"kind":"module"},"17:15289:21567":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:13753:20778":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"17:11128:17354":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:13412:20280":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:37908:9491":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:21511:3573":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:7590:9262":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"2:32005:9545":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"16:6066:17183":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:11142:2874":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:23040:28907":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"1:10931:3568":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"17:11443:17398":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"6:5236:14247":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"16:8175:17241":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:44376:163":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:4434:3708":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:13650:3993":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"17:15281:21566":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:15176:21557":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:9807:17302":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:32015:2703":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"17:13832:20781":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:11524:17441":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:11542:25958":{"crate_id":1,"path":["std","sys","thread_local","fast_local","Key"],"kind":"struct"},"17:13999:20791":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"16:5415:33495":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:4352:109":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"16:6456:17192":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:2051:196":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"6:517:10249":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:3546:253":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"6:6471:14984":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:465:10243":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:33158:3846":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:4288:3705":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:15473:21586":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:16105:21769":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"5:4423:264":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:8192:2688":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"17:11293:17382":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"17:10997:17345":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:2943:136":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"5:7621:9089":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"2:6849:29721":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"17:15342:21572":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:39146:3477":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:42299:9069":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:3184:9056":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"1:1985:770":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"17:9916:17318":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:4766:25615":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"16:2323:16246":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"6:5296:14255":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:43297:9114":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:44037:9174":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"6:6505:14942":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:22121:3573":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:13308:2917":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"16:6574:3005":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"16:6940:2965":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:12772:3540":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:10460:152":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"16:7061:17213":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:10912:138":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"6:1565:11151":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:12464:17552":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"6:538:10252":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"6:5546:14283":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:3557:9218":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"5:1830:3434":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"6:4952:14219":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:8568:3709":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:10622:34297":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:9141:2750":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:10671:34291":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:12969:17293":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"6:8300:14463":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:43432:9143":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"6:6478:14985":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:12328:17512":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"5:826:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:22974:28860":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"17:11493:17403":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"16:6047:17182":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:44192:9628":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:8122:9435":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"16:3778:16289":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:14529:20826":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:4733:9233":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:40835:9432":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:41342:3635":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:10218:142":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"17:15596:21590":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"5:4104:30596":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:13292:2913":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:14986:21546":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:6302:3993":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:12478:17553":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:12328:9584":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"16:5897:2974":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:16050:20275":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"2:41402:3259":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"6:4800:14205":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:5280:203":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:0:550":{"crate_id":2,"path":["core"],"kind":"module"},"6:7984:10203":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:10940:23368":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"5:1546:3071":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"5:1155:32152":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:13173:17602":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"5:3245:3446":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:2860:257":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"5:1356:3444":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:4678:9231":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"6:6460:14983":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"6:5046:14231":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:1584:3063":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:40333:3107":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"6:6636:14995":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"18:718:21804":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:11715:17448":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2:43779:9148":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"16:7473:2961":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"16:7823:17232":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:15197:21559":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:5598:113":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:2439:3549":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"17:15760:21602":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:12724:17331":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:41520:3638":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:39919:9221":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:11359:9126":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"6:4891:14045":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:14189:20803":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:10170:2869":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:12319:1890":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:3551:145":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:10257:9077":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"18:0:2553":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:42571:28933":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:1836:3484":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"16:8155:17240":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:41608:3063":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"18:515:21815":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"9:424:16047":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:5115:3740":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"9:330:16100":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:5858:3583":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"17:14260:20807":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"6:5277:14252":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"6:5064:14233":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:13538:20289":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:13024:17337":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"16:2936:16273":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:44254:3847":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:949:3438":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:14341:20813":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"16:7570:17224":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:9387:3806":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"6:6597:14991":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:39102:9059":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"2:43308:9101":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:8201:129":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:598:3415":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:3387:3616":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:5533:3772":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:40593:9450":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"6:5483:14277":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"11:1566:16165":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:2487:659":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:12294:405":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:41599:172":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:10573:34292":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:11595:2899":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:7837:25950":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"6:5014:14227":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:15168:21556":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:44398:206":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"16:7355:17216":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:8047:3503":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"16:7727:3018":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"6:1621:11155":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:15582:21589":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:40113:106":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:12808:17298":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:9206:3816":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"16:7618:3015":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:40214:3567":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"5:3026:2809":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:2292:3545":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:732:189":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"16:5802:17176":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"5:7372:2750":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:3851:3645":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"16:8073:17236":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"6:6621:14993":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"6:5260:14250":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"5:5922:3433":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:11647:25588":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"5:1527:3070":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"6:4942:14218":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"16:6606:17199":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:4159:3675":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"16:6412:17190":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"11:1025:3442":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:12300:17546":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:13674:20775":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:12247:23384":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"16:6588:17198":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"6:7452:15421":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:3346:3621":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"16:3614:16280":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:3329:9060":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"6:6447:14982":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"16:5927:17179":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:10921:127":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"11:123:3031":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:42802:3261":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"6:5329:14259":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"2:43208:28547":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"6:7546:15427":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:3296:3619":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"6:5466:14274":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:12838:9131":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:22941:28909":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"1:4641:3712":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:44196:9626":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"6:5436:14271":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:22696:3122":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:22861:3665":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:11166:17360":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"16:5995:17181":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"16:3029:16276":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"6:5653:14294":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"2:43480:9121":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:16249:21780":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"17:12030:17464":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"16:7549:17222":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"6:7339:15417":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"6:4916:14215":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"6:5083:14234":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:13424:20281":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:43034:9613":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:41616:3066":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"1:9372:233":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:40012:9251":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"16:7144:17214":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:10457:137":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"18:659:21807":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:11331:9125":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"16:4468:16795":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:22963:28900":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"17:14503:20824":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:6453:219":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:8032:3502":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:43369:9120":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:3717:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"17:12342:17514":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:13581:20292":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:10350:2896":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:43360:9117":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:45376:3895":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:22744:28901":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:11063:23199":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:4870:3684":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"6:6562:14990":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:11324:17409":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:38487:9492":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:8141:3563":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"6:5160:14240":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"5:5453:9093":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:22996:28899":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"1:4115:3673":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:11853:17501":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:44431:3991":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"5:7569:3522":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"5:3741:30596":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:1606:3446":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:3098:117":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"18:573:34310":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:13814:20780":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:41560:3640":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:3597:3515":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"17:437:16221":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:12993:17336":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"6:8271:14459":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"16:8118:17238":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:40250:3100":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"5:7597:3523":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:1853:3583":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"17:12422:17550":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:41580:193":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:14414:20818":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:22930:28896":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"17:13738:20777":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:11741:3645":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:12388:17540":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"16:3899:16341":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:40263:3101":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:21462:28477":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"16:5722:17171":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"5:3238:3063":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:16093:21768":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"6:6379:14913":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:11271:25621":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"6:1680:11161":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:12279:23375":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:23007:28897":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"6:5382:14266":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:45744:3869":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"16:5742:17172":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:45913:28935":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:13252:20274":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"5:6763:30596":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:8587:3643":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:8495:2897":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:10508:1994":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:11661:17419":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:10902:3295":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"17:12189:17542":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"5:7472:2750":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:8290:25940":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:924:3071":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:40827:9430":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"16:7580:17225":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:11575:3290":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:12150:17465":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:733:153":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:30474:3092":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"16:6442:17191":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:11179:9116":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"16:2636:16260":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:696:1995":{"crate_id":1,"path":["std","collections"],"kind":"module"},"17:11743:17450":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"17:14177:20802":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:6516:185":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:45423:3901":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:43049:29075":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:40342:9443":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:4163:3676":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"6:8317:14465":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:1456:155":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"16:7397:33544":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:45523:3914":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:45558:3868":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"16:3925:16344":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:2203:17391":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:4535:3096":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"1:1600:3445":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"6:553:10254":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"16:7306:33546":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:12311:888":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:41508:3647":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"17:15434:21582":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"11:2124:3441":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:21425:3128":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"5:2236:3074":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:14111:20799":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"11:1917:3447":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:13899:20785":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:43894:9169":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:31980:28281":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"16:2854:16270":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:8254:2706":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:9258:23403":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:12949:17335":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"9:502:16048":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:33472:9482":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:12485:17554":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"6:8265:14458":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"11:2469:3434":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"2:8618:148":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:43053:9102":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:12827:9134":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:22447:3978":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"16:7497:17218":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"16:7648:17226":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:15214:21561":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"11:832:3435":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"11:490:153":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"16:7695:17229":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"14:187:16182":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:8295:3294":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:41320:169":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"2:6843:9437":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"17:11153:17327":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:846:3063":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"5:7553:3082":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:10534:34296":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:15814:21606":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"5:2526:30692":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:6226:23205":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"5:6060:9845":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:32679:9475":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"17:11042:17348":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"16:6120:17185":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:12314:1811":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"18:765:21806":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:22002:28478":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:4340:28953":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:43844:9166":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:8425:3109":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:43761:9147":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:21680:3573":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:14545:20827":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"11:2554:33091":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:12321:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:8136:3566":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:3176:9054":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"16:7111:33486":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:12508:17555":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"11:328:33084":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:14436:20819":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"16:7168:17215":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:7940:3573":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"16:3014:16275":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:6662:3285":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:8434:3298":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1:11378:3541":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"5:7538:2701":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"18:726:2864":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:13707:151":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:44380:218":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:10259:205":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:44512:29193":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:9355:186":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"5:732:118":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:42831:3762":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:30459:9403":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"6:8259:14457":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"6:1663:11159":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:10280:3493":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"1:9413:3576":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"5:4502:30604":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:41358:3636":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:11115:17355":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:12543:17560":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"5:6164:3583":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:3031:136":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"5:4239:3583":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"11:1007:3441":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:43462:3600":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"6:7561:15428":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"16:2838:16269":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:22952:28908":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"1:9312:23359":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:41674:3429":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:3344:139":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"17:13437:20282":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:9080:198":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"11:1051:3443":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:5250:14249":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:41958:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:10903:238":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"6:5225:14246":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:6734:3802":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:14475:20822":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"6:5052:14232":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:12621:17564":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"2:40051:9252":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"17:4821:17565":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"2:41761:3066":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:2748:3611":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:9191:3813":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:37743:9488":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"18:538:2857":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:4353:3707":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"5:7645:9178":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:5567:3774":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:15376:21575":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"6:8197:15963":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:11057:23200":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"16:6991:33309":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:42634:9067":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:42292:9068":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:3149:3843":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:15521:21587":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:42559:28895":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"6:473:10244":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:6350:3283":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:39940:28915":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:9737:17291":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"1:631:3419":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:22349:9506":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"17:15222:21562":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"11:673:3063":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"16:8188:17242":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:10667:3620":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"17:14575:2906":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:10712:3400":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"5:3305:3448":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:14752:21536":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"6:6768:15011":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"2:43986:9172":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:12818:9132":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:15836:21608":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:8830:3766":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"17:11227:17352":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:11702:17447":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:42596:3092":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:39178:209":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:22475:3979":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"17:15944:20272":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"6:5112:14236":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"6:545:10253":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:11574:3034":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"18:507:34310":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:22919:28743":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"2:45928:3898":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:4969:9244":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:5036:3730":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"6:5102:14235":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:12812:9136":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"17:15608:21591":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:8814:3765":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"1:1591:3433":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:12833:9133":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:11799:17499":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"6:564:10256":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:40241:3475":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"6:7537:15426":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"16:7006:17210":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:11688:17415":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"1:8736:3762":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:40817:9429":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:21566:3851":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:13502:9276":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:30453:9196":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:43684:9154":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:45875:28898":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"16:5863:17178":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:7827:17314":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:12433:2906":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"5:1518:3068":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"18:680:21809":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"5:6957:9202":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"2:33276:9479":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"5:926:3451":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:10759:2874":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"6:4979:14223":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:22215:3982":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"2:42613:136":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:40310:9441":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:13670:3990":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"17:11605:2900":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:11048:3063":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:12454:17551":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:10868:22648":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"2:43421:9146":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"6:6698:15002":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"1:10849:3735":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"2:4789:3099":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:44452:29192":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"2:39218:214":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"5:3279:3445":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"11:1142:16164":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:45973:3904":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:3824:3433":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"1:4057:3668":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:2296:3546":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"6:4885:14212":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"16:872:33500":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"17:9781:17315":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"16:7539:17221":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"6:5515:14280":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"8:0:2544":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:8446:3568":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"6:6811:15013":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:21990:3120":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:14066:20796":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:10503:2689":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:3164:9477":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:419:184":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:9251:3394":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"11:2151:3443":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:10828:34277":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:44058:9176":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"16:6648:17201":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:12251:17516":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"6:1707:11164":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:12320:1398":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:11497:17390":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:10284:2894":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"16:4587:16822":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:8148:3295":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"17:11877:2902":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:32073:2704":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:1612:3447":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:21690:3852":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:45683:3909":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:22347:29501":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"1:647:3421":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"16:2788:16267":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"6:8282:14460":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:11825:17479":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:3606:27430":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"15:327:3026":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:9686:23176":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"11:856:3438":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:22123:3853":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"6:4932:14217":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:4833:3711":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"18:589:29171":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"0:10:1999":{"crate_id":0,"path":["fnv","FnvHasher"],"kind":"struct"},"1:9395:161":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"6:559:10255":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:6031:9442":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"11:1883:3063":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"11:1923:3448":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"1:1064:3442":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"5:4269:3583":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:10458:27397":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"17:16235:21779":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"2:23492:235":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"16:5400:2869":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"14:40:20273":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"6:7446:15420":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"6:5290:14254":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:8026:3427":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:13473:20284":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"5:6007:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"6:6491:14941":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:15313:21569":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:11075:2886":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:5163:28605":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:3473:210":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:10255:9076":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:11608:23132":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:13325:2919":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"18:735:21805":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:5201:3626":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"2:40144:3521":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:9299:17215":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:1936:9412":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"16:4641:16830":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:2854:162":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"17:3264:17461":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:13363:20276":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:15410:21579":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"6:4971:14222":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:40802:9428":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:4872:3687":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:15010:21547":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:16165:21773":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"2:22830:29716":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"11:837:3436":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:32016:243":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"6:1559:11150":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"7:78:16023":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:4280:3704":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:37798:9489":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:8501:3600":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:40420:9447":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:22259:3983":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"2:44439:3992":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:10710:17326":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"16:5756:17173":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:11097:3600":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:2827:3573":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"16:2528:16255":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:859:3066":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:7984:3400":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"18:608:34328":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:7345:22855":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"5:6421:3996":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"16:8202:3024":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:22402:9506":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"6:7516:15425":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"16:7321:3748":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:3340:2705":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:14147:20801":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:12399:17549":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"16:2612:16259":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:13959:20788":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:43911:9170":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:2657:200":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:8841:3767":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:10399:2897":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:4171:3678":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:12289:17511":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"6:5031:14229":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:15799:21605":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"5:1480:3066":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"6:5376:14265":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:15092:21550":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:11000:3275":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"1:6860:232":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"16:4976:16935":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:2234:17416":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:14311:20811":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:32493:9476":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"11:1107:16163":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"16:6466:17193":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"16:8301:17246":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"11:2443:3433":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"2:2604:103":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"6:4864:14209":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:9288:3110":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:10155:2868":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:12886:9160":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"16:2808:16268":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:10018:17294":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:9399:9132":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:11622:22862":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:12887:2910":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"16:6665:17202":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:32074:3257":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"9:357:16061":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:10612:17324":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:9907:3113":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:22388:3988":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:9332:3301":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:21481:28485":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"6:586:10259":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"11:2548:33081":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"11:2562:33082":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:14788:21537":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"11:1066:16162":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:21692:3119":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:45782:3881":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"5:5064:3583":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:6417:14979":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:15463:21585":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"6:5181:14241":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"5:6924:9200":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:9091:3274":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"11:883:3440":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"16:8313:136":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"11:2383:3063":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"2:13762:3454":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:655:3423":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"16:6246:205":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:12707:17330":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:6622:3798":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:13855:20783":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:14912:21542":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:41753:3063":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:40281:9439":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:15273:21565":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"6:7429:11269":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:4830:3733":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"16:6927:17209":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:13015:2906":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:14025:20793":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:9755:17289":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:45455:3867":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"6:1628:11156":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:15701:21598":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"16:6398:2998":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"16:6231:17186":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:3029:225":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"6:6915:15043":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:932:3436":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:16069:21766":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"16:7528:17220":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:9681:3566":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"2:41802:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:2687:23196":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"6:6532:14988":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:39913:3417":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"16:6494:17194":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:13986:20790":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:890:3070":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:10720:34281":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:12443:17541":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:10968:3776":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"2:43287:9113":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:15151:21555":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:2037:17397":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"11:1676:33093":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:15635:21594":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"18:651:34310":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:13594:20293":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:12238:17517":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"6:4965:14221":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:43530:9155":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"16:7656:17227":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:14372:20815":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:11865:17502":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:9286:3282":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:8488:3599":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"16:6300:17187":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"6:6435:14980":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:46114:3876":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"14:0:2549":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:10261:9074":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:10873:25590":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"2:5142:423":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:39501:2684":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"17:16212:21777":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"2:40005:9147":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"5:1327:3443":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:22850:3650":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:44500:9044":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:46327:3871":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:14051:20795":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"6:6706:15003":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"2:40092:9254":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"11:1160:3444":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:12659:17558":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"2:22768:28739":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:7675:25481":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:3257:23107":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"6:1671:11160":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:5598:14288":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:9938:17319":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:22433:3573":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"2:3234:9485":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:2053:9516":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"16:6317:17188":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"11:0:2547":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"6:491:10247":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"18:548:152":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"11:710:3071":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:1929:658":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:45508:3908":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:3154:3845":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"16:7711:209":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"11:434:33105":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"11:2231:3034":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"17:15646:21595":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"6:1510:11145":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:8214:3610":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"5:671:32151":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"11:430:33104":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"16:4913:16918":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:46697:9033":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:12318:950":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"6:5643:14293":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:6756:15009":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"2:42841:3262":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:46759:9035":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:3145:9457":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"17:16121:21770":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"6:5122:14237":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:15931:20271":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"2:2662:133":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:41841:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:11214:17353":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"16:7741:3020":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"16:4502:16806":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"5:7392:3433":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"12:0:2548":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:2934:123":{"crate_id":2,"path":["core","default","Default"],"kind":"proc_derive"},"6:5314:14257":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"16:4614:16826":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"18:491:34307":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:44180:9623":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:14977:21545":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:15992:21765":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"1:7088:3848":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"5:5217:3084":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"5:2089:3296":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"5:4074:3433":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:7655:28575":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:11564:25601":{"crate_id":1,"path":["std","sys","thread_local","fast_local","DtorState"],"kind":"enum"},"11:2304:3441":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"2:22837:3651":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:15138:21554":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:567:3397":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"5:7730:9197":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"6:578:10258":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:14463:20821":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"6:7348:15418":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:12309:876":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:30832:195":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"5:4468:3583":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:42810:2691":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:11537:17410":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"14:214:16183":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:15445:21583":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"6:6775:15012":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"16:2684:16262":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"9:238:3762":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"11:2536:33092":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"13:110:33157":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:12900:2912":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"5:2197:3390":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:3956:3646":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"16:6079:2953":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"16:5914:2979":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:42587:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:45829:3937":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"5:1064:30596":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"5:7363:3060":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:45470:3897":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:10441:113":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"1:8573:3710":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:16138:21771":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"16:5781:17175":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:2623:112":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"17:13344:2926":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:22788:28906":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"16:2394:16249":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:10068:17301":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"6:485:10246":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:11290:9122":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:4272:3703":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:4719:3729":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:7877:23188":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:13046:119":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"18:581:3128":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:12590:9633":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:1949:3513":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"7:31:16016":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:45391:3860":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:5045:3731":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"1:9176:3815":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:12530:17561":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"6:7461:15422":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:46583:9025":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:14012:20792":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:11674:17446":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:7878:3109":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"16:6342:33518":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:2457:3555":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"11:1728:155":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:2851:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"16:2508:16254":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"16:7910:17235":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"16:4830:16904":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:4101:3671":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:9074:3780":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"11:811:3434":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:33818:9484":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:13526:20288":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:4492:3095":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:44265:9644":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:46603:9027":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:1895:3499":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:45700:3915":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"16:8093:17237":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:4762:3098":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"9:482:16044":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"16:7509:17219":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:16079:21767":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"11:1087:33080":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"18:598:34314":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:2240:9062":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"5:7094:30587":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:15400:21578":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:8159:144":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:31984:17245":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"6:5677:14297":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"6:6721:15005":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"6:6542:14989":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:10891:22646":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"16:5385:2868":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:3389:3617":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:13064:17299":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:11241:161":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"14:31:16174":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:8665:29792":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:10047:9066":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"17:15039:21549":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"6:532:10251":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:22680:3087":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:39238:213":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"11:875:3439":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:403:17312":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:14298:20810":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"16:4560:16818":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:10818:17327":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:12695:17562":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"2:11140:9127":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"5:1465:3063":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"16:8136:17239":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"6:4985:14224":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:2984:3518":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"1:3509:3583":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"17:10251:2893":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"5:3792:3296":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:43865:9167":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:13627:115":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"17:13553:20290":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:5059:3732":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:12303:1789":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"16:3329:16278":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"2:45814:3936":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:12317:1805":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"16:5037:16950":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:1617:3448":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:16176:21774":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"1:1595:3434":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"2:44489:9046":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:12792:17297":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:12360:9140":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:46504:3883":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"16:860:33513":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"17:12768:17295":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:43754:9137":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"5:6554:3433":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"5:3635:181":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"5:5852:250":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:46417:3877":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:5400:14268":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:11468:23182":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"1:961:3440":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:6145:3106":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:9360:3797":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"1:11885:16206":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:5795:3809":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"6:5457:14273":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"5:1496:2750":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:13387:20278":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:14599:20830":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"5:0:307":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:7431:27338":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:40404:9446":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:33099:3844":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:15333:21571":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:46682:9032":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:46085:3870":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:8520:3642":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:9368:3583":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"6:5320:14258":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:45491:3902":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"6:5174:3695":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:8172:2707":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"11:364:33097":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:21435:28481":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"2:1966:1338":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"18:96:21793":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:3096:9053":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:21479:28483":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"11:1910:3446":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"6:5472:14275":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"17:11621:2883":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"5:3648:3063":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:1819:682":{"crate_id":1,"path":["std","env"],"kind":"module"},"6:1490:11142":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:44048:9175":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:3344:3620":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:361:3412":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:256:33536":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:2048:197":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"16:4352:16725":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:3379:3478":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:12225:17518":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:43512:9156":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:16223:21778":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"2:10893:3573":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:2441:3550":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:30485:28809":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"6:5528:14281":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:45438:3861":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:14235:20805":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:12300:333":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"17:15418:21580":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:32865:9478":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:12299:1295":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"17:12851:2909":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:11891:9110":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"17:11102:17356":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:41664:3749":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:8688:3761":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"6:6746:15008":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"2:31991:29189":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"17:1098:17359":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:14933:21543":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"16:7799:3022":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"16:6098:17184":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"5:1428:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"13:229:3030":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:22559:29167":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"16:5347:17168":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:42036:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:15778:21604":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:44473:179":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"5:7380:3452":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"6:1580:11152":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:14723:21535":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:367:3413":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"16:5700:17170":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"6:1496:11143":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:10092:17322":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:8593:3702":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"1:869:2750":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:42194:3260":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:11636:23383":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:14079:20797":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:9382:3805":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"1:5936:3276":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"5:7048:263":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:46644:9030":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:13766:17506":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:11583:17417":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"5:3872:3434":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"2:41542:3639":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"16:4882:16910":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:40579:9449":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:39258:215":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:11557:17443":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"6:4870:14210":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:5477:14276":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:46475:3932":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:11189:17358":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"16:5307:17151":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:11467:17396":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:12076:17459":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:11510:17389":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"11:774:3068":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:6805:3807":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"1:11870:25966":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"16:6353:2995":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:44204:9621":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"11:700:2750":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:39308:9495":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:11341:17395":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"0:24:2017":{"crate_id":0,"path":["fnv","FnvHashSet"],"kind":"type_alias"},"13:0:2542":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:3179:9055":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"1:3558:3569":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"6:6821:15014":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:12313:1829":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"6:1653:11158":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"16:2748:16265":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"11:844:3437":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:4087:3670":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:2501:9506":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"17:11634:17418":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"16:6634:3006":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:41778:195":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:39315:9205":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:40301:9440":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"16:6749:17203":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:46572:9024":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:12711:136":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"5:2207:31829":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:8525:3634":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:11419:2874":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:13972:20789":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:21963:3573":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"19:0:1274":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:13877:20784":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:14847:21538":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:46250:3899":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"16:4531:16812":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"16:3842:16307":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:2467:3560":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"17:13187:20271":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:42849:3263":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:2455:3554":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"17:12929:17334":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"11:1903:3445":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:12353:17547":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:9117:3275":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:513:17313":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"16:2592:16258":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:13399:20279":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:11858:9109":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"2:12344:9586":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:8774:3764":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:11206:3576":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"16:6849:17206":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:11547:17442":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:4609:9223":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:14402:20817":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:43566:9125":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:14038:20794":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"16:7813:17231":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:40372:9436":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"6:497:10248":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"11:2403:3066":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"1:7302:27744":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:13455:20283":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:40291:3105":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"9:53:3036":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"6:8328:14466":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"6:8012:15801":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"16:6504:17195":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:12683:17563":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"17:13946:20787":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:10419:2898":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:3473:17466":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:39989:9148":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"6:6664:14998":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"11:1603:16167":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:13146:17601":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:4688:9232":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:8759:3763":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"6:5212:14244":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:39066:9216":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"6:5665:14295":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:4301:3706":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:46667:9031":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"16:2998:16274":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"18:706:9134":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:8206:23113":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:10700:23196":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:22719:3649":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:43770:3417":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:32103:9052":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"5:1311:3441":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:2503:9507":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"10:44:3035":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:45604:3929":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:43736:9139":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"6:7412:11271":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:21564:3573":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"5:4149:3066":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:12671:17594":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"17:16151:21772":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"16:4743:16886":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:39163:212":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"5:870:3450":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"18:698:2862":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"6:5415:14269":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"2:7938:3278":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:46720:9034":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:4951:3683":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"0:21:2013":{"crate_id":0,"path":["fnv","FnvHashMap"],"kind":"type_alias"},"1:8638:3686":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:43259:9112":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:40395:3108":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:10317:2895":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:40351:9451":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:10683:30482":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"17:11788:17498":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:12408:2905":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"6:6763:15010":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"2:10200:3515":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:5723:3779":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:46618:9028":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"16:6962:3009":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:39978:9258":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"16:7686:17228":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:14212:20804":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:3436:3605":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:11932:9107":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"1:6318:23195":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"17:15126:21553":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"11:2140:3442":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:10253:9068":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:22985:28724":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"1:10550:3780":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"16:6976:3010":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:15078:17361":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:41769:2750":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"1:5781:219":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:6127:3808":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:4768:25617":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"1:913:3434":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:13450:29458":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:44463:3989":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"2:2044:28810":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"17:14516:20825":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"6:7575:15429":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:12264:17515":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:43389:9119":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:22321:3573":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"17:11242:17379":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:40221:9099":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"9:178:3051":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"5:3033:32203":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:13785:17505":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:11252:9121":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"6:6689:15001":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"6:1723:11165":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:42313:9077":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:40085:9253":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"6:0:986":{"crate_id":6,"path":["libc"],"kind":"module"},"6:8006:15800":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:0:2552":{"crate_id":17,"path":["object"],"kind":"module"},"16:4940:16922":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:2119:188":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"16:4062:16458":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:45715:3863":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:2513:2559":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:40434:9448":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:11730:17449":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"2:10263:9075":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"16:4424:16774":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:12175:17531":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:12107:2874":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"6:5370:14264":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"6:5146:14239":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"18:80:21792":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:44390:226":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"5:7452:3086":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:7896:23186":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"5:40:3479":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:3957:2750":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:41997:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"16:2708:16263":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"16:6278:2980":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:11773:17497":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"18:689:21810":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:15678:21597":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"15:306:16199":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:5460:128":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"6:6519:14986":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:33991:9486":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:12551:9634":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"5:4925:216":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"18:531:21816":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"16:5686:2968":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:40779:28563":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"2:22803:28889":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:37853:9490":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"6:6714:15004":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"5:6039:3084":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:2857:143":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"17:15720:21599":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:8170:138":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"17:10887:34288":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"18:521:21812":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"6:8029:15802":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"5:7527:2700":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:23018:28886":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"1:3251:27955":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"5:2309:3077":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"6:5536:14282":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:5624:14290":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"1:11581:3785":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:9984:17320":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"11:351:33101":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"2:40793:3798":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"11:800:3433":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"11:1896:3434":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"16:5960:17180":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:11898:17478":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:22:802":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:46546:3938":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"6:1593:11154":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:43612:9151":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"16:7559:17223":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:15058:2927":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:10218:2892":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"5:3209:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:41675:3750":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:543:3395":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"16:7857:17233":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:14587:20829":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:43347:9100":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:877:3068":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:4375:9051":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:10877:17328":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"16:5846:17177":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:11718:23179":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"16:8259:17245":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:11367:2886":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:13797:20779":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"6:7366:3736":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"16:5817:2969":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:45619:3935":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"5:3284:32143":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:32105:114":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"5:1577:3462":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"5:3029:31825":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:10367:3784":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"5:6947:9201":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:46372:3905":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:42116:90":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:46563:9023":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"15:0:2550":{"crate_id":15,"path":["addr2line"],"kind":"module"},"6:1547:11149":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:43959:9171":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:46002:3910":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:13089:17599":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"16:2458:16252":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:12824:17332":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:13922:20786":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"6:5266:14251":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:2605:3608":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:7959:3401":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"1:4754:3673":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:40194:3538":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"6:570:10257":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:10960:3503":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"18:113:21794":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"16:2418:16250":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:41919:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:4928:3689":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"6:523:10250":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:1872:3493":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:22665:3121":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:40100:9250":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:22612:29156":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:10954:17343":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"10:36:33078":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:3479:3625":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"5:7582:9554":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:45896:28742":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:10301:25946":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"16:2338:16247":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:41705:3405":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:10769:34283":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:15324:21570":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:4986:17571":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"5:7444:209":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"16:2728:16264":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:43880:9168":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:8561:3638":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"6:1517:11146":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:12315:1817":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"16:7755:3021":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:16269:20280":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"2:32014:236":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:3311:124":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"16:542:2951":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:10915:34273":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:10661:17325":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}