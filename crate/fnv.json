{"root":"0:0:2227","crate_version":"1.0.7","includes_private":false,"index":{"2:12752:22101":{"id":"2:12752:22101","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10521:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10521:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12850:29953":{"id":"2:12850:29953","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12432:9003"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12437:8999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12437:8999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12452:9000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12824:29944":{"id":"2:12824:29944","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5537:9329":{"id":"5:5537:9329","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7534:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12437:8999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32518:2499-0:10:1798":{"id":"a:2:32518:2499-0:10:1798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32518:2499","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2737-0:10:1798":{"id":"b:2:2737-0:10:1798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2711:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2707:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2740:134","2:2741:1619"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:15":{"id":"0:15","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[99,0],"end":[106,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:16:1802"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12763:27873":{"id":"2:12763:27873","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12764:27881"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44192:9006","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2740:134":{"id":"2:2740:134","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2711:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:0:2227":{"id":"0:0:2227","crate_id":0,"name":"fnv","span":{"filename":"lib.rs","begin":[1,0],"end":[367,1]},"visibility":"public","docs":"An implementation of the [Fowler‚ÄìNoll‚ÄìVo hash function][chongo].\n\n## About\n\nThe FNV hash function is a custom `Hasher` implementation that is more\nefficient for smaller hash keys.\n\n[The Rust FAQ states that][faq] while the default `Hasher` implementation,\nSipHash, is good in many cases, it is notably slower than other algorithms\nwith short keys, such as when you have a map of integers to other values.\nIn cases like these, [FNV is demonstrably faster][graphs].\n\nIts disadvantages are that it performs badly on larger inputs, and\nprovides no protection against collision attacks, where a malicious user\ncan craft specific keys designed to slow a hasher down. Thus, it is\nimportant to profile your program to ensure that you are using small hash\nkeys, and be certain that your program could not be exposed to malicious\ninputs (including being a networked server).\n\nThe Rust compiler itself uses FNV, as it is not worried about\ndenial-of-service attacks, and can assume that its inputs are going to be\nsmall‚Äîa perfect use case for FNV.\n\n\n## Using FNV in a `HashMap`\n\nThe `FnvHashMap` type alias is the easiest way to use the standard library‚Äôs\n`HashMap` with FNV.\n\n```rust\nuse fnv::FnvHashMap;\n\nlet mut map = FnvHashMap::default();\nmap.insert(1, \"one\");\nmap.insert(2, \"two\");\n\nmap = FnvHashMap::with_capacity_and_hasher(10, Default::default());\nmap.insert(1, \"one\");\nmap.insert(2, \"two\");\n```\n\nNote, the standard library‚Äôs `HashMap::new` and `HashMap::with_capacity`\nare only implemented for the `RandomState` hasher, so using `Default` to\nget the hasher is the next best option.\n\n## Using FNV in a `HashSet`\n\nSimilarly, `FnvHashSet` is a type alias for the standard library‚Äôs `HashSet`\nwith FNV.\n\n```rust\nuse fnv::FnvHashSet;\n\nlet mut set = FnvHashSet::default();\nset.insert(1);\nset.insert(2);\n\nset = FnvHashSet::with_capacity_and_hasher(10, Default::default());\nset.insert(1);\nset.insert(2);\n```\n\n[chongo]: http://www.isthe.com/chongo/tech/comp/fnv/index.html\n[faq]: https://www.rust-lang.org/en-US/faq.html#why-are-rusts-hashmaps-slow\n[graphs]: https://cglab.ca/~abeinges/blah/hash-rs/","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:10:1798","0:20:1810","0:21:1812","0:24:1816"],"is_stripped":false}}},"2:12785:22134":{"id":"2:12785:22134","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12432:9003","`DoubleEndedIterator`":"2:7826:127","prim@char":"1:12032:451","str::split_whitespace":"2:12763:27873","str::rsplit":"2:12791:22138"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43918:3491","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12437:8999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12774:22147":{"id":"2:12774:22147","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12432:9003"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12437:8999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12437:8999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12452:9000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12860:23476":{"id":"2:12860:23476","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:896:34187"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12828:29946":{"id":"2:12828:29946","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12858:21926":{"id":"2:12858:21926","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5543:30631":{"id":"5:5543:30631","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7534:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2731-0:10:1798":{"id":"b:2:2731-0:10:1798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2704:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2733:744"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12767:27880":{"id":"2:12767:27880","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44210:9004","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:10:1798":{"id":"0:10:1798","crate_id":0,"name":"FnvHasher","span":{"filename":"lib.rs","begin":[89,0],"end":[89,26]},"visibility":"public","docs":"An implementation of the Fowler‚ÄìNoll‚ÄìVo hash function.\n\nSee the [crate documentation](index.html) for more details.","links":{},"attrs":["#[allow(missing_copy_implementations)]"],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:15","a:2:32518:2499-0:10:1798","a:2:42146:3336-0:10:1798","a:2:32436:243-0:10:1798","a:2:42147:3631-0:10:1798","a:2:2949:253-0:10:1798","b:2:2737-0:10:1798","b:2:3496-0:10:1798","b:2:2427-0:10:1798","b:2:2424-0:10:1798","b:2:2742-0:10:1798","b:2:2727-0:10:1798","b:2:2731-0:10:1798","0:17","0:13"]}}},"0:20:1810":{"id":"0:20:1810","crate_id":0,"name":"FnvBuildHasher","span":{"filename":"lib.rs","begin":[128,0],"end":[128,56]},"visibility":"public","docs":"A builder for default FNV hashers.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"std::hash::BuildHasherDefault","id":"2:10131:1793","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"FnvHasher","id":"0:10:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"2:12844:29951":{"id":"2:12844:29951","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12432:9003"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12437:8999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12437:8999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12452:9000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12863:29955":{"id":"2:12863:29955","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4670:29955"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44217:9014","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2426:2441":{"id":"2:2426:2441","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5552:30633":{"id":"5:5552:30633","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:281:2503","`String`":"5:7534:249"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:2503","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:21:1812":{"id":"0:21:1812","crate_id":0,"name":"FnvHashMap","span":{"filename":"lib.rs","begin":[132,0],"end":[132,58]},"visibility":"public","docs":"A `HashMap` using a default FNV hasher.","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"std::collections::HashMap","id":"1:723:150","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"resolved_path":{"name":"FnvBuildHasher","id":"0:20:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"2:12756:29936":{"id":"2:12756:29936","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12038:1536","str::slice_mut_unchecked":"2:12757:29937","crate::ops::Index":"2:39598:3375"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12765:25775":{"id":"2:12765:25775","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44172:3489","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3496-0:10:1798":{"id":"b:2:3496-0:10:1798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32437:2498","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3494:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3498:1632"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12809:22145":{"id":"2:12809:22145","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42018:200","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12437:8999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12437:8999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12452:9000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2746:1617":{"id":"2:2746:1617","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:42165:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2711:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12746:339":{"id":"2:12746:339","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12747:22103","`u8`":"1:12049:1641"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12794:29939":{"id":"2:12794:29939","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12432:9003","str::split":"2:12785:22134","prim@char":"1:12032:451","`DoubleEndedIterator`":"2:7826:127","str::rsplit_terminator":"2:12797:29940"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43968:9023","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12437:8999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12830:29947":{"id":"2:12830:29947","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12855:21929":{"id":"2:12855:21929","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5535":{"id":"5:5535","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5536:30629","5:5537:9329","5:5540:30630","5:5543:30631","5:5551:30632","5:5552:30633","5:5553:3513","5:5554:21928","5:5555:21927"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12739:29933":{"id":"2:12739:29933","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:19:1805":{"id":"0:19:1805","crate_id":0,"name":"write","span":{"filename":"lib.rs","begin":[115,4],"end":[124,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["bytes",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:13":{"id":"0:13","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[91,0],"end":[97,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2778:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:14:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2742-0:10:1798":{"id":"b:2:2742-0:10:1798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2701:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2711:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2745:134","2:2746:1617"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12745:29935":{"id":"2:12745:29935","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12771:22146":{"id":"2:12771:22146","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12432:9003"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12437:8999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12857:21930":{"id":"2:12857:21930","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12764:27881":{"id":"2:12764:27881","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12763:27873"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44201:9005","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12861:23477":{"id":"2:12861:23477","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:896:34187"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32436:243-0:10:1798":{"id":"a:2:32436:243-0:10:1798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32436:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:3498:1632":{"id":"2:3498:1632","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39780:9068","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12750:21309":{"id":"2:12750:21309","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42020:197"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42018:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10521:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10521:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12847:29952":{"id":"2:12847:29952","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12432:9003"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12437:8999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12866:29956":{"id":"2:12866:29956","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4668:29956"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44235:9015","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2427-0:10:1798":{"id":"b:2:2427-0:10:1798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32437:2498","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2421:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2429:21833"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12759:22127":{"id":"2:12759:22127","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:12758:22126"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5551:30632":{"id":"5:5551:30632","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7534:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2730:2534":{"id":"2:2730:2534","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2704:141"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42146:3336-0:10:1798":{"id":"a:2:42146:3336-0:10:1798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42146:3336","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12835:29950":{"id":"2:12835:29950","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12432:9003"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12437:8999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12748:21304":{"id":"2:12748:21304","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42020:197"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42018:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10521:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10521:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12838:22148":{"id":"2:12838:22148","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12432:9003"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42018:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12437:8999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12841:22149":{"id":"2:12841:22149","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12432:9003"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42018:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12437:8999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12437:8999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12452:9000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5536:30629":{"id":"5:5536:30629","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:2503","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:281:2503","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:14:60":{"id":"0:14:60","crate_id":0,"name":"default","span":{"filename":"lib.rs","begin":[94,4],"end":[96,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"FnvHasher","id":"0:10:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5555:21927":{"id":"5:5555:21927","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12859:21925"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12865:3323":{"id":"2:12865:3323","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4671:3323"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44226:3324","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12777:2581":{"id":"2:12777:2581","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42020:197","prim@char":"1:12032:451","self::pattern":"2:12432:9003"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42018:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12437:8999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12862:23478":{"id":"2:12862:23478","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:896:34187"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12815:29941":{"id":"2:12815:29941","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12432:9003","`DoubleEndedIterator`":"2:7826:127","prim@char":"1:12032:451","str::matches":"2:12812:2456"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44140:9021","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12437:8999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12437:8999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12452:9000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12832:29949":{"id":"2:12832:29949","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12432:9003"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12437:8999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12437:8999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12457:8998","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12762:1806":{"id":"2:12762:1806","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43904:2970","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12812:2456":{"id":"2:12812:2456","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12432:9003","`DoubleEndedIterator`":"2:7826:127","prim@char":"1:12032:451","str::rmatches":"2:12815:29941"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44122:9020","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12437:8999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12831:29948":{"id":"2:12831:29948","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12797:29940":{"id":"2:12797:29940","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12432:9003","str::split":"2:12785:22134","prim@char":"1:12032:451","str::split_terminator":"2:12794:29939"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43986:9022","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12437:8999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12437:8999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12452:9000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5540:30630":{"id":"5:5540:30630","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7534:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12437:8999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12806:22144":{"id":"2:12806:22144","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42018:200","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12437:8999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12761:28092":{"id":"2:12761:28092","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12032:451"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43894:9009","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2424-0:10:1798":{"id":"b:2:2424-0:10:1798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32437:2498","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2418:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2426:2441"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12737:2541":{"id":"2:12737:2541","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12738:29932":{"id":"2:12738:29932","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:18:1804":{"id":"0:18:1804","crate_id":0,"name":"finish","span":{"filename":"lib.rs","begin":[110,4],"end":[112,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2949:253-0:10:1798":{"id":"a:2:2949:253-0:10:1798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2949:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12741:29934":{"id":"2:12741:29934","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:12739:29933"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12788:22136":{"id":"2:12788:22136","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12432:9003"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12248:8994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12437:8999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:16:1802":{"id":"0:16:1802","crate_id":0,"name":"with_key","span":{"filename":"lib.rs","begin":[103,4],"end":[105,5]},"visibility":"public","docs":"Create an FNV hasher starting with a state corresponding\nto the hash `key`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["key",{"primitive":"u64"}]],"output":{"resolved_path":{"name":"FnvHasher","id":"0:10:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:17":{"id":"0:17","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[108,0],"end":[125,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["write_isize","write_i32","write_usize","write_u32","write_length_prefix","write_i64","write_i8","write_u64","write_u8","write_i128","write_i16","write_u128","write_u16","write_str"],"trait":{"name":"Hasher","id":"2:10091:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:18:1804","0:19:1805"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2733:744":{"id":"2:2733:744","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12744:23434":{"id":"2:12744:23434","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11987:9007"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12758:22126":{"id":"2:12758:22126","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_mut":"2:12759:22127"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12803:22142":{"id":"2:12803:22142","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12032:451","str::splitn":"2:12800:22140","self::pattern":"2:12432:9003"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44040:8990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12437:8999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12437:8999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12452:9000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12821:29943":{"id":"2:12821:29943","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12432:9003","`DoubleEndedIterator`":"2:7826:127","prim@char":"1:12032:451","str::match_indices":"2:12818:29942"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44086:9019","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12437:8999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12437:8999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12452:9000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12826:29945":{"id":"2:12826:29945","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2429:21833":{"id":"2:2429:21833","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12791:22138":{"id":"2:12791:22138","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12432:9003","`DoubleEndedIterator`":"2:7826:127","prim@char":"1:12032:451","str::split":"2:12785:22134"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43936:8988","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12437:8999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12437:8999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12452:9000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2745:134":{"id":"2:2745:134","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32366:3663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:12754:22102":{"id":"2:12754:22102","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10521:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10521:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42147:3631-0:10:1798":{"id":"a:2:42147:3631-0:10:1798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42147:3631","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12736:873":{"id":"2:12736:873","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12032:451"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12747:22103":{"id":"2:12747:22103","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12049:1641"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12757:29937":{"id":"2:12757:29937","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12038:1536","crate::ops::IndexMut":"2:3162:3376","str::slice_unchecked":"2:12756:29936"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5553:3513":{"id":"5:5553:3513","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7534:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5554:21928":{"id":"5:5554:21928","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12858:21926"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12760:27879":{"id":"2:12760:27879","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12032:451"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43888:9010","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12781:2540":{"id":"2:12781:2540","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42020:197","prim@char":"1:12032:451","self::pattern":"2:12432:9003"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42018:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12437:8999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12437:8999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12452:9000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12818:29942":{"id":"2:12818:29942","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12432:9003","`DoubleEndedIterator`":"2:7826:127","prim@char":"1:12032:451","str::rmatch_indices":"2:12821:29943"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44068:9018","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12437:8999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2741:1619":{"id":"2:2741:1619","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42165:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2711:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12768:21670":{"id":"2:12768:21670","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12432:9003"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12437:8999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12800:22140":{"id":"2:12800:22140","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12432:9003","str::rsplitn":"2:12803:22142"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44022:8992","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12437:8999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12853:29954":{"id":"2:12853:29954","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12393:133","`FromStr`":"2:12392:3649"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42165:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12392:3649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12392:3649","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12766:29938":{"id":"2:12766:29938","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44182:9017","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12856:23473":{"id":"2:12856:23473","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39967:23433","Self::is_ascii":"2:12855:21929"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42018:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39967:23433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2727-0:10:1798":{"id":"b:2:2727-0:10:1798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2704:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2701:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2730:2534"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12859:21925":{"id":"2:12859:21925","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:24:1816":{"id":"0:24:1816","crate_id":0,"name":"FnvHashSet","span":{"filename":"lib.rs","begin":[136,0],"end":[136,52]},"visibility":"public","docs":"A `HashSet` using a default FNV hasher.","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"std::collections::HashSet","id":"1:1406:152","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"FnvBuildHasher","id":"0:20:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"2:12735":{"id":"2:12735","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12736:873","2:12737:2541","2:12738:29932","2:12739:29933","2:12741:29934","2:12744:23434","2:12745:29935","2:12746:339","2:12747:22103","2:12748:21304","2:12750:21309","2:12752:22101","2:12754:22102","2:12756:29936","2:12757:29937","2:12758:22126","2:12759:22127","2:12760:27879","2:12761:28092","2:12762:1806","2:12763:27873","2:12764:27881","2:12765:25775","2:12766:29938","2:12767:27880","2:12768:21670","2:12771:22146","2:12774:22147","2:12777:2581","2:12781:2540","2:12785:22134","2:12788:22136","2:12791:22138","2:12794:29939","2:12797:29940","2:12800:22140","2:12803:22142","2:12806:22144","2:12809:22145","2:12812:2456","2:12815:29941","2:12818:29942","2:12821:29943","2:12824:29944","2:12826:29945","2:12828:29946","2:12830:29947","2:12831:29948","2:12832:29949","2:12835:29950","2:12838:22148","2:12841:22149","2:12844:29951","2:12847:29952","2:12850:29953","2:12853:29954","2:12855:21929","2:12856:23473","2:12857:21930","2:12858:21926","2:12859:21925","2:12860:23476","2:12861:23477","2:12862:23478","2:12863:29955","2:12865:3323","2:12866:29956"],"negative":false,"synthetic":false,"blanket_impl":null}}}},"paths":{"2:4169:9083":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"11:742:3136":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"11:673:3131":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:40716:3159":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:38354:9355":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:36313:9351":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:2911:2856":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"16:2744:15623":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:11051:2886":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:9872:126":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"6:6889:14794":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:12248:8994":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:43822:8987":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"6:4556:13635":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"0:21:1812":{"crate_id":0,"path":["fnv","FnvHashMap"],"kind":"type_alias"},"17:14385:20142":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:4898:419":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"6:5885:14356":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:13684:16861":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"6:5130:13695":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:15671:20921":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"5:3155:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:435:15580":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:3500:3462":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"18:582:3181":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:11536:16775":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"17:15535:20912":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:12115:16901":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"14:40:19593":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"16:6960:16568":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"16:5866:16539":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:4031:2784":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"16:8205:16602":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:43512:8970":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"5:7534:249":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"11:1160:3348":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:557:3306":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:12663:117":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"6:4710:13649":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:13633:20096":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"6:4738:3545":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"6:5111:13692":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"17:14312:20137":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:22346:3857":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"17:261:32798":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:42086:3132":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"1:8213:3491":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"6:4461:13623":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:13448:19609":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"18:671:21116":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"6:5033:13685":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"16:5574:3038":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"5:634:30901":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"5:3818:2799":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"1:3160:26248":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"6:5009:13682":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:9026:3213":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:12057:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"6:6169:14378":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:39551:8930":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"6:569:10118":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:9880:8946":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"0:24:1816":{"crate_id":0,"path":["fnv","FnvHashSet"],"kind":"type_alias"},"5:2973:31318":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"16:2832:15627":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"16:2284:15578":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:588:3322":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:9467:135":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"17:15689:20923":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"6:507:10111":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"11:1603:15526":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"16:2766:15624":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:44182:9017":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:10521:245":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:13334:19601":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:14359:20140":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"16:6968:16569":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"6:7371:15170":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:34437:9350":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:10016:16648":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:3670:3531":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:40796:9296":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"6:6114:14374":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:15680:20922":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"16:6361:16549":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:4957:3516":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"2:5876:3160":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:13235:2847":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:1785:9273":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:11141:16736":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:2659:9132":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"16:7694:3088":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"6:1507:11004":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:32420:9094":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"1:3930:3547":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"18:507:33347":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:23179:190":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:10757:25059":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"16:2864:15628":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:43493:9482":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:44349:9036":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:12180:16902":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:1743:658":{"crate_id":1,"path":["std","env"],"kind":"module"},"17:10608:16683":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:5240:209":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:22317:3856":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"16:7660:16587":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:44068:9018":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"6:5982:14364":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"16:7736:16588":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:10757:8994":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:4:1113":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"5:1505:3135":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:2830:3415":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"2:40776:9313":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:11645:16807":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"2:2421:103":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"6:6047:14367":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"6:596:10122":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"6:1591:11013":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"16:6915:3079":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:12174:9503":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:686:1794":{"crate_id":1,"path":["std","collections"],"kind":"module"},"1:4821:3561":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:32427:9406":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:41997:3530":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"6:0:878":{"crate_id":6,"path":["libc"],"kind":"module"},"17:11497:2972":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"16:6792:16564":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"16:2907:15630":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:21553:3464":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"18:80:21100":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:12972:16656":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:7788:162":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:43936:8988":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"5:1151:31320":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:11537:3536":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:11549:16802":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:16123:21085":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"16:4774:16250":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:10559:16682":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"5:1527:216":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"11:856:3342":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:2197:16748":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:9943:16658":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:2518:3499":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"16:6332:3068":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:8814:3197":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:11345:16755":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:9531:3166":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:8904:3693":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:12046:796":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"17:13869:20108":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:14765:20858":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"6:5004:13681":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:7784:142":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:10131:1793":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:10051:2943":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"16:8239:16603":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"16:5088:16324":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:30648:28111":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"17:15980:21074":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"17:11113:16710":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"5:1536:3363":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:12572:16920":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"17:10293:2970":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:12432:9003":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"17:16109:21084":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"1:12035:1150":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"6:4401:13618":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:922:3340":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:33722:9343":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:44725:9509":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"17:14235:20132":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:42762:8945":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"10:44:3103":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"1:4637:25350":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"14:160:15532":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:10948:8992":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:47280:3809":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:10986:3198":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"16:6261:3034":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:22628:28209":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:42572:90":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:9526:29392":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:33663:9344":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"16:2321:15606":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:10315:2971":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"9:486:15403":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"6:4506:13628":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:7895:125":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:21181:28410":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"17:2031:16754":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"16:8154:16599":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:43253:2485":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:3201:3509":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:357:3319":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:8286:3584":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"9:450:15404":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:46722:28222":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:2324:635":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:6357:182":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:12459:2959":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"6:6700:14786":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:4847:13663":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"6:6718:3616":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:11666:16809":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"16:2722:15622":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"16:7884:16593":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:4915:3612":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:12052:1640":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"1:11290:2887":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"2:9671:8935":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"17:14208:20130":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:15557:20914":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"16:6189:32588":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:22993:195":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"16:5634:16531":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"18:538:2931":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"5:1024:2758":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:46186:3746":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:10067:2963":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:10780:24934":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:44172:3489":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"16:7006:16570":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:11034:2884":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"6:1570:11011":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:10775:16685":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"15:288:15556":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:3737:2545":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:13218:2990":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"16:7792:16590":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:15589:20916":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:16134:21086":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"2:40828:9308":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:11194:16739":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"1:10812:125":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"5:3738:3211":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:11370:24713":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"16:5322:16510":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:13419:19607":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"6:7633:13861":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:41806:3527":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"16:4745:16245":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"16:5830:16538":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:10840:25388":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"5:4411:2784":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:3460:16823":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:41256:9290":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:4625:3551":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:13254:2999":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:22164:3862":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"1:6297:226":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:12392:3649":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"16:7568:3084":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:44688:128":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:10035:2942":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"16:6156:16545":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"11:123:2745":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"16:7513:16580":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"5:3753:3364":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:48230:8897":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"18:515:21123":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:44657:9496":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:43053:3148":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"17:13097:19591":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"6:1546:11009":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:14662:20855":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:12077:16888":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:3323:3496":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:1815:1187":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:21992:3464":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"6:4939:1100":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"16:2339:3009":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"16:4889:16269":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:9094:183":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:13676:16863":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:14001:20118":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:23117:191":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:9274:3396":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:415:181":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"6:4496:13627":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:1406:152":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"5:7510:3418":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"16:2670:15620":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:595:16671":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:44641:9494":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:4050:3556":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:12244:16871":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:11226:16766":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:11041:2947":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:43894:9009":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"16:8281:16604":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:39675:221":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:8001:24951":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:45911:3773":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:46226:3758":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:4635:25348":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:44834:146":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"9:426:15406":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:3936:3546":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:15507:20909":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:39631:216":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"16:2406:15609":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:1040:3345":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:13395:19605":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:46107:3786":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"6:4745:13651":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"16:7360:32545":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:893:2778":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"16:7102:16572":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"6:6711:14787":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:4386:9087":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:9678:16659":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"16:6583:16559":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:14122:20124":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"5:830:2763":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"16:7651:16586":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:8200:3490":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"5:6351:3870":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:12510:16921":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"17:15747:20927":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"11:2569:2495":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"5:3251:3352":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:15659:20920":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:8535:3646":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"17:13584:20095":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:44637:9492":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:3980:3549":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"7:0:1686":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:10968:24869":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:849:3132":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:44847:233":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"18:574:33347":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"6:7622:13860":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"6:6682:9990":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:44546:9025":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:5415:3656":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:9559:16649":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:15117:20879":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"6:1682:11021":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"16:7041:32560":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:42069:170":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:9021:3203":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"16:5121:16333":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"5:7634:2803":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:15432:20906":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:46125:3792":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:8251:9293":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:44669:3171":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:34264:9348":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:13033:161":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"5:7481:28198":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:1796:3390":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"5:7548:9045":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:10657:2947":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"16:7090:32597":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"16:5661:16533":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:11817:16860":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:48387:8908":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:41008:9311":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:47430:3743":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:40395:27964":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:363:3320":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:4737:9106":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:10432:32741":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:2202:3436":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"1:2368:3445":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"5:7346:3142":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:9474:3457":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"11:351:32158":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"5:3581:179":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:3837:3536":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:10578:2882":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:40868:9298":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:1760:3381":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:10852:16700":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:7644:3321":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"16:6944:32382":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:8453:3643":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"11:2403:3132":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"6:4893:13669":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:40482:9114":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:41215:9287":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"11:2548:32146":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:14346:20139":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:10689:3132":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:10338:25636":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"10:36:32144":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:23779:242":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"16:6753:16563":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"11:1903:3349":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:45977:3779":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:41022:9312":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:12503:9027":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:11485:16774":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:10796:8981":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"16:5612:16530":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:5500:3658":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:6494:2829":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"18:564:2933":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:40646:8967":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:15527:20911":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:3241:3511":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:11340:24714":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:3966:3548":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:22271:9368":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"2:44911:177":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"6:5891:14357":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"6:7645:13863":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:1496:11002":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:15192:20885":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:914:3135":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"5:1516:3136":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"16:7015:16571":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:11476:3102":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:14156:20126":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"5:7375:2545":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"6:1537:11008":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:12930:16694":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:43044:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"18:707:9001":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:41749:167":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:12091:16899":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:43721:8976":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:13909:20111":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"6:6263:14407":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:11767:16859":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:13724:20100":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:8978:113":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"17:10667:32961":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:10785:32992":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"16:7391:16575":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:47778:3749":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"5:1495:3339":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:44898:3868":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:2426:2357":{"crate_id":1,"path":["std","io"],"kind":"module"},"6:6764:11132":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"6:4473:13624":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:12659:16652":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:12474:2947":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"16:7544:16583":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"6:7679:13867":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"1:8493:3645":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:6466:2870":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:12560:16951":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"1:12038:1536":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:44122:9020":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:8245:3359":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"16:7474:16577":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"11:687:3132":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"16:4949:16281":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"6:4878:13667":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"16:2644:15619":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:2944:115":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:42094:2545":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:21436:3729":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:1966:204":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"6:5146:13697":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:43813:8984":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"6:6666:10962":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:10803:16686":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:11388:25335":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:7580:2876":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"16:5435:32567":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:11945:16819":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:38299:9354":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:46502:3747":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:22645:28051":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"6:1703:3572":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:3251:16818":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:7906:2482":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"16:7503:16579":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:16160:21088":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"9:357:15420":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"6:5075:13689":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:12051:1639":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"5:1115:31319":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:41835:3184":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"16:6401:3073":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:30351:3538":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"16:4585:16181":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:11065:16717":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"6:4955:13676":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:8289:29395":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:14251:20133":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:10813:32937":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:12850:16692":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:1897:28182":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:44441:9039":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"6:4789:13656":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"6:6943:14799":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:4231:3581":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"3:0:478":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"1:8872:3692":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"6:6248:14406":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:9884:8943":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:8973:3200":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:11991:16817":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:11321:2947":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"6:4676:13646":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:8308:3585":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"11:490:150":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:14145:20125":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"6:7610:13858":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"13:226:3100":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"11:1142:15523":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:15160:20882":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:12999:16956":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:12437:8999":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:42148:9440":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"16:2504:15613":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:14296:20136":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"6:4440:13621":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:11215:16740":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"16:6929:3080":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:9186:25372":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"2:47170:3748":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:22351:3855":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"2:33125:9339":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"1:10792:3210":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"1:8137:3163":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"5:7559:9046":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"6:5992:14365":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:4964:3621":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"18:652:33347":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:21383:3733":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"9:52:3104":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:12345:16898":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"17:12797:2985":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:12153:16873":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"5:1439:3132":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:41978:3529":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:11088:16715":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:5446:111":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:44192:9006":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"5:1477:3133":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:12056:1246":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:9813:16676":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"6:4902:13670":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"6:6136:31506":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"6:6059:14368":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:21845:3735":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"16:7597:32392":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:13309:19599":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:9891:16651":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"5:2975:30711":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:32437:2498":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:13328:3354":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"6:1710:11024":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:14969:3000":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:10520:32906":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"6:6086:14371":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"16:6352:3072":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"11:2562:32162":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:5987:226":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:8352:3564":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:3735:3534":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:40767:9305":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:11412:16746":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:14497:20149":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:15519:20910":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:6146:2847":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"16:7054:32569":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"6:1596:11014":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:7136:27556":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:9014:24859":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:11714:16815":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:8237:3524":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"16:4344:16084":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:12230:16869":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"4:0:2341":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:11313:3666":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"6:4595:13639":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:2209:3437":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"1:1054:3346":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"16:5939:3017":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:32519:3182":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"16:6017:16543":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:10953:3658":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"1:645:3330":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:40726:9302":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:32406:16603":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:43787:8967":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"16:2596:15617":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:13145:19593":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:46023:3745":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:4703:3586":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"16:3764:15648":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"18:548:149":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:9344:91":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"16:7492:16578":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:1562:3351":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:11978:16816":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:10831:25394":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"6:4932:13674":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:14757:20857":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:12049:1641":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"17:14921:20866":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:7599:2878":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"5:6871:2811":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"6:4584:13638":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:3988:3550":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:8936:3694":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:3127:137":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:46156:3740":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:12054:848":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:3081:8929":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"1:621:3326":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:9790:16675":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:40447:9015":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"16:4557:16177":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:40858:9310":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:22711:28058":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:13742:20101":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:12031:1033":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:15842:19591":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"11:299:32153":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"9:330:15459":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"16:6560:2743":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"17:11269:2959":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:23055:193":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:7751:9294":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:483:10107":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:12103:16900":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:3603:2778":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:3002:3723":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:9034:16573":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:13407:19606":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:11170:25392":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:13182:19595":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:40529:106":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:44633:9489":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"1:0:1528":{"crate_id":1,"path":["std"],"kind":"module"},"1:7689:2882":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:9824:3412":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:7540:24971":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"11:1883:3131":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"18:491:33367":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:8292:3575":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"6:4686:13647":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"6:6741:11147":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:12396:16876":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:6811:3726":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:10126:2484":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:21434:3464":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:39967:23433":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"17:13516:19614":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"6:1528:11007":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:11690:16855":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"6:5928:14361":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"16:6415:16552":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"9:507:15407":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"6:5140:13696":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:48296:8903":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"16:3065:15635":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:4919:28925":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"5:2972:2604":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"16:3315:15637":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"17:10422:16680":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"11:837:3340":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:41955:3528":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:16049:21079":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"2:1778:634":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:3162:3376":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:22553:3143":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"6:4666:13645":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"6:1674:11020":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"16:5648:16532":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"10:0:2344":{"crate_id":10,"path":["adler"],"kind":"module"},"17:15645:20919":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:9971:21872":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"2:42414:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:12042:691":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"16:6696:15551":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:15101:20877":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:2492:131":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:46055:3775":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"5:4444:2787":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"16:2428:15610":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:44140:9021":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:12166:16872":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:3358:28507":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"5:1387:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:42208:3131":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:40787:9306":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"5:7338:216":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:1556:3350":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:15367:20903":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:30636:3148":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"16:6499:3075":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:1541:2778":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:10962:16722":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:13478:19611":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"16:6513:16556":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:9759:16674":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:4129:27559":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"6:7692:15358":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:32463:250":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"2:22188:3464":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"2:32939:9340":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:3278:3506":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:44298:9033":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"16:3888:15700":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:40463:9014":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:43986:9022":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"16:6531:16557":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:2701:159":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"17:12746:2982":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:12255:16904":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:9730:16673":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:43093:8936":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"5:7422:2495":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"6:4808:13658":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:12048:793":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:48136:3761":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:13695:16862":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:21208:28407":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:9147:3720":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:4740:3562":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"11:1566:15524":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"5:5344:2758":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:7281:27719":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"6:4428:13619":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"6:4434:13620":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"5:786:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"16:2696:15621":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"5:3230:30890":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"15:0:2348":{"crate_id":15,"path":["addr2line"],"kind":"module"},"17:15311:20897":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"6:1664:11019":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:12452:9000":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"16:2618:15618":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:14041:20120":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:15480:20907":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:38933:9356":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"5:0:313":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:4028:3552":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:42157:3312":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"5:6013:9708":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:8190:3155":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:4460:9094":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"17:12310:2978":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:46776:27994":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"16:6243:16547":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:14181:20128":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"5:3607:3132":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"18:599:33350":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"18:590:28043":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:42078:3131":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"17:1203:16723":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:11439:16767":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"6:1501:11003":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:12418:16927":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"11:787:3134":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"16:7128:16573":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"6:6222:14405":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:8169:3463":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"17:13297:19598":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:13989:20117":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"6:4603:13640":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"5:212:2756":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"16:6545:16558":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:48270:8901":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:40374:9084":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"16:5588:16529":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:10430:3661":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:482:2849":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"16:5673:16534":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"6:4610:13641":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:4529:13631":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"16:5743:16536":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:26181:272":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:5753:3677":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:1969:203":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:637:3328":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:8242:3355":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:22744:3543":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:16004:21076":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"11:1917:3351":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:48174:3795":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:11155:16737":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"11:1087:32168":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"14:215:15541":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:43862:9016":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:9030:8999":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:22080:3860":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"2:43918:3491":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"6:4824:13660":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:22593:3539":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"6:4488:13626":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:42233:202":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:11144:3197":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"6:7598:13856":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"16:7523:16581":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"18:699:2936":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"6:4480:13625":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:15037:20872":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:22484:27997":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"16:7582:3085":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:9164:24880":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"6:5867:14355":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:11998:3219":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:8562:3648":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:12324:16907":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:8842:3198":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:12052:16822":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:9874:8938":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"16:3655:15640":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:3425:3461":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:21442:3732":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"6:6927:14797":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"6:4628:13643":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:4928:16928":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"16:6386:16551":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"5:5961:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:880:3134":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:859:2545":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:11605:24924":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"1:12053:1637":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:32551:112":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"16:3232:15636":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"17:511:16670":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"6:7651:13864":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:32436:243":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"17:14633:20854":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:14194:20129":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:928:3341":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"5:2474:31239":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"5:790:2760":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:7865:3455":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:4773:16922":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"2:2658:3464":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"19:0:1130":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:43740:8978":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:16016:21077":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"1:8802:205":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"17:13365:19603":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"6:6868:14793":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"5:7367:2545":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:4150:8925":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"16:2933:15631":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:11516:3534":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:41789:3526":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:14170:20127":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:12548:16915":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"17:11052:16684":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:22537:3174":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"6:1691:11022":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:12701:16655":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:12872:16650":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:12029:16824":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:15287:20894":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:33918:9346":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:7503:3163":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"18:0:2351":{"crate_id":18,"path":["memchr"],"kind":"module"},"5:6530:2758":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:8858:3695":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:30614:9063":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:9876:8937":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"17:14399:20143":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"6:6913:14796":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:44928:8920":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:42103:3629":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"5:2183:3137":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"5:5877:2778":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:867:3133":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:42336:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"5:1455:2545":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"6:4523:13630":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:2704:141":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"16:7621:16585":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"5:7296:2778":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"16:8167:16600":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:7663:3309":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"6:6691:14785":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:47092:3742":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:3482:3412":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"17:11001:16713":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:0:533":{"crate_id":2,"path":["core"],"kind":"module"},"2:11957:9455":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:44414:9038":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"16:7782:16589":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"16:6318:16548":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:13648:20097":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:4115:28273":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"6:6658:10157":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"5:5004:2784":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:43842:8986":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:5639:3687":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:10236:2833":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:4798:2857":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:9099:240":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:23086:194":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"16:7067:32393":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:12356:16908":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"11:2326:3346":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"2:30706:28161":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"17:12784:2983":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"16:5419:2943":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"5:7316:30896":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:4159:3578":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:38189:9352":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"6:6079:14370":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:43730:8980":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"6:5897:14358":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:9886:8944":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:12213:9502":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:8300:3533":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:42769:8946":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:21193:28410":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"17:9968:16679":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"11:2469:2799":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"2:44022:8992":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"16:8115:16597":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"6:475:10106":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"16:2450:15611":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:11307:3205":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"5:1789:2799":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"2:42492:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:15:1805":{"crate_id":2,"path":["core","write"],"kind":"macro"},"17:9651:16672":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"11:1025:3346":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:43888:9010":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"6:1604:11015":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:9104:241":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:2949:253":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"1:3510:3484":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"17:13882:20109":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:11932:16821":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"6:5085:13690":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:11816:2892":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:10962:8990":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:7217:9300":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:8551:3647":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:3373:8928":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"9:0:2343":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:11619:15564":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:10767:3454":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"2:40844:9309":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:12039:1622":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"16:6268:32535":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:40534:3421":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:2707:264":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:46245:3807":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"6:4998:13680":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:42998:3148":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:40425:9119":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"6:1514:11005":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"11:774:3133":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:3255:217":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:8157:3459":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"6:1558:11010":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:15566:20915":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:11701:16856":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:11958:16820":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:6596:3686":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"2:44235:9015":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:7923:3500":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:21840:3464":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"16:4921:16277":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:2334:9368":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"2:40411:9117":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:15546:20913":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"16:6844:16566":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:7380:24823":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:11453:2889":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:40619:3435":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:7935:175":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:13463:19610":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"6:4860:13665":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:12202:16903":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:42216:3132":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:39773:9359":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:13162:19594":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"11:875:3343":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:14099:20123":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:1072:3348":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:4377:227":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:10569:32988":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"6:1718:11025":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"6:4375:13616":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:22203:3865":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"6:4776:13654":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:5971:2866":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:401:16669":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:40998:3490":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"6:6100:14372":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:4841:13662":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:12387:16911":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:4700:3613":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"11:2352:3347":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"5:7434:2496":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:44890:3867":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:533:2850":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:44953:28181":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"6:4914:13672":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:14896:20865":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:1094:16716":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"16:4497:16165":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"17:15345:20901":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"6:4800:13657":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"16:6425:16553":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:39615:219":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:2780:122":{"crate_id":2,"path":["core","default","Default"],"kind":"proc_derive"},"0:20:1810":{"crate_id":0,"path":["fnv","FnvBuildHasher"],"kind":"type_alias"},"17:13961:20115":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:21210:28414":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:13082:211":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"17:13202:2986":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:14282:20135":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:8796:3661":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:256:33225":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:6983:25140":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"18:624:33366":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"11:328:32156":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:0:2350":{"crate_id":17,"path":["object"],"kind":"module"},"5:2154:30902":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:12033:1657":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"16:6818:16565":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:14843:20862":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:23334:3542":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:10665:3131":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:43261:3186":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"7:31:15375":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"16:6569:3076":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:14324:20138":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:2352:3440":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:12047:797":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"11:2443:2778":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"16:5363:16527":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:14887:20864":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:23272:189":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"16:6376:16550":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"5:6686:2758":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"6:4698:13648":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:5941:14318":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:10834:8995":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"6:5068:13688":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:32402:27591":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"1:1545:2799":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"6:6813:14790":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:3099:123":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"6:6128:14376":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:16146:21087":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"2:31182:202":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"1:7848:3454":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:43071:134":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"17:14413:20144":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:4038:3553":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:10355:135":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"6:4884:13668":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:43308:3188":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"16:4641:16189":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:10716:16684":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:42988:28042":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:8385:3625":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:12055:1696":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:43904:2970":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"11:800:2778":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:40688:3156":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:46578:3808":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:2228:16773":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"6:6798:14788":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"6:4968:13677":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"11:2369:15527":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"2:2336:9369":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"1:7838:3456":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:6644:239":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:14221:20131":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"6:4543:13633":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:44210:9004":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:5592:2784":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"18:719:21112":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"6:542:10114":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"6:5910:14359":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"16:2548:15615":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"11:2124:3345":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:43269:2486":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:40562:3420":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"6:4647:13644":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"6:7604:13857":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:8146:3212":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:10907:8989":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:15108:20878":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"16:3600:15639":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:4514:9095":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:44837:225":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:40819:3162":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:41919:28049":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"5:886:2765":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"5:3191:3350":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"11:2423:2545":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"2:40496:9116":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:9867:117":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"5:7306:2769":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"16:8097:16596":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:723:150":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:40383:9118":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"5:6484:2778":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:2997:3721":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:43968:9023":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:42650:3185":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"5:4050:2758":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:22217:9368":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"1:8281:3583":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:14266:20134":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:5568:3659":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"17:15612:20917":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:5308:126":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"16:7768:3092":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:34091:9347":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:7702:15359":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:48212:3816":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:7668:3311":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:3022:9349":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"15:327:3096":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"5:4252:3131":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"18:113:21102":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:7901:2483":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"11:1887:2545":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:43750:8979":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:10535:3510":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"2:10319:2837":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"6:489:10108":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"6:1650:11018":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"18:96:21101":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:12380:16910":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:2778:122":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"6:7343:10067":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:13754:20102":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"11:1582:15525":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:39512:9079":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:3133:139":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:16098:21083":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"2:40706:9301":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:3328:260":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"6:5123:13694":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:9048:24839":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"16:4527:16171":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:10097:24901":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"6:501:10110":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:2942:8927":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:10990:8991":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"7:78:15382":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:6896:2873":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"1:12037:1503":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"6:588:10121":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:39697:220":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:15961:19595":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"2:21994:3731":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"11:1676:2751":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:939:3342":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:11307:16749":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"16:5963:16541":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:1550:3349":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:4103:28272":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:2418:102":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:3345:9080":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:12032:451":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:40639:3458":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"17:11449:16799":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"16:4719:16243":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:5381:3654":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"5:266:2758":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:3443:3460":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"6:6934:14798":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:10869:8988":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"6:4922:13673":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"6:4854:13664":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:10915:16703":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:48250:8899":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:14786:20860":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:23210:187":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:40455:3324":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"11:1923:3352":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"2:10083:149":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"17:10726:33214":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"5:6842:2797":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:2698:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"11:1007:3345":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:11576:16803":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:504:2775":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:46356:3781":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:40744:28072":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"6:1632:11016":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:22682:27961":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"11:434:32148":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"16:7462:16576":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"14:31:15532":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:44040:8990":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"18:681:21117":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:1534:3131":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:909:3339":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:44217:9014":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:5128:210":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"5:4865:223":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:44366:9037":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:22125:3861":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"2:4127:107":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"6:6120:14375":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:15903:21073":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"17:12264:16905":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:10988:16714":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:5687:2784":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"2:30812:28160":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:39741:2489":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"11:1051:3347":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:44713:3725":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:22257:3866":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"17:15631:20918":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:9878:8945":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:10247:3665":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:44526:9024":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:45955:3774":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:21562:3730":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"5:6117:2784":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:9479:2880":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:4744:3566":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"5:5650:2797":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:14021:20119":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:6961:14800":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:11355:21912":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:12036:338":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"11:2542:29645":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"5:2979:30709":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:2440:110":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:44940:8918":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"6:654:10169":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"16:2810:15626":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:42147:3631":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:40809:9307":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"11:2536:32167":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:31210:3181":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"17:11657:16808":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"2:22620:27965":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:13055:29072":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:8891:3690":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:13026:16957":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"16:7436:3031":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:22718:3541":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:3584:16841":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:3123:2500":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"5:4381:2787":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:13107:9136":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:11234:158":{"crate_id":1,"path":["std","sys","unix","time","Instant"],"kind":"struct"},"2:43508:27832":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:11469:16801":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"2:41208:28034":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"17:16170:19598":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"1:12014:25319":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:12445:16917":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"2:6483:9297":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"11:1891:2778":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:21564:3172":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:13832:20106":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:45931:3738":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"14:202:9044":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:12614:16688":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"5:7284:3353":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:12137:9501":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:42531:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:11981:24861":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:1873:3410":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"1:11045:2885":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"5:2236:31235":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"17:13976:20116":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:13056:16958":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"1:4042:3554":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"6:4830:13661":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:15356:20902":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:10155:24910":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"17:16180:19600":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"6:4535:13632":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:10334:2842":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"5:4366:270":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:30580:3180":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:46408:3793":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:23148:196":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"17:10974:2959":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:16032:21078":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"2:46263:3813":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:12335:2979":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"5:3687:2758":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"16:149:2740":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"6:7556:15330":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:13948:20114":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"5:2048:3211":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:14698:20856":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:5082:24939":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:41246:2831":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"5:3196:30886":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:15212:20887":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"11:710:3135":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:12758:16690":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"11:883:3344":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:40470:9113":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"18:521:21120":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"16:3032:15633":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"6:4578:13637":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"5:3225:3349":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"6:6804:14789":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:41222:3679":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:10881:16701":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"1:5625:226":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"16:536:3021":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"11:2151:3347":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:4450:2821":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"6:5052:13687":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:8232:3532":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:7111:2553":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:44320:9034":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:1758:3380":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:7879:2501":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:4311:3582":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:44226:3324":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"5:1685:2758":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"16:5905:16540":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"6:4516:13629":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:11476:3535":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:40546:28198":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:12828:16691":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:11549:8975":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"6:4549:13634":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:40735:9303":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:32413:29626":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"16:5049:16309":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"5:6861:2809":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:48311:8904":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"16:5384:16528":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:2487:207":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:6430:3680":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:2711:263":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:47010:3794":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:42453:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"6:6228:13530":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:12050:1638":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"16:5017:16301":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:10302:2836":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:10802:136":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:4639:25352":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"17:15049:20873":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:10738:3615":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:5571:3660":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:48364:8907":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:1883:9379":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:9882:212":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"1:3280:3507":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"16:6204:3050":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:39598:3375":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"6:7388:15171":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"6:527:10112":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:11743:16857":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:1906:9378":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:12410:16912":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:48334:8905":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:15244:20890":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:8545:3131":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"16:6346:3070":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"17:14878:20863":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:2695:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"17:11399:16747":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:46600:3814":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:44645:9493":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"8:0:2342":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:5780:3199":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:3166:24658":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:8207:2970":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:42165:232":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"1:8006:3209":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:15710:20924":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"11:102:32166":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:46386:3787":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"6:1913:11190":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"16:5798:3044":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:7915:24652":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"9:393:15405":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"16:7534:16582":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:10076:3390":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"2:43016:28090":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:6249:2866":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"6:7616:13859":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"17:10471:33221":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:3410:8931":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:12009:2947":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:22:731":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:8476:3644":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:11727:16836":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"6:6107:14373":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"18:755:21119":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:10976:8993":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"16:2574:15616":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:6194:3204":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:44649:9497":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"16:2472:15612":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"5:7618:2799":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"2:42748:8937":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"14:7:15532":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:4309:3152":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:3318:9358":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:10321:111":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"16:3830:15666":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:8850:3131":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:12718:16689":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:13896:20110":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:40609:2823":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:11632:16806":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"6:5023:13684":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:5763:9304":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:8991:24895":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:22605:28203":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"5:692:116":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:46456:3741":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:3163:24642":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:12290:16897":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"17:12140:16874":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"6:4616:13642":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"16:0:2349":{"crate_id":16,"path":["gimli"],"kind":"module"},"6:4908:13671":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"11:2554:32165":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:16062:21080":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"6:5152:13698":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:10137:2966":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"11:2383:3131":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"16:8294:134":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:12273:16691":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:40666:3373":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"5:281:2503":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:39780:9068":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"17:13935:20113":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:7643:3464":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"6:5921:14360":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:11369:16753":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"6:5117:13693":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"6:7668:13866":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:40368:3324":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"14:221:15542":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:7717:3333":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:44335:9035":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:11675:16854":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:44653:9495":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:13347:19602":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:9624:16647":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:4381:9086":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:40675:3155":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"5:1286:3347":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:11382:25334":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"5:7450:2789":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"6:119:9788":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:44855:213":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:13273:148":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"16:4462:16154":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:44513:9043":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:33545:3722":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:41772:3525":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:15224:20888":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:7333:9285":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"18:690:21118":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"16:6171:212":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:10511:3464":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:11126:16709":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:12600:134":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:15133:20881":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:11617:16805":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"16:7828:16591":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:13224:113":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"17:14426:20145":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:14455:20147":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:1819:3396":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:1538:2545":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:2523:201":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:48426:8909":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"5:5154:2794":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:5632:2866":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:7738:3399":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"16:4835:16263":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:2354:3441":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:42755:8938":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"14:187:15540":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"11:811:2799":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1:5431:3657":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:22666:28069":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"18:614:33358":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:23241:188":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:2622:3492":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:9339:84":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"5:1270:3345":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"18:636:33359":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"5:7523:2795":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"16:7677:216":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:46554:3759":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:44201:9005":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"6:4764:13653":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:11755:16858":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"5:7028:2816":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:4469:3586":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:23303:186":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:3012:9341":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"16:7318:16574":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:44665:9491":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:7563:2860":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:8220:3489":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:7747:9295":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:15374:20904":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"5:4212:2784":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"5:4182:2784":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"17:10950:16728":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:4742:3565":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:15200:20886":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:42224:2545":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"16:5403:2942":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:46980:3788":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"16:8072:16595":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:43876:9013":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:12127:16875":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:11215:24756":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"16:7722:3091":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:43761:8969":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"5:7467:3419":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:40435:9120":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:11563:16776":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"16:5696:16535":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"11:1896:2799":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"16:7862:16592":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:13083:16959":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"11:2231:3102":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"1:3491:24071":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"5:2144:2775":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:15177:20883":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:6070:2861":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:41237:3515":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:41942:3537":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"5:3184:3131":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:42375:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:10532:3508":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:3130:138":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:42611:97":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"5:1301:3346":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"5:7330:2545":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"6:4388:13617":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:3339:9081":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:9196:25360":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"6:563:10117":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:2993:9319":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"1:12044:798":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"6:4566:13636":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"16:4806:16258":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"16:6467:16555":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:8403:3642":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"1:1063:3347":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:11590:16772":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"17:15027:20871":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:13322:19600":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"11:1728:152":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:8920:3691":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:1567:3352":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:48285:8902":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"11:0:2345":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"18:644:33347":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:42258:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"16:7613:16584":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:11027:16711":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"16:3797:15657":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"6:4449:13622":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:15725:20925":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"5:1486:3134":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"16:6226:16546":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"5:7267:3128":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:9918:16678":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:40489:9115":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:5746:3676":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:12446:9001":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"6:5955:14319":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:3394:2784":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"18:609:33374":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"5:6604:2545":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"6:4977:13678":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:32438:251":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:2946:134":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"16:5727:3042":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:46624:3815":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"6:7639:13862":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:4569:3604":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"11:1107:15522":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:9860:16677":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"5:4020:2778":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:918:3136":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:7843:3457":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:2944:232":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"2:46856:3776":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:9109:158":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:12197:9500":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"16:7342:32576":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:15868:21072":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"16:6041:16544":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:10714:3491":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"17:11168:16738":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"2:2986:9317":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:43800:8968":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"18:481:21121":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:11158:3662":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:14485:2979":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:4235:3150":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:42146:3336":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:46001:3739":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:15253:20891":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"16:6879:16567":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"11:1066:15521":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"6:4351:13614":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"18:727:2938":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"16:7554:3083":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:41231:9289":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"16:2526:15614":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:15294:20895":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"5:5388:8961":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:21882:28415":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:12301:16906":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"17:11459:16800":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"2:43300:3187":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"18:531:21124":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:46310:3728":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:32518:2499":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"17:14087:20122":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"5:5807:257":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:12043:693":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"11:700:2545":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"5:2062:3364":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"6:5044:13686":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"6:5015:13683":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:6543:3684":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"16:7269:32564":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"0:0:2227":{"crate_id":0,"path":["fnv"],"kind":"module"},"17:13663:20098":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:44086:9019":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:39655:218":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:15990:21075":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"17:10618:32960":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:12191:16868":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"5:1424:3131":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"16:3049:15634":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"5:5992:2794":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"16:4986:16294":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"6:6898:14795":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:6071:14369":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:4998:854":{"crate_id":2,"path":["core","iter"],"kind":"module"},"6:1576:11012":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:47636:3777":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:46208:3752":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:44492:9041":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"11:396:2749":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"6:6159:14377":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:47966:3755":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:4947:13675":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"17:11014:16712":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"6:1697:11023":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:15079:20875":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:10172:2967":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"16:6721:16562":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"6:4455:13464":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:15062:20874":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:15321:20898":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:11779:2975":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:11800:16835":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:4561:3154":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:23024:192":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"15:306:15557":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"15:394:15567":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"17:14439:20146":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:14778:20859":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"16:7708:3090":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"16:3915:15703":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"9:177:3119":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"16:6279:3065":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"5:2983:30710":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:11507:2973":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:5825:2859":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"16:2969:15632":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"9:237:3643":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:4505:2822":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"16:4053:15817":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:4534:3153":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"16:4862:16266":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:951:3344":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"6:574:10119":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:47246:3760":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:8274:3528":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:14822:20861":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:7732:3334":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:15267:20892":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:6426:3679":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"5:2703:31231":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"16:8181:3094":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:9069:3215":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:12220:16692":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"17:11243:16752":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"6:555:10116":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:15013:20870":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:10337:2944":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:21227:28422":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:12536:16916":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"0:10:1798":{"crate_id":0,"path":["fnv","FnvHasher"],"kind":"struct"},"1:10944:24974":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"17:13121:19592":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:2662:3501":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"5:5392:8962":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:7878:136":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"6:62:9734":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"1:8959:3678":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:46085:3780":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:5051:24939":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:4151:3577":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:11197:3468":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"6:7657:13865":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"16:6600:16560":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:6610:2871":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"16:6083:15577":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:12366:16909":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:21239:28419":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"1:3732:3535":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:12953:16657":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:3239:3510":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"16:8050:16594":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"17:15493:20908":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:8984:3304":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:8226:3533":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:14057:20121":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:15279:20893":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:6540:3683":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:12596:16687":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:11294:16750":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:43290:3643":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:3333:143":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:43712:8977":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:1692:2784":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"3:234:232":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"5:1315:3348":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"6:580:10120":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:2169:16787":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"16:5995:3023":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"16:3461:15638":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"6:548:10115":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:1821:3397":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"6:4724:13650":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:4989:13679":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"17:13235:2992":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:11508:8983":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"2:32366:3663":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:15087:20876":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"6:4814:13659":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:12486:16923":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"16:2305:15605":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"17:11395:16760":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:903:2799":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"16:8134:16598":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:2205:2817":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"17:10925:16704":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:7529:16671":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:11987:9007":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:13491:19612":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:12921:2979":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:14509:20150":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"14:165:15533":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:640:3329":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:7826:127":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:14470:20148":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:10822:3459":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:2586:2853":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"13:0:2340":{"crate_id":13,"path":["std_detect"],"kind":"module"},"6:533:10113":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:6489:28063":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:4906:3611":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:14950:20868":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:48028:3789":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:11612:15564":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"11:1910:3350":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:10473:2881":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"16:2788:15625":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"6:4755:13652":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:16087:21082":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"5:6959:269":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:11178:3171":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"17:10941:16705":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:33604:3724":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:15384:20905":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:21171:3181":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:12898:16693":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:47888:3783":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:16076:21081":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"5:7003:2812":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:15943:19594":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"5:3217:3351":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:48239:8898":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:5395:3655":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:10095:24931":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"17:14373:20141":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:12432:16918":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"17:13922:20112":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:10091:153":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:14904:20853":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:40697:3158":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:10510:16681":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:8011:3502":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:22215:28379":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"1:2200:135":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:46753:28215":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:6162:2865":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:48349:8906":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:22569:3175":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"11:430:32145":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:8326:3614":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"5:1131:31255":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"6:5974:14363":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"5:903:3131":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:12584:16919":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"2:39602:9357":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:22431:28185":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:43661:28533":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:21381:3464":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"6:4364:13615":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"6:6819:14791":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:3366:3515":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"6:1521:11006":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:836:3131":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:40576:3422":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"17:13383:19604":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:2789:134":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:33311:9342":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"6:5859:14354":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:15003:20869":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:8828:3662":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"5:3343:2799":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"2:22302:3464":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"1:4383:3576":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"16:2380:15608":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:15337:20900":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:4491:3587":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:7754:3400":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:12045:795":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:12457:8998":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:8919:3164":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:2370:3446":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"17:13285:19597":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:13707:20099":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"16:6742:15550":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:13504:19613":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"6:5829:14290":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"16:6485:3074":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"16:5712:3039":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:12684:16654":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:12030:401":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:42136:3630":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:4180:3580":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:7931:3211":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:945:3343":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:3199:3508":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:2600:2837":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:3112:3361":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"18:766:21114":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"5:7497:3417":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"5:3594:3131":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:8330:3616":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:6299:9314":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"6:5104:13691":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:13856:20107":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:10762:25331":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"1:7855:3210":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"6:7365:15169":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:15301:20896":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:10940:3400":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"11:844:3341":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:1902:3411":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"1:3994:3551":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:15125:20880":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"14:0:2347":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"16:5816:3049":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:2380:3451":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:46934:3782":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"16:6901:3078":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:44503:9042":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"11:832:3339":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:48090:3810":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:44478:9040":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"13:110:32215":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:11593:3218":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:2529:208":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:11523:2956":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"6:4783:13655":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"11:364:2747":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:13436:19608":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:7026:2874":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:4167:3579":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"11:2304:3345":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"6:5969:14362":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:15329:20899":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:11604:16804":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"17:15184:20884":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:9128:3468":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:32549:8926":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:39719:222":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:13787:20104":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:21225:28417":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:43278:153":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"5:40:2754":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:42018:200":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"16:6893:3035":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"16:4613:16185":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"6:1734:11026":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"6:4870:13666":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"5:4092:3132":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:9842:140":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"5:683:256":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:13765:20103":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:13273:19596":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:43028:28089":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"6:495:10109":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:47216:3754":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:14989:16718":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:7797:2502":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"12:0:2346":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:10538:3506":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:2954:3149":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"16:6687:16561":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:15235:20889":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:14934:20867":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"16:7284:3629":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"6:6837:14792":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"16:2881:15629":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"6:6012:14366":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"16:4417:16133":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"11:2140:3346":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:8866:2545":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"5:7276:2545":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:3494:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:21870:3173":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:10896:16702":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:13809:20105":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:11973:9457":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:30620:9332":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:46532:3753":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:10207:2968":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"6:6781:11130":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:4266:3151":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:46675:27988":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"16:2359:15607":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"16:6456:16554":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:1909:704":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"2:21455:3172":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:22732:3540":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:2093:8932":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"6:123:9789":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:43832:8985":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:10242:2969":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:10102:2965":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"18:660:21115":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:12003:3335":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"5:2256:3140":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:11426:16798":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:38244:9353":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:1973:185":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:15855:19592":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"2:33781:9345":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"16:5760:16537":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"16:8195:16601":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:40758:3161":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"6:1639:11017":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:15733:20926":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:48259:8900":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:40515:9112":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:42297:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:11475:8982":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:11256:16751":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"18:736:21113":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:39794:9076":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"16:5982:16542":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:41264:9292":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:44661:9490":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}