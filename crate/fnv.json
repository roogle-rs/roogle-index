{"root":"0:0:2075","crate_version":"1.0.7","includes_private":false,"index":{"a:2:2732:2335-0:10:1644":{"id":"a:2:2732:2335-0:10:1644","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2732:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11993:31849":{"id":"2:11993:31849","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11609:8832","`DoubleEndedIterator`":"2:7194:120","prim@char":"1:11874:418","str::match_indices":"2:11990:31848"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:43382:8848","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:8828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11614:8828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11629:8829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2543:1471":{"id":"2:2543:1471","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:41395:209","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2513:236","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11909:2376":{"id":"2:11909:2376","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11918:313":{"id":"2:11918:313","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:11919:25919","`u8`":"1:11891:1492"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8204:3452-0:10:1644":{"id":"a:2:8204:3452-0:10:1644","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8204:3452","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:8203:3453-0:10:1644":{"id":"a:2:8203:3453-0:10:1644","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8203:3453","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:15":{"id":"0:15","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[99,0],"end":[106,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:16:1648"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11963:25952":{"id":"2:11963:25952","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11609:8832","`DoubleEndedIterator`":"2:7194:120","prim@char":"1:11874:418","str::split":"2:11957:23565"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:43232:8817","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:8828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11614:8828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11629:8829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11969:31844":{"id":"2:11969:31844","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11609:8832","str::split":"2:11957:23565","prim@char":"1:11874:418","str::split_terminator":"2:11966:31843"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:43282:8851","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:8828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11614:8828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11629:8829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11913:31838":{"id":"2:11913:31838","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11911:31837"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11943:25959":{"id":"2:11943:25959","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11874:418","self::pattern":"2:11609:8832"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:8828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12003:31854":{"id":"2:12003:31854","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12028:25698":{"id":"2:12028:25698","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39409:25834","Self::is_ascii":"2:12027:20826"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41251:180","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"AsciiChar","id":"2:39409:25834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11960:25950":{"id":"2:11960:25950","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11874:418","self::pattern":"2:11609:8832"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:11432:8823","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:8828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11987:31847":{"id":"2:11987:31847","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11609:8832","`DoubleEndedIterator`":"2:7194:120","prim@char":"1:11874:418","str::matches":"2:11984:2296"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:43436:8850","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:8828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11614:8828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11629:8829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11996:31850":{"id":"2:11996:31850","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11972:25954":{"id":"2:11972:25954","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11874:418","self::pattern":"2:11609:8832","str::rsplitn":"2:11975:25956"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:43318:8821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:8828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2548:1470":{"id":"2:2548:1470","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:41395:209","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"name":"TryFrom","id":"2:2513:236","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11937:23566":{"id":"2:11937:23566","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:43468:3309","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11998:31851":{"id":"2:11998:31851","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:10:1644":{"id":"0:10:1644","crate_id":0,"name":"FnvHasher","span":{"filename":"lib.rs","begin":[89,0],"end":[89,26]},"visibility":"public","docs":"An implementation of the Fowler–Noll–Vo hash function.\n\nSee the [crate documentation](index.html) for more details.","links":{},"attrs":["#[allow(missing_copy_implementations)]"],"deprecation":null,"kind":"struct","inner":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:15","a:2:2692:227-0:10:1644","a:2:8204:3452-0:10:1644","a:2:8203:3453-0:10:1644","a:2:2675:219-0:10:1644","a:2:2732:2335-0:10:1644","b:2:2533-0:10:1644","b:2:2239-0:10:1644","b:2:2539-0:10:1644","b:2:3308-0:10:1644","b:2:2242-0:10:1644","b:2:2544-0:10:1644","b:2:2529-0:10:1644","0:13","0:17"]}},"0:16:1648":{"id":"0:16:1648","crate_id":0,"name":"with_key","span":{"filename":"lib.rs","begin":[103,4],"end":[105,5]},"visibility":"public","docs":"Create an FNV hasher starting with a state corresponding\nto the hash `key`.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["key",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2692:227-0:10:1644":{"id":"a:2:2692:227-0:10:1644","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2692:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11911:31837":{"id":"2:11911:31837","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12034:3150":{"id":"2:12034:3150","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4528:3150"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:43522:3151","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:2075":{"id":"0:0:2075","crate_id":0,"name":"fnv","span":{"filename":"lib.rs","begin":[1,0],"end":[367,1]},"visibility":"public","docs":"An implementation of the [Fowler–Noll–Vo hash function][chongo].\n\n## About\n\nThe FNV hash function is a custom `Hasher` implementation that is more\nefficient for smaller hash keys.\n\n[The Rust FAQ states that][faq] while the default `Hasher` implementation,\nSipHash, is good in many cases, it is notably slower than other algorithms\nwith short keys, such as when you have a map of integers to other values.\nIn cases like these, [FNV is demonstrably faster][graphs].\n\nIts disadvantages are that it performs badly on larger inputs, and\nprovides no protection against collision attacks, where a malicious user\ncan craft specific keys designed to slow a hasher down. Thus, it is\nimportant to profile your program to ensure that you are using small hash\nkeys, and be certain that your program could not be exposed to malicious\ninputs (including being a networked server).\n\nThe Rust compiler itself uses FNV, as it is not worried about\ndenial-of-service attacks, and can assume that its inputs are going to be\nsmall—a perfect use case for FNV.\n\n\n## Using FNV in a `HashMap`\n\nThe `FnvHashMap` type alias is the easiest way to use the standard library’s\n`HashMap` with FNV.\n\n```rust\nuse fnv::FnvHashMap;\n\nlet mut map = FnvHashMap::default();\nmap.insert(1, \"one\");\nmap.insert(2, \"two\");\n\nmap = FnvHashMap::with_capacity_and_hasher(10, Default::default());\nmap.insert(1, \"one\");\nmap.insert(2, \"two\");\n```\n\nNote, the standard library’s `HashMap::new` and `HashMap::with_capacity`\nare only implemented for the `RandomState` hasher, so using `Default` to\nget the hasher is the next best option.\n\n## Using FNV in a `HashSet`\n\nSimilarly, `FnvHashSet` is a type alias for the standard library’s `HashSet`\nwith FNV.\n\n```rust\nuse fnv::FnvHashSet;\n\nlet mut set = FnvHashSet::default();\nset.insert(1);\nset.insert(2);\n\nset = FnvHashSet::with_capacity_and_hasher(10, Default::default());\nset.insert(1);\nset.insert(2);\n```\n\n[chongo]: http://www.isthe.com/chongo/tech/comp/fnv/index.html\n[faq]: https://www.rust-lang.org/en-US/faq.html#why-are-rusts-hashmaps-slow\n[graphs]: https://cglab.ca/~abeinges/blah/hash-rs/","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:10:1644","0:20:1656","0:21:1658","0:24:1662"],"is_stripped":false}},"5:5382:32513":{"id":"5:5382:32513","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:279:2342","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6999:2960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:279:2342","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6999:2960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2533-0:10:1644":{"id":"b:2:2533-0:10:1644","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2506:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2535:693"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11926:25918":{"id":"2:11926:25918","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9783:221","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9783:221","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:12022:31859":{"id":"2:12022:31859","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11874:418","self::pattern":"2:11609:8832"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:8828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11614:8828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11629:8829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12032:31861":{"id":"2:12032:31861","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4527:31861"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:43513:8843","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11917:31839":{"id":"2:11917:31839","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:12016:31857":{"id":"2:12016:31857","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11874:418","self::pattern":"2:11609:8832"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:8828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11614:8828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11629:8829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5383:9149":{"id":"5:5383:9149","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7250:223"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7250:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:8828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5386:32514":{"id":"5:5386:32514","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7250:223"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7250:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:8828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5401:20829":{"id":"5:5401:20829","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12031:20832"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7250:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11949:2416":{"id":"2:11949:2416","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41253:178","prim@char":"1:11874:418","self::pattern":"2:11609:8832"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41251:180","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:8828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12002:31853":{"id":"2:12002:31853","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11934:1652":{"id":"2:11934:1652","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:43200:2802","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11990:31848":{"id":"2:11990:31848","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11609:8832","`DoubleEndedIterator`":"2:7194:120","prim@char":"1:11874:418","str::rmatch_indices":"2:11993:31849"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:43364:8847","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:8828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11939:28889":{"id":"2:11939:28889","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:43506:8833","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12027:20826":{"id":"2:12027:20826","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:13":{"id":"0:13","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[91,0],"end":[97,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2580:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:14:60"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11919:25919":{"id":"2:11919:25919","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11891:1492"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:18:1650":{"id":"0:18:1650","crate_id":0,"name":"finish","span":{"filename":"lib.rs","begin":[110,4],"end":[112,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12010:21800":{"id":"2:12010:21800","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11874:418","self::pattern":"2:11609:8832"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41251:180","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:8828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11975:25956":{"id":"2:11975:25956","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11874:418","str::splitn":"2:11972:25954","self::pattern":"2:11609:8832"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:43336:8819","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:8828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11614:8828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11629:8829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11924:25917":{"id":"2:11924:25917","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9783:221","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9783:221","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11910:31836":{"id":"2:11910:31836","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2532:2369":{"id":"2:2532:2369","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2506:132"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11932:28888":{"id":"2:11932:28888","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11874:418"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:43184:8839","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11929:31841":{"id":"2:11929:31841","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11880:1394","crate::ops::IndexMut":"2:2974:3203","str::slice_unchecked":"2:11928:31840"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:12007:31856":{"id":"2:12007:31856","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11874:418","self::pattern":"2:11609:8832"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:8828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12029:20830":{"id":"2:12029:20830","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11931:25942":{"id":"2:11931:25942","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11930:25941"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5399:3333":{"id":"5:5399:3333","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7250:223"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7250:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5398:32517":{"id":"5:5398:32517","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:279:2342","`String`":"5:7250:223"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:279:2342","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6999:2960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7250:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5400:20828":{"id":"5:5400:20828","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12030:20831"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7250:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2547:127":{"id":"2:2547:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:31893:3489","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"2:11916:25906":{"id":"2:11916:25906","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11176:8836"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3310:1484":{"id":"2:3310:1484","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:39195:8907","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11938:31842":{"id":"2:11938:31842","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:43478:8846","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12000:31852":{"id":"2:12000:31852","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2244:20734":{"id":"2:2244:20734","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11984:2296":{"id":"2:11984:2296","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11609:8832","`DoubleEndedIterator`":"2:7194:120","prim@char":"1:11874:418","str::matches":"2:11984:2296"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:43418:8849","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:8828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:14:60":{"id":"0:14:60","crate_id":0,"name":"default","span":{"filename":"lib.rs","begin":[94,4],"end":[96,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11908:810":{"id":"2:11908:810","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11874:418"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12035:31862":{"id":"2:12035:31862","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4525:31862"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:43531:8844","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11922:25916":{"id":"2:11922:25916","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41253:178"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41251:180","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9783:221","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9783:221","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11933:28934":{"id":"2:11933:28934","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11874:418"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:43190:8838","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11935:28508":{"id":"2:11935:28508","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11936:28503"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:43488:8835","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11936:28503":{"id":"2:11936:28503","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11935:28508"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:43497:8834","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2242-0:10:1644":{"id":"b:2:2242-0:10:1644","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2682:2334","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2236:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2244:20734"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11981:31846":{"id":"2:11981:31846","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41251:180","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:8828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11614:8828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11629:8829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3308-0:10:1644":{"id":"b:2:3308-0:10:1644","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2682:2334","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3306:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3310:1484"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:5381":{"id":"5:5381","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5382:32513","5:5383:9149","5:5386:32514","5:5389:32515","5:5397:32516","5:5398:32517","5:5399:3333","5:5400:20828","5:5401:20829"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5397:32516":{"id":"5:5397:32516","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7250:223"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7250:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11957:23565":{"id":"2:11957:23565","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11609:8832","`DoubleEndedIterator`":"2:7194:120","prim@char":"1:11874:418","str::split_whitespace":"2:11935:28508","str::rsplit":"2:11963:25952"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:43214:3311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:8828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12025:31860":{"id":"2:12025:31860","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11570:126","`FromStr`":"2:11569:3472"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:41395:209","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:11569:3472","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11569:3472","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5389:32515":{"id":"5:5389:32515","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7250:223"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7250:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2542:127":{"id":"2:2542:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2513:236","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"0:21:1658":{"id":"0:21:1658","crate_id":0,"name":"FnvHashMap","span":{"filename":"lib.rs","begin":[132,0],"end":[132,58]},"visibility":"public","docs":"A `HashMap` using a default FNV hasher.","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"HashMap","id":"1:731:141","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"resolved_path","inner":{"name":"FnvBuildHasher","id":"0:20:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"0:24:1662":{"id":"0:24:1662","crate_id":0,"name":"FnvHashSet","span":{"filename":"lib.rs","begin":[136,0],"end":[136,52]},"visibility":"public","docs":"A `HashSet` using a default FNV hasher.","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"HashSet","id":"1:1433:143","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"resolved_path","inner":{"name":"FnvBuildHasher","id":"0:20:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"0:19:1651":{"id":"0:19:1651","crate_id":0,"name":"write","span":{"filename":"lib.rs","begin":[115,4],"end":[124,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["bytes",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:17":{"id":"0:17","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[108,0],"end":[125,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["write_u8","write_i128","write_i16","write_u128","write_u16","write_str","write_isize","write_i32","write_usize","write_u32","write_length_prefix","write_i64","write_i8","write_u64"],"trait":{"name":"Hasher","id":"2:9324:144","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:18:1650","0:19:1651"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2239-0:10:1644":{"id":"b:2:2239-0:10:1644","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2682:2334","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2233:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2241:2282"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2529-0:10:1644":{"id":"b:2:2529-0:10:1644","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2506:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2503:148","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2532:2369"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2544-0:10:1644":{"id":"b:2:2544-0:10:1644","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2503:148","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2513:236","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2547:127","2:2548:1470"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2675:219-0:10:1644":{"id":"a:2:2675:219-0:10:1644","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2675:219","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11920:25915":{"id":"2:11920:25915","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41253:178"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41251:180","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9783:221","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9783:221","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11928:31840":{"id":"2:11928:31840","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11880:1394","str::slice_mut_unchecked":"2:11929:31841","crate::ops::Index":"2:2970:3202"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11930:25941":{"id":"2:11930:25941","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11931:25942"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12013:25961":{"id":"2:12013:25961","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11874:418","self::pattern":"2:11609:8832"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41251:180","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:8828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11614:8828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11629:8829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12019:31858":{"id":"2:12019:31858","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11874:418","self::pattern":"2:11609:8832"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:8828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2241:2282":{"id":"2:2241:2282","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11940:25958":{"id":"2:11940:25958","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11874:418","self::pattern":"2:11609:8832"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:8828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11953:2375":{"id":"2:11953:2375","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41253:178","prim@char":"1:11874:418","self::pattern":"2:11609:8832"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41251:180","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:8828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11614:8828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11629:8829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2535:693":{"id":"2:2535:693","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11946:25960":{"id":"2:11946:25960","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11874:418","self::pattern":"2:11609:8832"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:8828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11614:8828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11629:8829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11907":{"id":"2:11907","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11908:810","2:11909:2376","2:11910:31836","2:11911:31837","2:11913:31838","2:11916:25906","2:11917:31839","2:11918:313","2:11919:25919","2:11920:25915","2:11922:25916","2:11924:25917","2:11926:25918","2:11928:31840","2:11929:31841","2:11930:25941","2:11931:25942","2:11932:28888","2:11933:28934","2:11934:1652","2:11935:28508","2:11936:28503","2:11937:23566","2:11938:31842","2:11939:28889","2:11940:25958","2:11943:25959","2:11946:25960","2:11949:2416","2:11953:2375","2:11957:23565","2:11960:25950","2:11963:25952","2:11966:31843","2:11969:31844","2:11972:25954","2:11975:25956","2:11978:31845","2:11981:31846","2:11984:2296","2:11987:31847","2:11990:31848","2:11993:31849","2:11996:31850","2:11998:31851","2:12000:31852","2:12002:31853","2:12003:31854","2:12004:31855","2:12007:31856","2:12010:21800","2:12013:25961","2:12016:31857","2:12019:31858","2:12022:31859","2:12025:31860","2:12027:20826","2:12028:25698","2:12029:20830","2:12030:20831","2:12031:20832","2:12032:31861","2:12034:3150","2:12035:31862"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11966:31843":{"id":"2:11966:31843","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11609:8832","str::split":"2:11957:23565","prim@char":"1:11874:418","`DoubleEndedIterator`":"2:7194:120","str::rsplit_terminator":"2:11969:31844"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:43264:8852","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:8828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12004:31855":{"id":"2:12004:31855","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11874:418","self::pattern":"2:11609:8832"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:8828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11614:8828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11634:8827","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12031:20832":{"id":"2:12031:20832","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12030:20831":{"id":"2:12030:20831","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11978:31845":{"id":"2:11978:31845","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41251:180","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:8828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2539-0:10:1644":{"id":"b:2:2539-0:10:1644","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2513:236","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2509:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2542:127","2:2543:1471"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:20:1656":{"id":"0:20:1656","crate_id":0,"name":"FnvBuildHasher","span":{"filename":"lib.rs","begin":[128,0],"end":[128,56]},"visibility":"public","docs":"A builder for default FNV hashers.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"BuildHasherDefault","id":"2:9364:1639","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"paths":{"2:9249:29025":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"17:11282:19135":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"16:4789:15963":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:10402:16564":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:953:3168":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"5:2905:31303":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"18:574:34528":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:43803:8871":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:8948:3034":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:6405:2708":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:41608:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:20671:3567":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"2:2752:9160":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:7565:3148":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:4244:206":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:2757:9159":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"5:1041:31637":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:40163:9120":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"6:5935:14084":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"16:8072:16300":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:20507:28353":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"16:5797:2882":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:42315:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"1:8147:3309":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:9670:16436":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:12224:19664":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:12236:19665":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:420:15288":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:11641:19155":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:2206:3261":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"6:4999:13444":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"6:4743:13414":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:2255:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:2503:148":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"6:4478:13389":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"16:6506:16261":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"11:1859:3174":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"6:4667:13407":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:43792:8870":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"16:6390:16256":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:46269:3603":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"6:5022:13446":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"5:3128:31283":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:44191:3698":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:22942:3010":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"16:7859:16297":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:8975:21715":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:2845:9176":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:2915:2337":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:12467:139":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"16:4872:15974":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"5:3149:3176":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:5906:2696":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:11084:3520":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"5:210:2595":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"16:2378:15315":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"6:4439:13384":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:21773:28897":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:13082:20406":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:9545:16414":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"5:1462:3186":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"5:4335:2628":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:3203:3330":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:643:3157":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:43041:8798":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"14:221:15256":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:41648:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:6668:10781":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:7847:3320":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:13879:20466":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:11628:19154":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"16:6327:2905":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:12461:19680":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"5:1212:3172":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:21354:28149":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:844:2963":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"16:7697:2924":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:10967:16392":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:2763:9162":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"16:5346:16232":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:4571:23213":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"16:8214:16307":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:8573:16376":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:44204:160":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:13516:20444":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"16:6981:16274":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"11:1561:15241":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:11442:3049":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"5:3546:2964":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"18:719:20490":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:13812:20461":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:2773:3554":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"6:5747:14071":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:20999:3562":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:3444:27933":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"6:6569:9806":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:11891:1492":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:4753:388":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"0:24:1662":{"crate_id":0,"path":["fnv","FnvHashSet"],"kind":"typedef"},"18:96:20479":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"18:636:34545":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:12372:19674":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:1048:3170":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"5:782:2599":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:12449:19679":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"18:0:2191":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:12592:19689":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"11:2212:33426":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:3223:8760":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:20901:3565":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:43513:8843":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:3675:3354":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:13411:20432":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"16:6376:2906":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:43488:8835":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"7:32:15091":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"16:5724:16240":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"16:6293:16252":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:8886:3504":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:39973:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"18:548:140":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:11484:19144":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"5:2115:2969":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:42570:3020":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"16:6336:16253":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"6:1576:10845":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:676:3158":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"6:6047:14094":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:10428:16576":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"16:5071:16029":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:12226:28483":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:8312:3446":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:43214:3311":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:40213:9131":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:13499:20442":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:8831:3517":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:6539:2389":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:9641:16424":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:21790:28952":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"18:113:20480":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:39030:199":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:247:34509":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"5:7347:2643":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:1812:3190":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:7609:2719":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"17:13865:20465":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:11339:2820":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:2686:224":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"6:4377:13377":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:45555:3596":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:41728:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:867:2381":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:1621:587":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:22138:177":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"2:11569:3472":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"16:7042:33729":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"6:4307:13372":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:40534:28958":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"16:2594:15324":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:10936:2819":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"6:579:9936":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"16:5779:2878":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:45525:3590":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:2738:9139":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"16:6307:2901":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"11:60:33439":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:45776:28879":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"11:821:3165":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:10334:2784":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"11:1852:2586":{"crate_id":11,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"6:7544:13605":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"6:4449:13385":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:39812:3151":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"6:7275:14887":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:12894:20394":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"16:6662:16265":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"16:8109:16302":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:1568:2620":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"5:5830:9524":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:9105:8765":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"5:4320:244":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:3142:16499":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:43649:8865":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:43282:8851":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:6628:9118":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"5:3774:2597":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:4875:13431":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:43941:9309":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:8164:3344":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:12126:19659":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:12033:19652":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:2862:209":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"1:7652:3160":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:11873:935":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:1583:3175":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:11721:19637":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"6:5862:14080":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:43436:8850":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:21827:28874":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"11:840:3167":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"16:5367:15284":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"6:4947:13438":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:9113:8772":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:10491:16548":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"16:5741:16241":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:30105:3012":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:1947:16432":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"6:5077:13452":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:11090:16396":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:20681:9190":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"17:12072:19655":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:10798:16387":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"14:7:15246":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"16:7509:16286":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:10735:16588":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"6:6002:14091":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"16:3446:15345":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:10941:2723":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"6:4751:13415":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"11:1144:3173":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:7839:23232":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:8075:3043":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"5:6243:2620":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"11:1091:15237":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:47357:8736":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"16:7743:2925":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:3631:2381":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"6:5880:14082":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"5:7173:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"6:4726:13412":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:9380:2717":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:4134:2981":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:10219:23041":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"6:532:9929":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:2864:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:2952:8761":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"6:4836:13426":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:1978:16456":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"6:5870:14081":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:45879:3619":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:3460:3307":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:41768:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:10125:16511":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:11486:15272":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:9773:3383":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"5:688:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:9562:2672":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"2:42523:3018":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"6:62:9550":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"6:4784:13419":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:45286:3656":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:44140:210":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:43714:8867":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:10996:3486":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"6:6814:14513":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"16:6474:2908":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"5:1350:2963":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:2339:3265":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"5:7061:197":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:4091:3398":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:10228:8819":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:10062:8810":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:11479:15272":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:11845:3161":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:3672:3355":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:11203:21718":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:44978:3617":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:9469:16408":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:11924:19646":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:6097:2704":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:39891:8844":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:12399:106":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:42531:2321":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:12522:3193":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"16:6935:16272":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:10569:16547":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:40063:3260":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"17:11391:2833":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:42017:8766":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:41202:3348":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:10104:2809":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:4120:3401":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"18:531:20502":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"11:2219:2331":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"18:481:20499":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:6005:2700":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:1577:3174":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:386:16364":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:10663:21687":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"16:5643:16237":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:40565:2667":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"17:12510:19683":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:47293:8732":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:9534:16415":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"5:4136:2625":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:2308:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"6:6587:14502":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:45479:3584":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:8741:3486":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"18:671:20494":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:14:1651":{"crate_id":2,"path":["core","write"],"kind":"macro"},"17:1787:16438":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:9375:3282":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"2:3924:2625":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:11446:19141":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:22369:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"6:4609:13402":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"13:110:33489":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:6081:2683":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"16:5594:16234":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"6:6057:14095":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:13678:20452":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"16:6904:2913":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"6:6785:14511":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"16:2808:15333":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:47051:3632":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"5:3687:3187":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"6:6628:10804":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:4637:3407":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:40256:2991":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:43933:9304":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"1:6365:3162":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:11432:8823":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:4035:8756":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"16:6671:15262":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:11800:19640":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:4325:8931":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"16:7467:16282":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"6:5974:14088":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:3068:3204":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:8134:2802":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"17:9895:16457":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:1783:3208":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:1561:2963":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:11653:19156":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:9275:34513":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:2213:3262":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"1:554:3133":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:4898:3442":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"5:7264:8874":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:9796:16437":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"16:7652:197":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:12046:19653":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:40224:9124":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:2584:115":{"crate_id":2,"path":["core","default","Default"],"kind":"proc_derive"},"1:1785:3209":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1:3453:3287":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"16:2764:15331":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"5:5484:2636":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"16:5386:2779":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:39046:197":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:888:2966":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:9478:16423":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:8769:3488":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"6:4911:13434":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:10747:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"5:1412:2966":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:8256:16350":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"6:1709:10857":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:40295:9128":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"6:4423:13382":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:39236:8916":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"16:4037:15523":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:11573:19150":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:8235:3406":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:8753:2798":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:2303:187":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"6:4641:13405":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"5:6574:2636":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"16:5677:16239":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"6:568:9934":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"16:6361:16255":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:20475:28145":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:7464:22222":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:10650:3279":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"6:547:9931":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:7855:3042":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:1080:3173":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:11037:16394":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:731:141":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"6:123:9605":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:9101:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"6:7532:13603":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:4466:13387":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:9424:16405":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"16:7543:2917":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"6:5959:14086":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"6:1668:10853":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:1589:3176":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:8472:2963":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"17:10691:16585":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"16:6146:193":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"16:6022:16248":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:10823:16388":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"6:1622:10850":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:10840:21723":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:3876:3366":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:8140:3311":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:3146:134":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:8777:2963":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:43030:8808":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"5:2904:2438":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"5:962:2597":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:12915:20396":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:39134:202":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:10100:8824":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:22435:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"16:2470:15319":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:2747:3555":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"16:5571:16233":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:2682:2334":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:45698:28935":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:13015:20400":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:2345:188":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"5:7157:2332":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"16:5616:16235":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:3306:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"16:7317:33848":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:11890:739":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:42306:71":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"6:5058:13449":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"2:45431:3636":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:10885:2816":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"6:7578:15075":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:11895:1488":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"17:13477:20440":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:12483:19681":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:43080:8797":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"6:1532:10840":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"6:7230:9883":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"5:0:285":{"crate_id":5,"path":["alloc"],"kind":"module"},"6:5065:13450":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"11:1843:2381":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"6:4472:13388":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:6675:28664":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:21018:3383":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"6:1546:10842":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:44148:194":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:3131:9178":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"18:582:3013":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"5:5238:8791":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"9:174:2951":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"6:5947:14085":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:7564:3383":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:4593:8942":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"11:2192:33428":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"6:4619:13403":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:8330:3465":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"6:4331:13374":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:11188:21730":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:47449:8740":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:46911:3626":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:39959:8948":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:2887:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:9055:3292":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"16:4728:15950":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"6:554:9932":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:20893:3383":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:2506:132":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"6:5785:14075":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:41369:3451":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:21863:3361":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"6:4932:13436":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:39222:28942":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"17:9512:16417":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:11372:2826":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:9826:16431":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:4840:3432":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:562:16366":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:21877:3360":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:7453:16366":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:4732:2694":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"16:4540:15882":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:7165:2341":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:6481:3509":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"16:7478:16283":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:41319:2964":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:11614:8828":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:9596:16418":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"16:8269:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:10412:3330":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"2:3497:2620":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:12410:2683":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"1:8117:2985":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:43336:8819":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:11888:742":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:2509:237":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"1:11878:311":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:41488:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:13121:20407":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:11585:19151":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"16:3872:15406":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:44009:3557":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:43093:8813":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"6:4890:13432":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"17:9876:16483":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:2382:2197":{"crate_id":1,"path":["std","io"],"kind":"module"},"6:4590:13401":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:41237:3350":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:9036:3520":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:11893:1490":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"16:4510:15876":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:12419:19677":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:8799:3516":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"6:4882:1000":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"6:1682:10854":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:5559:2696":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:9488:16421":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:39879:8956":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"6:6151:14124":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:22303:3139":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"6:1609:10848":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"4:0:2181":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"11:1873:3176":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"5:2911:31306":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:42540:144":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:355:3146":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:13625:20447":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"6:4827:13425":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"5:5034:2634":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:40556:3335":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:10415:3326":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"17:8389:16370":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:2341:3266":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:13426:20434":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:12622:2813":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"11:1540:15240":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:8797:2995":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:0:1386":{"crate_id":1,"path":["std"],"kind":"module"},"18:652:34528":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:13344:20426":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:10815:3228":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:11634:8827":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:12192:135":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:10685:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"11:2076:3171":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:9096:111":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:46659:3620":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:8213:3405":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:11884:641":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"1:1844:3224":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:20447:3013":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"16:5418:33535":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:7686:3228":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"18:564:2770":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"16:3300:15344":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"2:3357:8899":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"1:10307:3485":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"16:8047:16299":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:8040:3283":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"17:10052:16512":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:13763:20457":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:45231:3595":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:43122:8815":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:10416:16575":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"6:4404:13380":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"16:5920:2851":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:13316:20423":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"6:4790:13420":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:45745:29024":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:13233:20416":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"5:2076:2613":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:40265:9126":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:43531:8844":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"6:4821:13424":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:8979:34511":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"2:9071:131":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"5:6092:3700":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"6:653:9985":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:13399:20431":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:39933:8951":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:3186:8759":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"9:502:15123":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"16:3640:15347":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"16:3225:15343":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:43001:8805":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:11785:19639":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:8310:16368":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"11:1839:2963":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"16:5402:2780":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:8548:16375":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"5:264:2597":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:3777:3356":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"5:1611:2597":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:11471:19143":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"6:488:9924":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:45799:28959":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"5:4046:2964":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:3163:3328":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"5:779:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"11:1866:3175":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"6:474:9922":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:12358:19673":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:2816:9170":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"6:1650:10851":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:8403:3467":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"6:1721:3393":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:8905:106":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:47308:8733":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:8208:3404":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:2142:588":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"16:2967:15339":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:12194:19663":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:5435:3482":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"17:11891:19644":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:40112:2985":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:13356:20427":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:2933:16494":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"11:757:2620":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"6:6016:14093":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"6:4767:13417":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:4678:3387":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:8629:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:20488:28354":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:10000:16530":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:11821:16537":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:1821:3218":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:43953:9310":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:2460:3383":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"6:6553:10777":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:3171:29729":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:47319:8734":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:12205:150":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:922:2967":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:8911:3131":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"5:4817:203":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:11234:19133":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:40246:9125":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:2580:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1:8900:3031":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:30145:9152":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:43506:8833":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"6:1539:10841":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:530:2686":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:11609:8832":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"5:7275:8875":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"5:6593:2648":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:10023:8823":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:11881:1474":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:45130:3629":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:7658:3029":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"1:11885:642":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:49255:3579":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"2:43620:8863":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:8909:2802":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:1433:143":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:2545:2673":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"5:1077:31638":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:47387:8738":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:9111:193":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"5:862:2604":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"6:6776:14510":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:3165:3329":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:9994:23043":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"1:11230:23220":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:3934:3371":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:4251:3403":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"6:1614:10849":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:43778:8869":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"5:1994:3187":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"11:1524:15239":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:9453:16407":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:6903:2711":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"9:445:15120":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:9031:218":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:7217:2340":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:5063:190":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"1:8068:2992":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:857:2964":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:2500:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"5:3162:31278":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"6:500:9926":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:10202:3481":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:45024:3582":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:6931:2699":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:20849:3561":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"6:7520:13601":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:5017:23323":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:10135:8817":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"6:6848:14516":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"18:80:20478":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"5:2915:31305":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:5689:3503":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:8420:16371":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:2836:9174":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"5:4913:2625":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"16:7293:16278":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:43949:9312":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"16:5104:16038":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"6:6800:14512":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"14:31:15246":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"6:1736:10860":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:11321:9316":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:43937:9307":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:46033:3637":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:12098:19657":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:501:2613":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"17:13659:20450":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:10377:16498":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:10935:2722":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"16:4596:15890":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:11434:19140":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:8931:2803":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:12770:20391":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:47410:8739":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"5:6999:2960":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"14:215:15255":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:45078:3618":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:9113:23225":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"1:3906:3368":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:41808:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"16:2862:15335":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:7814:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:9579:2673":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"17:10897:16391":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:22237:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"17:13777:20458":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"9:52:2936":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"6:5967:14087":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:8971:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"5:7069:2973":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:13385:20430":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:10645:23229":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"17:13257:20419":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"11:0:2185":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"16:2298:15286":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"16:4818:15968":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:8201:3348":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:4171:3402":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:11600:19152":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:3870:3367":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:9696:2804":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"5:1980:3042":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:9566:16382":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"16:0:2189":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:46453:3586":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"16:4969:15999":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:3158:8920":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:4107:3400":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"6:4492:13391":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"5:3621:2597":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:5755:14072":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:41454:2381":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"1:6534:3511":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"5:679:230":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"16:6132:16249":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"16:8090:16301":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:41387:192":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"16:6943:16273":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:13506:20443":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:13309:20422":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"5:2907:31247":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"5:3123:3175":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:2729:9135":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"16:6767:16268":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"5:3157:3174":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:11220:16596":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"5:6760:2654":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"5:3672:3042":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:13842:20463":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"11:665:2381":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:12388:19675":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:12923:20397":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:11623:8830":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:43382:8848":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"16:8180:16306":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:9038:34520":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:11386:3356":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"16:5630:16236":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:41848:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"6:1519:10838":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:5381:3481":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:11065:21710":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"16:7016:33846":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"5:5190:2597":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"11:652:2964":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"16:7711:16292":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:9218:2784":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"14:160:15246":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:8729:185":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:41060:154":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"15:198:15265":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:4676:3386":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:13612:20446":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:9359:2319":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"6:4952:13439":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:526:9928":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"5:2086:31249":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"6:6706:14507":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"5:4004:2597":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:11454:23192":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:22402:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:11896:788":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"6:6821:14514":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:1919:16471":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:3982:3374":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:5350:3479":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"16:7596:16289":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:12331:19671":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:3928:3370":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:12019:19651":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:2974:3203":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:9866:16451":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:11397:9317":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:44183:3697":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:39869:8955":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:13721:20455":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"5:5814:2634":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:11556:19149":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:21889:3363":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:2794:9169":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"6:6110:14122":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:21811:28913":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:9653:16450":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:39940:8952":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:21027:3001":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:9871:21326":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"17:13639:20448":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"6:4653:13406":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:43318:8821":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"16:2357:15314":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:2697:2979":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"6:4719:13411":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:42333:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"16:6728:16267":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:2900:3184":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:11615:19153":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"6:5717:14011":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:8153:3353":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"16:7519:16287":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:6129:3035":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:2594:127":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"1:4755:3381":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:10015:16531":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:3435:3241":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"16:7437:16280":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:13332:20425":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:9312:16383":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:40053:2661":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"16:2931:15338":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:9265:16382":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:2911:2336":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"6:5015:13445":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"0:0:2075":{"crate_id":0,"path":["fnv"],"kind":"module"},"2:1724:9202":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"6:6545:9973":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:21629:29004":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:13159:20410":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:13443:20436":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"6:5829:14039":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"16:6793:16269":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:11138:2724":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"17:11422:19139":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:40143:9119":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"6:6598:14503":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:1738:29574":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"17:12980:20399":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:9853:16482":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:2675:219":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"1:8279:3385":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:45623:3657":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"9:0:2183":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"5:279:2342":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"16:8129:16303":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"6:1525:10839":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:45046:3588":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:43813:8872":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:11236:20986":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:2535:2690":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"11:393:33440":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"5:4166:2625":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:20715:3573":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"6:4431:13383":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:44021:9324":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"17:10505:16578":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:13564:20445":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:30139:8894":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:0:496":{"crate_id":2,"path":["core"],"kind":"module"},"6:6691:14505":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:2742:3553":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:41146:3016":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"16:5305:16215":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:22468:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:43172:8842":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:21682:3004":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"16:7757:16293":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:3968:3372":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:4399:2983":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:926:2968":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:10527:16579":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"11:991:3170":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:42024:8774":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"16:5886:16244":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:40281:9127":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:618:3153":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"5:6691:243":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:11047:3292":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"17:9322:34496":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"18:707:8830":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"6:1908:11004":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"5:5794:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:11355:2824":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"11:1879:3177":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"16:3063:15342":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:41528:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:10068:16533":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"5:814:2602":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"16:6321:2903":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:8084:3284":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:6722:9104":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"1:1982:184":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"6:7538:13604":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"16:5032:16014":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:10675:3041":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"5:1381:2381":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:9109:8775":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:20820:3575":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"16:6179:2883":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"16:7259:3450":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:8204:3452":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"16:6236:2868":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:43945:9308":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:8723:3485":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:7801:3280":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:39015:9177":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"16:2720:15329":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:3978:3373":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"3:229:209":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:9228:34521":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:9364:1639":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:47159:3604":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:4425:2984":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:13053:20404":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:2569:3312":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:13461:20438":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"16:7411:2865":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"15:180:15264":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"6:5773:14073":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:10705:3284":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"6:6578:14501":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:7156:151":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"11:452:141":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:12158:19661":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:4674:3382":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:42250:29576":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:6328:23334":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"2:40204:9123":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:10270:16495":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"5:6603:2650":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"1:11877:1048":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"6:4803:13422":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:12282:19667":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"0:20:1656":{"crate_id":0,"path":["fnv","FnvBuildHasher"],"kind":"typedef"},"17:10635:2812":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:4573:23215":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"6:5798:14076":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:11502:19145":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:11155:3036":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:11894:1491":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"5:1715:2586":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"6:5816:14078":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"16:2642:15326":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:9577:16420":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:8785:3519":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:11301:2726":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:9683:16435":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:41166:28910":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:12059:19654":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"5:6175:2640":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"16:6061:15285":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:2811:9168":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:11060:2813":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:10649:16583":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:585:3149":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"0:10:1644":{"crate_id":0,"path":["fnv","FnvHasher"],"kind":"struct"},"17:12646:19692":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:41568:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"6:4398:13221":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:40305:9116":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"13:226:2933":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:13033:20402":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:8310:8828":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:13066:20405":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:20679:28792":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"17:242:34512":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"18:699:2773":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"13:0:2180":{"crate_id":13,"path":["std_detect"],"kind":"module"},"6:1555:10843":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:3127:23472":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:8380:3466":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"16:2572:15323":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:12607:19690":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:2355:3270":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:42941:28857":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:10828:3482":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"17:11109:16397":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:4849:3433":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"11:1009:3171":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"19:0:1030":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:41888:3017":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:9617:16413":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"16:4624:15894":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:2827:2693":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"16:6520:16262":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:5495:3483":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:7690:21937":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"6:4527:13395":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"16:4400:15838":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:11899:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"16:5963:16246":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"16:2448:15318":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"11:97:33441":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:46989:3598":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"9:325:15174":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:10721:16552":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:8205:2993":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"16:7103:16277":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:3266:16517":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:3369:8903":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"1:8253:3435":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:7549:9112":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:5941:9132":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:45179:3583":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"11:867:3169":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:2737:9138":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:1658:1086":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:40527:9106":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:6232:205":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"6:6116:13286":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:13469:20439":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"5:1365:2964":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"16:5655:16238":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"5:6362:2381":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:43232:8817":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:3350:2625":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"14:165:15247":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"16:4757:15955":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:38968:8762":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"16:2668:15327":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:2357:3271":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"6:5032:13447":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:39855:8953":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"11:1688:143":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"11:1035:3172":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:40575:9109":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:8651:2779":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:9103:8766":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:9931:2963":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:13791:20459":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:41251:180":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:10142:16536":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"9:481:15119":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"6:4553:13398":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"18:660:20493":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:25752:3011":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:22171:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:43067:8796":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:4176:2982":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"1:10409:3328":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:45379:3624":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:10283:16496":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"10:36:33425":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"6:5779:14074":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:20780:3568":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"17:12634:19691":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:9839:16430":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:8858:2801":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:41225:3349":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:31893:3489":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"16:6218:16251":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:11008:3487":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"5:7053:2381":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:41395:209":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:11162:9269":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"17:13419:20433":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"6:4416:13381":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"16:2546:15322":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"6:587:9937":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"6:1588:10846":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"6:6685:14504":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:11146:9267":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:8227:3353":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:30161:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"6:7491:13597":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:39409:25834":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"2:7194:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:41327:2381":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"17:13249:20418":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:12433:19678":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:2781:9164":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:9986:16485":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:41100:3346":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:12902:20395":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"6:4521:13394":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"11:859:3168":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:8096:3288":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"17:9350:34508":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"5:3520:162":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:6548:2709":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"16:2319:15313":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"16:3749:15355":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:9886:16458":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:12496:19682":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"16:6254:2898":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:10080:16534":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:9734:16433":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:42515:2322":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"9:388:15121":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:8489:3471":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:3287:3316":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"17:10478:16549":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:911:2586":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"16:6442:16259":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"6:4392:13379":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:2339:181":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"1:10715:21707":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"16:7635:16291":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:4503:3425":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:2822:9171":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:2918:2338":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"5:7190:3245":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"6:7555:13606":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:2806:9167":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:487:16365":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:8918:21698":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"6:6755:14509":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:4732:13413":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:9178:3224":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:1985:183":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:43184:8839":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:3141:233":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"16:7669:2921":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:9316:140":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"17:10545:16393":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:30737:3013":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"11:2204:33430":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:10580:16580":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:40583:9111":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:9107:8774":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:10660:2813":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"2:43158:8845":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:31933:9224":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:40550:9108":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:12959:20398":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"16:6544:2909":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"6:6024:32720":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"16:7449:16281":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:5482:9122":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"5:4206:2963":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"12:0:2186":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:42031:8775":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:10615:16573":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:42562:3019":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:9091:23302":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"6:7503:13599":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:41688:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"5:3087:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:7670:3227":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"11:2060:3170":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:11897:1545":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:21765:28946":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:20460:28145":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:3990:3376":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"16:2337:2843":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:21738:3359":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:4012:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:12403:19676":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:39090:201":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:8257:3437":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"6:6136:14123":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:41446:2964":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:10256:8820":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:39156:2325":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"11:638:2963":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:1768:609":{"crate_id":1,"path":["std","env"],"kind":"module"},"16:8256:16308":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:43522:3151":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"16:3047:15341":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:10026:16532":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"6:6830:14515":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:3205:3331":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"5:7090:2381":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:11879:1364":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:46003:3631":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:7583:3136":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:42010:8765":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:13101:2834":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:3920:3369":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"6:5051:13448":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"5:7098:2381":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"16:3585:15346":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:8420:3468":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"6:4991:13443":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:30233:29263":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:41189:3357":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"17:9933:2792":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"18:644:34528":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:44246:28994":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"6:482:9923":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:1572:2586":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"1:11898:1123":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:11946:19647":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:11410:19138":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:7545:3182":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:6582:216":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"6:5843:14040":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"16:4480:15870":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:45249:3601":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:3152:8921":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:8219:3396":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:9772:16439":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:11874:418":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"5:5708:2620":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:45209:3589":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:43741:8868":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:12293:19668":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:11176:8836":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:11365:3354":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"6:4773:13418":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"16:7588:16288":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:7272:158":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:2801:9166":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"16:2830:15334":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"16:5693:2873":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:10670:16574":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"5:632:31159":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:936:3166":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"11:399:33436":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"5:5903:2625":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:2692:227":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:43965:9306":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:12085:19656":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"6:4288:13370":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:9108:34507":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"6:4797:13421":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:13181:20412":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:46239:3597":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:638:3156":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"16:535:2855":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"5:7220:3243":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:12253:191":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"1:10131:3491":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"11:1634:2591":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:39215:16307":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"5:1403:2965":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:480:2685":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:9098:16379":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:10840:16389":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"11:1050:15236":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:10712:16587":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:12318:19670":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:22270:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"11:783:2590":{"crate_id":11,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"2:2970:3202":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"1:8793:2381":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"6:5857:14079":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"16:6164:33852":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"5:1431:2967":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:21698:2974":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:2367:3276":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:39907:8843":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:9628:16412":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:3396:3285":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:12522:19684":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:2840:9175":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:3055:3336":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"1:11875:1508":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:8490:16373":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:47282:8731":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"6:4629:13404":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:39827:8954":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"16:5557:2872":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"11:359:2584":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:43846:8854":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"11:1126:15238":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:7930:3040":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:2832:9173":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:1895:3239":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:43478:8846":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:40134:2987":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"16:6558:16263":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"5:3183:3177":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:5175:189":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:21576:29029":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"6:7485:13596":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:3244:3327":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:42260:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"17:12345:19672":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:11902:19645":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:12259:19666":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"16:55:15282":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"2:45000:3622":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"8:0:2182":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:9480:2669":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"16:5847:16243":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:12441:204":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"11:2198:28154":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:4099:3399":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"6:562:9933":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:13651:20449":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:7586:30795":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:44221:8751":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:1062:3171":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"16:7767:16294":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"6:7526:13602":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"16:6868:2869":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"11:279:33433":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:1071:3172":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:29916:3358":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:11879:19643":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:40153:2988":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"16:6400:16257":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:959:3169":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"6:494:9925":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:2732:2335":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:39818:8923":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"16:5708:2876":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"6:541:9930":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"11:828:3166":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"6:4344:13375":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:9178:16381":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"5:6735:2640":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"6:4681:3365":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:11520:19146":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:13145:20409":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"6:1514:10837":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"6:7443:15046":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:12113:19658":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:39990:29020":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:42278:109":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"17:10589:16581":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:39926:8950":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:10455:2719":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"18:624:34536":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:11319:19137":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:2204:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:4:1013":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"5:1442:2968":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:8667:2780":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:39899:3151":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"6:5900:14083":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:11861:19642":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"10:44:2935":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:39914:8949":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"5:7039:31269":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"5:1196:3170":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:20915:3001":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:43190:8838":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:8683:2795":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"6:4865:13430":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"5:7233:3244":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"6:6008:14092":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:41378:9254":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"6:1752:10861":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"16:8142:16304":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:9074:3552":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:45957:3625":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:39188:9179":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:47262:8729":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"6:0:815":{"crate_id":6,"path":["libc"],"kind":"module"},"16:8170:16305":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:9557:2784":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:9368:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"2:2461:8965":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"14:40:19135":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"5:879:2963":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"6:5809:14077":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:7663:3028":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"2:20505:28351":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:7542:3179":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"5:7031:2608":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"18:755:20497":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:4986:23323":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:5552:205":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:12138:19660":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:2152:9190":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"2:9783:221":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"14:187:15254":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:11844:19641":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"6:4757:13416":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:9324:144":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:10626:16582":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"11:1847:2620":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"16:6717:15261":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"6:4851:13428":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"16:8156:2927":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:2828:9172":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:5243:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:8159:3352":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:11161:3492":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"18:727:2775":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:10354:16500":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"9:234:3466":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:11770:19638":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:41336:3450":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:43969:3000":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:9917:2807":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:3610:3351":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:13376:20429":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:11532:19147":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:6369:3505":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:4069:25480":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:8462:3469":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"6:4980:13442":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"5:3752:2586":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"1:10695:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:9980:3311":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"5:3116:2963":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:13194:20413":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:47273:8730":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"6:4509:13393":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:4800:794":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:47372:8737":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:4383:13378":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:8788:2799":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:10741:8811":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:9021:166":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"18:681:20495":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:11218:21731":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"14:0:2187":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"16:7529:2916":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:30709:182":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"1:10924:2721":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"6:4960:13440":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:4318:13373":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"18:590:28885":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"6:4459:13386":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:4370:2660":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:6617:23334":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"1:11020:21734":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:11324:3355":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:10598:16392":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"17:975:16419":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:12178:19662":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:40006:9244":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:47113:3653":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:43200:2802":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:11823:21736":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:7935:3322":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:40195:2990":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"16:4702:15948":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:11969:19648":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:11892:1489":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:2777:3556":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"5:1241:3173":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:5498:3484":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:11028:3000":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"17:13821:20462":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:21342:3003":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"16:7366:16279":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:11680:8856":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"16:7557:2918":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"6:1715:10858":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"16:6919:33614":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"16:6890:2912":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:43010:8809":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:20895:3563":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:1537:2625":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"11:731:2965":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:9148:34502":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:4431:3408":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"5:7145:2331":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"11:326:2582":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:9115:8773":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:7637:3159":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:13433:20435":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:21470:3383":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:21750:28876":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:5566:2697":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:5682:3502":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:10303:16492":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:41083:3345":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"16:6854:16271":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"16:3815:15373":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"6:4371:13376":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:12006:19650":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:3378:3286":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:13024:20401":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"16:3899:15409":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:42755:9297":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:10350:2718":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"6:6700:14506":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"5:1057:31233":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:9061:3241":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"16:4445:15859":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"16:8025:16298":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"16:2404:15316":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:47253:8728":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:4499:13392":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:9594:2678":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"17:10452:16551":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:39229:8931":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"11:768:2586":{"crate_id":11,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"1:4409:3407":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:30175:29297":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"2:42770:28408":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:3130:23483":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:22336:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:47197:3638":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"16:5811:16242":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:43957:9311":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:41117:3347":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"16:4932:15986":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"16:154:2575":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"17:13453:20437":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:11832:16538":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:45333:3560":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"16:7488:16284":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"5:4398:2628":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:7831:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"6:4845:13427":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"6:7258:14886":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:11069:16395":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:1594:3177":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:10857:16390":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:7115:9114":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:10761:16386":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:8961:16277":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"6:4571:13400":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:20994:3383":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"17:12307:19669":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:9955:2964":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"16:6990:16275":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"16:7335:33845":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:0:2190":{"crate_id":17,"path":["object"],"kind":"module"},"16:7077:16276":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:42774:8799":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:45268:3650":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"6:5995:14090":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"11:744:2966":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:10989:16393":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"0:21:1658":{"crate_id":0,"path":["fnv","FnvHashMap"],"kind":"typedef"},"1:11880:1394":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"6:4970:13441":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:11835:111":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:4000:28937":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:8953:2781":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:7588:3138":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:2789:9165":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:39839:28962":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"9:352:15136":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"18:538:2768":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:12799:20392":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:7784:3279":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"6:4546:13397":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"16:6819:16270":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:43826:8853":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:8941:23337":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:11872:370":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"5:1453:197":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:7252:21388":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"6:4698:13409":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"16:4568:15886":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"16:2905:15337":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:42992:8806":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"16:6488:16260":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"16:7837:16296":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:11856:21799":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:8521:16374":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:3030:15340":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:13041:20403":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"16:7683:2923":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:2921:2339":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:930:3165":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:2233:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"18:599:34533":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"16:2524:15321":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"16:7244:33800":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"16:6696:16266":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:11813:16539":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:10621:3436":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:46801:3592":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:43020:8807":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"5:2406:31234":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:10092:16535":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:361:3147":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:38929:8919":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:43102:8816":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:45148:3635":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:9028:16378":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"11:1071:33442":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:9340:16384":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"6:4688:13408":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:1907:3191":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:1034:16422":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:13367:20428":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"5:35:2593":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:11840:3050":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:8283:16367":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"5:6441:2597":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:11163:16594":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"1:9975:3218":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"2:40020:3247":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"1:6184:2696":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"7:0:1535":{"crate_id":7,"path":["unwind"],"kind":"module"},"11:305:33431":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"16:2742:15330":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:45577:3602":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"15:0:2188":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:43988:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"6:4857:13429":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"5:3533:2963":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:10555:16545":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"16:6460:2907":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"18:521:20498":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:917:3164":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"16:6876:2911":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:13857:20464":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"6:4920:13435":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"6:7568:15074":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:40541:3162":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"16:7065:33851":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:413:164":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:11889:743":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"1:6861:22220":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:3124:21642":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"18:736:20491":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"16:7572:33532":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:10044:22221":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"16:2426:15317":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"16:5998:16247":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"16:7626:16290":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:43112:8814":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:20653:3571":{"crate_id":2,"path":["core","core_simd","cast","SimdCastPtr"],"kind":"trait"},"2:43468:3309":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"17:9523:16416":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"6:4486:13390":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:10640:22511":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:1628:9095":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"6:4898:13433":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:901:2620":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:2472:3319":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:8632:16351":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:13667:20451":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:1846:3225":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"5:6289:2597":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"5:4365:2625":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:40103:3200":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"6:1700:10856":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"5:7014:3178":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"18:609:34554":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:10858:3488":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"6:4538:13396":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:8360:16369":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:8863:3518":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:43961:9305":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:1565:2381":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"6:7252:14885":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"16:6243:33837":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:11629:8829":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:2236:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:7119:9113":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"16:6351:16254":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"5:2635:31251":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:7152:133":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:11011:16353":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:635:3155":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:4253:8926":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:43635:8864":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"11:703:2968":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"5:2188:2972":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:13488:20441":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:43418:8849":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"6:119:9604":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"14:202:8873":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:4248:8925":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"16:2879:15336":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:4323:3397":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:12576:19688":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"6:4294:13371":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"6:1728:10859":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:43598:8862":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:13324:20424":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"18:507:34528":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:39112:200":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:45409:3630":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"5:7250:223":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"6:4707:13410":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:12835:20393":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"5:3974:2620":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:506:9927":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"16:5944:16245":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:11358:9318":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"16:7803:16295":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:8847:3515":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:2735:8757":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"1:5922:205":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:7011:25477":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:46303:3652":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"5:2168:31248":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:39195:8907":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:43497:8834":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"6:595:9938":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:7521:2715":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:44233:8749":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"6:4941:13437":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:10681:16584":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:8953:3044":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:21243:3566":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"2:41463:182":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:46115:3585":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:8624:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"16:6575:16264":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:40181:28499":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:7502:2713":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:41302:2380":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:11299:19136":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"6:1657:10852":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:20790:9190":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"1:2209:2655":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:21714:3005":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"6:1594:10847":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:43264:8852":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"16:2502:15320":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"18:690:20496":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"6:4813:13423":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"15:219:2929":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:11381:9315":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:31929:21937":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:40316:3310":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:8755:3487":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:5715:3030":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:2685:225":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"16:2694:15328":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:9188:34519":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:11258:19134":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:8127:3310":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"17:10257:16497":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"16:2786:15332":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:9498:2804":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"6:7509:13600":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:8598:16377":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:9973:16460":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:11886:744":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:40125:2986":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:11674:2729":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:40330:9129":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:45108:3623":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"6:1564:10844":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:30339:29296":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:10774:8812":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"6:6651:10778":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:5330:3478":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"11:2087:3172":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:4774:29150":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:42290:29583":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:3320:3335":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"1:11887:741":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:22501:3362":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:10242:8822":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:7774:3281":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:42355:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:31998:3014":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:40172:9121":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:10039:16491":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:3988:28957":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:10440:16577":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"6:573:9935":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"16:4904:15982":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:22204:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"18:515:20501":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"5:7008:2381":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:10923:2817":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:46193:3591":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:2683:8758":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:13135:20408":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:13219:20415":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:44954:3581":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"5:7023:2620":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:10465:16550":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:7791:3041":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"17:8718:2797":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:47235:3659":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:42552:3466":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"1:875:2965":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"16:6201:16250":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"6:5071:13451":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:10743:16385":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:9748:2784":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"6:1692:10855":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:2609:3321":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:21025:3569":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"16:5976:2857":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:47334:8735":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:8203:3453":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:8823:2800":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"16:4327:15789":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:9946:16459":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:9026:217":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"16:5000:16006":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:9822:16444":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"11:119:2580":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"16:4845:15971":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"16:7498:16285":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:40233:9115":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"6:6724:14508":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"9:421:15122":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"6:6605:3437":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:9380:16403":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:13240:20417":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:20490:28349":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"16:6431:16258":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:20640:3570":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"2:8792:30794":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:10819:22229":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:2154:9191":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"1:7779:3282":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:43364:8847":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:2687:108":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:41438:2963":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"17:13803:20460":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:41311:2963":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:4315:2659":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"10:0:2184":{"crate_id":10,"path":["adler"],"kind":"module"},"1:1924:3240":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"1:5760:2698":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:9907:2806":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:21472:3564":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:40344:9130":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:43666:8866":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"7:79:15098":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"5:7330:2586":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"17:9409:16404":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"1:6753:3558":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"6:4559:13399":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:21856:29571":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:10214:8821":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:4559:3371":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"5:5234:8790":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"6:5988:14089":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:8818:3514":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:9959:16484":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"5:3275:2586":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"2:5540:2989":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:4634:3434":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:11544:19148":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"5:1421:3164":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:4569:23211":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:2497:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"17:10516:16544":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:20833:3383":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"17:12536:19685":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"16:7029:33831":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:40083:8796":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"16:3782:15364":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:39070:198":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:6292:165":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:9721:16434":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:13744:20456":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:8443:16372":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:2785:9163":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"5:1227:3171":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:8195:16352":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:39978:3246":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:11193:16595":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:20752:3574":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"17:11993:19649":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"18:614:34549":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:947:3167":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:10316:16493":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:12563:19687":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:13689:20453":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"16:2616:15325":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"11:675:2967":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"16:6535:2578":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"2:10173:8818":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"18:491:34541":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:9068:34514":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:5316:3477":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1:3242:3326":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:45601:3651":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:2769:9161":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:44130:204":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:11459:19142":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:5366:3480":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:8996:3046":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:1747:9201":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"5:7204:29020":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"5:5640:231":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:9138:16380":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:8478:3470":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"17:13169:20411":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:21:680":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"17:13698:20454":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:13265:20420":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:12278:8969":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:12550:19686":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"11:816:3164":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:13211:20414":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:6478:3508":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"3:0:442":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"17:10705:16586":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"17:9443:16406":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:2513:236":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:21248:3576":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"1:7925:23299":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:11136:16593":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:4379:8932":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"6:7497:13598":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:4103:2980":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:44934:3616":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:6871:2992":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"18:766:20492":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:13292:20421":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"5:1313:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:45647:3658":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":25}