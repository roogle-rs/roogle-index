{"root":"0:0:2763","crate_version":"1.0.7","includes_private":false,"index":{"b:2:2717-0:10:2335":{"id":"b:2:2717-0:10:2335","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32338:3044","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2711:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2719:2984"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13274:1000":{"id":"2:13274:1000","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12363:471"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:20:2347":{"id":"0:20:2347","crate_id":0,"name":"FnvBuildHasher","span":{"filename":"lib.rs","begin":[128,0],"end":[128,56]},"visibility":"public","docs":"A builder for default FNV hashers.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"std::hash::BuildHasherDefault","id":"2:10652:2330","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"FnvHasher","id":"0:10:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"2:13354:26218":{"id":"2:13354:26218","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42105:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12969:9473","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12969:9473","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12984:9474","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13398:31495":{"id":"2:13398:31495","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12924:136","`FromStr`":"2:12923:3880"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42238:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12923:3880","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12923:3880","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5686:9809":{"id":"5:5686:9809","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7744:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12969:9473","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13294:31477":{"id":"2:13294:31477","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12369:1726","str::slice_mut_unchecked":"2:13295:31478","crate::ops::Index":"2:39651:3817"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13366:31484":{"id":"2:13366:31484","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12963:9477","`DoubleEndedIterator`":"2:8335:129","prim@char":"1:12363:471","str::match_indices":"2:13363:31483"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44154:9493","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12969:9473","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12969:9473","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12984:9474","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13371:31486":{"id":"2:13371:31486","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13311:31479":{"id":"2:13311:31479","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44250:9491","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13386:26221":{"id":"2:13386:26221","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12363:471","self::pattern":"2:12963:9477"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42105:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12969:9473","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12969:9473","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12984:9474","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13316:26219":{"id":"2:13316:26219","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12363:471","self::pattern":"2:12963:9477"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12969:9473","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13348:26215":{"id":"2:13348:26215","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12363:471","str::splitn":"2:13345:26213","self::pattern":"2:12963:9477"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44108:9464","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12969:9473","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12969:9473","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12984:9474","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13279:31475":{"id":"2:13279:31475","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:13277:31474"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13400:23921":{"id":"2:13400:23921","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13306:29142":{"id":"2:13306:29142","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13304:29141"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44269:9479","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13402:23925":{"id":"2:13402:23925","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13282:23715":{"id":"2:13282:23715","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12510:9481"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13408:31496":{"id":"2:13408:31496","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:5024:31496"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44285:9488","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32337:237-0:10:2335":{"id":"a:2:32337:237-0:10:2335","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32337:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13404:23927":{"id":"2:13404:23927","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:16:2339":{"id":"0:16:2339","crate_id":0,"name":"with_key","span":{"filename":"lib.rs","begin":[103,4],"end":[105,5]},"visibility":"public","docs":"Create an FNV hasher starting with a state corresponding\nto the hash `key`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["key",{"primitive":"u64"}]],"output":{"resolved_path":{"name":"FnvHasher","id":"0:10:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13299:26207":{"id":"2:13299:26207","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13298:26206"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42105:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13273":{"id":"2:13273","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13274:1000","2:13275:3087","2:13276:31473","2:13277:31474","2:13279:31475","2:13282:23715","2:13283:31476","2:13284:336","2:13285:26180","2:13286:22353","2:13288:22358","2:13290:26178","2:13292:26179","2:13294:31477","2:13295:31478","2:13296:26202","2:13297:26203","2:13298:26206","2:13299:26207","2:13301:29134","2:13302:28798","2:13303:2343","2:13304:29141","2:13306:29142","2:13309:24039","2:13311:31479","2:13312:29135","2:13313:22724","2:13316:26219","2:13319:26220","2:13322:3127","2:13326:3086","2:13330:24038","2:13333:26209","2:13336:26211","2:13339:31480","2:13342:31481","2:13345:26213","2:13348:26215","2:13351:26217","2:13354:26218","2:13357:2999","2:13360:31482","2:13363:31483","2:13366:31484","2:13369:31485","2:13371:31486","2:13373:31487","2:13375:31488","2:13376:31489","2:13377:31490","2:13380:31491","2:13383:23240","2:13386:26221","2:13389:31492","2:13392:31493","2:13395:31494","2:13398:31495","2:13400:23921","2:13401:27365","2:13402:23925","2:13403:23926","2:13404:23927","2:13405:27368","2:13406:27369","2:13407:27370","2:13408:31496","2:13411:3756","2:13412:31497"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:3009:1811":{"id":"2:3009:1811","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:42238:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2974:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2763":{"id":"0:0:2763","crate_id":0,"name":"fnv","span":{"filename":"lib.rs","begin":[1,0],"end":[367,1]},"visibility":"public","docs":"An implementation of the [Fowler–Noll–Vo hash function][chongo].\n\n## About\n\nThe FNV hash function is a custom `Hasher` implementation that is more\nefficient for smaller hash keys.\n\n[The Rust FAQ states that][faq] while the default `Hasher` implementation,\nSipHash, is good in many cases, it is notably slower than other algorithms\nwith short keys, such as when you have a map of integers to other values.\nIn cases like these, [FNV is demonstrably faster][graphs].\n\nIts disadvantages are that it performs badly on larger inputs, and\nprovides no protection against collision attacks, where a malicious user\ncan craft specific keys designed to slow a hasher down. Thus, it is\nimportant to profile your program to ensure that you are using small hash\nkeys, and be certain that your program could not be exposed to malicious\ninputs (including being a networked server).\n\nThe Rust compiler itself uses FNV, as it is not worried about\ndenial-of-service attacks, and can assume that its inputs are going to be\nsmall—a perfect use case for FNV.\n\n\n## Using FNV in a `HashMap`\n\nThe `FnvHashMap` type alias is the easiest way to use the standard library’s\n`HashMap` with FNV.\n\n```rust\nuse fnv::FnvHashMap;\n\nlet mut map = FnvHashMap::default();\nmap.insert(1, \"one\");\nmap.insert(2, \"two\");\n\nmap = FnvHashMap::with_capacity_and_hasher(10, Default::default());\nmap.insert(1, \"one\");\nmap.insert(2, \"two\");\n```\n\nNote, the standard library’s `HashMap::new` and `HashMap::with_capacity`\nare only implemented for the `RandomState` hasher, so using `Default` to\nget the hasher is the next best option.\n\n## Using FNV in a `HashSet`\n\nSimilarly, `FnvHashSet` is a type alias for the standard library’s `HashSet`\nwith FNV.\n\n```rust\nuse fnv::FnvHashSet;\n\nlet mut set = FnvHashSet::default();\nset.insert(1);\nset.insert(2);\n\nset = FnvHashSet::with_capacity_and_hasher(10, Default::default());\nset.insert(1);\nset.insert(2);\n```\n\n[chongo]: http://www.isthe.com/chongo/tech/comp/fnv/index.html\n[faq]: https://www.rust-lang.org/en-US/faq.html#why-are-rusts-hashmaps-slow\n[graphs]: https://cglab.ca/~abeinges/blah/hash-rs/","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:10:2335","0:20:2347","0:21:2349","0:24:2353"],"is_stripped":false}}},"2:13319:26220":{"id":"2:13319:26220","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12363:471","self::pattern":"2:12963:9477"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12969:9473","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12969:9473","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12984:9474","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13283:31476":{"id":"2:13283:31476","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:3004:1813":{"id":"2:3004:1813","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42238:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2974:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:17":{"id":"0:17","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[108,0],"end":[125,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["write_i64","write_i8","write_u64","write_u8","write_i128","write_i16","write_u128","write_u16","write_str","write_isize","write_i32","write_usize","write_u32","write_length_prefix"],"trait":{"name":"Hasher","id":"2:10612:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:18:2341","0:19:2342"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13277:31474":{"id":"2:13277:31474","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13333:26209":{"id":"2:13333:26209","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12363:471","self::pattern":"2:12963:9477"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12778:9468","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12969:9473","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13298:26206":{"id":"2:13298:26206","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13299:26207"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42105:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:19:2342":{"id":"0:19:2342","crate_id":0,"name":"write","span":{"filename":"lib.rs","begin":[115,4],"end":[124,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["bytes",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13383:23240":{"id":"2:13383:23240","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12363:471","self::pattern":"2:12963:9477"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42105:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12969:9473","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13302:28798":{"id":"2:13302:28798","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12363:471"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43962:9483","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13375:31488":{"id":"2:13375:31488","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13304:29141":{"id":"2:13304:29141","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13306:29142"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44260:9480","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13401:27365":{"id":"2:13401:27365","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40006:3025","Self::is_ascii":"2:13400:23921"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42105:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40006:3025","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13405:27368":{"id":"2:13405:27368","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1060:37639"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2720-0:10:2335":{"id":"b:2:2720-0:10:2335","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32338:3044","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2714:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2722:22892"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5701:32196":{"id":"5:5701:32196","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:306:3049","`String`":"5:7744:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:306:3049","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2722:22892":{"id":"2:2722:22892","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13412:31497":{"id":"2:13412:31497","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:5022:31497"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44303:9489","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5692:32194":{"id":"5:5692:32194","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7744:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:24:2353":{"id":"0:24:2353","crate_id":0,"name":"FnvHashSet","span":{"filename":"lib.rs","begin":[136,0],"end":[136,52]},"visibility":"public","docs":"A `HashSet` using a default FNV hasher.","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"std::collections::HashSet","id":"1:1481:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"FnvBuildHasher","id":"0:20:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"2:13389:31492":{"id":"2:13389:31492","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12363:471","self::pattern":"2:12963:9477"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12969:9473","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12969:9473","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12984:9474","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13351:26217":{"id":"2:13351:26217","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42105:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12969:9473","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5684":{"id":"5:5684","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5685:32192","5:5686:9809","5:5689:32193","5:5692:32194","5:5700:32195","5:5701:32196","5:5702:3965","5:5703:23923","5:5704:23924"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13406:27369":{"id":"2:13406:27369","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1060:37639"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13292:26179":{"id":"2:13292:26179","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13297:26203":{"id":"2:13297:26203","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:13296:26202","str::split_at_mut_checked":"2:13299:26207"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3834:1826":{"id":"2:3834:1826","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39820:9546","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13285:26180":{"id":"2:13285:26180","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12382:1856"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13392:31493":{"id":"2:13392:31493","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12363:471","self::pattern":"2:12963:9477"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12969:9473","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13360:31482":{"id":"2:13360:31482","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12963:9477","`DoubleEndedIterator`":"2:8335:129","prim@char":"1:12363:471","str::matches":"2:13357:2999"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44208:9495","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12969:9473","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12969:9473","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12984:9474","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:15":{"id":"0:15","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[99,0],"end":[106,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:16:2339"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3000-0:10:2335":{"id":"b:2:3000-0:10:2335","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2974:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2970:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3003:137","2:3004:1813"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13313:22724":{"id":"2:13313:22724","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12363:471","self::pattern":"2:12963:9477"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12969:9473","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2996:834":{"id":"2:2996:834","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13357:2999":{"id":"2:13357:2999","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12963:9477","`DoubleEndedIterator`":"2:8335:129","prim@char":"1:12363:471","str::rmatches":"2:13360:31482"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44190:9494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12969:9473","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5689:32193":{"id":"5:5689:32193","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7744:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12969:9473","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13286:22353":{"id":"2:13286:22353","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42107:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42105:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13330:24038":{"id":"2:13330:24038","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12963:9477","`DoubleEndedIterator`":"2:8335:129","prim@char":"1:12363:471","str::split_whitespace":"2:13304:29141","str::rsplit":"2:13336:26211"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43986:3941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12969:9473","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13373:31487":{"id":"2:13373:31487","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13301:29134":{"id":"2:13301:29134","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12363:471"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43956:9484","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13284:336":{"id":"2:13284:336","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13285:26180","`u8`":"1:12382:1856"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13407:27370":{"id":"2:13407:27370","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1060:37639"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13377:31490":{"id":"2:13377:31490","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12363:471","self::pattern":"2:12963:9477"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12969:9473","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12969:9473","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12989:9472","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2990-0:10:2335":{"id":"b:2:2990-0:10:2335","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2967:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2964:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2993:3080"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2994-0:10:2335":{"id":"b:2:2994-0:10:2335","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2967:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2996:834"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3832-0:10:2335":{"id":"b:2:3832-0:10:2335","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32338:3044","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3830:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3834:1826"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:21:2349":{"id":"0:21:2349","crate_id":0,"name":"FnvHashMap","span":{"filename":"lib.rs","begin":[132,0],"end":[132,58]},"visibility":"public","docs":"A `HashMap` using a default FNV hasher.","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"std::collections::HashMap","id":"1:758:154","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"resolved_path":{"name":"FnvBuildHasher","id":"0:20:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"2:13296:26202":{"id":"2:13296:26202","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:13298:26206","str::split_at_mut":"2:13297:26203"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42200:4092-0:10:2335":{"id":"a:2:42200:4092-0:10:2335","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42200:4092","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:13":{"id":"0:13","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[91,0],"end":[97,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:3042:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:14:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13303:2343":{"id":"2:13303:2343","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43972:3238","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13309:24039":{"id":"2:13309:24039","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44240:3939","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13336:26211":{"id":"2:13336:26211","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12963:9477","`DoubleEndedIterator`":"2:8335:129","prim@char":"1:12363:471","str::split":"2:13330:24038"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44004:9462","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12969:9473","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12969:9473","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12984:9474","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5704:23924":{"id":"5:5704:23924","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13404:23927"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13326:3086":{"id":"2:13326:3086","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42107:191","prim@char":"1:12363:471","self::pattern":"2:12963:9477"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42105:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12969:9473","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12969:9473","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12984:9474","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5700:32195":{"id":"5:5700:32195","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7744:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13288:22358":{"id":"2:13288:22358","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42107:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42105:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13312:29135":{"id":"2:13312:29135","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44278:9478","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13342:31481":{"id":"2:13342:31481","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12963:9477","str::split":"2:13330:24038","prim@char":"1:12363:471","str::split_terminator":"2:13339:31480"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44054:9496","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12969:9473","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12969:9473","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12984:9474","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2719:2984":{"id":"2:2719:2984","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13411:3756":{"id":"2:13411:3756","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:5025:3756"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44294:3757","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:14:60":{"id":"0:14:60","crate_id":0,"name":"default","span":{"filename":"lib.rs","begin":[94,4],"end":[96,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"FnvHasher","id":"0:10:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13403:23926":{"id":"2:13403:23926","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13275:3087":{"id":"2:13275:3087","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13395:31494":{"id":"2:13395:31494","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12363:471","self::pattern":"2:12963:9477"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12969:9473","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12969:9473","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12984:9474","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32396:3045-0:10:2335":{"id":"a:2:32396:3045-0:10:2335","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32396:3045","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:42199:3769-0:10:2335":{"id":"a:2:42199:3769-0:10:2335","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42199:3769","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:3003:137":{"id":"2:3003:137","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2974:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"2:13345:26213":{"id":"2:13345:26213","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12363:471","self::pattern":"2:12963:9477","str::rsplitn":"2:13348:26215"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44090:9466","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12969:9473","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3248:9799-0:10:2335":{"id":"a:2:3248:9799-0:10:2335","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3248:9799","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13276:31473":{"id":"2:13276:31473","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5685:32192":{"id":"5:5685:32192","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:306:3049","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:306:3049","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13339:31480":{"id":"2:13339:31480","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12963:9477","str::split":"2:13330:24038","prim@char":"1:12363:471","`DoubleEndedIterator`":"2:8335:129","str::rsplit_terminator":"2:13342:31481"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44036:9497","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12969:9473","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:10:2335":{"id":"0:10:2335","crate_id":0,"name":"FnvHasher","span":{"filename":"lib.rs","begin":[89,0],"end":[89,26]},"visibility":"public","docs":"An implementation of the Fowler–Noll–Vo hash function.\n\nSee the [crate documentation](index.html) for more details.","links":{},"attrs":["#[allow(missing_copy_implementations)]"],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:15","a:2:42199:3769-0:10:2335","a:2:32337:237-0:10:2335","a:2:32396:3045-0:10:2335","a:2:3248:9799-0:10:2335","a:2:3213:247-0:10:2335","a:2:42200:4092-0:10:2335","b:2:2717-0:10:2335","b:2:2994-0:10:2335","b:2:3000-0:10:2335","b:2:3832-0:10:2335","b:2:3005-0:10:2335","b:2:2990-0:10:2335","b:2:2720-0:10:2335","0:17","0:13"]}}},"2:13369:31485":{"id":"2:13369:31485","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13363:31483":{"id":"2:13363:31483","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12963:9477","`DoubleEndedIterator`":"2:8335:129","prim@char":"1:12363:471","str::rmatch_indices":"2:13366:31484"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44136:9492","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12969:9473","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3005-0:10:2335":{"id":"b:2:3005-0:10:2335","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2964:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2974:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3008:137","2:3009:1811"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2993:3080":{"id":"2:2993:3080","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2967:144"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13376:31489":{"id":"2:13376:31489","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5702:3965":{"id":"5:5702:3965","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7744:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13290:26178":{"id":"2:13290:26178","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13380:31491":{"id":"2:13380:31491","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12363:471","self::pattern":"2:12963:9477"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12969:9473","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:18:2341":{"id":"0:18:2341","crate_id":0,"name":"finish","span":{"filename":"lib.rs","begin":[110,4],"end":[112,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13295:31478":{"id":"2:13295:31478","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12369:1726","crate::ops::IndexMut":"2:3491:3818","str::slice_unchecked":"2:13294:31477"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13322:3127":{"id":"2:13322:3127","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42107:191","prim@char":"1:12363:471","self::pattern":"2:12963:9477"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42105:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12969:9473","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3008:137":{"id":"2:3008:137","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32261:4124","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"5:5703:23923":{"id":"5:5703:23923","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13403:23926"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3213:247-0:10:2335":{"id":"a:2:3213:247-0:10:2335","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3213:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}}},"paths":{"17:14051:21144":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"16:6927:17559":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"6:5282:14605":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:9266:3618":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:11016:17695":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"16:2998:16624":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:953:3413":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:14560:21177":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:15023:21897":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:5368:980":{"crate_id":2,"path":["core","iter"],"kind":"module"},"6:5196:14595":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:5051:14584":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:11674:17795":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:2038:9756":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:16259:20627":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"16:6494:17544":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"6:6777:15362":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"6:6700:15352":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"2:40835:9785":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:1098:17708":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:8061:3767":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:3206:9395":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:46242:4279":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"5:7584:3091":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:10573:34675":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:40969:9782":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"16:4940:17272":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:3439:9388":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"1:12364:1878":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"6:5025:14581":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:14212:21153":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:4807:4015":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:39651:3817":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:15569:21937":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:13946:21136":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"5:1564:3091":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"11:698:3091":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:8225:3029":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"1:4819:23682":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"18:680:22157":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:12387:969":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:8253:9778":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:15176:21906":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"11:1674:33518":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"5:7694:9905":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:11557:17792":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"6:6716:15354":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"2:45789:4237":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:12374:740":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:3462:142":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"5:894:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:11200:4123":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"6:5387:14619":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"16:5802:17526":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:40775:3441":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:6199:220":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:4672:4053":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:40691:3865":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"6:7539:15776":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:13308:3258":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"16:5927:17529":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:11227:17701":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"16:3475:16629":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:6572:186":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"16:6574:3346":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"10:36:33514":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:21720:29511":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:8486:3912":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:44190:9494":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"6:1711:11517":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:40945:9791":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"6:1569:11504":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:22607:9851":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"1:10924:23703":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"2:22379:3913":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:0:2891":{"crate_id":17,"path":["object"],"kind":"module"},"16:4424:17124":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:373:3752":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"16:4062:16808":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"5:1645:3802":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:22226:4199":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"1:12369:1726":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1:3303:28410":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:21769:3913":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:40766:3815":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"16:6962:3350":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:46954:4253":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:4862:9575":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"1:6799:4145":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:45868:4209":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:23109:3992":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:23003:29327":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"16:6398:3339":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"18:765:22154":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:14111:21148":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:3300:28414":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"6:6564:15340":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:256:33684":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:43571:9962":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:902:3409":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:42817:9409":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"11:2121:3781":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:15720:21948":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:11237:3916":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"1:10999:4118":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"11:1914:3787":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"11:2539:30288":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:46309:29401":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:23288:29336":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"5:7504:3773":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:1481:156":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"5:1496:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:15289:21916":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:8867:4109":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"16:5769:17524":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:14131:21149":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:2772:134":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"6:8296:14815":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:31097:196":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:40876:9795":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"6:5241:14600":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"16:2902:16622":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:44154:9493":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:13889:115":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"16:5897:3315":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:40493:9598":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:3218:3434":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"6:1507:11497":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:38303:9833":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:12390:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:379:3753":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"16:5960:17530":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:11595:3240":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:4772:4071":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"11:1888:3773":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:3703:9399":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"16:6749:17553":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:7833:9768":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"0:20:2347":{"crate_id":0,"path":["fnv","FnvBuildHasher"],"kind":"type_alias"},"10:44:3376":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"11:434:33537":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:7917:24011":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:15273:21914":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:12381:887":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"5:1259:31420":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:47071:9364":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"16:4587:17172":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"11:396:33520":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:8335:129":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:11915:17852":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:9117:3613":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:23277:29428":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"17:15616:21941":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:12695:17911":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"2:47054:4280":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:14516:21174":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:47012:4225":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:3456:140":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:2714:103":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:11690:23614":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:1631:3786":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:11715:17797":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2:13621:9619":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"6:1489:11494":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:15463:21934":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"16:5347:17518":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:12408:3246":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:13485:20634":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"17:9916:17667":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:46681:4207":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:44368:9507":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:12969:17642":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"16:7052:17562":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:33564:4186":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:5267:435":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"17:15836:21957":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:15655:21945":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"5:6525:4338":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"1:9100:4122":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:15426:21930":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:3937:3773":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"1:8067:3842":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"16:4641:17180":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"16:7618:3356":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:13387:20627":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"16:5742:17522":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"8:0:2883":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:5844:4150":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"16:2808:16618":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:4653:3437":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"16:7549:17572":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:40576:9593":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"16:2418:16600":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:13037:9501":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:42641:90":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:16187:22124":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"6:5622:14642":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:40681:3238":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"2:41327:9772":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"16:7085:33819":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:11721:23748":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:3585:211":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"11:2545:33525":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:43133:3433":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"6:5205:14596":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:46835:4213":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:40797:3445":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:12378:894":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"18:623:34704":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:4440:29647":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:32426:9394":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"16:3925:16694":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:4103:4011":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:22733:4321":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"6:5088:14587":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:43962:9483":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:2467:3889":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:568:3735":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:47080:9365":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:12510:9481":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"6:5381:14618":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"16:7473:3302":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"6:5301:14608":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:12824:17681":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:46415:4252":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:12314:23867":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"2:13199:119":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"5:6005:3773":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"16:7509:17569":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"15:327:3367":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:7936:24003":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:10534:34689":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"16:7098:33765":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:4574:3435":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:46326:29397":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:6968:9781":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1:8001:3743":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"11:430:33541":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"6:5311:14609":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:41883:3978":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"6:5165:14593":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:6611:15342":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:40719:3878":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"1:5958:4136":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"6:5395:14620":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:44208:9495":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:8193:3904":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:23211:29216":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"9:236:4104":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:45851:4203":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"18:659:22155":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:3094:3858":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"5:7067:9543":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"2:32396:3045":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"5:4172:31283":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:43903:9459":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:21693:29506":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"2:2974:257":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"6:5676:14649":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:1955:3923":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"2:23062:29395":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"11:1158:3784":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:46880:4247":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:6876:15391":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"14:187:16532":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:12494:9936":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:42327:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"5:1548:3407":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:1625:3785":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"18:754:22159":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"5:6143:10192":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"6:4816:14559":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:3297:25741":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:22978:3991":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:3649:3855":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:8219:127":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"5:7492:3792":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:13375:20626":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"5:7650:3042":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:42133:3404":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"6:6708:15353":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"2:40503:9599":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"5:7842:9538":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:32428:114":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:23233:29393":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"2:45883:4239":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"6:5420:14622":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"9:422:16397":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"6:8199:16313":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"5:7709:3863":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"5:3703:182":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:3067:137":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:23120:4007":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:15010:21896":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"6:5551:14636":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:10829:28821":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"2:46453:4206":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"5:7681:3862":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:9413:4148":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"2:13969:152":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"6:5295:14607":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:16050:20624":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"14:0:2888":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:4341:4047":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"5:5534:9434":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:15624:21942":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:14436:21168":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:2234:17765":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:30718:9537":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:15356:21922":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"6:6599:15341":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"5:2275:31358":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"13:110:33551":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:13832:21130":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"6:5127:14590":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:47091:9366":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:500:24015":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:3213:247":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"16:2878:16621":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"6:6770:15361":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"16:7528:17570":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:10407:4126":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"1:4817:23680":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"17:12900:3253":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"6:6473:15334":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:5641:14645":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"2:43084:29332":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:3403:9400":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"5:2182:3804":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"16:5700:17520":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:721:2331":{"crate_id":1,"path":["std","collections"],"kind":"module"},"18:718:22152":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:9984:17669":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:1920:3839":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:44561:9515":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"5:6658:3773":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:4883:4075":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:11499:24019":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"16:7580:17575":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:2958:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"6:7563:15778":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"11:2420:3091":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"2:8297:165":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:13538:20638":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:10622:34685":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:10943:139":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"17:13899:21134":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"5:3095:31404":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"6:6544:15339":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:40424:9562":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"6:8249:14808":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:11219:3457":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"9:480:16394":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:11031:3614":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"6:5462:14626":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"17:12597:17915":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"2:12969:9473":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:10068:17650":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:44404:9509":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"5:1533:3404":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"11:1893:3774":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"1:8697:4086":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:12175:17880":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"6:5139:14591":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:44811:207":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"5:994:3791":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"5:3465:3774":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"6:5428:14623":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:5776:4119":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"17:15734:21949":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"16:3614:16630":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:33080:9819":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"6:7986:10553":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"18:521:22160":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"14:31:16524":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:3255:9801":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"1:5168:4082":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"1:12368:1692":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"6:465:10593":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:3395:3963":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:39607:9401":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"17:15678:21946":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:10341:23903":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"2:44240:3939":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"17:11153:17676":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"16:2323:16596":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"1:9712:23837":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"0:10:2335":{"crate_id":0,"path":["fnv","FnvHasher"],"kind":"struct"},"1:10913:3903":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"17:13325:3260":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"16:7799:3363":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:3841:3983":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:4354:4048":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:45921:4250":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"18:635:34715":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"5:7733:9430":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"18:689:22158":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"6:7604:15781":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:12370:1816":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"5:4377:3404":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:10524:17672":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"5:6090:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"6:517:10599":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"6:1684:11514":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:10980:28034":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"16:6588:17548":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:14587:21178":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:42294:3091":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"17:12647:17908":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"17:11497:17739":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:12264:17864":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:46178:4217":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:12346:23780":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:14912:21891":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:42045:3980":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"16:6300:17537":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"17:15799:21954":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:46527:4218":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:8171:3906":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"12:0:2887":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:21771:4197":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:11075:3227":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"16:6160:16568":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:4821:17914":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"17:12342:17863":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:10218:3233":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"6:6443:15331":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:32261:4124":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:11583:17766":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:10251:3234":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"6:6680:15350":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"6:570:10607":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:6867:4149":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"2:40654:9905":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"5:2304:3415":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"16:5722:17521":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:12707:17679":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:2741:3942":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:44595:9498":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:43792:9452":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:40514:9489":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:14284:21158":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:21722:29509":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"16:8155:17590":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:10360:143":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"6:553:10604":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:39705:212":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:44483:9512":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:10763:9946":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"2:32397:3596":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"16:6066:17533":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:10186:9407":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"6:5441:14624":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:21822:3913":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:4223:4020":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"11:1880:3404":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:16105:22118":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"16:6385:17539":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:21948:4194":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:14038:21143":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:21950:3458":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:8840:4107":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"11:873:3779":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:11825:17828":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:9533:9473":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"16:6456:17542":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:3473:17815":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:40418:3757":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:15456:21933":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"6:491:10597":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:1922:3840":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"6:0:1005":{"crate_id":6,"path":["libc"],"kind":"module"},"1:5004:4025":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:1613:3091":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:2135:9863":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"17:14788:21886":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"11:2559:33523":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:9408:4147":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"1:12366:1317":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:2031:671":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"1:4487:4050":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:42719:3599":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:13568:20640":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:21842:3458":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:5708:4118":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"16:3899:16691":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:13509:20636":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:5965:4137":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"6:6631:15344":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"5:3318:31415":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"16:5400:3210":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:40920:3448":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:10155:3209":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"5:938:3790":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"6:1632:11509":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"11:2323:3782":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"1:10908:23755":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"6:4902:14566":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:3597:17833":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:47033:4259":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"18:538:3198":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:11509:9467":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:986:3780":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:11537:17759":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"6:5629:14643":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"17:12851:3250":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:8529:3941":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"18:706:9475":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"5:3352:31410":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"6:5471:14627":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1:11346:3882":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"5:3729:3407":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"5:7484:3091":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"10:0:2885":{"crate_id":10,"path":["adler"],"kind":"module"},"17:10317:3236":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"16:7727:3359":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:10647:3030":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:3032:23835":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:11041:3913":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:46046:4192":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:12150:17814":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:8176:3903":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"19:0:1294":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:6509:220":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:14723:21884":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"5:3940:3774":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"16:5995:17531":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:2967:144":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:40746:9440":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:7470:25538":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:13089:17948":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"6:4947:14571":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:42189:4091":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"6:7586:15780":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"16:2374:16598":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:10137:17639":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:46586:29341":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"9:355:16411":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:10710:3958":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"2:12923:3880":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"11:351:33532":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"1:6358:4335":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:9358:3640":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:40669:3861":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:12478:9934":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:13116:17949":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"6:4875:14563":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:3208:117":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"6:5405:14621":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"16:7888:17584":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:2068:1361":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:13753:21127":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:3459:141":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"7:32:16366":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:4886:4053":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"3:0:505":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"16:5037:17300":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"11:1085:33542":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:10971:28027":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"2:39763:216":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:6406:3622":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"11:740:3413":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"11:2551:33527":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:10590:4122":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:13604:30369":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"2:30739:3433":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:22593:4329":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"1:5992:3615":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:10341:226":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"18:515:22163":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:4167:4015":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:12362:1177":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:4925:4029":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"16:6098:17534":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"6:6902:15392":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"16:7144:17564":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:14575:3247":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:5779:4121":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"18:670:22156":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:43893:9461":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:47175:9372":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:40867:9787":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"16:5006:17292":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:12389:1422":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"16:6543:17547":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"16:6231:17536":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:11272:162":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"2:43956:9484":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"17:15151:21904":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:8328:23887":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:9312:3621":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:46631:29346":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"17:10828:34676":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:42303:196":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:8542:3985":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:21683:3467":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:4884:3439":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:12454:17900":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:13932:4332":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"1:3592:3910":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:6718:3624":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"16:5846:17527":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:11755:17800":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"17:12371:17683":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:13733:205":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"18:643:34705":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"11:1725:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"16:2572:16607":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"11:2137:3782":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:2483:3894":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"17:15646:21944":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:23011:29357":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:11605:3241":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:10950:23781":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"5:6506:4337":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"18:608:34724":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:13774:17853":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:40888:9788":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:22:819":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:10604:153":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:41845:170":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"16:5831:3313":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"5:3347:3785":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:1897:3833":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"17:11661:17768":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:3669:9559":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"6:6823:15364":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:46758:4241":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:47137:9370":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:13999:21140":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"16:6620:17550":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:9859:91":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"16:8118:17588":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:43331:3031":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"16:5367:17519":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:12127:17816":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:8536:3939":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:2344:9403":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:23299:29411":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"16:8202:3365":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"16:7769:17580":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:15092:21899":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:4109:4010":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:47100:9367":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:12089:17809":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"6:559:10605":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"6:8261:14810":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:3610:3909":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:4506:9561":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"5:6122:3425":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"6:1494:11495":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"16:7695:17579":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:2780:3953":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:10284:3235":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:41352:9774":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"6:5450:14625":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"6:4805:14558":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:2073:198":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:44285:9488":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"16:8175:17591":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:42831:9417":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:14402:21166":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:15058:3268":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"16:4531:17162":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:22989:29579":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"11:1601:16517":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:23751:236":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"6:8031:16152":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:13785:17854":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:13922:21135":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:9338:23046":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"16:3842:16657":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"6:5533:14634":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:8284:14813":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:1616:3773":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"6:4792:14557":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"16:6412:17540":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"17:12030:17813":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:2037:17746":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:22260:29502":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:884:3407":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"5:1424:3784":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:41360:9776":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:11290:9468":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:42522:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:23266:29417":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"11:842:3777":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:9729:127":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"16:5107:17324":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:9253:4138":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:43386:3602":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:22221:3913":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"16:3669:16631":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:3340:3960":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:12671:17943":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"2:22705:4320":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"1:6796:4144":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:43932:9490":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:5983:3923":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"2:2938:9613":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:11926:3643":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:8443:178":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:44876:4331":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"1:974:3778":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:11481:9466":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"6:6691:15351":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"2:12701:9983":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:13424:20630":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"5:3277:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"6:4970:14574":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:23222:29335":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"2:8755:3798":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"6:5562:14637":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:9858:17665":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"6:532:10601":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"6:5341:14613":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"1:938:3774":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:3044:123":{"crate_id":2,"path":["core","default","Default"],"kind":"proc_derive"},"11:2148:3783":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:14414:21167":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:11329:9457":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:15190:21907":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:1828:9725":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"2:46195:4223":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:12399:17898":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"14:214:16533":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"15:394:16559":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"16:6246:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:3658:26002":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:12330:3644":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"16:4743:17236":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:12213:17893":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:13972:21138":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"5:2594:31387":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:2937:3913":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:44844:4333":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:15814:21955":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"6:5412:1246":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:14386:21165":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:9305:23881":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:4796:9572":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:8388:3047":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:2232:128":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"16:5914:3320":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"6:5230:14599":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:10397:9417":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:43783:9453":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"16:7497:17568":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:39683:210":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:44250:9491":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:3274:9821":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:43339:3600":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:9781:17664":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:10320:3833":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"16:6026:3288":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"5:4337:3923":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:6282:24029":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"17:10997:17694":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:10401:206":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"1:8338:3954":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"16:6442:17541":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:6682:4141":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:32337:237":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"1:5837:220":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"16:7321:4090":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"6:5007:14579":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:15333:21920":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"16:4352:17075":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:8306:3048":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"16:7014:17561":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:592:3737":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"13:229:3371":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:5335:204":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"1:8548:3984":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:3830:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:22818:29652":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:12464:17901":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:1620:3774":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"2:23244:29329":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"2:22871:29650":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:14847:21887":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"16:6353:3336":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:8642:4078":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"18:613:34709":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"6:1551:11502":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:10905:17678":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:7782:29137":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:42230:3745":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:8762:4104":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:8254:3635":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:6979:28801":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"17:13046:17649":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:12363:471":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"0:0:2763":{"crate_id":0,"path":["fnv"],"kind":"module"},"13:0:2881":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:2010:787":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"6:4829:14560":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"5:3716:3404":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:11128:17703":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:43125:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"17:261:33705":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:949:3412":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:13024:17686":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"15:306:16549":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:12993:17685":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"0:24:2353":{"crate_id":0,"path":["fnv","FnvHashSet"],"kind":"type_alias"},"2:40522:3757":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:1859:3823":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"17:9807:17651":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:11142:3215":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:12443:17890":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"5:7231:31315":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"11:1564:16515":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"16:2438:16601":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"6:8273:14812":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:43112:29333":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"16:7741:3361":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:1844:696":{"crate_id":1,"path":["std","env"],"kind":"module"},"16:7006:17560":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"6:5107:14588":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"6:5265:14603":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:44925:30196":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:1107:3784":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:6678:4140":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:8166:3905":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"17:15400:21927":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"6:5593:14640":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:2495:3900":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:8599:4052":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"16:7355:17566":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:14091:21147":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:8523:3238":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"1:9173:4156":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:8082:3843":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"11:1140:16514":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:44582:9517":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:4927:4030":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"16:7306:33884":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:47205:9374":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"5:7767:9520":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:40816:133":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:44090:9466":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:14529:21175":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:8047:3766":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"6:6419:15329":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"5:5798:9541":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"6:523:10600":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"11:0:2886":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"16:4718:17234":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:14752:21885":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"6:6672:15349":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:871:3404":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:6374:24033":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"18:563:3200":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:15324:21919":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:15214:21910":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:43871:9441":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:40806:9783":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:40537:9592":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:33765:9823":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:12375:756":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:43732:29143":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"6:6917:15393":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:6183:4150":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:4723:221":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:44613:9499":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:44004:9462":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:10720:34686":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:47267:9376":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:12584:17676":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"1:1089:3782":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"6:8353:16350":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:7469:15773":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"16:6872:17557":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:3436:3958":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:14024:3794":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:8459:3449":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"17:15635:21943":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:10861:28817":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"16:5307:17501":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"6:1514:11498":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:42158:4090":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"17:15102:21900":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:2315:3884":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"1:9325:17565":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:11547:17791":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:12076:17808":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:3264:17810":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:42600:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:3529:3967":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:10403:9415":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:2803:195":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:13706:30324":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"18:96:22142":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:8785:4105":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:10419:3239":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"16:6758:16543":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"11:2301:3781":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"2:4487:9393":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:9217:4155":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:13437:20631":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:22381:4195":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"6:6534:15338":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:8587:3980":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:42680:97":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:8246:3952":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"5:3339:3787":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:3264:4187":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:513:17662":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:12201:17892":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:21830:4196":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:12621:17913":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"17:11877:3243":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"6:5179:4037":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"6:4890:14565":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:42105:194":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:22473:4324":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"2:10046:3452":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:21737:29504":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:672:3761":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:11799:17848":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"6:8343:16349":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"16:4560:17168":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:6974:30171":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"6:7487:15774":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"16:6466:17543":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:12478:17902":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"17:13814:21129":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"16:7559:17573":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:46288:29326":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"14:160:16524":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:44672:9993":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:46925:4219":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"5:7158:264":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"6:4881:14564":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:11187:3613":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:8664:4028":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:8613:3985":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"11:772:3409":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"5:6248:3923":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:3486:3945":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"5:7556:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:40910:9789":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:5112:4074":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:13187:20620":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:15383:21925":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:13758:9617":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"16:6782:17554":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:4333:4046":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:12318:17684":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"16:7656:17577":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"6:5366:14616":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"6:6731:15356":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"17:12516:17919":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"2:2970:258":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:38248:9832":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"9:445:16395":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:6156:9786":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:2541:2898":{"crate_id":1,"path":["std","io"],"kind":"module"},"6:1675:11513":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:9190:4154":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"16:3810:16648":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:16151:22121":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"2:39655:9837":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:44619:3457":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:23255:29396":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"17:11313:17732":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"5:5298:3425":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"16:5817:3310":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"6:1643:11510":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"16:5781:17525":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"6:8319:14818":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:1642:3788":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"16:6342:33910":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:46157:4211":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:10915:34680":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:16079:22116":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"1:11938:23863":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"9:53:3377":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:44418:9510":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"6:6758:15359":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"17:13455:20632":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"6:4842:14561":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:11166:17709":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:9707:3906":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"17:15126:21902":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"6:8308:14817":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:42824:9410":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:957:3776":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:12683:17912":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"17:14489:21172":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:14475:21171":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"5:4217:3407":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"18:573:34705":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:41118:9794":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:15944:20621":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"17:12300:17895":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:14260:21156":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"16:7168:17565":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:43150:137":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"5:3373:3788":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:11242:17728":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"6:5682:14650":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:10185:3231":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"6:7463:15772":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:13986:21139":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"9:328:16450":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:11849:3986":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:10393:9410":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"16:6991:33822":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:8761:9777":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:23089:30197":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:12724:9980":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:44572:9516":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:12422:17899":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:13235:20622":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"16:5686:3309":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:11809:3987":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:10962:3908":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"16:872:33705":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"1:10933:3634":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"6:1727:11518":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"6:6765:15360":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"1:8333:3633":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"16:4830:17254":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:10671:34691":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:14246:21155":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:5851:4151":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:12963:9477":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"5:4570:31304":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"16:6335:3305":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:42838:9418":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:6079:3923":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"2:39743:214":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"11:102:33543":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:11222:3407":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:21824:4193":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"9:500:16398":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"5:6874:31283":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"5:7534:31360":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:3740:9402":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:10633:24027":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"6:6652:15346":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:7395:24031":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"5:2377:3418":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:4806:9573":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"17:10769:34687":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"5:7548:3091":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:3248:9799":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"17:13844:21131":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:45819:4238":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:10903:23668":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"16:4771:17241":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"16:2508:16604":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:818:190":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"17:13015:3247":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"6:4990:14577":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"18:113:22143":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:46003:4222":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"6:4929:14569":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:11493:17752":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"5:1636:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:11788:17847":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"6:5255:14602":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"5:2157:3635":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:7150:4190":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:1609:3404":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"16:6849:17556":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:4605:3436":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"6:5069:14586":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:13173:17951":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:12887:3251":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:40643:3860":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:10395:9409":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"6:6659:15347":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:980:3779":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:42085:3982":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:40929:9790":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:758:154":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:11088:24005":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:15608:21940":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:14177:21151":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"16:6634:3347":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"16:7711:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:4303:25537":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:944:3775":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:22646:4330":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:44661:4189":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:15434:21931":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:3450:3046":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:15760:21951":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"16:7132:33688":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"16:4976:17285":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:39820:9546":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:2961:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"16:5075:17315":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:403:17661":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:2322:3886":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"6:6790:33141":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:10954:17692":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:2809:202":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"6:8255:14809":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:44303:9489":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:12929:17683":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"5:3105:31274":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:2318:3885":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:31124:3467":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"5:221:9406":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:5117:14589":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:13581:20641":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"6:5057:14585":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:36372:9831":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"6:6813:15363":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:22605:30141":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"2:3294:9398":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"11:798:3773":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:4464:109":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:46386:4246":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:4923:4026":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:32314:29904":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"17:11293:17731":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"5:7057:9542":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"17:14933:21892":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:12362:17897":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:12289:17860":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"11:488:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"6:5586:14639":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:13252:20623":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:46075:4245":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:22691:3913":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"6:7577:15779":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"16:2636:16610":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"6:4921:14568":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:46128:4205":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:46227:4278":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"18:589:30172":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:1075:3781":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:4364:3923":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:44637:130":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"16:6813:17555":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:6853:3625":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"2:11367:9469":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:5289:23880":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:8216:17593":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:13064:17648":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:6037:3616":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:11367:3227":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:8850:3404":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"5:1011:3404":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:9671:17641":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:4139:4012":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:14599:21179":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"6:7308:10646":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:9398:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"6:5375:14617":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"6:586:10609":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"11:785:3411":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:13674:21124":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"16:2708:16613":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"5:3313:3786":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:45936:4256":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"18:80:22141":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:13146:17950":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:2223:189":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:4915:3440":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:12380:906":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"1:623:3755":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:2635:3950":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:47111:9368":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:41927:3598":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:10391:128":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:11051:239":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"6:1589:11506":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:42444:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:10399:9418":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:39668:213":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"5:2265:3729":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"16:6120:17535":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"11:809:3774":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"18:0:2892":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:12768:17644":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"6:7448:15770":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:44913:9385":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"16:3196:16627":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:12008:9450":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"2:34496:9830":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"5:0:309":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:11510:17738":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:3344:9829":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"6:1539:11501":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:9130:4123":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:15701:21947":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:12508:17904":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"11:328:33536":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:42199:3769":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:2613:9852":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"1:9106:199":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"16:8093:17587":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"16:6976:3351":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"16:5415:33903":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:2611:9851":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"18:507:34705":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:12041:9451":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"2:44510:9513":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:11026:17696":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:894:3091":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:3286:9396":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"17:12238:17866":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:3688:29675":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"5:1595:3411":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:12367:335":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:47228:9375":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:8249:9779":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"11:830:3775":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:3421:124":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"6:5603:14641":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:12485:17903":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"16:7539:17571":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:14545:21176":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:2705:3951":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:11254:23782":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"1:7323:24025":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"16:3329:16628":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"17:9938:17668":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"6:5635:14644":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"1:10481:113":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"2:13912:4335":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"17:12353:17896":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"16:6648:17551":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:6779:9796":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"5:7757:9519":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:46548:4224":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:44260:9480":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:3434:3800":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:4986:17920":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"2:32321:9573":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"2:45988:4216":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:13738:21126":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:9394:3923":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"17:15342:21921":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"16:7379:33895":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:14986:21895":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:14356:21163":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:14025:21142":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:15445:21932":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:11419:3215":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"16:8226:17594":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:21938:3913":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"6:497:10598":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:10877:17677":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:40530:9488":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:39723:215":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"6:564:10606":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"5:1379:3781":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"6:7332:10475":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:15116:21901":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:11715:23797":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"16:7633:33782":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:11076:24017":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:30463:3990":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:14325:21161":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"6:1667:11512":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:10652:2330":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"16:6278:3321":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"16:2338:16597":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:44547:9514":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:44278:9478":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:11409:3881":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"17:11341:17744":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"6:5334:14612":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"6:4914:14567":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"6:5019:14580":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"16:4882:17260":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:46341:4240":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:11523:9465":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:15769:21952":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"6:473:10594":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:13797:21128":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:11405:17741":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"5:4506:31304":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"5:1614:3412":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:38992:9836":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:43356:157":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:11443:17747":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:44793:219":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:12572:3215":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"16:2684:16612":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:3438:3959":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:3675:9558":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"5:7826:3774":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"2:44902:9387":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:5095:9585":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"16:7570:17574":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:8205:139":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:15:2342":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:43811:9454":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:8238:23901":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"16:3029:16626":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:7877:23235":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:40844:29108":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:43067:3433":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"16:2548:16606":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:0:563":{"crate_id":2,"path":["core"],"kind":"module"},"17:2203:17740":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:43884:9458":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:46032:4277":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:13723:21125":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:11853:17850":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:12056:17812":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:22660:9851":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"2:3289:9397":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"2:43986:3941":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"11:708:3412":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:4161:4014":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:16138:22120":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"2:23178:29223":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"17:12433:3247":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"6:8014:16151":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:5654:113":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:11870:3988":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:14994:21883":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"16:7857:17583":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:38413:9835":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"6:6666:15348":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:22955:3461":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:2469:3890":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:11812:17807":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:42238:226":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:3663:146":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:39571:9557":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"11:1105:16513":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:12388:17889":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"5:789:250":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:11089:17706":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"6:7454:15771":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:4937:14570":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:4869:14562":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:13473:20633":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:43913:9460":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:16176:22123":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"1:12335:3768":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"6:4976:14575":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:14463:21170":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:4:1259":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:15376:21924":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"6:7341:15767":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"6:1563:11503":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:11676:23616":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:44786:150":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:41318:4140":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:15197:21908":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:10759:3215":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"16:7061:17563":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:40625:9591":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"16:2768:16616":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:432:185":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"6:7548:15777":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:10439:3211":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:15206:21909":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:14876:21890":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:40454:9597":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:39833:9554":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:16223:22127":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"2:44435:9511":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:9457:4184":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"6:6493:15294":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:1690:11515":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:8714:4103":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"16:5385:3209":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:656:3759":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"5:5490:31283":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"16:7755:3362":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:11773:17846":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:16198:22125":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"17:10710:17675":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:33977:9826":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:14855:21888":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"6:8290:14814":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:41342:9773":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:42033:3989":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"14:202:9518":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"16:7823:17582":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"5:3097:31273":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:40739:3907":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"1:2076:197":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"6:6526:15337":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:12382:1856":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"17:11269:17730":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"16:7648:17576":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"6:1597:11507":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:6449:15332":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:3667:3911":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:45950:4204":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:42483:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:44054:9496":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:5288:29194":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"5:7033:9541":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:14968:21893":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:12189:17891":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"6:5520:14633":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"2:40858:3447":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"5:4307:3923":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"14:40:20622":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"5:7744:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"6:5288:14606":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"5:2357:31399":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:10405:9416":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"16:6560:3345":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:40006:3025":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"6:4964:14573":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:14079:21146":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"6:5488:14630":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"6:1696:4038":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:15078:17710":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:12373:737":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"11:1920:3788":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"2:7717:9603":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"6:538:10602":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"5:1625:3413":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"16:6427:3341":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"2:41333:3967":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:13412:20629":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:11302:23769":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:11743:17799":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"17:10170:3210":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:6270:3446":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:16269:20629":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"2:2133:9862":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:45971:4210":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:12494:17868":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:4215:4018":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:44852:4334":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:12543:17909":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"2:22939:3428":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:33832:9825":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"6:5670:14648":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"6:5482:14629":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"11:2228:3375":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"17:13526:20637":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"5:4536:3923":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"11:671:3404":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:11354:17743":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"18:651:34705":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:3053:137":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:40959:9792":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:32303:28580":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:26151:267":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"11:1023:3782":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:23141:3913":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"1:11211:28031":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:1207:17715":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:10041:29644":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:43579:9443":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:8183:3634":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"1:5602:4115":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"16:8188:17592":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:7715:28657":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:10342:3855":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"17:11898:17827":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:11495:9464":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:10044:17670":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:437:16571":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"16:2660:16611":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"5:6785:3091":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:11198:3404":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:12978:9475":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:15313:21918":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:13344:3267":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:13363:20625":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:32307:17595":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"6:7518:15775":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:10704:3960":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"6:7414:11624":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:10350:3237":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:11841:17849":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:14311:21160":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:13553:20639":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"16:4802:17249":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"11:2566:3041":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:9421:162":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:22555:4326":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"17:15390:21926":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:43096:29425":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"5:7206:31324":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:14066:21145":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:11786:23831":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:7718:9604":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:11764:17801":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"5:735:31198":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:43945:9487":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:2767:201":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:40709:3879":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:4406:4049":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:11094:24010":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"16:2728:16614":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"6:545:10603":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:15281:21915":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:13959:21137":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:11102:17705":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:2597:672":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:4070:3091":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"16:2528:16605":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:9232:4158":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"18:581:3467":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"11:2466:3774":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"2:3491:3818":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:34150:9827":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:12724:17680":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:23047:29353":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"6:5570:14638":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"6:5477:14628":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"5:1223:31426":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:11467:17745":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:44294:3757":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:46436:4258":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"14:165:16525":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"16:6079:3294":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"11:881:3780":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:14977:21894":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"5:7514:3793":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:8506:3441":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"14:7:16524":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:8468:3637":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:43858:9440":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:11621:3224":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:40638:106":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:45804:4202":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:21705:29506":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"6:7361:15769":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:8230:3028":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"1:12379:900":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"17:11702:17796":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"5:4491:265":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:11042:17697":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"6:5271:14604":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"5:1898:3774":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"17:16032:20623":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"17:15418:21929":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:11392:17742":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"16:6433:3343":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"18:698:3203":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:2719:24006":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"6:6740:15357":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"2:44803:227":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:15992:22114":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"17:10457:138":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"16:867:33684":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:7352:23241":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"11:1049:3783":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:6507:15295":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"11:685:3407":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:11688:17764":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"1:4008:3988":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"6:1530:11500":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:5622:4116":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:14012:21141":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:3906:3986":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:11865:17851":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"6:1584:11505":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:4153:4013":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:9403:235":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"16:6047:17532":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:10707:3962":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"16:7910:17585":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:12664:9981":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:15957:22113":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"5:4995:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:12778:9468":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"6:5507:14632":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"1:8477:3908":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:4561:4042":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"5:3094:3150":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:43057:29331":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:12386:1832":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"16:3778:16639":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:1861:3824":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:15778:21953":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:10884:4077":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"1:928:3773":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"5:3101:31272":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:41899:3979":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:42149:3091":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"6:1625:11508":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:16249:22129":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"17:16121:22119":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"9:176:3392":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:41311:9770":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:44269:9479":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:8065:3617":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"11:123:3372":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:9167:3091":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:2313:138":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"17:15138:21903":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"6:6411:15328":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"11:2366:16518":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"2:815:3994":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"2:8799:29643":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:13399:20628":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"6:4984:14576":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"6:5494:14631":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"2:44781:29330":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"2:41104:9793":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:15368:21923":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:46983:4274":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:12043:17811":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:9700:138":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"1:9159:4159":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:32338:3044":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"17:11214:17702":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"11:1900:3785":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"16:6317:17538":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:4201:4016":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"11:1064:16512":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:12225:17867":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"5:5935:251":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:11524:17790":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"16:2478:16603":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:8594:4051":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"11:2400:3407":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"1:5258:23880":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:10612:157":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:15168:21905":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:10991:3843":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"2:12984:9474":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:5515:128":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:30724:9747":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:39783:3035":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:11247:3941":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"11:2349:3783":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"6:5541:14635":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:10982:17693":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:13272:20624":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:45904:4244":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"6:7350:15768":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:8286:145":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:43347:3032":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:10750:3740":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"11:364:33516":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:12740:9982":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:8638:4076":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"11:2533:33522":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:13497:20635":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:9143:3614":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:43801:9456":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:963:3777":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"16:8301:17596":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:13606:20643":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:42366:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:9284:23040":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:44136:9492":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:12107:3215":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:7981:3754":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:4732:9565":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:12530:17910":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"18:481:22161":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"11:299:33529":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"16:2788:16617":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"16:542:3292":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:12361:417":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"16:2355:3277":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"7:0:1906":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:3658:254":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"5:898:3789":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"18:598:34713":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:3559:3923":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"6:578:10608":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:2175:17779":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:12251:17865":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"16:860:33768":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"17:14341:21162":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:43378:3601":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:22738:4319":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"16:4502:17156":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:4325:4045":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"6:5319:14610":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:4452:29641":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:9854:84":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:15222:21911":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"5:4142:3773":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"5:1410:3782":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:12557:3227":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"5:7592:3091":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:0:1718":{"crate_id":1,"path":["std"],"kind":"module"},"11:835:3776":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:597:17663":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:15582:21938":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:4853:9574":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"4:0:2882":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"15:288:16548":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:12384:1844":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:40617:9595":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"17:13855:21132":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:7612:3099":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:12328:17861":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"2:3259:4185":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"1:8856:4108":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"17:14503:21173":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"0:21:2349":{"crate_id":0,"path":["fnv","FnvHashMap"],"kind":"type_alias"},"16:8313:137":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:30750:29290":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"2:41094:3940":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"5:40:3819":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"6:485:10596":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"16:6606:17549":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:4727:9564":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:8019:3740":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"16:6480:3344":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"6:6723:15355":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"6:7316:11450":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"9:390:16396":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"5:7524:3805":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"17:15410:21928":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:9386:4139":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"5:6704:31283":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:16165:22122":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"1:5638:4117":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"6:5224:14598":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:11567:17793":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"2:12082:9448":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"17:13877:21133":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"6:4957:14572":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:11324:17758":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:34323:9828":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:11634:17767":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"16:6940:3306":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"6:6381:15266":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:1703:11516":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:5447:203":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"17:15521:21936":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:10092:17671":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"11:1580:16516":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"18:726:3205":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:14868:21889":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"16:2612:16609":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:2147:29344":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:40610:9594":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"9:0:2884":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"15:0:2889":{"crate_id":15,"path":["addr2line"],"kind":"module"},"16:6532:17546":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:43171:9408":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:40465:29400":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"6:479:10595":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:8800:4106":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"17:15039:21898":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:44886:180":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:46565:4273":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"5:1604:3775":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:3042:123":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"5:3860:3635":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"6:5036:14582":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"16:6263:33906":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:9151:3404":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:3677:3934":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"14:220:16534":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"16:4614:17176":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"5:7564:3427":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:44108:9464":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"6:5325:14611":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"3:234:226":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"6:4896:14398":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"6:7431:11622":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:1521:11499":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:10612:17673":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:47190:9373":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:9271:115":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:23027:29323":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"6:6882:14472":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"18:735:22153":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:22248:3459":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:16093:22117":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"17:12792:17646":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:9202:4157":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"5:1239:31403":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"16:7397:33869":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"5:3306:3404":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:11945:16556":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:46017:4271":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"5:3809:31283":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"5:2825:31367":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:42405:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:42221:9919":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:41867:3977":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:6461:4150":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"6:8330:14819":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"5:7721:3864":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:42278:3404":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:2711:102":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:12863:17682":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"16:7813:17581":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"16:2854:16620":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:42141:3407":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:12989:9472":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:1637:3787":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:10846:24006":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"17:9737:17640":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"2:45836:4243":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:16069:22115":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"1:5098:4073":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"11:1884:3091":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:12376:735":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"17:10661:17674":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:1974:3853":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"1:9317:3638":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"11:2380:3404":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"2:32868:9820":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:11014:23777":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"17:14298:21159":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:8516:3940":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:4694:4054":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:7980:3913":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:12711:137":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:44036:9497":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"6:5217:14597":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:9542:3839":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"1:3342:3961":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"16:8073:17586":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"17:14147:21150":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"6:8267:14811":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"17:10018:17643":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"5:1132:31283":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:6748:15358":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"2:40897:9780":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:32328:9896":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"17:12949:17684":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:22517:4325":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"17:16212:22126":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"6:5357:14615":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"5:798:118":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:10399:3238":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:33698:9824":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:12278:17894":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:14235:21154":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"6:5151:14592":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:9422:3450":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:915:3411":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"5:306:3049":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:675:3762":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:46498:4212":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"5:5538:9435":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:11670:4127":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"5:5139:3923":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"16:2394:16599":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:12385:1850":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:44389:9508":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"5:291:31283":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"11:1907:3786":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"6:5648:14646":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:11115:17704":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:47152:9371":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:22924:3460":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:11653:4104":{"crate_id":1,"path":["std","sys","thread_local","fast_local","eager","State"],"kind":"enum"},"1:10339:23833":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"2:46113:4257":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:13292:3254":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:42200:4092":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:15748:21950":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:30686:3466":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:41304:29117":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"17:13594:20642":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"11:2440:3773":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"2:8752:149":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:22579:3913":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"1:8553:3976":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"16:7111:33947":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:46259:29430":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:13644:3447":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"2:23200:29354":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"5:7639:3041":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"16:3014:16625":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"6:5249:14601":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:15301:21917":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:14271:21157":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"18:491:34720":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"6:5658:14647":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"6:6462:15333":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"6:5044:14583":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"5:7665:3423":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:12149:24009":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"16:6895:17558":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"5:1794:31283":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:527:3729":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"6:5349:14614":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"2:8005:3449":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"16:150:3285":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:21751:29513":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"2:5326:3968":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"1:12388:1916":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"6:1500:11496":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"16:7686:17578":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"16:8259:17595":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:3065:226":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"2:11402:9462":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:32339:244":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"16:4913:17268":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:1098:3783":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"5:1395:3783":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:46096:4251":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"16:5756:17523":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:9381:187":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:43821:9455":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"6:6480:15335":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:4981:4031":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:13766:17855":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:3903:3987":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:15596:21939":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"5:7475:3401":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:2003:3854":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"17:14189:21152":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:11664:3629":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:40826:9784":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:8619:4044":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"1:4821:23684":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"16:6802:16542":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:9439:3916":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:23096:3993":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"6:1657:11511":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:42011:29571":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"2:21739:29499":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"6:7368:4078":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:11953:16556":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:42561:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:5588:4114":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1:4211:4017":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:11704:23224":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"16:7590:3354":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"16:8136:17589":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"16:0:2890":{"crate_id":16,"path":["gimli"],"kind":"module"},"6:6638:15345":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:46210:4272":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:40788:3442":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:2964:163":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:39813:9839":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:11647:17794":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:15473:21935":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:40480:9596":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"5:1586:3409":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:9277:3734":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:23189:29292":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"17:15822:21956":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:12383:1838":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:42286:3407":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:15266:21913":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:3648:9838":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:13211:20621":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"5:2171:3803":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"18:531:22164":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:11440:9463":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:11063:17714":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"16:5863:17528":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:2156:9861":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"6:8302:14816":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"6:7391:11639":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:10818:17676":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:43368:4104":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"16:4856:17257":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"16:2936:16623":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:10213:22928":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"17:14372:21164":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:3393:3962":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:7867:17663":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:12377:912":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"5:3875:3803":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:12808:17647":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:11189:17707":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:14449:21169":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:6922:233":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"6:6521:15336":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:33292:9822":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:5089:4072":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"16:6665:17552":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:12659:17907":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"2:43972:3238":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:42067:3981":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"16:2303:16569":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:9886:17666":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"16:2458:16602":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:11051:17720":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:4997:14578":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"16:6504:17545":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:11730:17798":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"7:79:16373":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"16:2592:16608":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:7996:3741":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"16:7604:3355":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:10386:119":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"11:854:3778":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:2485:3895":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:680:3763":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:2733:112":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:33631:4188":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:42124:173":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"16:2838:16619":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"16:4468:17145":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:44789:164":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:10887:34692":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:11574:3375":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"16:6948:3349":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:47126:9369":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:46660:29328":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"1:10498:23834":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"6:8008:16150":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"16:2748:16615":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"6:6623:15343":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:43832:9442":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"6:5186:14594":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:44865:30769":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"1:8605:4041":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:9755:17638":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:38358:9834":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:15931:20620":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"16:7428:17567":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:16235:22128":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"6:6437:15330":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:15249:21912":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:11256:17729":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"11:1005:3781":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":29}