{"root":"0:0:2022","crate_version":"1.0.7","includes_private":false,"index":{"2:11440:52708":{"id":"2:11440:52708","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11321:2324":{"id":"2:11321:2324","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7718:2711-0:10:1591":{"id":"a:2:7718:2711-0:10:1591","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7718:2711","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11352:54611":{"id":"2:11352:54611","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"2:11021:3125","prim@char":"1:12349:2152"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:3126","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11358:54613":{"id":"2:11358:54613","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"2:11021:3125","prim@char":"1:12349:2152"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:3126","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:3126","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:3129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2515:1417":{"id":"2:2515:1417","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48161:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"name":"TryFrom","id":"2:2480:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11351:57491":{"id":"2:11351:57491","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:50277:3399","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11349:3955":{"id":"2:11349:3955","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:50239:2557","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3306:1431":{"id":"2:3306:1431","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:46490:2456","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11441:52709":{"id":"2:11441:52709","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5090:2582":{"id":"5:5090:2582","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:6957:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6957:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:13":{"id":"0:13","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[91,0],"end":[97,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2547:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:14:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11345:3156":{"id":"2:11345:3156","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12349:2152"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49961:3383","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11445:2834":{"id":"2:11445:2834","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4454:2834"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:50293:2835","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11425:54614":{"id":"2:11425:54614","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:11021:3125","prim@char":"1:12349:2152"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:3126","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:3126","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:3129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11408:58485":{"id":"2:11408:58485","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2499:2317":{"id":"2:2499:2317","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2473:132"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11340:58475":{"id":"2:11340:58475","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12355:2157","crate::ops::Index":"2:2970:2827","str::slice_mut_unchecked":"2:11341:58476"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11402:58483":{"id":"2:11402:58483","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11021:3125","prim@char":"1:12349:2152","`DoubleEndedIterator`":"2:7061:120","str::rmatch_indices":"2:11405:58484"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:50135:3391","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:3126","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11350:58477":{"id":"2:11350:58477","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:50249:3396","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11343:54595":{"id":"2:11343:54595","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11342:54594"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11365:2323":{"id":"2:11365:2323","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"self::pattern":"2:11021:3125","`None`":"2:48019:174","prim@char":"1:12349:2152"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:3126","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:3126","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:3129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11346:1599":{"id":"2:11346:1599","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49971:2555","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7717:2709-0:10:1591":{"id":"a:2:7717:2709-0:10:1591","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7717:2709","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:17":{"id":"0:17","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[108,0],"end":[125,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["write_usize","write_u32","write_length_prefix","write_i64","write_i8","write_u64","write_u8","write_i128","write_i16","write_u128","write_u16","write_str","write_isize","write_i32"],"trait":{"name":"Hasher","id":"2:8813:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:18:1597","0:19:1598"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11439:3596":{"id":"2:11439:3596","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11416:58490":{"id":"2:11416:58490","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"2:11021:3125","prim@char":"1:12349:2152"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:3126","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:3126","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11046:3124","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11375:54605":{"id":"2:11375:54605","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11021:3125","prim@char":"1:12349:2152","`DoubleEndedIterator`":"2:7061:120","str::split":"2:11369:52081"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:50003:2429","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:3126","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:3126","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:3129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5092:52707":{"id":"5:5092:52707","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:11442:52710"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6957:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2223:2222":{"id":"2:2223:2222","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3304-0:10:1591":{"id":"b:2:3304-0:10:1591","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:2285","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3302:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3306:1431"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11381:58479":{"id":"2:11381:58479","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11021:3125","str::split":"2:11369:52081","prim@char":"1:12349:2152","str::split_terminator":"2:11378:58478"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:50053:3388","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:3126","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:3126","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:3129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11330:306":{"id":"2:11330:306","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:11331:54573","`u8`":"1:12366:2166"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11336:54571":{"id":"2:11336:54571","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9118:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9118:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"5:5074:2558":{"id":"5:5074:2558","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:6957:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6957:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:3126","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11410:58486":{"id":"2:11410:58486","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11355:54612":{"id":"2:11355:54612","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"2:11021:3125","prim@char":"1:12349:2152"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:3126","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11415:58489":{"id":"2:11415:58489","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:20:1603":{"id":"0:20:1603","crate_id":0,"name":"FnvBuildHasher","span":{"filename":"lib.rs","begin":[128,0],"end":[128,56]},"visibility":"public","docs":"A builder for default FNV hashers.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"BuildHasherDefault","id":"2:8853:1586","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"0:18:1597":{"id":"0:18:1597","crate_id":0,"name":"finish","span":{"filename":"lib.rs","begin":[110,4],"end":[112,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:10:1591":{"id":"0:10:1591","crate_id":0,"name":"FnvHasher","span":{"filename":"lib.rs","begin":[89,0],"end":[89,26]},"visibility":"public","docs":"An implementation of the Fowler–Noll–Vo hash function.\n\nSee the [crate documentation](index.html) for more details.","links":{},"attrs":["#[allow(missing_copy_implementations)]"],"deprecation":null,"kind":"struct","inner":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:15","a:2:2645:214-0:10:1591","a:2:2659:222-0:10:1591","a:2:7718:2711-0:10:1591","a:2:2709:2286-0:10:1591","a:2:7717:2709-0:10:1591","b:2:3304-0:10:1591","b:2:2500-0:10:1591","b:2:2506-0:10:1591","b:2:2224-0:10:1591","b:2:2511-0:10:1591","b:2:2221-0:10:1591","b:2:2496-0:10:1591","0:13","0:17"]}},"2:11442:52710":{"id":"2:11442:52710","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11319":{"id":"2:11319","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:10584:1343","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11320:781","2:11321:2324","2:11322:58471","2:11323:58472","2:11325:58473","2:11328:51287","2:11329:58474","2:11330:306","2:11331:54573","2:11332:54569","2:11334:54570","2:11336:54571","2:11338:54572","2:11340:58475","2:11341:58476","2:11342:54594","2:11343:54595","2:11344:3419","2:11345:3156","2:11346:1599","2:11347:57467","2:11348:57468","2:11349:3955","2:11350:58477","2:11351:57491","2:11352:54611","2:11355:54612","2:11358:54613","2:11361:2364","2:11365:2323","2:11369:52081","2:11372:54603","2:11375:54605","2:11378:58478","2:11381:58479","2:11384:54607","2:11387:54609","2:11390:58480","2:11393:58481","2:11396:2237","2:11399:58482","2:11402:58483","2:11405:58484","2:11408:58485","2:11410:58486","2:11412:58487","2:11414:58488","2:11415:58489","2:11416:58490","2:11419:58491","2:11422:51351","2:11425:54614","2:11428:58492","2:11431:58493","2:11434:58494","2:11437:3292","2:11439:3596","2:11440:52708","2:11441:52709","2:11442:52710","2:11443:58495","2:11445:2834","2:11446:58496"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11384:54607":{"id":"2:11384:54607","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"self::pattern":"2:11021:3125","str::rsplitn":"2:11387:54609","prim@char":"1:12349:2152"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:50089:2433","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:3126","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5073:59128":{"id":"5:5073:59128","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:276:2293","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6702:2403","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:276:2293","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6702:2403","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2510:1418":{"id":"2:2510:1418","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48161:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2480:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2226:51278":{"id":"2:2226:51278","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2514:127":{"id":"2:2514:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:39262:2640","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"2:11437:3292":{"id":"2:11437:3292","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:10983:126","`FromStr`":"2:10982:2717"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48161:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:10982:2717","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:10982:2717","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11323:58472":{"id":"2:11323:58472","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11341:58476":{"id":"2:11341:58476","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"crate::ops::IndexMut":"2:2974:2831","`str`":"1:12355:2157","str::slice_unchecked":"2:11340:58475"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11329:58474":{"id":"2:11329:58474","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11328:51287":{"id":"2:11328:51287","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:10589:3553"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:2022":{"id":"0:0:2022","crate_id":0,"name":"fnv","span":{"filename":"lib.rs","begin":[1,0],"end":[367,1]},"visibility":"public","docs":"An implementation of the [Fowler–Noll–Vo hash function][chongo].\n\n## About\n\nThe FNV hash function is a custom `Hasher` implementation that is more\nefficient for smaller hash keys.\n\n[The Rust FAQ states that][faq] while the default `Hasher` implementation,\nSipHash, is good in many cases, it is notably slower than other algorithms\nwith short keys, such as when you have a map of integers to other values.\nIn cases like these, [FNV is demonstrably faster][graphs].\n\nIts disadvantages are that it performs badly on larger inputs, and\nprovides no protection against collision attacks, where a malicious user\ncan craft specific keys designed to slow a hasher down. Thus, it is\nimportant to profile your program to ensure that you are using small hash\nkeys, and be certain that your program could not be exposed to malicious\ninputs (including being a networked server).\n\nThe Rust compiler itself uses FNV, as it is not worried about\ndenial-of-service attacks, and can assume that its inputs are going to be\nsmall—a perfect use case for FNV.\n\n\n## Using FNV in a `HashMap`\n\nThe `FnvHashMap` type alias is the easiest way to use the standard library’s\n`HashMap` with FNV.\n\n```rust\nuse fnv::FnvHashMap;\n\nlet mut map = FnvHashMap::default();\nmap.insert(1, \"one\");\nmap.insert(2, \"two\");\n\nmap = FnvHashMap::with_capacity_and_hasher(10, Default::default());\nmap.insert(1, \"one\");\nmap.insert(2, \"two\");\n```\n\nNote, the standard library’s `HashMap::new` and `HashMap::with_capacity`\nare only implemented for the `RandomState` hasher, so using `Default` to\nget the hasher is the next best option.\n\n## Using FNV in a `HashSet`\n\nSimilarly, `FnvHashSet` is a type alias for the standard library’s `HashSet`\nwith FNV.\n\n```rust\nuse fnv::FnvHashSet;\n\nlet mut set = FnvHashSet::default();\nset.insert(1);\nset.insert(2);\n\nset = FnvHashSet::with_capacity_and_hasher(10, Default::default());\nset.insert(1);\nset.insert(2);\n```\n\n[chongo]: http://www.isthe.com/chongo/tech/comp/fnv/index.html\n[faq]: https://www.rust-lang.org/en-US/faq.html#why-are-rusts-hashmaps-slow\n[graphs]: https://cglab.ca/~abeinges/blah/hash-rs/","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:10:1591","0:20:1603","0:21:1605","0:24:1609"],"is_stripped":false}},"2:11332:54569":{"id":"2:11332:54569","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:48019:174"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9118:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9118:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11393:58481":{"id":"2:11393:58481","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:3126","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:3126","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:3129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11405:58484":{"id":"2:11405:58484","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11021:3125","`DoubleEndedIterator`":"2:7061:120","prim@char":"1:12349:2152","str::match_indices":"2:11402:58483"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:50153:3392","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:3126","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:3126","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:3129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11431:58493":{"id":"2:11431:58493","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:11021:3125","prim@char":"1:12349:2152"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:3126","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2500-0:10:1591":{"id":"b:2:2500-0:10:1591","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2473:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2502:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11422:51351":{"id":"2:11422:51351","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:11021:3125","prim@char":"1:12349:2152"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:3126","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:24:1609":{"id":"0:24:1609","crate_id":0,"name":"FnvHashSet","span":{"filename":"lib.rs","begin":[136,0],"end":[136,52]},"visibility":"public","docs":"A `HashSet` using a default FNV hasher.","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"HashSet","id":"1:1473:142","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"resolved_path","inner":{"name":"FnvBuildHasher","id":"0:20:1603","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"5:5089:59132":{"id":"5:5089:59132","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2293","`String`":"5:6957:218"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:276:2293","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6702:2403","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6957:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11322:58471":{"id":"2:11322:58471","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2496-0:10:1591":{"id":"b:2:2496-0:10:1591","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2473:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2470:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2499:2317"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:15":{"id":"0:15","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[99,0],"end":[106,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:16:1595"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5072":{"id":"5:5072","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:4983:1343","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5073:59128","5:5074:2558","5:5077:59129","5:5080:59130","5:5088:59131","5:5089:59132","5:5090:2582","5:5091:52706","5:5092:52707"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2511-0:10:1591":{"id":"b:2:2511-0:10:1591","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2470:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2480:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2514:127","2:2515:1417"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11399:58482":{"id":"2:11399:58482","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"str::matches":"2:11396:2237","self::pattern":"2:11021:3125","prim@char":"1:12349:2152","`DoubleEndedIterator`":"2:7061:120"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:50207:3395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:3126","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:3126","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:3129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2659:222-0:10:1591":{"id":"a:2:2659:222-0:10:1591","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2659:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:5080:59130":{"id":"5:5080:59130","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:6957:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6957:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11446:58496":{"id":"2:11446:58496","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4451:58496"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:50302:3401","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11338:54572":{"id":"2:11338:54572","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9118:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9118:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2221-0:10:1591":{"id":"b:2:2221-0:10:1591","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:2285","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2215:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2223:2222"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:19:1598":{"id":"0:19:1598","crate_id":0,"name":"write","span":{"filename":"lib.rs","begin":[115,4],"end":[124,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["bytes",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11320:781":{"id":"2:11320:781","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12349:2152"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2709:2286-0:10:1591":{"id":"a:2:2709:2286-0:10:1591","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2709:2286","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2224-0:10:1591":{"id":"b:2:2224-0:10:1591","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:2285","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2218:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2226:51278"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:5077:59129":{"id":"5:5077:59129","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:6957:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6957:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:3126","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11434:58494":{"id":"2:11434:58494","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12349:2152","self::pattern":"2:11021:3125"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:3126","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:3126","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:3129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11344:3419":{"id":"2:11344:3419","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12349:2152"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49955:3382","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:14:59":{"id":"0:14:59","crate_id":0,"name":"default","span":{"filename":"lib.rs","begin":[94,4],"end":[96,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:21:1605":{"id":"0:21:1605","crate_id":0,"name":"FnvHashMap","span":{"filename":"lib.rs","begin":[132,0],"end":[132,58]},"visibility":"public","docs":"A `HashMap` using a default FNV hasher.","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"HashMap","id":"1:771:140","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"resolved_path","inner":{"name":"FnvBuildHasher","id":"0:20:1603","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"2:2502:668":{"id":"2:2502:668","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2506-0:10:1591":{"id":"b:2:2506-0:10:1591","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2480:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2476:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2509:127","2:2510:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11396:2237":{"id":"2:11396:2237","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"prim@char":"1:12349:2152","`DoubleEndedIterator`":"2:7061:120","str::matches":"2:11396:2237","self::pattern":"2:11021:3125"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:50189:3394","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:3126","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11372:54603":{"id":"2:11372:54603","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"self::pattern":"2:11021:3125","prim@char":"1:12349:2152"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:10845:2435","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:3126","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:16:1595":{"id":"0:16:1595","crate_id":0,"name":"with_key","span":{"filename":"lib.rs","begin":[103,4],"end":[105,5]},"visibility":"public","docs":"Create an FNV hasher starting with a state corresponding\nto the hash `key`.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["key",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11387:54609":{"id":"2:11387:54609","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12349:2152","str::splitn":"2:11384:54607","self::pattern":"2:11021:3125"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:50107:2431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:3126","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:3126","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:3129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11348:57468":{"id":"2:11348:57468","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11347:57467"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:50268:3398","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11347:57467":{"id":"2:11347:57467","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11348:57468"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:50259:3397","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11331:54573":{"id":"2:11331:54573","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12366:2166"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11419:58491":{"id":"2:11419:58491","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12349:2152","self::pattern":"2:11021:3125"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:3126","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2509:127":{"id":"2:2509:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2480:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"5:5091:52706":{"id":"5:5091:52706","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:11441:52709"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6957:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11334:54570":{"id":"2:11334:54570","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:48019:174"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9118:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9118:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11428:58492":{"id":"2:11428:58492","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:11021:3125","prim@char":"1:12349:2152"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:3126","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:3126","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:3129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5088:59131":{"id":"5:5088:59131","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:6957:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6957:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11443:58495":{"id":"2:11443:58495","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4453:58495"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:50284:3400","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11342:54594":{"id":"2:11342:54594","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11343:54595"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11414:58488":{"id":"2:11414:58488","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11412:58487":{"id":"2:11412:58487","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11390:58480":{"id":"2:11390:58480","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:3126","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11325:58473":{"id":"2:11325:58473","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11323:58472"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11369:52081":{"id":"2:11369:52081","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"str::rsplit":"2:11375:54605","str::split_whitespace":"2:11347:57467","self::pattern":"2:11021:3125","`DoubleEndedIterator`":"2:7061:120","prim@char":"1:12349:2152"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49985:2419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:3126","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2645:214-0:10:1591":{"id":"a:2:2645:214-0:10:1591","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2645:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11378:58478":{"id":"2:11378:58478","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"prim@char":"1:12349:2152","str::split":"2:11369:52081","`DoubleEndedIterator`":"2:7061:120","str::rsplit_terminator":"2:11381:58479","self::pattern":"2:11021:3125"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:50035:3387","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:3126","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11361:2364":{"id":"2:11361:2364","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:48019:174","self::pattern":"2:11021:3125","prim@char":"1:12349:2152"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:3126","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"2:2911:2287":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:12331:51531":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:7138:155":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"6:4737:40279":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"18:719:4534":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"5:1971:3700":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:131:36657":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"1:8346:2584":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"17:10207:44804":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:12103:49457":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"5:1385:2811":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:4429:3068":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:8122:2568":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:8510:4732":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:8631:4739":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"6:1518:37862":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"16:7350:4331":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:951:2499":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"1:5816:2781":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"16:7297:4113":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:21375:3457":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:967:44582":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:46882:3576":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"12:1836:2329":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"16:4432:43398":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:49793:2416":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"16:6337:4092":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:2432:2641":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:9451:4800":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"16:3590:42868":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"6:4706:40276":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:46809:3579":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:21349:3524":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:7084:2291":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"5:6951:58071":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"6:4804:40285":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:10445:4476":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:6434:4804":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"6:4534:40255":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"6:4379:40243":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:9071:61071":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:1808:592":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:46799:3578":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:2736:2465":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"1:8560:3062":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"6:5660:40903":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"6:5605:40901":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:2800:2508":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:3249:4425":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:8581:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:12368:2168":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"17:10270:44791":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"16:7475:4013":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:56552:3429":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"17:11974:49448":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:10817:2776":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:1551:2538":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"16:6654:4014":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"12:1832:2423":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:11705:51586":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:50207:3395":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:0:1335":{"crate_id":1,"path":["std"],"kind":"module"},"16:2311:3991":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:11761:49433":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:11054:4748":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:5673:2773":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"5:620:57927":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:2380:2968":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:5060:2523":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:12730:50064":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"16:7920:4119":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:7408:2506":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"12:646:2424":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:9118:61078":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:8162:4422":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:10547:2721":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"6:4506:40252":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"16:5995:4083":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"17:9371:44517":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"16:6474:4095":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:47485:31687":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:13594:50768":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"5:6734:3716":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:46908:3208":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:2834:2853":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"5:1404:2813":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:11515:49253":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"17:12874:50159":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"16:4208:43342":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:11217:45178":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:7831:2447":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:10734:3386":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:9339:4491":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:11014:45070":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:2510:2566":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:3226:2579":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:9433:44579":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:9031:61082":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"6:4212:40223":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:11161:45174":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"5:3337:2423":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:2250:2964":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"16:7256:4109":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:11732:51911":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"16:6855:4102":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"6:1887:38019":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"6:4810:40286":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"12:751:2498":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:7020:133":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"16:4626:43472":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:9658:44624":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"16:6597:4098":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"6:4496:40251":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"16:4879:43533":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:8591:189":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:49971:2555":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"16:5793:4078":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:21168:3299":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:2757:2473":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:11643:4805":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:10233:44814":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"16:2456:4313":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"6:5510:40894":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"16:2833:4270":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:8587:2675":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:5653:2772":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"17:9909:4744":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:8939:2423":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:4312:2689":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"1:9474:51353":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"12:2069:2821":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:53533:3244":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"16:2921:3992":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:52689:3263":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:11617:49362":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:12198:49524":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:7928:2511":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"5:1067:3698":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:1964:2957":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"16:6308:4091":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"12:1518:3918":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:50545:3140":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"18:624:61096":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"6:1562:37867":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:49348:4794":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:2916:4413":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:20005:57658":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:12363:2163":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"17:13168:50631":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"16:6276:4035":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"12:320:3910":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:6006:3034":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:9552:4812":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:884:2423":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:9700:4438":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"6:1608:37872":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"16:5503:4067":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:8589:2676":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"12:393:60162":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"10:0:2124":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"16:2380:4285":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:6749:2584":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:11996:3936":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:52430:56599":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:7522:52845":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"5:3529:2499":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"16:7907:4118":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"6:567:36980":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:49840:2404":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"18:736:4536":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:12860:50157":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:51963:3245":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:12060:49454":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:5610:57226":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"12:2190:60169":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"15:214:3932":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"16:4253:43363":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:2722:2609":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:6797:57576":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:8076:2627":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:1750:57399":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"17:8752:2555":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:8720:2516":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:2918:2289":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:2273:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"5:1680:2499":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"17:8881:61072":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:46407:196":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:3182:3122":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:12617:50004":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"5:5339:226":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"12:2205:2274":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"16:7887:4025":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"6:5733:40911":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"6:1686:37878":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:10625:4379":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:7922:7709":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:571:2946":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"5:6799:2329":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"12:0:2126":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"1:897:2424":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"6:4644:40269":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"16:5739:4075":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:7415:2861":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:50259:3397":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"16:3393:42850":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:8537:3061":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"2:48406:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"5:215:3670":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:2561:127":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"1:10963:2926":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"6:1678:37877":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"5:1584:4637":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:10062:44703":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"5:5528:3607":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"6:5504:40893":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"18:727:4535":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"16:7335:4029":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"18:521:4539":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:11899:138":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"6:6524:41330":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:8526:4455":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:11021:3125":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:3310:2563":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:48220:2329":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"6:4239:40226":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:13192:50634":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:49047:109":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"1:12364:2164":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:12046:49453":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:2470:146":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"5:6764:193":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:13141:50607":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:11664:187":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"16:6646:4322":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:49853:2405":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:11774:49434":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:1111:2822":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:11092:3132":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:9021:44516":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:48254:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"5:3460:2570":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"16:5519:4068":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"3:223:205":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:2771:2480":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:46325:195":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"5:3417:4637":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"5:6286:3651":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"6:5498:40892":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"5:0:279":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:52925:3243":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:8374:2551":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"6:4367:40242":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:8929:2742":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:8536:131":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"18:707:3128":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"5:5943:2498":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"6:4346:40239":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:9885:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"2:53994:18493":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:12964:50559":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:9764:44626":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"15:175:3927":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:52355:3234":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:20028:57659":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:8796:4378":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:49943:2719":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"18:564:4545":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:12550:50002":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:54089:18500":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"6:4102:40214":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:9183:44519":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"16:5154:4274":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"16:7113:4284":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"5:1415:2814":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:2775:2482":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:658:2958":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:3167:3216":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:13024:50590":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:50889:200":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:247:61067":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:52847:3255":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"5:5600:2538":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:10982:2717":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"6:5472:40890":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:6502:2869":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"6:1511:37861":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"16:6124:4056":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:2304:177":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"16:524:4264":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:52477:56598":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:542:2941":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:10918:2577":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:0:481":{"crate_id":2,"path":["core"],"kind":"module"},"6:4461:40249":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:8724:11055":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:13134:50606":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:21:660":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"18:113:51119":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:47269:2554":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"6:1550:37866":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"5:1230:2823":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:10139:4399":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:11415:4684":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:4258:2616":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"16:4404:43394":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:3302:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"17:8137:44510":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"15:0:2128":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:5884:2645":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"18:755:4537":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"18:507:61085":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:8941:44514":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:46742:2835":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:2898:205":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"17:12972:50560":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:3145:134":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:9434:2436":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:50776:2492":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:52309:3249":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"6:4659:40271":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:6430:41325":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:10121:4417":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:54104:18501":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"5:4969:4647":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"16:2674:4293":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"18:609:61104":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:9462:2945":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:5756:2777":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:56909:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:7717:2709":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:11174:45175":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"9:896:3744":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:8141:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"6:5480:40891":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:1918:2715":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:6670:2807":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:3140:227":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:2218:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:8814:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"6:4231:40225":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"6:600:36985":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:8471:2725":{"crate_id":1,"path":["std","net","ip_addr","Ipv6Addr"],"kind":"struct"},"18:652:61085":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"5:6717:3715":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:8494:4731":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:50277:3399":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:2547:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:2921:2290":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:50387:3130":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"5:6957:218":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:12352:2154":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:10497:54323":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"2:47492:2807":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"6:4115:40215":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:4:975":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"16:6545:4026":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:47183:2886":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:11426:4685":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"18:96:51118":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"16:7581:4034":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"5:2935:2423":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:9947:44732":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:49895:2427":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:10860:4683":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"16:3680:42910":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"16:4565:43459":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"5:3721:2498":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:13436:50690":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:5687:2774":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"16:5771:4077":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:29512:3196":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:50559:3141":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:50728:3408":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:999:2819":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:4965:2517":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:11487:2778":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:11813:49437":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"16:7227:4107":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:9509:4810":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:46510:4052":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"2:49117:2672":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"17:10583:4376":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:50249:3396":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"6:4605:40264":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"5:3350:2424":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"6:6293:36851":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:4581:40261":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"18:491:61093":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"16:6012:4084":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"16:6323:4012":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:39302:2453":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:48161:205":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"6:545:36977":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:1608:2498":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:8670:2667":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:10921:2579":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:6225:201":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:9292:2778":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:1903:44613":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"3:0:429":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:58262:57403":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"5:2942:2501":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:4010:3005":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"16:6149:4057":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:46310:3182":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"9:592:3783":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"16:2424:4286":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:8593:2677":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"5:2730:58002":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:51686:56548":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:50153:3392":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"16:6115:4004":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:54025:18496":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:10385:4452":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:2830:2851":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"5:3897:2423":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"6:6509:41329":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:4332:2612":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:48368:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:13518:50724":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"16:3017:42847":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:2406:2978":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"6:1500:37859":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:7719:2712":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:47145:2876":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"5:3472:3690":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:4264:2617":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:25196:3200":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:4072:3326":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"5:36:3645":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"6:7255:40416":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"18:644:61085":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:48444:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"18:481:4540":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:8395:2505":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:10075:2421":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"6:6302:41319":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"16:7521:4010":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"6:7166:41863":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"6:4307:40235":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:9601:4389":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:9751:4440":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:8405:2554":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"17:9155:44518":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"12:1065:3905":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:2788:2836":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:4312:2619":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:7938:2824":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"2:2480:230":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"16:6219:4089":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"16:7615:4022":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:10310:44816":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:52111:3262":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:1629:2502":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:48756:2674":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"16:7321:4016":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"16:6450:3925":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:46821:3401":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"6:6545:41332":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"14:31:42770":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:12361:2161":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:20276:2634":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:46922:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:12748:50066":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:8799:139":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1:8779:11062":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:48212:2424":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:9469:2429":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:53783:3268":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:11556:51522":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:7769:4678":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"6:1595:37870":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"5:5180:3650":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:47519:4662":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:50302:3401":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"5:5789:13148":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:2779:2484":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:10360:4509":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:10506:44793":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"6:1643:37874":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"16:4597:43467":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:11199:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:14:1598":{"crate_id":2,"path":["core","write"],"kind":"macro"},"12:2080:2822":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"6:4294:40233":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:29534:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:6032:3035":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:21276:56555":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:13126:50605":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:46517:56954":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"2:2795:2507":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:10854:4436":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"12:98:3908":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:12374:2174":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"6:5541:40897":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"16:7413:4049":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:47207:2888":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:3228:2580":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"6:6975:41702":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:20842:2635":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:13007:50589":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"6:6352:37827":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"12:119:3912":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:13031:50591":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:2952:3166":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"2:2476:231":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:20948:2447":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"12:1085:3906":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:12955:50239":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:20435:3116":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"16:2885:4305":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:21342:57604":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:6375:37801":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:6068:3044":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:3949:2794":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:13527:50725":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"6:1695:37879":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:7720:44509":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"16:4840:43518":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"16:5974:4082":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:20274:2447":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"6:487:36970":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:9328:4490":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:21756:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"17:9844:4500":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"12:834:2817":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:51810:3273":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"5:2947:3598":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:12337:4476":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:12361:49604":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:9548:2433":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:54005:18494":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:11161:51520":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"12:632:2423":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:52065:3274":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:9698:5267":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"17:0:2130":{"crate_id":17,"path":["object"],"kind":"module"},"2:11247:111":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:6416:2337":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:3353:2455":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"1:4298:2613":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:8353:2586":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:2656:219":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"16:2273:4272":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:12371:2171":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:9422:44580":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"16:3001:4300":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:4437:3070":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"16:5959:4268":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"6:4565:40259":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"16:8047:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:1088:2820":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:9369:2647":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:11832:106":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:53391:3276":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"5:3994:238":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"5:1201:2822":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:2647:2569":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:6597:161":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:48093:2329":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"1:1473:142":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"9:709:2739":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:11485:49251":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:11547:44734":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:10794:3390":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"6:5713:40908":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:52257:3242":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"12:387:60161":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:8573:2667":{"crate_id":1,"path":["std","net","socket_addr","SocketAddr"],"kind":"enum"},"2:8595:2678":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:46224:2661":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:50570:3142":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:46748:29451":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:48144:36216":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:5083:2518":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:9597:2488":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:12354:2156":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:2822:2847":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"6:4437:40247":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"6:4551:40257":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:46769:3204":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:12148:49460":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"16:5715:4074":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:6775:3041":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"11:44:3895":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"16:2784:4299":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"14:165:42771":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:21723:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"17:11639:49363":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:10682:4480":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:9396:2420":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"6:4629:40267":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:47062:2505":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"16:2859:4271":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"5:842:3714":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"16:5226:60440":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:10394:4453":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"6:1654:37875":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"9:863:3742":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:10466:44818":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:9791:44627":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"5:5492:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:8431:151":{"crate_id":1,"path":["std","net","ip_addr","IpAddr"],"kind":"enum"},"2:48085:2424":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"1:4206:2446":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"6:4126:40216":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"13:220:4778":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"6:6500:41328":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:9892:2961":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"2:9562:2431":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"16:7545:4037":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"5:2726:58004":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"16:6794:4324":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"16:5402:4061":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:10434:44817":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:46829:3573":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"1:11690:51508":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"5:1933:2941":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:11896:3013":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:9590:2432":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:10752:4374":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:9738:4442":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"14:160:42770":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"5:4039:2538":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:8956:2745":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:12366:2166":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"1:10633:2785":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"17:9274:44568":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"16:5574:4070":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"6:0:786":{"crate_id":6,"path":["libc"],"kind":"module"},"6:1701:37880":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"16:3448:42851":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:12349:49601":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"6:4761:40281":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:4890:2617":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:54181:18504":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:2826:2849":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:9582:162":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"9:19:3832":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"17:10708:4475":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:29506:2806":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"6:554:36978":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:13580:50734":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:50293:2835":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"9:977:3745":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:2573:2567":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"5:6772:3602":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"18:80:51117":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:8106:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:21954:164":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:10185:4663":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"2:21297:56551":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"6:4247:40227":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:8295:44511":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"16:7071:4104":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:50720:3413":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:11315:45353":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:7005:2633":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:12350:2153":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:47540:31692":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"16:6262:4019":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:11041:3129":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:11199:45177":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"16:5450:4064":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:976:2816":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"16:5210:4732":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:12674:50059":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:4834:2459":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:46569:3103":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:10702:2775":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:10771:3389":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"16:6807:4325":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:52287:3246":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:3188:2577":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:678:7710":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"18:574:61085":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"5:1049:3697":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:51862:3265":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:4212:2444":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"16:5592:4262":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"12:669:2813":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:7832:2915":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:12630:50056":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:10182:44704":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:21921:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"6:4698:40275":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:521:4664":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"16:5379:4060":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:8797:2729":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"5:2976:2500":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:11637:56948":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:8441:4477":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:12315:4816":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:562:44509":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:7033:2292":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:20194:3218":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"2:8579:111":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"1:8488:2726":{"crate_id":1,"path":["std","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"16:7992:4052":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"16:4808:43510":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:11026:3126":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:2839:2856":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"16:5856:4080":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:52735:3267":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"6:1525:37863":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:4355:2690":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:12609:50003":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:47012:9235":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"1:2583:4666":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:47216:2889":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:928:2811":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:13393:50685":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"18:660:4529":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"6:6953:36929":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:2396:2973":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"6:6409:41322":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:11841:49439":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"6:4096:40213":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"12:985:2820":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"6:4540:40256":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:9265:2423":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"9:33:3833":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"12:822:2816":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"14:202:3683":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"6:4280:40231":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:3190:2578":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"6:4653:40270":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:2900:2559":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"16:7189:3999":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:9497:56126":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:5870:201":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"5:3792:2424":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"16:5606:4071":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:4242:2614":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:13572:50732":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:19960:2628":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:5005:2519":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"5:4009:4639":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"16:2358:4289":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:9894:4682":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:6778:2761":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:12353:2155":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"16:3623:42877":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:2645:214":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"17:10973:44957":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"12:444:140":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"16:7868:4023":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:50716:3415":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:50433:3137":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:716:7712":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"12:1872:2503":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"6:6415:41323":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:47299:2883":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"18:766:4538":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:21690:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"17:13536:50726":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"6:1541:37865":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:9627:4395":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"12:1840:2498":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:47510:2585":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:11812:2796":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:8608:2793":{"crate_id":1,"path":["std","net","socket_addr","SocketAddrV6"],"kind":"struct"},"12:1628:4635":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:9507:2430":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"11:36:60156":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"5:1394:2812":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"6:4515:40253":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"16:2478:4290":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:47163:2879":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"16:6048:3998":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:3400:2546":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"16:7430:193":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:47248:2891":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"6:1636:37873":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"6:7266:40417":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:10589:3553":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:11219:51830":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:9526:4388":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"16:6506:4096":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:12365:2165":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"6:4690:965":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:12033:49452":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"12:1555:3920":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:3267:2576":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:9108:2447":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:8981:44515":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:8054:2961":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:12225:49526":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"9:188:3808":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"1:1823:8704":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"17:9193:61083":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"6:5587:40899":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:13374:50683":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:12980:50587":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"16:7307:4114":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"5:4913:2396":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"16:0:2129":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:6834:211":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"13:0:2120":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:9587:212":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:13459:50693":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:10924:2575":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"1:1605:2329":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:10088:44702":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"16:6087:4032":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:12003:3936":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:7843:51939":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"17:11288:45349":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"6:5672:40904":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:2247:2962":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:1635:571":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:20233:2447":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"2:2310:184":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:11951:49447":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:47103:2873":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"5:7034:2499":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"17:11559:49258":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:21363:3458":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:9283:44584":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"5:1348:2424":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"5:6756:2329":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"0:24:1609":{"crate_id":0,"path":["fnv","FnvHashSet"],"kind":"typedef"},"17:13176:50632":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:907:2329":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:11616:30017":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"16:7037:3481":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:4042:3325":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"6:646:37015":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"1:11970:51916":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"16:6178:4087":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"16:7948:4021":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:10420:4510":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:58283:57405":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"1:4904:51905":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"17:11997:49449":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:13100:50600":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:13478:50699":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"16:5817:4079":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"6:5772:40913":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:51911:3253":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"5:6858:2275":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:7965:3706":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"1:11319:8717":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:48558:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:50402:3133":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"16:8034:3989":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"6:5782:40914":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:20690:12954":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"5:6267:3650":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:3130:3471":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:6633:56127":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"2:4258:2688":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:2816:2844":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"5:4917:2394":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:21855:165":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"16:2291:4314":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"5:859:2423":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:595:2462":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:10532:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:11034:45071":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"6:6981:41703":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"5:5512:3606":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"6:4398:40244":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:48482:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"16:2332:4307":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"16:7144:4105":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:20220:3279":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"2:20402:2447":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"16:6030:4085":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:53891:3251":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:12370:2170":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:6489:2644":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:12367:2167":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"16:5488:4066":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:8200:2767":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"16:7276:4111":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:10875:4419":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:2473:132":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:56961:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:6891:3684":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"6:6311:41320":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:9897:44731":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"9:800:42143":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:12816:4762":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:13114:50602":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:11835:3005":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:3219:3123":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"6:1714:37881":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:11909:49443":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"6:501:36972":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:625:2832":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:53001:3250":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"6:4665:40272":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"13:108:60213":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:7221:3002":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"17:13047:50595":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:21259:56533":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:10108:4416":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:51710:3272":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:8677:3066":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:11738:51913":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:11173:2963":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"12:1845:2499":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"1:8628:3008":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:48017:176":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:3418:2548":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:47122:2875":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"5:3548:4637":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"16:6697:4320":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:12514:50001":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:6308:4668":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"6:4257:40228":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"16:2548:4292":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:50365:3127":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"5:6711:2329":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:20245:3118":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"16:7404:4033":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"16:6881:4103":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"6:581:36982":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:8991:61077":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:8393:4358":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:48777:2676":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:52531:56603":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:21888:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:3343:2585":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"16:5681:4073":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:10774:4372":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:49318:143":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"5:6874:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:50107:2431":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:47233:2890":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"17:11734:49431":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:9831:4499":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:8633:3009":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:50755:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"5:2724:2386":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:53845:3233":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:49293:2265":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"19:0:990":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:2763:2476":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"18:599:61101":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"16:7461:4018":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:10546:44520":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:50508:3139":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:22386:3169":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"9:676:3830":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"1:1935:2956":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:50950:3423":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:4581:3023":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:8596:2792":{"crate_id":1,"path":["std","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:4308:2618":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:12884:50221":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"12:353:3909":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:49875:2428":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:6402:4675":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"5:5875:4649":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"17:13039:50592":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:47093:2872":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:10497:44821":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"7:79:41993":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:50089:2433":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:11247:45230":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"5:1216:2821":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:4250:2615":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"5:771:3713":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:13203:50635":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:3156:2993":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:50580:3143":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:11954:2402":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:4501:3015":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"6:6424:41324":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:11873:200":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"14:221:42778":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:4740:2515":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"16:4740:43490":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"5:1301:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"6:1580:37869":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:2238:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"16:5536:4069":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:2974:2831":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:11149:45173":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:47501:31689":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:487:44508":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"6:4267:40229":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:8309:3368":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:4186:3328":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:47084:2871":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:50708:3412":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:1931:4386":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"6:608:36986":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:52141:3266":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"6:6329:11055":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:4399:3065":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"5:6384:237":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"6:4745:40280":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:5390:186":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:50003:2429":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:10350:4372":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"17:10221:44813":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:8412:2555":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"1:11499:2779":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"16:4348:43386":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"16:2500:4302":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"6:1600:37871":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:8059:2626":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:21251:57398":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:7098:53086":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:11536:44733":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:11787:49435":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"6:4185:40220":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:4726:40278":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:12118:49458":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:9314:2419":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"6:4329:40237":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"5:3002:2503":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:3125:44705":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:2900:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:50593:3492":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"16:4653:43475":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"12:810:2812":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:7061:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:49544:2407":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:46868:3400":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"16:6101:4006":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:11651:2787":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:38089:178":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:50416:3136":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:21224:3294":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"16:6294:4036":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:8585:2674":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"14:40:44958":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:49714:3381":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"16:5113:43719":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:49885:2426":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:13221:50642":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:915:2810":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:13492:50717":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"9:382:3737":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:21184:4780":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:2607:2560":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:4968:2515":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"12:1866:2502":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:10559:3590":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"12:1534:3919":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:48770:2675":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:21987:3444":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:11519:3503":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"5:3094:2499":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"2:56987:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:49133:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:12909:50224":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:49029:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"2:21624:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:8313:2588":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"1:8130:2570":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:13082:50598":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:2141:572":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:12134:49459":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:10949:44956":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:8696:3007":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"9:920:3741":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"12:697:2814":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:2268:183":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"6:5523:40895":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:50788:3505":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"6:135:36658":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:9344:2329":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:11594:49305":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:3891:2538":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:11343:45355":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"5:6934:3686":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:10296:44789":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:10997:44958":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:3986:2713":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:1102:2821":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"16:7022:4280":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:966:2814":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"5:6793:2329":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"5:1338:2423":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:9165:61073":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"16:7095:4283":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:47131:57471":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:771:140":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"15:193:3928":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:6809:2808":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:9488:4352":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:10719:54479":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"16:2402:4308":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:8368:4373":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:12926:50225":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:2023:180":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:4900:51901":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:53035:3232":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"5:2019:58069":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:7411:2859":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"12:725:2810":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:50189:3394":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"6:4300:40234":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"6:5568:40864":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"5:6296:3652":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"1:339:160":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:6983:2882":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:2915:2288":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:2970:2827":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"12:1029:2822":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:4673:40273":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"6:1668:37876":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"0:10:1591":{"crate_id":0,"path":["fnv","FnvHasher"],"kind":"struct"},"1:1886:8722":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"17:13366:50682":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"16:6820:60329":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"6:1707:3019":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:12850:50156":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"6:4592:40262":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"6:7214:40410":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"16:5941:189":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:47529:31690":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:9303:4397":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:8682:3069":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:5174:2907":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"16:6713:4030":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:11800:49436":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:11436:49250":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:9671:4361":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"16:7266:4110":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"16:3845:43027":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"16:4135:43293":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"5:1359:2329":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:29472:3195":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"16:2622:4304":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:9857:4424":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"5:1943:3601":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:6702:2805":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:1642:3193":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:46365:194":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:9336:2643":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:9118:216":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:8945:2744":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"1:12320:7713":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:46757:3203":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:11741:56946":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"2:52333:3231":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:48077:2423":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"6:4286:40232":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:10796:4473":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:20854:57597":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:6596:2862":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"18:0:2131":{"crate_id":18,"path":["memchr"],"kind":"module"},"6:4317:40236":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"6:7226:40412":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"16:4376:43390":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"7:0:1482":{"crate_id":7,"path":["unwind"],"kind":"module"},"16:6037:4288":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"12:300:3911":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:11575:2488":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"2:3067:3470":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:6537:201":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:10520:44822":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:9223:44565":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:4303:3334":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"16:7287:4112":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"12:274:60157":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:11209:2549":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"2:2810:2841":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"16:7366:4031":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"16:3254:42849":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"8:0:2122":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:7945:8710":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"6:1532:37864":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:9401:44581":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"6:4354:40240":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:13231:50643":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:20433:3228":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"6:4559:40258":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:53929:3271":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:2551:115":{"crate_id":2,"path":["core","default","Default"],"kind":"proc_derive"},"17:9293:4493":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:9382:44583":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"6:7220:40411":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:12768:50110":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:8205:2768":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"6:4489:3026":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:11125:45137":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:5639:2771":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"6:4797:40284":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:12896:50223":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:13091:50599":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"12:1852:2500":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:47197:2887":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:7140:4677":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:29548:3467":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"2:46263:3167":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"6:1505:37860":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"16:6759:4027":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:9446:44585":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:13279:50644":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:8526:2550":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"6:4816:40287":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"6:4179:40219":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:9820:4497":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:8951:61070":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"5:1435:3695":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:46341:193":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"5:6726:2498":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:51981:56540":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"16:7215:4106":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:20426:2447":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:2664:2605":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"6:4716:40277":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:2655:220":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:2653:2604":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:10894:4418":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:53985:18492":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:10490:44820":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:1120:2823":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:49774:2414":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"18:699:4533":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"6:1738:37883":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:8666:4740":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:46524:2688":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"2:53185:3256":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"12:861:2819":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:8887:2741":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"5:6905:3477":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:8272:4481":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"12:762:2499":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"17:9577:4391":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"16:4680:43478":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:2245:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:12373:2173":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:53967:3236":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:4516:3570":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:4705:767":{"crate_id":2,"path":["core","iter"],"kind":"module"},"12:2053:2820":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"16:7825:4117":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"16:2816:4298":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:12265:49529":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"5:6135:4637":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:13506:50723":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:50268:3398":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:2652:2285":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:48330:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:420:3976":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:11511:51827":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:10528:4472":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:8418:4421":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"6:6269:36892":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:10455:4511":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:50724:3414":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"0:0:2022":{"crate_id":0,"path":["fnv"],"kind":"module"},"2:50732:3409":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:11720:51506":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"6:4206:40068":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:7731:53077":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:13404:50686":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:3951:3281":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"16:4536:43454":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:2751:2470":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"1:11432:4686":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:9456:106":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"9:956:3740":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:50907:190":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"1:8049:2656":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"5:276:2293":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:13327:50645":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:11137:45138":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:1736:3529":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"5:4869:4637":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"6:4139:40217":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:29606:3468":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:1617:2500":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:2696:2607":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"1:4113:3013":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:9553:4399":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"5:6921:3685":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:11661:49369":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"6:4598:40263":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:47258:2892":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"16:7535:4011":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"16:7637:4005":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:13382:50684":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:10374:4451":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"18:531:4543":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:8596:4738":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:2805:2509":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:1825:8705":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:12087:49456":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:20407:12936":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"2:50053:3388":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:48068:2328":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:2253:2547":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:46429:198":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:10321:4508":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:13158:50630":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:8055:4370":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:48229:178":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"6:4575:40260":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:46927:3476":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:11748:49432":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:12369:2169":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"5:1376:2810":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:11939:49446":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"6:586:36983":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:2657:108":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"14:215:42772":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"4:0:2121":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:53643:3264":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"5:6846:2274":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:53721:3248":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:52000:3230":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:46939:3477":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:7803:4116":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"16:6248:4009":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:5999:3032":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"6:1574:37868":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:12638:50058":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"6:4152:40218":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:10670:4479":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:2215:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:12485:50000":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"7:32:41986":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"9:0:2123":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"6:7237:40413":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:3157:3110":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:4450:3071":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"18:690:4532":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"16:2696:4294":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:20157:3113":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"5:5989:4637":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:8475:4353":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"14:187:42779":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:8813:143":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:10822:44521":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:52379:3235":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:9320:2780":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"5:4716:3606":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:6987:2881":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"16:7850:4024":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"5:768:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:54066:18499":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:56922:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:7822:3126":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:1771:4390":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:7879:2926":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:8304:3367":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:48204:2423":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:2887:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:8517:4809":{"crate_id":1,"path":["std","net","ip_addr","fmt","Span"],"kind":"struct"},"12:738:2811":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"1:6209:2644":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"6:6554:41333":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:8576:111":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"17:10721:4747":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:12362:2162":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:8622:3007":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:5007:2521":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"9:622:3784":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"6:4427:40246":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:8847:2739":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:5500:185":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"17:8822:61068":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"1:454:2920":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:10108:2422":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"17:12278:49530":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:9691:4439":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"6:4274:40230":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:7279:41891":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"6:5684:40905":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"16:5927:4081":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:3466:52432":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"17:11300:45350":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:46483:3217":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:48996:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:50980:2914":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:10374:3020":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"5:4595:2538":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:49783:2418":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:2741:2463":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:11842:3424":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"1:683:7711":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:11528:44735":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"16:6164:4008":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:9350:2646":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:6869:56127":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"6:4527:40254":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:3475:2531":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:50899:30014":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:50700:3407":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"2:49309:2264":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:39311:2608":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:11138:51943":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"5:6453:4655":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:47154:2884":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:51666:56597":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"16:2648:4303":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"6:495:36971":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:47053:2868":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:56974:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:52163:3269":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:1612:2499":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"6:4335:40238":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:9873:44729":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:9108:44517":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"12:777:3903":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"17:8871:44513":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:11259:45339":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:21094:3441":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:9930:44716":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:6386:3424":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"6:5692:40906":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:8066:2963":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:8729:57490":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"1:11183:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:7207:3001":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"6:6448:41326":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:13354:50647":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:54142:18503":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:49866:2425":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"16:6230:4090":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"16:5642:4072":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"6:5876:40943":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"6:575:36981":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:3365:2454":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"2:39298:3706":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"5:676:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:10741:2777":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"17:12073:49455":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:4762:2657":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:5223:11061":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:11087:4754":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"5:4955:4644":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"2:2467:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"16:6682:4028":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:5701:2775":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"16:2570:4343":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"16:6188:4088":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:21313:56435":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:49985:2419":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:2709:2286":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"16:2252:4273":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:11148:2626":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:8870:2740":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:9504:4803":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:19988:57593":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"17:10921:44948":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"16:6768:4101":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:1021:4494":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:3373:2538":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"1:4902:51903":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:11689:30018":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:51778:3240":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"6:4778:40283":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:9644:4384":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:54014:18495":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:46875:3575":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:48153:188":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:20282:2636":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"6:4635:40268":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:11143:51921":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"6:4683:40274":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"6:4224:40224":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:50992:2912":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:51880:56560":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:13340:50646":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:39262:2640":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"6:4361:40241":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:5582:40898":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"16:7374:4115":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:12347:2150":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"17:12022:49451":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:9274:2776":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"6:4621:40266":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"12:1120:3907":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:4320:2621":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"18:681:4531":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:9306:2779":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:8425:2557":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"6:5595:40900":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:9616:2489":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:2783:2486":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"18:582:2628":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:3939:3280":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:1623:2501":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:11323:2448":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:10845:2435":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:11330:45354":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:7961:8717":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:12008:49450":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:5567:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"6:519:36975":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:11500:49252":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:12251:49528":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:46852:3574":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"17:12695:50060":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:8746:2520":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:47075:2870":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:8702:3027":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:8241:4478":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:51941:3241":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"16:5194:4731":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:4181:3327":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"9:827:3739":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"18:515:4542":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:12836:50154":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:8212:4474":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:11721:49430":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:9398:2649":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:10283:44790":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"6:6538:41331":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:49301:4792":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:9414:2650":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:9592:213":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:2659:222":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"17:8774:4371":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:12176:49475":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:9362:4399":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"16:3557:42859":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:49020:130":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"2:49540:3594":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:3482:2553":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:4679:56982":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"14:0:2127":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:10476:44819":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:4177:202":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:9576:2434":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"16:6495:3924":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:1634:2503":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:46846:2835":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"18:636:61091":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"5:3326:158":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:11235:45229":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:1601:2423":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"6:5699:40907":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:20950:3117":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"16:6139:4086":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"6:592:36984":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:21200:4786":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:2767:2478":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"16:6721:4100":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:48135:3483":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:10810:3393":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:51756:3252":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"6:4191:40221":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"16:153:3996":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:9517:4103":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"6:4417:40245":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:12372:2172":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"17:10845:4476":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:11538:2489":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:12355:2157":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"6:6998:41704":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"16:4777:43503":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:47032:2404":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"6:6479:41327":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:3265:2575":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"6:4768:40282":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:1861:8715":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:7907:7706":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:11606:49361":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:50712:3411":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"16:5758:4076":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"16:2984:4301":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:8339:44512":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:8454:2724":{"crate_id":1,"path":["std","net","ip_addr","Ipv4Addr"],"kind":"struct"},"6:5749:59980":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:1824:2714":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:50942:3422":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:50239:2557":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:46385:197":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:46955:3478":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"5:7051:3646":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:48292:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:12359:2159":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"17:9722:4743":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:2464:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"5:6968:3680":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"6:5720:40909":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"6:5861:40942":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:5554:40863":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:8110:44503":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:11708:49429":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:11828:49438":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:8853:1586":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:5443:2878":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"6:560:36979":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:50613:3493":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:21041:3439":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:50963:156":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"12:815:2815":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:9317:4489":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"9:505:3732":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:7283:54318":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:11875:3006":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:9437:3040":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"16:2762:4297":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:957:2812":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"16:7447:4017":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:12356:2158":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"5:667:225":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:5366:2877":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:5009:2522":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:10332:4516":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:10075:44701":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"5:4071:4639":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"14:7:42770":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"16:3707:42913":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:11356:45368":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:21147:56546":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"17:242:61080":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:5831:2880":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"12:1138:2823":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"16:6668:4015":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"16:5365:4007":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:48634:3487":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:7788:4680":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:11186:45176":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:448:2919":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:12307:49537":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"9:649:3785":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"17:9061:4399":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"16:2596:4344":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:9475:4349":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"6:62:36591":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"18:548:139":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:11035:3128":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:8701:4741":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:3153:2992":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"5:1185:2820":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:3590:2727":{"crate_id":1,"path":["std","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:6129:4668":{"crate_id":1,"path":["std","sync","mpmc","array","Channel"],"kind":"struct"},"1:2378:2967":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"5:2981:3599":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"16:2718:4295":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:19973:57593":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:2026:179":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"6:7289:41892":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:52765:3270":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:9328:2423":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"12:853:2818":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:52508:56559":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"5:2968:2502":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:48520:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"5:6702:2403":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:9501:4397":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"16:4318:43380":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:11350:2780":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"6:6277:37800":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"5:3751:4637":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:49803:2417":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:52611:3275":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"18:671:4530":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:941:2498":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"9:111:3800":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"2:20323:3116":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"5:1426:193":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"5:4500:199":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:9382:2648":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:51840:3261":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:962:2813":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:12349:2152":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:987:2817":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"12:2184:57497":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:9631:4385":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:50284:3400":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:11996:2629":{"crate_id":2,"path":["core","const_closure","ConstFnMutClosure"],"kind":"struct"},"2:8146:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:12360:2160":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:12322:49538":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"16:6441:4094":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:12291:49536":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:3963:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:675:7708":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:13557:50727":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:4421:3067":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:4013:3006":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:49340:4793":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:1962:4437":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:11332:51597":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"6:5841:40128":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:13059:50596":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:11603:135":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"6:6322:41321":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"16:6354:4093":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:3150:2991":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:48596:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:20026:57656":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:7024:148":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:56948:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:5727:40910":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:9805:4496":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:49330:2739":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"12:1003:2821":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:6549:3323":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"5:5403:2498":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"12:2178:60165":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"6:5741:40912":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:8114:2985":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"16:4288:43374":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"17:12934:50226":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:8210:2571":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:12164:49461":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"0:20:1603":{"crate_id":0,"path":["fnv","FnvBuildHasher"],"kind":"typedef"},"1:3457:2550":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"16:7958:4053":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:11576:49261":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:20685:3119":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"1:5344:56129":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:47002:4656":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"16:7934:4020":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:12348:2151":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:9357:2435":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:970:2815":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"6:6572:41334":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:13071:50597":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"5:6979:3681":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:13413:50689":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:52211:3254":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:4658:7714":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:7718:2711":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:5165:2664":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:10403:4374":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:8688:3018":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:11873:49441":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:21822:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:8583:2673":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:9885:44730":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:4248:3333":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:410:4689":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"5:2734:58003":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"12:60:60160":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"6:1722:37882":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"6:5625:40902":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:11684:49370":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"6:4200:40222":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:3599:2329":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:5313:56129":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"5:2906:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:29712:3469":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"1:7858:2944":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:9250:44566":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:46889:3577":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:49961:3383":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:49765:2415":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"12:1859:2501":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:9280:181":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"17:12781:50111":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"11:0:2125":{"crate_id":11,"path":["adler"],"kind":"module"},"2:21236:3295":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:2746:2468":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"5:2465:3702":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:9263:44567":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"16:3179:42848":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:48102:3481":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:38106:2628":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"6:4475:40250":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:10478:8715":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"2:3151:2866":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"6:513:36974":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"5:2039:3699":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:49814:2406":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:11106:4761":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:10608:4377":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:12797:50112":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:3081:2587":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"12:659:2329":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"16:4712:43486":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:21657:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"17:12739:50065":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:50704:3410":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:12756:50108":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"16:6632:4099":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:993:2818":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"6:5534:40896":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:51732:3260":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:11046:3124":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"16:7245:4108":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:54040:18497":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:56935:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:12948:50227":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"16:5424:4062":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:54051:18498":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"5:2244:3703":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:9458:4359":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:9681:44625":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:1759:3528":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:10642:4482":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"16:5175:42846":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"6:7249:40415":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"16:7489:3988":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:52018:56596":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:49014:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"1:2864:2770":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:9350:4492":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:4653:3024":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"16:2740:4296":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"5:1033:58467":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"6:6392:37804":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:52971:3247":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:10245:44815":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:49929:3488":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:1671:1046":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:10575:3592":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:9635:2490":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"0:21:1605":{"crate_id":0,"path":["fnv","FnvHashMap"],"kind":"typedef"},"2:21789:2949":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"5:939:4637":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:12237:49527":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:46490:2456":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1:5877:2644":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:9712:4742":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:48763:2673":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:5443:40834":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:50736:3503":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:47113:2874":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"6:539:36976":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:9289:2424":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"18:538:4544":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:5472:4065":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:49081:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"1:12191:4690":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"5:6428:4649":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"6:4449:40248":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:13214:50641":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:10159:44706":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:49955:3382":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"17:11893:49442":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"16:4510:43452":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"12:1681:142":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"6:7243:40414":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:47284:2893":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"16:2526:4291":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:12211:49525":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:11627:4687":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"18:614:61089":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:11271:45342":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:13184:50633":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:50035:3387":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:11368:45369":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:11070:4752":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:8089:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"6:4611:40265":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:9539:4387":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:11127:2525":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:8418:2419":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:8848:2261":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"16:6571:4097":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:8561:4435":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:5819:2783":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"17:8911:61074":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"9:586:3781":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"12:2198:60166":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:47174:2885":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:7853:2924":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"6:5835:40941":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:50135:3391":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:13148:50608":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"6:507:36973":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:11853:49440":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"5:6742:58072":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:50481:3138":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:9778:4441":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:2394:2972":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:2431:2447":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:8362:2549":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:49059:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:46785:3206":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:11754:4689":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"17:386:44507":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:20007:57654":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"16:5438:4063":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"5:2725:58468":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:29312:3519":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"18:590:57469":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"12:1044:3904":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:54119:18502":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:9531:51511":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:11952:4815":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"17:10257:44792":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:4112:2687":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"1:1884:5267":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"6:7208:40409":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"5:6061:2329":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:46451:2268":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"16:4912:43542":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"16:6843:4327":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:6674:3045":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"}},"external_crates":{"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":23}