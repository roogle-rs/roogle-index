{"root":"0:0:2085","crate_version":"1.0.7","includes_private":false,"index":{"2:12016:2391":{"id":"2:12016:2391","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12110:31607":{"id":"2:12110:31607","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12114:31609":{"id":"2:12114:31609","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11716:8844"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:8840","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12039:28953":{"id":"2:12039:28953","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11917:418"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43341:8851","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12136:23629":{"id":"2:12136:23629","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12035:31593":{"id":"2:12035:31593","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11923:1399","str::slice_mut_unchecked":"2:12036:31594","crate::ops::Index":"2:2981:3216"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:15":{"id":"0:15","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[99,0],"end":[106,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:16:1658"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:0:2085":{"id":"0:0:2085","crate_id":0,"name":"fnv","span":{"filename":"lib.rs","begin":[1,0],"end":[367,1]},"visibility":"public","docs":"An implementation of the [Fowler–Noll–Vo hash function][chongo].\n\n## About\n\nThe FNV hash function is a custom `Hasher` implementation that is more\nefficient for smaller hash keys.\n\n[The Rust FAQ states that][faq] while the default `Hasher` implementation,\nSipHash, is good in many cases, it is notably slower than other algorithms\nwith short keys, such as when you have a map of integers to other values.\nIn cases like these, [FNV is demonstrably faster][graphs].\n\nIts disadvantages are that it performs badly on larger inputs, and\nprovides no protection against collision attacks, where a malicious user\ncan craft specific keys designed to slow a hasher down. Thus, it is\nimportant to profile your program to ensure that you are using small hash\nkeys, and be certain that your program could not be exposed to malicious\ninputs (including being a networked server).\n\nThe Rust compiler itself uses FNV, as it is not worried about\ndenial-of-service attacks, and can assume that its inputs are going to be\nsmall—a perfect use case for FNV.\n\n\n## Using FNV in a `HashMap`\n\nThe `FnvHashMap` type alias is the easiest way to use the standard library’s\n`HashMap` with FNV.\n\n```rust\nuse fnv::FnvHashMap;\n\nlet mut map = FnvHashMap::default();\nmap.insert(1, \"one\");\nmap.insert(2, \"two\");\n\nmap = FnvHashMap::with_capacity_and_hasher(10, Default::default());\nmap.insert(1, \"one\");\nmap.insert(2, \"two\");\n```\n\nNote, the standard library’s `HashMap::new` and `HashMap::with_capacity`\nare only implemented for the `RandomState` hasher, so using `Default` to\nget the hasher is the next best option.\n\n## Using FNV in a `HashSet`\n\nSimilarly, `FnvHashSet` is a type alias for the standard library’s `HashSet`\nwith FNV.\n\n```rust\nuse fnv::FnvHashSet;\n\nlet mut set = FnvHashSet::default();\nset.insert(1);\nset.insert(2);\n\nset = FnvHashSet::with_capacity_and_hasher(10, Default::default());\nset.insert(1);\nset.insert(2);\n```\n\n[chongo]: http://www.isthe.com/chongo/tech/comp/fnv/index.html\n[faq]: https://www.rust-lang.org/en-US/faq.html#why-are-rusts-hashmaps-slow\n[graphs]: https://cglab.ca/~abeinges/blah/hash-rs/","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:10:1654","0:20:1666","0:21:1668","0:24:1672"],"is_stripped":false}}},"2:12067:23733":{"id":"2:12067:23733","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11716:8844"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11539:8835","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:8840","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:16:1658":{"id":"0:16:1658","crate_id":0,"name":"with_key","span":{"filename":"lib.rs","begin":[103,4],"end":[105,5]},"visibility":"public","docs":"Create an FNV hasher starting with a state corresponding\nto the hash `key`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["key",{"primitive":"u64"}]],"output":{"resolved_path":{"name":"FnvHasher","id":"0:10:1654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12014":{"id":"2:12014","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12015:812","2:12016:2391","2:12017:31589","2:12018:31590","2:12020:31591","2:12023:22731","2:12024:31592","2:12025:314","2:12026:23701","2:12027:23697","2:12029:23698","2:12031:23699","2:12033:23700","2:12035:31593","2:12036:31594","2:12037:23724","2:12038:23725","2:12039:28953","2:12040:28862","2:12041:1662","2:12042:28877","2:12043:28876","2:12044:21989","2:12045:31595","2:12046:28954","2:12047:23741","2:12050:23742","2:12053:23743","2:12056:2431","2:12060:2390","2:12064:21988","2:12067:23733","2:12070:23735","2:12073:31596","2:12076:31597","2:12079:23737","2:12082:23739","2:12085:31598","2:12088:31599","2:12091:2311","2:12094:31600","2:12097:31601","2:12100:31602","2:12103:31603","2:12105:31604","2:12107:31605","2:12109:31606","2:12110:31607","2:12111:31608","2:12114:31609","2:12117:21617","2:12120:23744","2:12123:31610","2:12126:31611","2:12129:31612","2:12132:31613","2:12134:23626","2:12135:23627","2:12136:23629","2:12137:23630","2:12138:23631","2:12139:31614","2:12141:3164","2:12142:31615"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2251-0:10:1654":{"id":"b:2:2251-0:10:1654","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2253:20760"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12025:314":{"id":"2:12025:314","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12026:23701","`u8`":"1:11934:1501"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5414:32268":{"id":"5:5414:32268","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7254:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7254:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12043:28876":{"id":"2:12043:28876","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12042:28877"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43654:8846","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2553-0:10:1654":{"id":"b:2:2553-0:10:1654","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2556:128","2:2557:1479"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12100:31602":{"id":"2:12100:31602","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11716:8844","`DoubleEndedIterator`":"2:7244:121","prim@char":"1:11917:418","str::match_indices":"2:12097:31601"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43539:8860","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:8840","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:8840","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:8841","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:10:1654":{"id":"0:10:1654","crate_id":0,"name":"FnvHasher","span":{"filename":"lib.rs","begin":[89,0],"end":[89,26]},"visibility":"public","docs":"An implementation of the Fowler–Noll–Vo hash function.\n\nSee the [crate documentation](index.html) for more details.","links":{},"attrs":["#[allow(missing_copy_implementations)]"],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:15","a:2:2741:2350-0:10:1654","a:2:2701:228-0:10:1654","a:2:2684:220-0:10:1654","a:2:8253:3467-0:10:1654","a:2:8254:3466-0:10:1654","b:2:2553-0:10:1654","b:2:2542-0:10:1654","b:2:2548-0:10:1654","b:2:3320-0:10:1654","b:2:2248-0:10:1654","b:2:2538-0:10:1654","b:2:2251-0:10:1654","0:13","0:17"]}}},"0:21:1668":{"id":"0:21:1668","crate_id":0,"name":"FnvHashMap","span":{"filename":"lib.rs","begin":[132,0],"end":[132,58]},"visibility":"public","docs":"A `HashMap` using a default FNV hasher.","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"typedef":{"type":{"resolved_path":{"name":"HashMap","id":"1:731:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"resolved_path":{"name":"FnvBuildHasher","id":"0:20:1666","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"2:12045:31595":{"id":"2:12045:31595","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43635:8858","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2552:1480":{"id":"2:2552:1480","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:41546:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12041:1662":{"id":"2:12041:1662","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43357:2814","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12111:31608":{"id":"2:12111:31608","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11716:8844"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:8840","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:8840","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11741:8839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12088:31599":{"id":"2:12088:31599","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41402:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:8840","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:8840","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:8841","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12135:23627":{"id":"2:12135:23627","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39560:23622","Self::is_ascii":"2:12134:23626"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41402:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39560:23622","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12040:28862":{"id":"2:12040:28862","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11917:418"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43347:8850","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12046:28954":{"id":"2:12046:28954","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43663:8845","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12050:23742":{"id":"2:12050:23742","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11716:8844"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:8840","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12137:23630":{"id":"2:12137:23630","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12094:31600":{"id":"2:12094:31600","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11716:8844","`DoubleEndedIterator`":"2:7244:121","prim@char":"1:11917:418","str::matches":"2:12091:2311"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43593:8862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:8840","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:8840","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:8841","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12060:2390":{"id":"2:12060:2390","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41404:179","prim@char":"1:11917:418","self::pattern":"2:11716:8844"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41402:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:8840","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:8840","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:8841","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12027:23697":{"id":"2:12027:23697","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41404:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41402:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12036:31594":{"id":"2:12036:31594","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11923:1399","crate::ops::IndexMut":"2:2985:3217","str::slice_unchecked":"2:12035:31593"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12076:31597":{"id":"2:12076:31597","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11716:8844","str::split":"2:12064:21988","prim@char":"1:11917:418","str::split_terminator":"2:12073:31596"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43439:8863","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:8840","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:8840","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:8841","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12047:23741":{"id":"2:12047:23741","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11716:8844"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:8840","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12020:31591":{"id":"2:12020:31591","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12018:31590"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3322:1493":{"id":"2:3322:1493","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39352:8917","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12082:23739":{"id":"2:12082:23739","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11917:418","str::splitn":"2:12079:23737","self::pattern":"2:11716:8844"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43493:8831","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:8840","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:8840","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:8841","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:13":{"id":"0:13","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[91,0],"end":[97,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2589:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:14:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12085:31598":{"id":"2:12085:31598","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41402:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:8840","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2551:128":{"id":"2:2551:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"2:12120:23744":{"id":"2:12120:23744","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11716:8844"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41402:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:8840","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:8840","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:8841","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12117:21617":{"id":"2:12117:21617","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11716:8844"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41402:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:8840","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12038:23725":{"id":"2:12038:23725","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12037:23724"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12079:23737":{"id":"2:12079:23737","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11716:8844","str::rsplitn":"2:12082:23739"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43475:8833","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:8840","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12024:31592":{"id":"2:12024:31592","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12097:31601":{"id":"2:12097:31601","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11716:8844","`DoubleEndedIterator`":"2:7244:121","prim@char":"1:11917:418","str::rmatch_indices":"2:12100:31602"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43521:8859","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:8840","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2248-0:10:1654":{"id":"b:2:2248-0:10:1654","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2250:2297"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12017:31589":{"id":"2:12017:31589","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12023:22731":{"id":"2:12023:22731","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11283:8848"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12044:21989":{"id":"2:12044:21989","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43625:3324","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12073:31596":{"id":"2:12073:31596","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11716:8844","str::split":"2:12064:21988","prim@char":"1:11917:418","`DoubleEndedIterator`":"2:7244:121","str::rsplit_terminator":"2:12076:31597"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43421:8864","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:8840","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12107:31605":{"id":"2:12107:31605","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12126:31611":{"id":"2:12126:31611","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11716:8844"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:8840","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:19:1661":{"id":"0:19:1661","crate_id":0,"name":"write","span":{"filename":"lib.rs","begin":[115,4],"end":[124,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["bytes",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12105:31604":{"id":"2:12105:31604","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12129:31612":{"id":"2:12129:31612","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11716:8844"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:8840","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:8840","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:8841","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2253:20760":{"id":"2:2253:20760","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12132:31613":{"id":"2:12132:31613","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11677:127","`FromStr`":"2:11676:3485"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41546:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:11676:3485","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11676:3485","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12029:23698":{"id":"2:12029:23698","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41404:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41402:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:24:1672":{"id":"0:24:1672","crate_id":0,"name":"FnvHashSet","span":{"filename":"lib.rs","begin":[136,0],"end":[136,52]},"visibility":"public","docs":"A `HashSet` using a default FNV hasher.","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"typedef":{"type":{"resolved_path":{"name":"HashSet","id":"1:1433:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"FnvBuildHasher","id":"0:20:1666","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"2:12070:23735":{"id":"2:12070:23735","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11716:8844","`DoubleEndedIterator`":"2:7244:121","prim@char":"1:11917:418","str::split":"2:12064:21988"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43389:8829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:8840","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:8840","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:8841","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12134:23626":{"id":"2:12134:23626","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12139:31614":{"id":"2:12139:31614","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4539:31614"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43670:8855","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:14:60":{"id":"0:14:60","crate_id":0,"name":"default","span":{"filename":"lib.rs","begin":[94,4],"end":[96,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"FnvHasher","id":"0:10:1654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12053:23743":{"id":"2:12053:23743","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11716:8844"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:8840","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:8840","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:8841","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8254:3466-0:10:1654":{"id":"a:2:8254:3466-0:10:1654","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8254:3466","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3320-0:10:1654":{"id":"b:2:3320-0:10:1654","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3318:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3322:1493"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12141:3164":{"id":"2:12141:3164","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4540:3164"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43679:3165","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5422:32269":{"id":"5:5422:32269","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7254:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7254:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2548-0:10:1654":{"id":"b:2:2548-0:10:1654","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2551:128","2:2552:1480"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5407:32266":{"id":"5:5407:32266","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:273:2357","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:6994:2972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:273:2357","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:6994:2972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5424:3348":{"id":"5:5424:3348","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7254:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7254:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5425:24948":{"id":"5:5425:24948","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12137:23630"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7254:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12091:2311":{"id":"2:12091:2311","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11716:8844","`DoubleEndedIterator`":"2:7244:121","prim@char":"1:11917:418","str::matches":"2:12091:2311"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43575:8861","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:8840","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12123:31610":{"id":"2:12123:31610","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11716:8844"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:8840","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:8840","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:8841","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:20:1666":{"id":"0:20:1666","crate_id":0,"name":"FnvBuildHasher","span":{"filename":"lib.rs","begin":[128,0],"end":[128,56]},"visibility":"public","docs":"A builder for default FNV hashers.","links":{},"attrs":[],"deprecation":null,"inner":{"typedef":{"type":{"resolved_path":{"name":"BuildHasherDefault","id":"2:9414:1649","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"FnvHasher","id":"0:10:1654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"a:2:2741:2350-0:10:1654":{"id":"a:2:2741:2350-0:10:1654","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2741:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2250:2297":{"id":"2:2250:2297","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5426:24949":{"id":"5:5426:24949","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12138:23631"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7254:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12056:2431":{"id":"2:12056:2431","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41404:179","prim@char":"1:11917:418","self::pattern":"2:11716:8844"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41402:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:8840","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5406":{"id":"5:5406","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5407:32266","5:5408:9158","5:5411:32267","5:5414:32268","5:5422:32269","5:5423:32270","5:5424:3348","5:5425:24948","5:5426:24949"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2541:2384":{"id":"2:2541:2384","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2515:133"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2701:228-0:10:1654":{"id":"a:2:2701:228-0:10:1654","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:17":{"id":"0:17","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[108,0],"end":[125,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["write_u16","write_isize","write_i32","write_usize","write_u32","write_str","write_length_prefix","write_i64","write_i8","write_u64","write_u8","write_i128","write_i16","write_u128"],"trait":{"name":"Hasher","id":"2:9374:145","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:18:1660","0:19:1661"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2538-0:10:1654":{"id":"b:2:2538-0:10:1654","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2541:2384"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12018:31590":{"id":"2:12018:31590","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:18:1660":{"id":"0:18:1660","crate_id":0,"name":"finish","span":{"filename":"lib.rs","begin":[110,4],"end":[112,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12026:23701":{"id":"2:12026:23701","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11934:1501"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5423:32270":{"id":"5:5423:32270","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:273:2357","`String`":"5:7254:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:273:2357","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:6994:2972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7254:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12031:23699":{"id":"2:12031:23699","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8253:3467-0:10:1654":{"id":"a:2:8253:3467-0:10:1654","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8253:3467","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:2684:220-0:10:1654":{"id":"a:2:2684:220-0:10:1654","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12138:23631":{"id":"2:12138:23631","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12042:28877":{"id":"2:12042:28877","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12043:28876"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43645:8847","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12033:23700":{"id":"2:12033:23700","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12142:31615":{"id":"2:12142:31615","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4537:31615"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43688:8856","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2557:1479":{"id":"2:2557:1479","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:41546:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2544:695":{"id":"2:2544:695","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2542-0:10:1654":{"id":"b:2:2542-0:10:1654","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2544:695"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5411:32267":{"id":"5:5411:32267","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7254:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7254:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:8840","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2556:128":{"id":"2:2556:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32031:3502","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:12037:23724":{"id":"2:12037:23724","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12038:23725"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12015:812":{"id":"2:12015:812","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11917:418"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12064:21988":{"id":"2:12064:21988","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11716:8844","`DoubleEndedIterator`":"2:7244:121","prim@char":"1:11917:418","str::split_whitespace":"2:12042:28877","str::rsplit":"2:12070:23735"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43371:3326","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:8840","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5408:9158":{"id":"5:5408:9158","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7254:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7254:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:8840","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12109:31606":{"id":"2:12109:31606","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12103:31603":{"id":"2:12103:31603","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"2:2805:9178":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:7322:159":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:1544:2634":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"9:388:15145":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:9613:2684":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"5:1135:32674":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:43250:8825":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"6:1637:10839":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:41879:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"6:573:9942":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:4601:22460":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:32031:3502":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"16:5811:16265":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:13101:2846":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:40204:2672":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:13419:20456":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:13249:20441":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:11037:16417":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"5:5059:2643":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"5:2032:3056":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"16:6201:16273":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:45606:3596":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:10416:16598":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"6:4290:13377":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:501:2625":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:43575:8861":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:10615:16596":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"1:8936:3045":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"6:119:9612":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"1:867:2396":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:39373:28970":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"1:7688:3174":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"18:699:2785":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:45405:3630":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"5:4362:2637":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:12033:19675":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:39963:3165":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:13240:20440":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"6:6710:14529":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:21:682":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:20920:3588":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"2:40254:3214":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:10626:16605":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"6:7557:13625":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"6:4747:13421":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:2589:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:2348:182":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"17:9822:16467":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"6:4763:13423":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"3:229:210":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:2151:588":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"16:5944:16268":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"18:113:20503":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:2911:3199":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"16:2378:15338":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:4145:2994":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:8111:3057":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:2981:3216":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:12959:20421":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:2744:8769":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"1:11918:1517":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:10635:2824":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"16:5367:15307":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:13763:20480":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:5462:3495":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"16:2502:15343":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:40110:8958":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:9121:132":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"6:4728:13419":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:10516:16567":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"16:8129:16326":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:12006:19673":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"6:4488:13397":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:12483:19704":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:44145:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"5:682:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:10125:16534":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:8867:3530":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:13426:20457":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"11:365:2599":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:9866:16474":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:9641:16447":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"6:5978:14110":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"18:590:28951":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"5:2046:3202":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"16:5797:2894":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"16:7557:2930":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:41353:3363":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:7673:3173":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:44110:9318":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"6:4549:13404":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:2348:3279":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:3514:2628":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:21442:3017":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:21865:28745":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"6:6014:14114":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:9876:16506":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:10686:3293":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"6:6849:14539":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:11459:19165":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:39387:8926":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"9:502:15147":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"16:3872:15429":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"9:325:15198":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"5:2138:31387":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:7202:134":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:1062:3185":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:9146:112":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"1:2620:3336":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"16:7509:16309":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"6:653:9992":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:40707:3350":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:21850:28252":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:11721:8840":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:20588:29081":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"5:0:286":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:7619:3150":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"16:7103:16300":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:8293:3451":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:8256:16373":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"5:4347:245":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:10448:3345":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:9057:167":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"6:1732:10848":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:2470:8975":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"11:447:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:4097:27622":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"5:779:2610":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:7726:21555":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"1:1982:185":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:3700:3370":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"5:1669:2608":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:7592:3194":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:12293:19691":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:9213:3238":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"16:4568:15909":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"6:4637:13411":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:11446:19164":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"16:7837:16319":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:8315:3399":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:41234:3360":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:43792:8876":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:13678:20475":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:10731:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"1:8183:3324":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"16:6327:2917":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:10026:16555":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:3463:3255":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"6:6670:10954":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"6:4809:13429":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:1924:3254":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:20933:3303":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"16:7016:33622":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"16:7697:2936":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:44102:9316":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:11800:19663":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"18:96:20502":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:242:34571":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"11:2049:3185":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:32158:3028":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"16:6164:33657":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"11:817:3181":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:44118:9313":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:13053:20427":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:8632:16374":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"5:7094:2396":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:12799:20415":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:13033:20425":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"5:2220:32368":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"6:4739:13420":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:10440:16600":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"16:7317:33706":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:11090:16419":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:10657:3450":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:9965:2975":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"5:7237:3258":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:10010:3232":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"2:40397:9136":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"6:4534:13402":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:11064:3014":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"16:5571:16256":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:40432:9138":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"5:3175:3189":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:7537:2725":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:9127:23394":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"17:12059:19677":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:41605:2396":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"5:4073:2976":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"16:6376:2918":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:1978:16479":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:10134:8836":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"6:6719:14530":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"16:55:15305":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"5:3327:2647":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"2:46050:3670":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"16:6390:16279":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:11653:19179":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:10840:16412":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:10167:3504":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:30875:3027":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"5:2687:31339":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:30243:3026":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:44098:9317":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:8954:21626":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:20779:29240":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"9:234:3479":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"11:1663:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:9415:2729":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"16:2862:15358":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"6:4394:13229":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"18:736:20514":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:9110:3565":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:13145:20432":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:4437:2997":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:13857:20487":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"16:7467:16305":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:5044:23357":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:975:16442":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:10876:21719":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:2593:116":{"crate_id":2,"path":["core","default","Default"],"kind":"proc_derive"},"1:11032:3499":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:1756:9210":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:10885:2828":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"6:568:9941":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:3406:3300":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:9032:3060":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"11:1858:3191":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"17:9228:34558":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"6:7551:13624":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:4886:13438":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"2:44390:8761":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:42691:145":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"18:521:20521":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:13659:20473":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:1048:3184":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:7522:13620":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:43679:3165":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:11915:371":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:10057:8835":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"7:79:15122":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"5:2240:2984":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"5:7177:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:10029:21277":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"1:930:3179":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"6:7574:13627":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"6:6066:14118":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:13292:20444":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:21956:30026":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"16:8170:16328":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:21890:28331":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"16:6307:2913":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:6865:2722":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"17:10402:16587":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:13488:20464":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"11:1068:15260":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:4127:3413":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:10354:16523":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:11717:2741":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:40446:9139":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:9683:16458":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"6:5899:14106":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"16:0:2204":{"crate_id":16,"path":["gimli"],"kind":"module"},"6:7585:13628":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:43755:8874":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"5:4425:2637":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"11:760:2647":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:22601:3377":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"16:4702:15971":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:47478:3645":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:45427:3635":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"16:4037:15546":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:4877:3447":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"14:31:15269":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:11921:312":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"5:1489:2979":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:11920:1050":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:45713:3669":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"11:2194:33548":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:8753:2810":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"16:6520:16285":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"17:9772:16462":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"6:5993:14112":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:20560:28869":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"2:40124:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:3142:16522":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:22436:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"6:1594:10836":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:9617:16436":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:13477:20463":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:2963:8773":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"6:4435:13390":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:43198:8810":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:4812:796":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:13376:20452":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:45760:3573":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:12372:19697":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:39086:8929":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"6:5919:14107":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"6:4894:13439":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:12770:20414":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:9478:16446":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:4255:207":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"6:6704:14528":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:6772:9115":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"18:660:20516":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:2851:9184":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:11866:21755":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:1583:3189":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"16:6336:16276":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:9453:16430":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"5:3209:3188":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:20753:3584":{"crate_id":2,"path":["core","core_simd","cast","SimdCastPtr"],"kind":"trait"},"5:35:2604":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"5:4031:2608":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:11969:19671":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:9414:1649":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:30847:183":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"11:836:3182":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:9557:2796":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"6:1512:10827":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:43777:8875":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"16:7743:2937":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"16:8025:16321":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"16:7652:198":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:888:2978":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:2706:2992":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:45505:3631":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"16:8256:16331":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:8498:3482":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"6:1568:10833":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:43663:8845":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:5933:2707":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"5:7043:31389":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"16:8090:16324":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"18:727:2787":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:7820:3293":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"18:681:20518":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"5:7011:3192":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"16:6293:16275":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"6:554:9939":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:30299:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:40481:9140":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:43539:8860":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:11422:3371":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"5:819:2613":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"17:8858:2813":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:857:2976":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:40678:9117":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:12019:19674":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:13135:20431":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:8254:3466":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:40050:3165":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:2481:3334":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"16:6728:16290":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:6935:2723":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"7:0:1545":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:585:3163":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:41388:3365":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:40030:8966":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:8651:2791":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:922:2979":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:3348:3350":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"6:4625:13410":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:1916:3206":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:9157:8786":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:10569:16570":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:9534:16438":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:7169:9124":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:9498:2816":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:3386:8913":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"6:4684:13414":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"18:707:8842":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"11:1831:2647":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"14:165:15270":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:5787:2709":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"6:4715:13417":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:25858:3025":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"13:0:2195":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:4459:3422":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:953:3182":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:3962:3386":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"14:7:15269":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:4336:8941":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"16:2319:15336":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:6396:3518":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"6:6743:14532":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"6:1910:11011":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"11:1501:15262":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"5:6743:2661":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:1846:3239":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:8765:186":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"6:7249:9890":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"6:4388:13385":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:44348:3711":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"16:6431:16281":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:6432:2719":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"6:4853:13435":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"6:5848:14061":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:11544:19171":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"5:7102:2396":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"0:24:1672":{"crate_id":0,"path":["fnv","FnvHashSet"],"kind":"typedef"},"15:0:2203":{"crate_id":15,"path":["addr2line"],"kind":"module"},"16:7437:16303":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:8805:3501":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"5:6371:2396":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:12634:19714":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"5:1299:3187":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:13316:20446":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"6:4928:13442":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"16:4445:15882":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:11234:19156":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:43167:8821":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:41317:28173":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:13332:20448":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:12126:19682":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:5593:2708":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:731:142":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:12419:19700":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"6:6687:10952":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:9817:222":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"16:5032:16037":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:43493:8831":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:8439:3480":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"5:4392:2634":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"6:4722:13418":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"6:4799:13428":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:10207:8830":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"5:5820:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:43149:8818":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"16:6671:15285":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:12282:19690":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"5:1008:2608":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:2212:3275":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:43898:8880":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:8200:3359":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:43475:8833":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:11716:8844":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"17:13689:20476":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"5:6699:244":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:2753:3566":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"6:7277:14910":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"6:1648:10840":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"5:3235:3191":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:41919:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:8674:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:11928:643":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"1:4351:3411":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"5:7073:2986":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"6:6795:14534":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:2800:9174":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:10068:16556":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:11360:3370":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:1561:2975":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"6:6021:14115":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:11109:16420":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:43439:8863":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:7206:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:41999:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:2215:2666":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:40294:9130":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:8289:3449":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"16:7543:2929":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:39227:199":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:12318:19693":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"16:7077:16299":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:2788:3569":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:3472:20803":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"17:8521:16397":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:39125:8774":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"2:2827:9179":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:8854:3527":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:39352:8917":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"5:7224:3257":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:2696:109":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:43224:8808":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:1565:2396":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"5:1520:3201":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:42411:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"17:13066:20428":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:9853:16505":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"11:1826:2628":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:40263:2998":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"16:6990:16298":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"6:4916:13441":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:39247:202":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"11:793:3178":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:32071:9233":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:47735:8745":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"6:474:9929":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:11993:19672":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:10491:16571":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:2892:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"1:3270:3341":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:10276:8834":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:2890:210":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"2:21838:3374":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:2509:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:41268:3362":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:45381:3594":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:22403:3153":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"5:3593:2976":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:10039:16514":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:2780:9170":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:4135:3414":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"18:609:34669":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:6561:3524":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"1:4760:2705":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:10721:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"6:6867:14540":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"11:311:33539":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:676:3172":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"5:5259:8802":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:22271:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"17:9188:34557":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:12510:19706":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"5:7003:2396":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:9149:23101":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"17:10712:16610":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"18:644:34642":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:11339:2832":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:5949:206":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:43593:8862":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"16:2742:15353":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:43935:8881":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"16:4480:15893":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"5:6611:2660":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"2:46203:28339":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:8255:3410":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:30052:3373":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:12312:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:8176:3326":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"17:9986:16508":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:11940:1555":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"17:10798:16410":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:9111:3255":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"17:9443:16429":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"6:4373:13383":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:43970:8884":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"6:4817:13430":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:30283:9161":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"6:4991:13450":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"5:2956:2453":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:7488:16389":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:9424:16428":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:10751:21742":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:11191:3050":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"16:5071:16052":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:5343:3490":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:2163:9200":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"2:41453:2395":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:40323:9132":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"6:5774:14096":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:4606:8952":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"16:2764:15354":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:7499:22591":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:45806:3637":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:30371:28302":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"17:12894:20417":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"6:7271:14909":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"0:21:1668":{"crate_id":0,"path":["fnv","FnvHashMap"],"kind":"typedef"},"11:1027:15259":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"16:4624:15917":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:9322:34491":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:1821:3232":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:4587:3386":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:13324:20447":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:8170:2814":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"1:10741:3298":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"2:21927:28333":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"16:6943:16296":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:11600:19175":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"6:4327:13380":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"16:6981:16297":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"6:4555:13405":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:3233:3346":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:1080:3187":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:4046:8768":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"11:844:3183":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"5:7057:2396":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:9523:16439":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:12980:20422":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"9:481:15143":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:13777:20481":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:9312:16406":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"6:5954:14108":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:12224:19687":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:42666:2337":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:44166:3570":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:3315:3331":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:10248:8833":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:10080:16557":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:12622:2825":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:44126:3014":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:3904:3381":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:10705:16609":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:40375:9135":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:22535:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"2:2522:237":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"16:4728:15973":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:3999:28997":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:32067:21555":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"17:9275:34483":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:7706:3241":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"17:10660:2825":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"6:6170:14148":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:11922:1369":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:638:3170":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:8360:8840":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:11299:19159":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:11355:2836":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:44114:9319":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:11484:19167":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:47837:8751":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:2817:9176":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"5:7194:3259":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"6:6804:14535":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"11:644:2976":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:12607:19713":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:6893:22558":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"6:4586:13407":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"16:2905:15360":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:9839:16453":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"5:5840:2643":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:3079:3218":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:7645:2731":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:8899:3531":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:8883:3528":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:8679:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:11927:641":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"1:11522:15295":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"5:258:2608":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:21343:3579":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"6:6155:14147":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"16:3899:15432":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:44340:3710":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:4023:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:8573:16399":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:4264:8936":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:20605:29077":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:7244:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:43871:8879":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"6:123:9613":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"17:12461:19703":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:4437:3421":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"6:1708:10846":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"16:6506:16284":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:39172:9186":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:4114:2993":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:9265:16405":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"16:2879:15359":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:11934:1501":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:39345:9188":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"6:5889:14105":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:1572:2647":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"2:11730:8842":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"6:6833:14537":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:40276:2999":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"16:5402:2792":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"11:986:3185":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:8548:16398":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"6:6135:13294":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:5709:3515":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"16:8180:16329":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:0:2205":{"crate_id":17,"path":["object"],"kind":"module"},"1:554:3147":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:12835:20416":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:43187:8820":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:2219:3276":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"13:110:33603":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:11585:19174":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:9380:16426":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:3157:135":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:40006:8963":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:10290:8832":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"6:1695:10845":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"16:4510:15899":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:46384:3638":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"11:119:2595":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"6:5804:14099":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"16:7635:16314":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:42039:3031":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:5408:3494":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:43645:8847":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:43315:8857":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"5:2967:31193":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:47761:8747":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"5:2167:2981":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:9409:16427":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"2:2898:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:3898:3382":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:30477:28238":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:42682:2336":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:1931:654":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"16:5557:2884":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:917:3178":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:8255:3007":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:8829:2396":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:635:3169":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:10257:16520":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:12361:192":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"6:4505:13399":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"5:7149:2346":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"15:219:2941":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:8777:3499":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:10681:16607":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:11224:21821":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:11556:19172":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:6725:29004":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:9721:16457":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:47720:8744":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"11:2201:2346":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:11615:19176":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:3158:21513":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"6:5043:13454":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:13744:20479":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:12334:29425":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:3152:234":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:2391:2212":{"crate_id":1,"path":["std","io"],"kind":"module"},"16:2357:15337":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:11721:19660":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:10262:8831":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:20547:3027":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:2515:133":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"6:5057:13456":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:4542:13403":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:21348:3589":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"2:21015:3015":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:8237:3363":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:13344:20449":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"9:52:2948":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:43237:8809":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"5:1511:198":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:21572:3577":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"16:3782:15387":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:9091:3307":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"16:6400:16280":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"11:97:33541":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:11946:19670":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:9906:21141":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"16:8109:16325":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"5:775:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:12563:19710":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"6:6035:14117":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:2749:9149":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"2:2856:9185":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"6:4303:13378":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"16:5708:2888":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:43259:8828":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:11220:16619":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:3805:3371":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:3169:8930":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"6:6076:14119":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"16:6662:16288":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"10:44:2947":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"6:4663:13413":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"16:2524:15344":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:20590:29079":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:10670:16597":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"6:1672:10842":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:13041:20426":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:10699:21760":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"5:4163:2634":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"16:5779:2890":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"16:7588:16311":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:11888:3175":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:40416:9137":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:13639:20471":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"16:3446:15368":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:7624:3152":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"1:10851:3242":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"1:7815:3296":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:43279:8827":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:8989:3058":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:4:1015":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:13181:20435":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:420:15311":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:13399:20454":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:3142:9187":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:8842:30814":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:42168:8778":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:911:2647":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:39366:16330":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"1:8821:3532":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"6:6597:14525":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:39313:2340":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"16:5741:16264":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"16:7498:16308":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:13169:20434":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"16:3030:15363":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:11676:3485":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"16:5305:16238":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:6780:3571":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"6:7598:15098":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:9946:16482":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"6:4907:13440":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:40157:9253":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:7867:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:41470:2976":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"17:13211:20437":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:9907:2818":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"16:6558:16286":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:45836:3643":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:2691:2349":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"17:13356:20450":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:10580:16603":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"16:5594:16257":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:8456:3481":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:11253:9277":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:10142:16559":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:9178:16404":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"5:892:2975":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:8508:2975":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"5:6450:2608":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:10104:2821":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"16:3225:15366":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:480:2696":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:2839:9181":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:8443:16395":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"16:4400:15861":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:2796:9172":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"16:2426:15340":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"11:1121:3187":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"6:7539:13622":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:1733:9211":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"16:4757:15978":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:13879:20489":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:2364:3284":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"11:285:33542":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"16:7488:16307":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:40171:3261":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"2:7267:2355":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:39990:28362":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"14:187:15277":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:40456:9127":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"16:2616:15348":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:1433:144":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:6392:3176":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:41402:181":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:10316:16516":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:12299:136":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:21989:3378":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"6:6606:14526":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:11502:19168":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:11372:2838":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"6:5014:13452":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"16:7529:2928":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"16:8142:16327":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:2812:9175":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:9068:34584":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:11282:19158":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"6:7528:13621":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:43949:8882":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:8263:3368":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"6:5862:14062":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:8490:16396":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:11504:9325":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"16:7757:16316":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"6:494:9932":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"16:6819:16293":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:11193:16618":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"5:1423:2976":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:7971:3337":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"5:3201:3190":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"6:4972:13448":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:41462:2975":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:47700:8742":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"16:2668:15350":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"16:4327:15812":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:4599:22458":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"6:5792:14097":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:1594:3191":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:44378:8763":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:12194:19686":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:13367:20451":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:7875:21524":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"15:180:15287":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"6:6774:14533":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"5:6298:2608":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:21963:3376":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"5:7268:8886":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:3374:8909":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"17:12113:19681":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:7961:23386":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:40701:9119":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:9163:8784":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:9011:20850":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:43158:8817":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:2741:2350":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"6:5828:14101":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"11:332:2597":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:4597:22456":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"16:6890:2924":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:7850:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"6:4427:13389":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"16:8072:16323":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:6609:217":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:8984:3048":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"6:6043:33362":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:40065:8959":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:11239:21630":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:41546:210":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"1:10711:3055":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"17:13812:20484":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"14:221:15279":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:8909:2814":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"6:4861:13436":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:5579:206":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:11529:15295":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:41376:3364":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:13082:20429":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:10096:8822":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"5:273:2357":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:2312:188":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"6:1689:10844":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:0:496":{"crate_id":2,"path":["core"],"kind":"module"},"10:36:33538":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"17:11844:19664":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:2922:2351":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:43823:8878":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:47876:8752":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:4769:13424":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"16:5847:16266":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:40716:2678":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:40234:8808":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:4119:3412":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:8283:16390":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"16:5386:2791":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:46880:3599":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:9028:16401":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"5:2959:31200":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"5:7208:28350":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"9:445:15144":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:7285:20875":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"17:8683:2807":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"6:4455:13392":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:5472:2634":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"17:12098:19680":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:3163:8931":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:20781:9199":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"6:7294:14911":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:43269:8826":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"6:5835:14102":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:2774:9171":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"16:7803:16318":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:40407:3005":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:2580:3327":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:10015:16554":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"14:0:2202":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:926:2980":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:11899:21740":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:11923:1399":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"5:5666:232":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:13194:20436":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"5:3799:2647":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"2:22370:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"5:1115:31201":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:41639:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:9108:34508":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:2512:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:2746:106":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:45982:3609":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:1602:10837":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:40285:3001":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:11942:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"16:5693:2885":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:47814:8750":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:11741:8839":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:13506:20466":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:11465:9326":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:10589:16604":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"16:2298:15309":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:5742:3044":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:43635:8858":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:413:165":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:10169:8829":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"6:4841:13433":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:9796:16460":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"16:6243:33685":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:13865:20488":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"16:6854:16294":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:618:3167":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:39203:198":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:11488:9323":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"5:5736:2628":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:10478:16572":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"11:1611:2601":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:8348:3460":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:42506:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"16:6218:16274":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"16:6793:16292":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:21782:3018":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:9807:3303":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"16:4845:15994":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:11163:16617":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:4390:8942":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"0:10:1654":{"crate_id":0,"path":["fnv","FnvHasher"],"kind":"struct"},"18:564:2782":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:13121:20430":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"6:1630:10838":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:12923:20420":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"16:8047:16322":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"16:2594:15347":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"16:6321:2915":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"17:13842:20486":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:11938:1497":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"17:11410:19161":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"6:4937:13443":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"6:6840:14538":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"16:6179:2895":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:13443:20459":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:5522:3496":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"17:11258:19157":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:44003:8866":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:12403:19699":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:11937:1500":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:386:16387":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"0:20:1666":{"crate_id":0,"path":["fnv","FnvBuildHasher"],"kind":"typedef"},"10:0:2199":{"crate_id":10,"path":["adler"],"kind":"module"},"5:4842:204":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:2518:238":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:2738:9146":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"16:7411:2877":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:1919:16494":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:2242:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:12386:8979":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:12307:19692":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:22337:177":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"18:507:34642":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"16:5643:16260":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:44361:161":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:2695:225":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"17:8971:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"1:3083:3351":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"1:4662:3448":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:20740:3583":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"2:43670:8855":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:12592:19712":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:11924:19669":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:13625:20470":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"6:4379:13384":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"6:4567:13406":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"16:6876:2923":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:45575:3648":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:2694:226":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:12496:19705":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:8514:3483":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"5:6119:3713":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:10676:22436":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:3234:8772":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"16:6254:2910":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:11083:3307":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:40077:8960":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:9155:8777":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"6:1680:10843":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:11272:22229":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"5:7033:2619":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:2161:9199":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"1:11478:3063":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"17:8195:16375":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"6:1662:10841":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:12158:19684":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"16:5998:16270":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:1071:3186":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:9748:2796":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:6319:166":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:40495:9141":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:11422:19162":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"11:2033:3184":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:2366:3285":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"17:8823:2812":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:9933:2804":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:40692:3176":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:20852:3587":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"2:1637:9106":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:43329:8854":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:11174:2736":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"17:9886:16481":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:40304:3002":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:3703:3369":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:10681:25485":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"17:10052:16535":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:3191:3343":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"16:5677:16262":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:45636:3602":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:2558:2684":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:10775:8823":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:1034:16445":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:3935:2634":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:42161:8777":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:10555:16568":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:10505:16601":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:8759:3498":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"11:1012:3186":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:4954:13446":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:41589:2975":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"5:1479:3178":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:10761:16409":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"6:4786:13426":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:9512:16440":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"6:488:9931":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:10598:16415":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"6:5736:14033":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:5090:191":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"1:4018:3391":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"5:7065:198":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:23048:3024":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"11:2186:33547":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:21099:3575":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"2:20880:3581":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:8104:3006":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"16:6488:16283":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:6508:3522":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:8835:3529":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:40355:9134":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:8120:3298":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:20815:3586":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"16:6919:33983":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"16:2642:15349":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"6:5024:13453":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:9577:16443":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:45535:3636":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:7810:3295":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:46666:3610":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"6:7516:13619":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"18:0:2206":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:10545:16416":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:3948:3384":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"6:4847:13434":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:3193:3344":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:1747:28749":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:11490:23392":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"17:9596:16441":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:45361:3629":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"6:7462:15070":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:11883:3064":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:43098:28952":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"5:6768:2665":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:40091:8962":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:10343:3498":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"6:562:9940":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"5:1270:3186":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"11:0:2200":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"2:42175:8786":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:12554:140":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"16:3063:15365":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"5:7023:2628":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"4:0:2196":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:5525:3497":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"6:4694:13415":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:11942:112":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"5:3734:3202":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"6:4793:13427":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:10270:16518":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:11924:1483":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"16:6935:16295":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"6:4948:13445":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:3152:26004":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:9153:8778":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"16:2830:15357":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:10000:16553":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"9:352:15160":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:13265:20443":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"6:5881:14104":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:47086:3633":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"16:8214:16330":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:487:16388":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"16:6474:2920":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:11573:19173":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"14:215:15278":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:3155:21522":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"5:3180:31386":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"5:875:2615":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:3934:3383":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:4786:30017":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:2843:9182":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:10857:16413":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"6:541:9937":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:2822:9177":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:3272:3342":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"5:6582:2645":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:562:16389":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:1768:609":{"crate_id":1,"path":["std","env"],"kind":"module"},"18:491:34640":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:7636:30812":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"6:6819:14536":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:530:2697":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"5:3139:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:7694:3043":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"1:3378:2634":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:2932:2354":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"16:2694:15351":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:41487:3464":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"16:7859:16320":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"16:4872:15997":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:41959:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:1895:3253":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"6:62:9558":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"16:7669:2933":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"6:4878:1002":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"5:7254:224":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:5590:3003":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:8271:3420":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:13651:20472":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"16:2470:15342":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"6:500:9933":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:10079:22434":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"6:5876:14103":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:10721:16575":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:6124:2715":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:8076:3297":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"6:506:9934":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:11011:16376":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:11861:19665":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:7556:2727":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:30277:8904":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:7599:3303":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:40726:9120":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"11:2174:28905":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:9469:16431":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:5013:23357":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:43389:8829":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"11:695:2980":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:9566:16405":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:4199:3416":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"11:399:33556":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:2833:9180":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"18:755:20520":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"16:4789:15986":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:44403:28965":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"2:41538:193":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:1787:16461":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:11931:744":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"16:7029:33922":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"16:2337:2855":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:4665:3421":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:0:1391":{"crate_id":1,"path":["std"],"kind":"module"},"1:7891:3056":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"18:636:34645":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"6:5766:14095":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:4381:2671":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:43688:8856":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"6:595:9945":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:42441:28762":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:3481:3301":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"17:13469:20462":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:12138:19683":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:4783:3396":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"5:1773:2647":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"14:202:8885":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:1821:3205":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"16:5724:16263":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:13612:20469":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:9734:16456":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"5:1408:2975":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:4704:3400":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"14:40:19158":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:1785:3223":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"16:6442:16282":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"18:574:34642":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:46306:3632":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"11:1103:15261":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:42703:3479":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:3648:2396":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"16:4596:15913":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"6:6725:14531":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:10649:16606":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"16:7478:16306":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"6:6617:14527":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"16:2572:15346":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"5:3580:2975":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"6:6027:14116":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"5:5215:2608":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:9530:2680":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"2:3182:30886":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:12449:19702":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:40734:9122":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:46542:3598":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:40467:3325":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:10936:2831":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:39560:23622":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"6:1526:10829":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:12609:3193":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"6:5007:13451":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:46125:28163":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:3318:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:47689:8741":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"6:5966:14109":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:7883:3335":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:3266:16540":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:20949:3574":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"2:2692:8770":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"1:10238:3494":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"16:7449:16304":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:361:3161":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:43421:8864":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:46028:3664":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:9072:3533":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"5:3214:31395":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:9340:16407":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"18:624:34653":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"5:4193:2634":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:13564:20468":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:21454:28867":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:4279:3417":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"6:6572:10784":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:13219:20438":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:42674:3032":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"16:2720:15352":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:10465:16573":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:8249:3419":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:47416:3611":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:21729:28691":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"11:1818:2975":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:5357:3491":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"17:8788:2811":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:2210:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"16:7596:16312":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:12902:20418":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"16:7335:33979":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:9895:16480":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"6:4871:13437":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"6:5067:13457":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:2763:9169":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:8244:3418":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:40364:9142":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:45451:3595":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"11:667:2979":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:21676:28693":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:21127:3015":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"5:1461:2977":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"16:6717:15284":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:7600:3162":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"6:1556:10832":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:8598:16400":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"16:7711:16315":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:9038:34583":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"6:6588:9814":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"5:1439:2396":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:45557:3642":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"19:0:1032":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:11254:21814":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:42182:8787":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:9062:218":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"16:3585:15369":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:12517:2694":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:47540:3666":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"5:2458:31186":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:13159:20433":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:13433:20458":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"6:5798:14098":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"6:1519:10828":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:40384:9126":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:1844:3238":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:43357:2814":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:2506:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1:10491:2731":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"5:5509:2645":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:42921:28407":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:11269:9279":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"16:5418:33802":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:2758:3568":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:5377:3492":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"11:403:33551":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:5393:3493":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:14:1661":{"crate_id":2,"path":["core","write"],"kind":"macro"},"5:3567:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:5384:2634":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:7966:3054":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"1:643:3171":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:11736:8841":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:12331:19694":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:10452:16574":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"6:6007:14113":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:12576:19711":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:9159:8787":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"11:1845:3189":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"6:7504:13617":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:8416:3479":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"6:4445:13391":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"6:532:9936":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:5532:9133":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:2784:3567":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:8979:34541":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"2:2792:9173":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"15:198:15288":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:41520:3465":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:2469:3303":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:9299:29001":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"1:2855:2704":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"11:2168:33550":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"6:4943:13444":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:21570:3303":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"6:1505:10826":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:9403:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"6:4482:13396":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:13453:20460":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:47662:3672":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:4702:3397":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:959:3183":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:11069:16418":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"16:6361:16278":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:11933:741":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:9148:34578":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:2264:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"6:482:9930":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:41719:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:7837:3294":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:2544:2701":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:11891:19667":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"18:531:20525":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:1667:1088":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:3956:3385":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"11:2180:33545":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:4259:8935":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:10855:22381":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"5:6601:2658":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:10451:3341":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"6:6647:10969":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"5:1371:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:13698:20477":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:20607:29082":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:10897:16414":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"16:3300:15367":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"18:766:20515":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"16:7293:16301":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"6:4677:3380":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"16:8269:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"16:2448:15341":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"6:5050:13455":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:1577:3188":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:10808:8824":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"6:4367:13382":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:42925:8811":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:12046:19676":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:8947:3145":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:11120:3533":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"2:41679:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:10960:2733":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:47624:3651":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"16:8156:2939":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:11821:16560":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"7:32:15115":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:43625:3324":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"1:6211:2707":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:42721:3034":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:6032:2711":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"16:7065:33626":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:12345:19695":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:9628:16435":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:40141:28350":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:12550:19709":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:6575:2720":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"16:4818:15991":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"6:5986:14111":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:40020:8965":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:13461:20461":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:9350:34509":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:45952:3603":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"18:538:2780":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:10743:16408":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:3488:3322":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"13:226:2945":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:11916:937":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"6:4412:13387":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"6:4340:13381":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:2317:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:4011:29003":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"16:7767:16317":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"5:6252:2628":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"16:7572:33674":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"6:4983:13449":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:41297:3030":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:21977:3375":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"16:6351:16277":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:11902:19668":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:42401:28747":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:6921:3006":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"16:2808:15356":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"16:5886:16267":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:41478:2396":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"1:8366:3478":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"17:10989:16416":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:11497:23104":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"16:6236:2880":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"11:1838:3188":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"11:1517:15263":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:10445:3343":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:1630:587":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"1:11401:3369":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:46460:3650":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:2929:2353":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:42484:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:355:3160":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:10971:2734":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:45906:3597":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"16:5616:16258":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:6678:9129":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"9:0:2198":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:11932:745":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"5:1099:32673":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:13516:20467":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:42713:3033":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"6:4523:13401":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:11428:9324":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:44305:195":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"6:4495:13398":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:7595:3197":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:9973:16483":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"0:0:2085":{"crate_id":0,"path":["fnv"],"kind":"module"},"1:11101:21750":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:44094:9315":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:10527:16602":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:875:2977":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:45858:3649":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"5:5856:9532":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:44297:211":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:20995:3576":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:40332:28899":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:11628:19177":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"18:582:3027":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"6:7510:13618":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"6:547:9938":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:11770:19661":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"16:5630:16259":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"5:5263:8803":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"16:6132:16272":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:22238:178":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:11319:19160":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:10334:2796":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:9151:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:8847:3009":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"6:4823:13431":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:12522:19707":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"5:1470:2978":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:11936:1499":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"11:968:3184":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"6:4474:13395":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:8189:3368":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"16:6868:2881":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"17:13015:20423":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:10823:16411":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:43960:8883":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:43347:8850":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:247:34524":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:11136:16616":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:42457:71":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"16:3749:15378":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"18:690:20519":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:11539:8835":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"16:3640:15370":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:4187:2995":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"1:8132:3302":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"11:798:3179":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"6:1494:10824":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:8153:2998":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"16:2786:15355":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:47228:3605":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:45695:3663":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"6:4462:13393":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:43521:8859":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:9138:16403":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"6:1544:10831":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:7043:27619":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:41529:9263":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"5:3168:2975":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:10428:16599":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:4410:2996":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:8931:2815":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:10977:2735":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:21094:3303":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:11930:743":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:4868:3446":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"5:626:31209":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:10923:2829":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"5:3668:2608":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:1499:10825":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:43371:3326":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:40214:3274":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:41211:155":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:1985:184":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"5:1500:2980":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"14:160:15269":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:6108:2694":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"6:1574:10834":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:46172:28351":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:12178:19685":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:49682:3592":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"2:40084:8961":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"5:7334:2647":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"16:4540:15905":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:47784:8748":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"18:719:20513":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:9917:2819":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:42429:110":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:44122:9314":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"6:579:9943":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"11:1048:33557":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:8922:3517":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"5:5930:2634":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:13499:20465":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:11935:1498":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:47338:3639":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:6564:9980":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:2354:189":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:12915:20419":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:4531:3439":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"16:7683:2935":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:13024:20424":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:6589:2404":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"5:4233:2975":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:901:2628":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"12:0:2201":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:39380:8941":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"2:45658:3608":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:44287:205":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:7722:3242":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:10691:16608":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:9596:2683":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"6:526:9935":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:10283:16519":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"11:1538:15264":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:39978:8964":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:46696:3616":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:7699:3042":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"1:947:3181":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"16:7519:16310":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"16:2404:15339":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:12072:19678":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:9165:8785":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"6:7545:13623":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"6:4615:13409":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"11:1822:2396":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"16:6904:2925":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"5:2128:2625":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:11941:1128":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:9488:16444":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"11:2060:3186":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:9826:16454":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"16:7366:16302":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:9218:2796":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:9628:2689":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"11:736:2978":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"2:40042:8856":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:9161:194":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"1:6156:3049":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"18:515:20524":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:13803:20483":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:1947:16455":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:9989:2976":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"18:80:20501":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:4006:3388":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:13233:20439":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:8718:2809":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"6:4649:13412":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"6:6129:14146":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:11813:16562":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:11197:3505":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"5:1254:3184":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"6:4400:13386":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"16:6146:194":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:10747:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:10967:16415":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:42906:9305":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"16:6460:2919":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:44106:9320":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:21873:28312":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:9409:2334":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:46004:3615":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"6:0:817":{"crate_id":6,"path":["libc"],"kind":"module"},"6:7608:15099":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:4326:2670":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:46730:3665":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:3231:3345":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:11391:2845":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"16:5000:16029":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"6:4419:13388":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"5:4938:2634":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:4314:13379":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:12259:19689":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:47709:8743":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:13821:20485":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:12358:19696":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"16:6544:2921":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:20575:28869":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:6505:3521":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:10255:21272":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"1:844:2975":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:41340:3372":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:40058:8855":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"9:421:15146":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"16:7244:33921":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:11056:21824":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"18:614:34660":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"16:4969:16022":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:46620:3604":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:11832:16561":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:6644:23363":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"16:2967:15362":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:10092:16558":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:11785:19662":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:4148:3415":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"16:535:2867":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:6981:2710":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:12536:19708":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"6:4468:13394":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:8163:3325":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:21001:3578":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"6:1589:10835":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:10894:3501":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"1:7827:3055":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"16:6061:15308":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:10386:2730":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"17:12085:19679":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:8310:16391":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:8941:107":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"17:11060:2825":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:21814:3019":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"11:805:3180":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:10303:16515":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:46430:3644":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:2847:9183":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"16:5104:16061":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"9:174:2963":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"6:1535:10830":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"11:1852:3190":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:11266:25484":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"5:3719:3056":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:39269:201":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:43806:8877":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:10014:3326":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"17:12646:19715":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"16:6022:16271":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:39969:8933":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:11471:19166":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:41759:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:5586:2707":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:11641:19178":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:7215:2356":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"5:2963:31194":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"6:4962:13447":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:41597:2976":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:2985:3217":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:8953:2793":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:5991:9143":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:40314:9131":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:8791:3500":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:46074:3671":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"16:3047:15364":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"16:7259:3464":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:20890:9199":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"2:47680:8740":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:41251:3361":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"6:5073:13458":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"6:6624:3451":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:47799:8749":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:3197:8771":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:43177:8819":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:44090:9312":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"6:4703:13416":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:9410:3296":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"2:21798:2987":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:9374:145":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"1:1568:2628":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:22502:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"18:652:34642":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:11879:19666":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:30313:28352":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"2:40129:3260":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:3424:3299":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:12236:19688":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:8813:2975":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:8195:3367":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"5:7351:2652":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"11:749:2628":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:42466:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"1:5202:190":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"5:7161:2347":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"6:1701:3407":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"16:5655:16261":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:7599:9123":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:11939:790":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:47746:8746":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:47586:3617":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:11787:8868":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"16:7626:16313":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"6:4780:13425":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:2245:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"16:154:2590":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"11:630:2975":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:10735:16611":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:13257:20442":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:11337:2738":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:8525:3484":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:20993:3303":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:11532:19170":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:8997:16300":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:44178:9332":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:22304:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:11929:746":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"16:6696:16289":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"16:5346:16255":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:41799:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:4010:3389":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:11044:3500":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"18:671:20517":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:2684:220":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:40346:3004":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"16:2546:15345":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:13385:20453":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"16:4904:16005":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:40685:28956":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"5:6994:2972":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:45676:3614":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:13411:20455":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"16:6767:16291":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:4706:3401":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"18:481:20522":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"5:204:2606":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:8977:23396":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:11520:19169":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:2376:3290":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"6:5079:13459":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:12388:19698":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:21125:3582":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:13667:20474":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"5:1285:3185":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:12433:19701":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:43983:8865":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"6:4753:13422":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"16:4932:16009":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"6:7563:13626":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:13791:20482":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:936:3180":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"16:6535:2593":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"17:11434:19163":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"6:587:9944":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:11917:418":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:12506:107":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:41614:183":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"16:2931:15361":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:9067:219":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"6:1716:10847":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:2933:16517":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:22568:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:2768:9168":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:2701:228":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"6:4605:13408":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:5716:3516":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"16:6575:16287":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:5270:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:1783:3222":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"17:9545:16437":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:3638:3366":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"16:5976:2869":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:6259:206":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:2603:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"17:9098:16402":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:2926:2352":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:3996:3387":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:8667:2792":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:9959:16507":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:4926:3456":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:41839:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"5:7279:8887":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"16:5963:16269":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:9366:141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:4765:388":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"18:599:34649":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"5:2957:31190":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:43654:8846":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:13721:20478":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:20771:3580":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"1:10864:3495":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"5:673:231":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:22469:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"11:657:2396":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:13309:20445":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:8360:16392":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:9670:16459":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:8420:16394":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"16:3815:15396":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:6355:23363":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"16:5920:2863":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:1589:3190":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"6:4517:13400":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:21911:28255":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:10377:16521":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"8:0:2197":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:7165:9125":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"3:0:442":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"17:9653:16473":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:11283:8848":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:46226:28347":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"6:5817:14100":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:45473:3601":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:8389:16393":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"6:4832:13432":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:39291:203":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:43341:8851":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"11:723:2977":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:9696:2816":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:8253:3467":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:39187:200":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:21118:3303":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"16:7042:33697":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:2350:3280":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"5:4001:2628":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":26}