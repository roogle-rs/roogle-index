{"root":"0:0:2046","crate_version":"1.0.7","includes_private":false,"index":{"2:11828:27395":{"id":"2:11828:27395","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11089:8702"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11912:30883":{"id":"2:11912:30883","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11914:30884":{"id":"2:11914:30884","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11899:30878":{"id":"2:11899:30878","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11521:8698","`DoubleEndedIterator`":"2:7125:120","prim@char":"1:11843:410","str::matches":"2:11896:2263"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:50948:8716","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:8694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11526:8694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11541:8695","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:20:1627":{"id":"0:20:1627","crate_id":0,"name":"FnvBuildHasher","span":{"filename":"lib.rs","begin":[128,0],"end":[128,56]},"visibility":"public","docs":"A builder for default FNV hashers.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"BuildHasherDefault","id":"2:9284:1610","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1615","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"0:15":{"id":"0:15","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[99,0],"end":[106,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1615","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:16:1619"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11843:24234":{"id":"2:11843:24234","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11842:24233"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11830:310":{"id":"2:11830:310","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:11831:24211","`u8`":"1:11860:1464"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2533:681":{"id":"2:2533:681","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11850:30873":{"id":"2:11850:30873","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:50990:8712","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11822:30867":{"id":"2:11822:30867","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11851:28564":{"id":"2:11851:28564","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:51018:8699","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11858:23806":{"id":"2:11858:23806","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11843:410","self::pattern":"2:11521:8698"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:8694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11526:8694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11541:8695","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11869:21866":{"id":"2:11869:21866","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11521:8698","`DoubleEndedIterator`":"2:7125:120","prim@char":"1:11843:410","str::split_whitespace":"2:11847:28575","str::rsplit":"2:11875:24244"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:50726:3227","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:8694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11834:24208":{"id":"2:11834:24208","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:48736:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9702:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9702:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11945:3061":{"id":"2:11945:3061","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4501:3061"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:51034:3062","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11848:28555":{"id":"2:11848:28555","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11847:28575"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:51009:8700","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2546:1442":{"id":"2:2546:1442","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48878:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"name":"TryFrom","id":"2:2511:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2240:20398":{"id":"2:2240:20398","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11842:24233":{"id":"2:11842:24233","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11843:24234"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11925:24251":{"id":"2:11925:24251","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11843:410","self::pattern":"2:11521:8698"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:8694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11526:8694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11541:8695","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5304:3251":{"id":"5:5304:3251","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7158:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7158:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11872:24242":{"id":"2:11872:24242","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11843:410","self::pattern":"2:11521:8698"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:11345:8687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:8694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11910:30882":{"id":"2:11910:30882","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11908:30881":{"id":"2:11908:30881","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2541:1443":{"id":"2:2541:1443","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48878:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2511:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2537-0:10:1615":{"id":"b:2:2537-0:10:1615","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2511:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2507:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1615","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2540:127","2:2541:1443"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11890:30876":{"id":"2:11890:30876","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:8694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11928:30888":{"id":"2:11928:30888","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11843:410","self::pattern":"2:11521:8698"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:8694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11526:8694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11541:8695","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2545:127":{"id":"2:2545:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:39834:3410","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:24:1633":{"id":"0:24:1633","crate_id":0,"name":"FnvHashSet","span":{"filename":"lib.rs","begin":[136,0],"end":[136,52]},"visibility":"public","docs":"A `HashSet` using a default FNV hasher.","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"HashSet","id":"1:1436:143","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"resolved_path","inner":{"name":"FnvBuildHasher","id":"0:20:1627","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"2:11849:21867":{"id":"2:11849:21867","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:50980:3228","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2672:217-0:10:1615":{"id":"a:2:2672:217-0:10:1615","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2672:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1615","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11820:797":{"id":"2:11820:797","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11843:410"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11836:24209":{"id":"2:11836:24209","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9702:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9702:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11922:21537":{"id":"2:11922:21537","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11843:410","self::pattern":"2:11521:8698"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:8694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11931:30889":{"id":"2:11931:30889","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11843:410","self::pattern":"2:11521:8698"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:8694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11939:25326":{"id":"2:11939:25326","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5294:31545":{"id":"5:5294:31545","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7158:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7158:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2527-0:10:1615":{"id":"b:2:2527-0:10:1615","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2504:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2501:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1615","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2530:2338"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:13":{"id":"0:13","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[91,0],"end":[97,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2578:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1615","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:14:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:10:1615":{"id":"0:10:1615","crate_id":0,"name":"FnvHasher","span":{"filename":"lib.rs","begin":[89,0],"end":[89,26]},"visibility":"public","docs":"An implementation of the Fowler–Noll–Vo hash function.\n\nSee the [crate documentation](index.html) for more details.","links":{},"attrs":["#[allow(missing_copy_implementations)]"],"deprecation":null,"kind":"struct","inner":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:15","a:2:2686:225-0:10:1615","a:2:2736:2304-0:10:1615","a:2:8139:3372-0:10:1615","a:2:2672:217-0:10:1615","a:2:8140:3371-0:10:1615","b:2:2542-0:10:1615","b:2:2531-0:10:1615","b:2:2527-0:10:1615","b:2:2235-0:10:1615","b:2:2537-0:10:1615","b:2:2238-0:10:1615","b:2:3328-0:10:1615","0:13","0:17"]}},"2:11940:25327":{"id":"2:11940:25327","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11852:24250":{"id":"2:11852:24250","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11843:410","self::pattern":"2:11521:8698"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:8694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2237:2248":{"id":"2:2237:2248","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11861:2385":{"id":"2:11861:2385","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:48736:176","prim@char":"1:11843:410","self::pattern":"2:11521:8698"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:8694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11865:2344":{"id":"2:11865:2344","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:48736:176","prim@char":"1:11843:410","self::pattern":"2:11521:8698"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:8694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11526:8694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11541:8695","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5305:25374":{"id":"5:5305:25374","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:11941:25328"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7158:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11845:28086":{"id":"2:11845:28086","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11843:410"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:50702:8704","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8140:3371-0:10:1615":{"id":"a:2:8140:3371-0:10:1615","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8140:3371","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1615","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11847:28575":{"id":"2:11847:28575","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11848:28555"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:51000:8701","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5291:31544":{"id":"5:5291:31544","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7158:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7158:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:8694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11841:30872":{"id":"2:11841:30872","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11849:1368","crate::ops::IndexMut":"2:2995:3118","str::slice_unchecked":"2:11840:30871"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11941:25328":{"id":"2:11941:25328","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11823:30868":{"id":"2:11823:30868","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11825:30869":{"id":"2:11825:30869","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11823:30868"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2238-0:10:1615":{"id":"b:2:2238-0:10:1615","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2679:2303","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2232:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1615","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2240:20398"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:14:59":{"id":"0:14:59","crate_id":0,"name":"default","span":{"filename":"lib.rs","begin":[94,4],"end":[96,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1615","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11878:30874":{"id":"2:11878:30874","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11521:8698","str::split":"2:11869:21866","prim@char":"1:11843:410","`DoubleEndedIterator`":"2:7125:120","str::rsplit_terminator":"2:11881:30875"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:50776:8718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:8694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11893:30877":{"id":"2:11893:30877","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:8694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11526:8694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11541:8695","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11896:2263":{"id":"2:11896:2263","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11521:8698","`DoubleEndedIterator`":"2:7125:120","prim@char":"1:11843:410","str::matches":"2:11896:2263"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:50930:8715","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:8694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11846:1623":{"id":"2:11846:1623","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:50712:2719","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11831:24211":{"id":"2:11831:24211","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11860:1464"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11881:30875":{"id":"2:11881:30875","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11521:8698","str::split":"2:11869:21866","prim@char":"1:11843:410","str::split_terminator":"2:11878:30874"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:50794:8717","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:8694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11526:8694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11541:8695","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11840:30871":{"id":"2:11840:30871","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11849:1368","str::slice_mut_unchecked":"2:11841:30872","crate::ops::Index":"2:2991:3117"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2235-0:10:1615":{"id":"b:2:2235-0:10:1615","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2679:2303","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2229:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1615","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2237:2248"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:18:1621":{"id":"0:18:1621","crate_id":0,"name":"finish","span":{"filename":"lib.rs","begin":[110,4],"end":[112,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2530:2338":{"id":"2:2530:2338","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2504:132"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11829:30870":{"id":"2:11829:30870","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11819":{"id":"2:11819","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:11084:1368","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11820:797","2:11821:2345","2:11822:30867","2:11823:30868","2:11825:30869","2:11828:27395","2:11829:30870","2:11830:310","2:11831:24211","2:11832:24207","2:11834:24208","2:11836:24209","2:11838:24210","2:11840:30871","2:11841:30872","2:11842:24233","2:11843:24234","2:11844:28563","2:11845:28086","2:11846:1623","2:11847:28575","2:11848:28555","2:11849:21867","2:11850:30873","2:11851:28564","2:11852:24250","2:11855:23804","2:11858:23806","2:11861:2385","2:11865:2344","2:11869:21866","2:11872:24242","2:11875:24244","2:11878:30874","2:11881:30875","2:11884:24246","2:11887:24248","2:11890:30876","2:11893:30877","2:11896:2263","2:11899:30878","2:11902:30879","2:11905:30880","2:11908:30881","2:11910:30882","2:11912:30883","2:11914:30884","2:11915:30885","2:11916:30886","2:11919:30887","2:11922:21537","2:11925:24251","2:11928:30888","2:11931:30889","2:11934:30890","2:11937:30891","2:11939:25326","2:11940:25327","2:11941:25328","2:11942:25329","2:11943:30892","2:11945:3061","2:11946:30893"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5303:31547":{"id":"5:5303:31547","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:288:2311","`String`":"5:7158:221"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:2311","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6909:2883","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7158:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5306:25375":{"id":"5:5306:25375","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:11942:25329"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7158:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11943:30892":{"id":"2:11943:30892","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4500:30892"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:51025:8709","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5286":{"id":"5:5286","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5197:1368","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5287:31543","5:5288:3229","5:5291:31544","5:5294:31545","5:5302:31546","5:5303:31547","5:5304:3251","5:5305:25374","5:5306:25375"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11884:24246":{"id":"2:11884:24246","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11843:410","self::pattern":"2:11521:8698","str::rsplitn":"2:11887:24248"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:50830:8685","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:8694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11934:30890":{"id":"2:11934:30890","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11843:410","self::pattern":"2:11521:8698"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:8694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11526:8694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11541:8695","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11844:28563":{"id":"2:11844:28563","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11843:410"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:50696:8705","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:17":{"id":"0:17","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[108,0],"end":[125,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["write_length_prefix","write_i64","write_i8","write_u64","write_u8","write_i128","write_i16","write_u128","write_u16","write_str","write_isize","write_i32","write_usize","write_u32"],"trait":{"name":"Hasher","id":"2:9244:144","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1615","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:18:1621","0:19:1622"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11838:24210":{"id":"2:11838:24210","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9702:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9702:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:21:1629":{"id":"0:21:1629","crate_id":0,"name":"FnvHashMap","span":{"filename":"lib.rs","begin":[132,0],"end":[132,58]},"visibility":"public","docs":"A `HashMap` using a default FNV hasher.","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"HashMap","id":"1:734:141","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"resolved_path","inner":{"name":"FnvBuildHasher","id":"0:20:1627","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"2:11855:23804":{"id":"2:11855:23804","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11843:410","self::pattern":"2:11521:8698"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:8694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2686:225-0:10:1615":{"id":"a:2:2686:225-0:10:1615","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2686:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1615","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11832:24207":{"id":"2:11832:24207","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:48736:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9702:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9702:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:16:1619":{"id":"0:16:1619","crate_id":0,"name":"with_key","span":{"filename":"lib.rs","begin":[103,4],"end":[105,5]},"visibility":"public","docs":"Create an FNV hasher starting with a state corresponding\nto the hash `key`.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["key",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1615","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3328-0:10:1615":{"id":"b:2:3328-0:10:1615","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2679:2303","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3326:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1615","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3330:1456"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2531-0:10:1615":{"id":"b:2:2531-0:10:1615","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2504:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1615","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2533:681"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:19:1622":{"id":"0:19:1622","crate_id":0,"name":"write","span":{"filename":"lib.rs","begin":[115,4],"end":[124,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["bytes",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3330:1456":{"id":"2:3330:1456","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:47073:8767","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11821:2345":{"id":"2:11821:2345","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11916:30886":{"id":"2:11916:30886","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11843:410","self::pattern":"2:11521:8698"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:8694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11526:8694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11546:8693","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11942:25329":{"id":"2:11942:25329","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5302:31546":{"id":"5:5302:31546","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7158:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7158:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11915:30885":{"id":"2:11915:30885","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2542-0:10:1615":{"id":"b:2:2542-0:10:1615","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2501:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2511:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1615","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2545:127","2:2546:1442"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2736:2304-0:10:1615":{"id":"a:2:2736:2304-0:10:1615","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2736:2304","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1615","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11905:30880":{"id":"2:11905:30880","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11521:8698","`DoubleEndedIterator`":"2:7125:120","prim@char":"1:11843:410","str::match_indices":"2:11902:30879"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:50894:8714","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:8694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11526:8694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11541:8695","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:2046":{"id":"0:0:2046","crate_id":0,"name":"fnv","span":{"filename":"lib.rs","begin":[1,0],"end":[367,1]},"visibility":"public","docs":"An implementation of the [Fowler–Noll–Vo hash function][chongo].\n\n## About\n\nThe FNV hash function is a custom `Hasher` implementation that is more\nefficient for smaller hash keys.\n\n[The Rust FAQ states that][faq] while the default `Hasher` implementation,\nSipHash, is good in many cases, it is notably slower than other algorithms\nwith short keys, such as when you have a map of integers to other values.\nIn cases like these, [FNV is demonstrably faster][graphs].\n\nIts disadvantages are that it performs badly on larger inputs, and\nprovides no protection against collision attacks, where a malicious user\ncan craft specific keys designed to slow a hasher down. Thus, it is\nimportant to profile your program to ensure that you are using small hash\nkeys, and be certain that your program could not be exposed to malicious\ninputs (including being a networked server).\n\nThe Rust compiler itself uses FNV, as it is not worried about\ndenial-of-service attacks, and can assume that its inputs are going to be\nsmall—a perfect use case for FNV.\n\n\n## Using FNV in a `HashMap`\n\nThe `FnvHashMap` type alias is the easiest way to use the standard library’s\n`HashMap` with FNV.\n\n```rust\nuse fnv::FnvHashMap;\n\nlet mut map = FnvHashMap::default();\nmap.insert(1, \"one\");\nmap.insert(2, \"two\");\n\nmap = FnvHashMap::with_capacity_and_hasher(10, Default::default());\nmap.insert(1, \"one\");\nmap.insert(2, \"two\");\n```\n\nNote, the standard library’s `HashMap::new` and `HashMap::with_capacity`\nare only implemented for the `RandomState` hasher, so using `Default` to\nget the hasher is the next best option.\n\n## Using FNV in a `HashSet`\n\nSimilarly, `FnvHashSet` is a type alias for the standard library’s `HashSet`\nwith FNV.\n\n```rust\nuse fnv::FnvHashSet;\n\nlet mut set = FnvHashSet::default();\nset.insert(1);\nset.insert(2);\n\nset = FnvHashSet::with_capacity_and_hasher(10, Default::default());\nset.insert(1);\nset.insert(2);\n```\n\n[chongo]: http://www.isthe.com/chongo/tech/comp/fnv/index.html\n[faq]: https://www.rust-lang.org/en-US/faq.html#why-are-rusts-hashmaps-slow\n[graphs]: https://cglab.ca/~abeinges/blah/hash-rs/","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:10:1615","0:20:1627","0:21:1629","0:24:1633"],"is_stripped":false}},"5:5288:3229":{"id":"5:5288:3229","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7158:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7158:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:8694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2540:127":{"id":"2:2540:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2511:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"2:11919:30887":{"id":"2:11919:30887","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11843:410","self::pattern":"2:11521:8698"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:8694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11902:30879":{"id":"2:11902:30879","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11521:8698","`DoubleEndedIterator`":"2:7125:120","prim@char":"1:11843:410","str::rmatch_indices":"2:11905:30880"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:50876:8713","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:8694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11887:24248":{"id":"2:11887:24248","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11843:410","str::splitn":"2:11884:24246","self::pattern":"2:11521:8698"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:50848:8683","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:8694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11526:8694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11541:8695","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11937:30891":{"id":"2:11937:30891","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11483:126","`FromStr`":"2:11482:3393"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48878:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:11482:3393","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11482:3393","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11875:24244":{"id":"2:11875:24244","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11521:8698","`DoubleEndedIterator`":"2:7125:120","prim@char":"1:11843:410","str::split":"2:11869:21866"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:50744:8681","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:8694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11526:8694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11541:8695","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11946:30893":{"id":"2:11946:30893","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4498:30893"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:51043:8710","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8139:3372-0:10:1615":{"id":"a:2:8139:3372-0:10:1615","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8139:3372","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1615","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:5287:31543":{"id":"5:5287:31543","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:2311","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6909:2883","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:2311","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6909:2883","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"6:6385:10677":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"16:4921:15809":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:54644:8593":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:5546:2609":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:11149:16580":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:11137:16545":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:2686:225":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"18:531:20167":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"5:3501:3076":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:10142:8683":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:10774:16165":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"12:751:2533":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:22102:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"6:7265:13297":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:50614:8680":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:2229:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"16:7567:16065":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:11800:19135":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"5:784:2512":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:20719:3302":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:39883:2921":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:51178:8729":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:47503:3163":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"17:8162:16140":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"6:4608:13144":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"6:482:9828":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:54690:8597":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"12:1120:15010":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"6:4447:13128":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:50696:8705":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"1:3916:3289":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"16:4545:15721":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:1552:2538":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:9987:23768":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"2:46913:195":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"9:33:2852":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"1:11848:1338":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:4159:3321":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:12118:19157":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:9947:16308":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"6:4575:13140":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:10445:2730":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"6:4663:13151":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:52406:3537":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:8569:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"16:6171:16026":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:1931:16204":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"16:2367:15088":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"6:4591:13142":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:4625:3328":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:8474:3386":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:4344:2573":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"5:3699:2510":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"14:0:2153":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"6:4716:13157":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"16:6790:16046":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:11038:3208":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:4079:3317":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"6:5709:13788":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:11863:1463":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"16:6345:2823":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:8741:183":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"17:9458:16222":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"5:864:2517":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"5:1387:2350":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:1575:2498":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"6:5508:13773":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:52360:3557":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:53339:3548":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"6:5871:13823":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"5:6484:2549":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"6:1580:10744":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:13492:20080":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:8811:3434":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:4837:3352":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:9539:16205":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:9350:16186":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:10796:16125":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:8096:3200":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:4222:8795":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"6:1614:10748":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:13141:19970":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"16:6690:2826":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"18:624:33899":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:10752:16164":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"9:19:2850":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"1:2869:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"6:4216:12948":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:8368:16146":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:9700:16229":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"6:6991:14584":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:7202:156":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"16:2705:15102":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:11842:921":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:9376:2633":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"17:10854:16167":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:9021:16153":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"5:3057:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:10631:22310":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:47473:27756":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:5751:13793":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:12225:19225":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:50848:8683":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:50579:8660":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:2613:3239":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:925:3080":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:8737:2902":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"6:4195:13101":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"5:5139:8654":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"8:0:2148":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:21758:27847":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:9909:2726":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:2790:9034":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:3922:3290":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:10385:16351":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:12060:19153":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"16:7117:33216":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:4057:23773":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:5702:2938":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:9897:16307":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:3966:3292":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:4087:3318":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:4828:3351":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"5:6276:2350":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:7944:3240":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"15:0:2154":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:10193:3402":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"6:595:9843":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:1436:143":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"16:6463:16036":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"16:3026:15114":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:5811:2613":{"crate_id":1,"path":["std","sync","mpmc","array","Channel"],"kind":"struct"},"17:8796:2698":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:54183:3529":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:13047:19958":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"5:7180:8742":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"18:548:140":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:2359:3190":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:57559:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:21787:29754":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:4353:8802":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"17:12361:19303":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"16:4519:15719":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"5:1413:3078":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"5:0:283":{"crate_id":5,"path":["alloc"],"kind":"module"},"5:219:2508":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"12:393:32799":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:47748:9004":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"6:4310:13115":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:3243:8623":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:12137:28468":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:7051:8985":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"16:6865:32867":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"6:1894:10896":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:2806:9036":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"5:6924:3095":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:49251:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:4419:3329":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:1592:3093":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:29757:3276":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:51708:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"5:5095:2510":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:8080:2899":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"6:4136:13097":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:20727:3488":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"16:5664:16014":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"16:4849:15785":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:8484:3075":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"18:699:2690":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:48734:178":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:6805:2899":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:12355:202":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"2:2837:9043":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:11271:16749":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:12980:19950":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:8108:3204":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:48878:207":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"17:10245:16348":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:11271:9211":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:13134:19969":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"16:6146:16024":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"18:507:33891":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:12617:19367":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"16:5614:2799":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:48685:3266":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"6:4585:13141":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"6:4708:13156":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:3249:16289":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"18:113:20145":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:50876:8713":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"6:4371:13122":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:4459:13129":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:950:3084":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"6:4149:13098":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:4491:3344":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:12436:3120":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"6:5782:13794":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"6:0:802":{"crate_id":6,"path":["libc"],"kind":"module"},"17:12972:19923":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:49514:8639":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:11011:21546":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:20471:29593":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"6:4162:13099":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"6:4645:13149":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:48802:3076":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:49091:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:46882:9050":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:6277:163":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:47276:3062":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:12164:19160":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:9263:16176":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:11951:19146":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"16:5628:16013":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:8171:3270":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"16:4749:15757":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:939:3083":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:7783:3177":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"6:4106:13094":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"6:5670:13784":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:51469:9203":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:2511:234":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:47416:8821":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"16:7278:16054":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:11019:2907":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"1:8213:3266":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:11059:9160":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:10612:3355":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:50670:8711":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"5:7081:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"18:0:2157":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:48039:3253":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:12033:19151":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:5669:3423":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"5:3093:3092":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"10:0:2150":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:6350:3073":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:50285:28522":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:47303:27858":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:11685:2646":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:11787:19134":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:10921:16362":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:1760:9078":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"16:6517:15033":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:11594:19004":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"6:6458:14207":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:8165:3271":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:21696:28135":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:51315:8734":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"16:7909:16073":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"5:688:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:54664:8595":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:9601:16209":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:2973:8624":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"16:5494:16010":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"16:7329:2830":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"11:0:2151":{"crate_id":11,"path":["adler"],"kind":"module"},"1:558:3045":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:48971:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:8917:106":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"17:967:16191":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"18:515:20166":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:20602:3492":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"14:202:8744":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:1065:3088":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"6:5533:13776":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:9500:2586":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"16:5460:16008":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:3978:3295":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:2921:3101":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:7047:8986":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:962:3086":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:11853:631":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"16:2487:15093":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:8393:16147":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:8992:21105":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:638:3066":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:3172:8791":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"16:7980:16077":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:10088:16268":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"6:5490:13772":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"6:6555:14213":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:10845:2730":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:1586:3092":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"6:4257:13108":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:52715:3483":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:11684:19069":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:52460:3558":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:49854:9145":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"2:47813:9007":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"6:1649:10750":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:7587:3033":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"1:7613:2635":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:12116:8840":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:2822:9039":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:11747:111":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"6:532:9834":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"12:861:3086":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"5:6963:2350":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:49371:2924":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:53575:3528":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:9577:16211":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"5:6203:2510":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:50553:8662":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:10394:16352":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"16:6052:2785":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:1580:3091":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"16:8069:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:58912:28134":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"6:5592:13779":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:21704:27867":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"16:5122:15986":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"6:6564:14214":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"16:6123:2817":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:12008:19149":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"6:4485:13131":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:10682:16163":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:8139:3225":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"17:11893:19141":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"16:5388:16004":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"5:2375:30716":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:3342:2538":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"1:8735:3403":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"18:564:2687":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"12:98:32808":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:7695:3137":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"18:671:20156":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:7592:3042":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"1:7939:2948":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:8956:3157":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"7:0:1507":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:7934:26873":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:47386:8819":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"2:50077:2926":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"16:2320:15086":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"0:21:1629":{"crate_id":0,"path":["fnv","FnvHashMap"],"kind":"typedef"},"18:481:20164":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:22201:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"5:7128:3159":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:8225:3324":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:10655:8675":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"16:7497:2838":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"12:646:3076":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"6:4210:13103":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:10706:21542":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:588:3059":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"0:0:2046":{"crate_id":0,"path":["fnv"],"kind":"module"},"17:11997:19148":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:4108:2895":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"18:736:20160":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"16:6496:16037":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"5:4818:2538":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:4499:3284":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:47626:8994":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:11576:18960":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:9894:3227":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"16:5761:16016":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:2831:2606":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:4559:20411":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:47696:9009":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"6:4615:13145":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:4563:8812":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"5:7065:2301":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"12:762:2498":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"2:22399:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:57585:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:288:2311":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:10875:16168":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:11070:2741":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:0:487":{"crate_id":2,"path":["core"],"kind":"module"},"17:9681:16255":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:11859:727":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:11856:729":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"17:487:16137":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:11861:1461":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1:8859:3437":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:49757:130":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"16:7847:16070":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:10049:8681":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:7576:3057":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:12756:19471":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:21794:3279":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"7:79:14796":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:47355:8710":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:49796:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"16:7059:3369":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:49500:8630":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:52650:3515":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:52561:3538":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"12:2184:29336":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"5:1243:3088":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"6:6440:14206":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:1083:3090":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:1568:2350":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:5485:3409":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"6:1684:10753":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:9371:16154":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:9976:8674":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"9:709:3383":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:11541:8695":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:3088:3119":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:11497:15044":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:10987:3405":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:10915:2637":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:9553:2701":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:47764:9005":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"16:7211:2782":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"16:7093:16049":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:9328:16188":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"18:574:33891":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"9:920:14819":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:8561:2714":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"18:727:2692":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"6:1524:10738":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:8265:3353":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"5:7169:8741":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:21681:27753":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:22069:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"6:1506:10735":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:1643:8965":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"16:4721:15753":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"6:5544:13777":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"16:5219:2697":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:4707:3072":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"6:5520:13775":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:7793:3180":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:11310:9210":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:11174:16582":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:47001:200":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"16:7343:2831":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:621:3063":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:54041:3560":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"6:7299:14773":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:20721:3486":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:646:3069":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:20852:3485":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"6:5514:13774":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:53385:3552":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:13404:20049":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:10444:2635":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"16:6781:16045":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"6:1728:10758":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"16:6034:16022":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"5:7112:27756":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:47664:28526":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"16:5447:16007":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:47546:3176":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"1:7475:26880":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:4108:3320":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"18:538:2685":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"6:568:9839":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:13340:20009":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"5:2055:2526":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:39874:9107":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:47082:16078":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"17:13231:20006":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:5417:8998":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:5422:3404":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:9702:219":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:2853:9046":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:9712:2723":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:9193:33869":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:3206:8622":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"6:4389:13124":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:12237:19226":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:13059:19959":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:5891:2609":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:12485:19363":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:10490:16356":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:12103:135":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"5:1432:3080":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:52937:3531":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:9658:16254":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:11343:16762":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"13:0:2146":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:534:2599":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"1:870:2350":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"9:592:14837":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"2:7097:2310":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"12:1852:3091":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:4001:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:47291:8825":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:20665:3494":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"6:7236:13293":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"12:822:3083":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:1847:3142":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:50532:8671":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"16:2282:15085":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"6:5759:32435":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:891:3078":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:8871:16150":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:10296:16320":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"9:382:2860":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:11865:775":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"18:755:20161":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:51043:8710":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"16:3457:15118":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"16:7288:16055":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:4662:3301":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"5:5549:229":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"6:4602:13143":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:50990:8712":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"5:1959:2950":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:505:2526":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"17:11259:16746":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:50046:2290":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:11825:21368":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:7125:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:6425:14204":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:51358:8720":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"5:6670:2567":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:4227:8796":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:13214:20004":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:10402:3248":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"12:1044:15008":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"16:6877:16047":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:22300:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:49784:109":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"2:51533:9218":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"16:6676:2825":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"15:175:15036":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"16:6743:16044":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:10159:16272":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"16:7396:16060":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:10973:16364":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:20450:29592":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:52907:3527":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:46937:196":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:12322:19237":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:1771:599":{"crate_id":1,"path":["std","env"],"kind":"module"},"6:5682:13785":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:11234:9209":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:11841:19138":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:3234:3244":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"16:5411:16005":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"16:5780:16017":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:7864:2950":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"16:6704:2827":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:13382:20047":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:10476:16355":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:11661:19068":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"9:863:14817":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:12674:19422":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:3506:2533":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"17:2916:16266":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:12313:106":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"0:24:1633":{"crate_id":0,"path":["fnv","FnvHashSet"],"kind":"typedef"},"18:599:33883":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"12:669:3080":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:11864:1460":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"18:766:20162":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:2778:9032":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"1:11370:3272":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:48819:3369":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:52490:3546":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:10636:26687":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:1825:3108":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:13518:20087":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:9446:16196":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:50055:144":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"9:188:2857":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"2:48024:3073":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:11734:19130":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:5233:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:3326:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:7148:2309":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:8966:131":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:47055:9052":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:54739:8600":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"16:4635:15739":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:51161:8728":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:11145:2944":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:53029:3520":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"12:444:141":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:1788:3125":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"6:1556:10742":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:10405:3244":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"1:5482:3408":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:11075:9162":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"5:5725:2547":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:4666:3306":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:9012:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"18:652:33891":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:50542:8672":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:7840:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:6563:8993":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:3119:26644":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:2942:2308":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"5:4234:2541":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:4299:8801":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"5:6157:2533":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:11857:730":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:2301:185":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:10497:16357":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"6:4408:13125":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:11844:1480":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"1:6390:2624":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"16:5472:16009":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:8220:3323":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:47678:8999":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"16:6816:33155":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"5:7000:2350":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"12:1628:2503":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:8843:3436":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:12797:19475":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"16:6619:16041":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"16:6109:16023":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:9303:2721":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:10014:8688":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:51449:9198":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:10455:16345":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"6:5886:13824":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:7656:3067":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"5:3153:3094":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:8418:16148":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:2736:2304":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"5:3902:2510":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:13071:19960":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:1903:16243":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:10654:21540":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"16:5793:2774":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"14:187:15029":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"6:5845:13822":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:50289:8663":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:3908:3288":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"6:5605:13781":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:48794:3075":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:22234:3048":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:47739:9003":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:13354:20010":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"6:4569:13139":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"6:4683:13154":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:2815:9042":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:2361:3191":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"6:1642:10749":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:12022:19150":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:48870:190":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:6738:3481":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:47636:8995":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:51634:202":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"16:5963:191":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:10332:16350":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:51695:3563":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:54579:3556":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:54541:3536":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:9024:8636":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:7475:3099":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"6:4820:13167":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:11547:16310":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:2936:2306":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"17:8631:2716":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"6:7224:13291":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:11617:19061":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:2498:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"17:11300:16757":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:2217:3182":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"5:1071:31937":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:10257:16323":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:13184:19996":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:10625:16161":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:4095:3319":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:51018:8699":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:11761:19132":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:30074:27862":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"5:1091:30864":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:3894:3287":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"6:6582:14215":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"5:3568:2510":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:1636:578":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:20452:29590":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:9160:28578":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"1:8159:3228":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:12781:19474":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"6:5551:13778":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:8752:2719":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:9738:2709":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:9864:21673":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"16:4888:15800":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:7672:2936":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"17:8241:16142":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:7575:3302":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:11307:2643":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:50624:8678":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"11:44:2849":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"1:8797:3433":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"6:5702:13787":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:11873:19140":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:9845:3075":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:49733:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"1:10641:3180":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"6:6279:9878":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:9362:2701":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:12730:19427":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:53497:3540":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:49870:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"6:4241:13106":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:6602:26859":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"2:11482:3393":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:13572:20095":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"5:7235:2498":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"17:11125:16544":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:8342:3373":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:3640:2350":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:50684:8708":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:2573:3230":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:21645:2912":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:12211:19224":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:2798:3479":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"16:7956:2841":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:46979:198":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:484:2598":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"3:0:434":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"16:7929:16074":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:5354:3401":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:48921:3075":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"5:2884:31936":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"16:2411:15090":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"5:2094:31912":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:21820:3281":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:13007:19952":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"18:719:20159":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:1771:16210":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:3279:3234":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"17:10350:16165":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:4976:26878":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:4327:13117":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:20418:29535":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:8415:3384":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"12:853:3085":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:47402:8709":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"6:1713:3312":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:9364:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"1:9013:2954":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:9671:16223":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:10170:8684":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:53835:3541":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"6:4788:13164":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:5339:3400":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"18:707:8696":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:4373:2897":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"6:4471:13130":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"12:1065:32792":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"16:4662:15742":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:9930:16283":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:3435:21222":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:8490:3388":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"5:4939:2547":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:8146:2719":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:20871:3302":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:10688:8676":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"6:7247:13294":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"9:896:14818":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:11490:15044":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"6:7259:13296":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"5:781:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:10139:2701":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:4886:3361":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:25641:2918":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"12:0:2152":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"5:5705:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:13031:19954":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:47089:28369":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"1:11075:3441":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"18:521:20163":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:9018:8638":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"16:6735:16043":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:8951:33840":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"6:6963:9788":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:8494:2696":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:7679:3130":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"5:6601:241":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"18:609:33895":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:13279:20007":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:8789:3075":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"6:4693:13155":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"16:3716:15180":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:21486:28117":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:9831:16304":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:13158:19993":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:13580:20097":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"12:1845:2498":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"1:8087:2951":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1:6217:203":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:48708:3267":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:38678:2920":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"16:5737:2768":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"6:4377:13123":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:8501:3389":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:51290:8732":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:20473:29588":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:48543:152":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"2:9230:140":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1:9371:3178":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"16:4327:15647":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:7516:29595":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"16:7309:16057":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:11247:16637":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:7823:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"17:11939:19145":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:9488:16207":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"12:1836:2350":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"5:2876:30719":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:21:668":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"5:7158:221":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"16:7166:16050":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"16:4385:15657":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:52959:3534":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:20690:3484":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"6:5743:13792":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"3:223:207":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"12:2053:3087":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:48937:2350":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"16:5596:2795":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:13100:19963":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:3178:8790":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:8822:33850":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"2:48566:3263":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"6:6321:14201":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"5:1212:3087":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:2679:2303":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:8245:8694":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"12:1555:15013":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"6:4506:13132":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:13148:19971":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:47456:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"9:827:14911":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:10108:16264":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"16:6316:16032":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:21669:3277":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:11866:1517":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"17:12695:19423":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:1898:3155":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"1:914:2498":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"5:3098:31953":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"6:6534:14211":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:6312:14200":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:7800:2949":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:51009:8700":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"5:1708:2498":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"17:11330:16761":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:53621:3532":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"16:5558:16012":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"16:7511:16063":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:2932:2305":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"6:5737:13791":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"16:7603:16066":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:2501:147":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"17:12748:19429":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:30002:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:51304:8733":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"12:1138:3090":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:3426:3157":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:3195:3248":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:7641:3064":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:47319:8824":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:7856:3238":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:9014:8630":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"6:7218:13290":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"6:7276:13298":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"19:0:1011":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:7848:20862":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:13221:20005":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:2939:2307":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:50038:2925":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"5:1366:3075":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:1564:3075":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"5:1463:3104":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:11862:1462":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"17:11708:19128":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:5368:3402":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:52316:27874":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:29980:9025":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"6:500:9831":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:8981:16152":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"6:4427:13126":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:57637:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:3970:3293":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:51226:8730":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"6:4304:13114":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"6:579:9841":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"5:2880:31935":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:49493:8629":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:1989:181":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:3858:3286":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:11592:8724":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"16:8056:16079":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"16:5981:33186":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:13024:19953":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"6:541:9835":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:8935:20960":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:9022:191":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"1:6466:3430":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:10506:16324":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:9526:16206":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"5:3611:2950":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"6:526:9833":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:20847:3302":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"2:54716:8599":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:10310:16349":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:3444:3203":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"1:9054:215":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"16:6059:33204":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"6:4771:13162":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:48600:3265":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:679:3070":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"2:48861:9136":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:11515:18952":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"6:1511:10736":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:51325:8735":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"5:1376:3076":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:11855:732":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"6:5482:13771":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:860:3076":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:47103:8779":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:2683:222":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"2:3989:28558":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:49291:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"15:193:15037":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:2866:9049":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"6:1538:10740":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"5:7141:3160":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:12164:189":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"13:220:2847":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"16:4297:15641":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:8923:3043":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"17:8701:2718":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"5:3477:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:13459:20056":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:2802:9037":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:8596:2715":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"16:7452:195":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"16:7357:2832":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:13393:20048":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:3191:28346":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:13478:20062":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"16:3599:15135":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:413:162":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:13506:20086":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"12:1840:2533":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:8110:16122":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:420:15060":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:21135:3512":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"6:4726:13158":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:11226:23776":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:12768:19473":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:12816:2751":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"6:5597:13780":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:6066:2596":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:8139:3372":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"16:6719:33093":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:4:995":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"18:582:2920":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:8978:16048":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:8805:2350":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"12:985:3087":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:10403:16164":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:6610:29020":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"16:7469:2835":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:11809:2958":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:13203:19998":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:6567:214":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:1672:1067":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:12934:19589":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:10420:2729":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"16:5541:16011":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"16:7557:16064":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:11186:16583":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:12148:19159":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"5:2873:2407":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:11841:367":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"1:8970:2952":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:11867:1104":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"5:3127:3091":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:11199:16584":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"6:1707:10756":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:361:3056":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"6:4621:13146":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:3197:3249":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:4720:2607":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:11606:19060":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:847:3075":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:1021:16194":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:8510:2697":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:8141:2900":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:13168:19994":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"16:4606:15734":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"12:1029:3089":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:22168:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"16:2749:15104":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:51500:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:562:16138":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:8176:3261":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"16:3010:15113":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:47799:3225":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"5:1443:3081":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:9820:16303":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"16:6161:16025":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:11559:18957":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:12874:19522":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"9:622:14838":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"16:2657:15100":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"16:2465:15092":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:4622:3354":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"12:1003:3088":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"12:810:3079":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:11853:19139":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"16:6200:16027":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:2210:3179":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"1:5165:187":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"18:660:20155":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:47595:3224":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:7810:3181":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"6:4277:13110":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:38661:180":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"1:8231:3315":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"5:6351:2510":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"6:4654:13150":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:39870:26366":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"6:4201:13102":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:47729:9002":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:9293:16193":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:9869:3076":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"5:6979:2886":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:12307:19236":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:9751:16231":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"16:6842:33094":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:8324:3362":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:20678:3302":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"17:9857:16284":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:9422:16185":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:11854:632":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:2763:3476":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"1:6169:2609":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:8753:3405":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:12278:19229":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:10810:22201":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"6:4267:13109":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:12948:19590":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:3662:3273":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"16:7483:2837":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"16:5525:2793":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"5:6918:2350":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"6:4755:13161":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:50744:8681":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"5:6909:2883":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:9791:16257":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:20405:2920":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:12884:19584":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"16:2930:15111":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:10037:22317":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"1:641:3068":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:9692:3302":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:9020:8639":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:2680:8621":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:52813:3554":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:49331:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"6:4339:13118":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:11721:19129":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:51521:3480":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:22831:2917":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"6:1547:10741":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:8212:16141":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:13082:19961":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:4561:20413":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"16:7135:33169":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"16:5203:2696":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:50930:8715":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:50634:8679":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:51737:8613":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"16:5815:16018":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:12134:19158":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"5:3943:3076":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"16:4817:15777":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"16:6252:16030":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"5:2142:31920":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"5:6089:2553":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"16:7659:16068":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"9:586:14850":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"2:52512:3550":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"5:2065:31911":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:51025:8709":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:8129:3224":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:4399:2898":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:5494:8989":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"6:4364:13121":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"6:4296:13113":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:29974:8763":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"16:3632:15144":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:10894:16169":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:6818:2642":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","fast","Key"],"kind":"struct"},"16:2341:15087":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"0:20:1627":{"crate_id":0,"path":["fnv","FnvBuildHasher"],"kind":"typedef"},"6:6419:14203":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"6:4807:13165":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"12:320:2494":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"16:3263:15116":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"12:2198:32793":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:4397:3328":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:3932:2538":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"16:6137:2819":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:12926:19588":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"9:676:14826":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"16:2605:15098":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:247:33842":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"6:1720:10757":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:10608:16160":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"16:3402:15117":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:10532:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"6:4631:13147":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:2857:9047":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:11748:19131":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"11:36:32791":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"1:9083:3208":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:52791:3551":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:11054:2737":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"12:300:32802":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:11828:19137":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"5:36:2506":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"16:2300:2760":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:48720:3268":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:47096:8801":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"2:2794:3477":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:933:3082":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"6:4639:13148":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:21613:2911":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:53685:3517":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:50522:8673":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:20768:2908":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:54769:8602":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:2345:3186":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"16:7970:16076":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:2539:2603":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"5:2874:31938":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:50980:3228":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"14:215:15022":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"5:3623:3105":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:10666:2949":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"2:8564:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"16:7942:16075":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:47617:8988":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:5305:3398":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"17:12630:19419":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:58933:28122":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"2:7472:3096":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:9483:2585":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:11858:731":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"6:4537:13135":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:9691:16230":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:48785:2349":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:2908:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:52761:3547":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:3665:3272":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:3387:3201":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"16:5374:2789":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:52631:27734":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"6:1586:10745":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"12:632:3075":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:10949:16363":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:929:3081":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:8441:16149":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:39834:3410":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"1:5745:2611":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:8911:33841":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:9627:16216":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:13594:20131":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:9401:2582":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"16:7435:16062":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"9:649:14839":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"5:7098:3161":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:10062:16269":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:12337:2730":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:2213:2568":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"17:8339:16145":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"5:6971:195":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:9317:16189":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:8666:2717":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:10434:16353":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:48066:8983":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"16:2535:15095":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:22333:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"2:1919:8626":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:8958:26858":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:10849:3407":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:50453:28536":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:21721:27677":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"6:5635:13783":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"16:7388:16059":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:8239:3271":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:47566:8660":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:57202:3561":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"2:50592:8661":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"16:4574:15726":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"5:5615:2533":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:12850:19519":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:22135:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:53261:3559":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"6:573:9840":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:9284:1610":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:3122:20860":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"16:2509:15094":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"5:4219:242":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:8247:3325":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"1:7464:16138":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:13327:20008":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:6082:2620":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"17:8881:33866":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"16:2868:15109":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"6:5694:13786":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:5882:9010":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:10583:16159":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:49131:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:48583:3264":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:8526:2712":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:4024:8619":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"6:7253:13295":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:3166:134":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"16:7319:16058":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"16:7890:16072":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"16:7267:16053":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:49818:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"12:2080:3089":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"16:7237:16051":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"6:1601:10746":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"6:5453:13715":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:6474:2358":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:57598:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:7637:16067":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:21592:27699":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"2:51453:9199":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:47282:8793":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:1849:3143":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"16:2771:15105":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:9937:8687":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:11447:2957":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"12:659:2350":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:10321:16316":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:8767:3406":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:11847:308":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"6:5730:13790":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:1597:3094":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:49766:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"1:9176:3142":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:2208:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:50894:8714":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:2849:9045":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:12638:19421":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"6:1674:10752":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"6:4550:13137":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"4:0:2147":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"6:1531:10739":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:9885:16306":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:48629:2923":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"16:6829:33217":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:7532:2631":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:3051:3254":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"6:1701:10755":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"16:6567:16039":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:52428:3525":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"5:4297:2541":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:3389:8773":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"17:9155:16155":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"18:590:28582":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"6:4249:13107":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:11315:16760":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"5:6645:2553":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"5:2162:31914":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"6:4516:13133":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:51473:9204":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:2371:3196":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:2682:223":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:51477:9205":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"15:214:2843":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"6:4778:13163":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:10221:16346":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:9274:16177":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"13:108:32853":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"16:4786:15770":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:11465:21381":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:21629:2887":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"17:11436:18949":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:21130:3489":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"2:21299:29539":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:52613:3530":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:1927:3156":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"6:4290:13112":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"16:4413:15661":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:54635:8592":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:7479:8984":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:6533:2625":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"16:2825:15107":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"6:5615:13782":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:51338:8719":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:47827:9008":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:9071:33868":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"12:353:2496":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"6:1660:10751":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:51110:8721":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:10360:16317":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"2:6656:8976":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"1:5990:2613":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:22432:3280":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:21393:3302":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:10676:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"2:50830:8685":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:48017:28572":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"2:8732:29594":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:10123:3412":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"1:6463:3429":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"6:488:9829":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"18:614:33890":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"12:2178:32797":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"6:6548:14212":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"17:13436:20053":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:878:3077":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:50702:8704":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:47788:8991":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"16:5184:15056":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"5:5741:9429":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"16:6376:16035":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:1074:3089":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"5:1228:3089":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:11056:21028":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:2672:217":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"6:7008:14585":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"5:961:2510":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:7662:2937":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"1:3125:20868":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:20878:3490":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:12189:8841":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:2773:9033":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:6865:2612":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:53415:3555":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"6:4669:13152":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"5:1055:30863":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"6:4125:13096":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"16:3854:15294":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:11526:8694":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:5907:203":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"17:9223:16174":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"14:221:15028":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:53181:27736":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:9722:2724":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"14:40:16365":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"12:119:2492":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:21808:3278":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"12:725:3077":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"6:1744:10759":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:47023:2294":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:2843:9044":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"16:6903:16048":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"5:6949:31909":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:48810:2350":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"5:4103:3075":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"16:6241:16029":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:8137:16139":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:11356:16775":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:8392:3383":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"5:6003:3565":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"5:3132:31957":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:8432:3385":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:11128:2640":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"1:5539:203":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:9102:3474":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:9778:16232":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:13126:19968":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:2861:9048":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:2684:108":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"6:123:9510":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"16:534:2772":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"5:3872:2533":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:7699:26366":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"12:274:32804":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:50794:8717":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:9968:3135":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"5:2604:30720":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"5:1404:3077":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:49051:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:53080:27698":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"16:4262:15630":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"5:679:228":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:2749:8620":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"6:4700:984":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:7088:149":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"16:6359:16034":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:53158:27849":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"5:6941:2521":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"16:5839:16019":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"6:4112:13095":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:51481:2907":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:51461:9201":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:54792:8603":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:62:9455":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"5:5814:2538":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:10210:26702":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"1:10399:3246":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"16:2631:15099":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"5:1973:3105":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:11860:1464":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"5:1454:195":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"6:5578:13745":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:21287:2910":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"6:652:9890":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:51465:9202":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"16:2433:15091":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:11849:1368":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:52382:3545":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:14:1622":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:4728:29492":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:3451:3223":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"16:2793:15106":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:9165:33849":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:9382:16192":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:12964:19922":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:9805:16302":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:10708:2734":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"5:1422:3079":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:50030:2291":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:52668:27780":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:11909:19142":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:10207:16336":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"16:4357:15653":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:11161:16581":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:8475:16123":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:12514:19364":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"14:31:15019":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:12381:139":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"5:6503:2561":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"12:387:32807":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"18:681:20157":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:3151:9051":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:10182:16270":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"5:4264:2538":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:8912:2939":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:5676:3424":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:10233:16347":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:8781:3407":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:1571:2533":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:10822:16166":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"16:4144:15560":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"5:4722:201":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:11528:16311":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:9501:2721":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"5:7006:2350":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:10283:16321":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:12896:19586":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"16:2993:15112":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:53005:3519":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:51445:9196":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"16:3566:15126":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:11546:8693":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"9:956:14820":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"0:10:1615":{"crate_id":0,"path":["fnv","FnvHasher"],"kind":"struct"},"2:4289:2572":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"16:6668:2786":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:7084:133":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:12955:19602":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:386:16136":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:20880:2908":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:51687:3562":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:2343:3185":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"6:6332:14202":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"16:6528:16038":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"6:6510:14209":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:47073:8767":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"17:13039:19955":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:9031:33872":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"16:2842:15108":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:11248:2642":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"18:96:20144":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"5:273:2510":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:2459:8835":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:9401:16190":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:11014:16477":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:48048:2580":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:11232:22377":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"6:6402:10680":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:11843:410":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:9118:33864":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:11087:2743":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"6:1568:10743":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:53127:27779":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:734:141":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"14:160:15019":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:2458:3302":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:13536:20089":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:2507:235":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"17:12550:19365":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"6:554:9837":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"5:4064:2538":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"5:1329:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:8269:3356":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:47380:3062":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:53651:3535":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"6:547:9836":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:11485:18950":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:12739:19428":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:2768:3478":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:48672:3275":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:2723:9012":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:54617:3521":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:8291:3304":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:47363:8818":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"16:6017:16021":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"6:1692:10754":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:10696:3200":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"12:1872:3094":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"6:587:9842":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"6:4544:13136":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:54433:3553":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"16:5996:2800":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:2592:127":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"6:506:9832":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:10670:2733":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:9515:2591":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"17:13413:20052":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:10997:16365":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:10926:2638":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"6:5723:13789":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:12836:19517":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:54655:8594":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:8774:2720":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:11214:21548":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:13374:20046":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:4743:3300":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:11814:3071":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"6:4189:13100":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:54754:8601":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:1606:10747":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"5:7252:2556":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:4081:2893":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:4754:781":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:52983:3516":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:242:33867":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:4547:3290":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:50504:8670":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:51034:3062":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:355:3055":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:9339:16187":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:12073:19154":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"12:1859:3092":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:9279:2287":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:8965:2942":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"16:5235:33154":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:10806:3137":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"1:3159:3247":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"14:165:15020":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:11294:9208":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:29940:2919":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"6:6287:10676":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:3977:28539":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:10831:21378":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"17:9250:16175":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"18:644:33891":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"5:881:3075":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"16:3689:15177":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:9433:16184":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:6313:26859":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"16:7044:33185":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:54831:8604":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:11089:8702":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"16:5510:2790":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:50776:8718":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:47409:8820":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:48010:8978":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:12909:19587":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"16:2727:15103":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:920:3079":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:9108:16154":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"16:3188:15115":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:50948:8716":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:9059:216":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:47333:8826":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:2991:3117":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"6:4234:13105":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"6:1517:10737":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:11217:16585":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"16:8014:16078":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:48929:3076":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:13192:19997":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:50726:3227":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"17:11368:16776":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:11813:19136":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:3956:3291":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:2306:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:8140:3371":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"9:111:2853":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"1:5007:26878":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:11330:3273":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:2691:2892":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"1:3369:3202":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:3236:3245":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:10270:16322":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"5:3086:3075":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:9043:164":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:9631:16203":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:10374:16319":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:12324:2596":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:2832:9041":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"5:6513:2563":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"5:3488:3075":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:47489:9129":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:13557:20090":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"9:0:2149":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:10087:8682":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:11034:16478":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:2810:9038":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"14:7:15019":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:54675:8596":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:6114:2943":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"16:4441:15665":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:11774:19133":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:9873:16305":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:0:1360":{"crate_id":1,"path":["std"],"kind":"module"},"16:2683:15101":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:12251:19227":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"12:1866:3093":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"12:2190:32796":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:57611:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:13366:20045":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:12609:19366":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"17:9644:16202":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"16:6654:16042":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"5:3680:2498":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"17:3125:16271":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"16:4217:15609":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"5:836:2515":{"crate_id":5,"path":["alloc","collections","binary_heap","retain","RebuildOnDrop"],"kind":"struct"},"17:9183:16156":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:9244:144":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"16:7825:16069":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"16:6298:16031":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"18:80:20143":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:51457:9200":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"6:4437:13127":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:11235:16636":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"16:6284:2822":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:12860:19520":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"12:60:32798":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:20433:29535":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"17:13114:19965":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"5:4034:2538":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"6:4284:13111":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"16:4689:15745":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:8991:33863":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:6519:3432":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"5:3119:3093":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:12046:19152":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"6:4826:13168":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:12087:19155":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:8941:16151":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"5:1612:2510":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:49171:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"16:6330:16033":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"18:690:20158":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:51652:192":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:10546:16158":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:2337:179":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"5:632:31894":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:13176:19995":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:10932:2639":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"6:494:9830":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:1051:3087":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"12:2069:3088":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:5053:188":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"16:6210:16028":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"6:6489:14208":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:51644:208":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:48649:27695":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"5:1257:3090":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:0:2156":{"crate_id":17,"path":["object"],"kind":"module"},"1:2867:207":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"1:10341:2634":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"17:1962:16228":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"16:7426:16061":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:51147:8725":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:11500:18951":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:11151:3413":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:13527:20088":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:8875:3438":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:12103:19156":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:9475:16208":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"6:4561:13138":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:4736:13159":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:47423:8822":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:2578:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"17:9283:16195":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:6362:10703":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:11868:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:47442:8823":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"6:474:9827":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:47461:3162":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:3312:3253":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:49751:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"2:57572:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:48058:8981":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:10075:16267":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:50712:2719":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:9026:8637":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:30180:27845":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:2343:186":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"6:562:9838":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:52336:27876":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:6917:2627":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:47778:9006":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"6:7176:14744":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"5:5143:8655":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:5553:2610":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:9061:2701":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:1751:28136":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"5:3245:2498":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"16:2579:15097":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"16:153:2489":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"16:7298:16056":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:10819:3404":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:2252:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:50605:8677":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:2995:3118":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:10298:3403":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"6:4345:13119":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:4814:13166":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:47687:9000":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:4311:3316":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:47536:2574":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:48033:8980":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:8152:3227":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:47646:8996":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:54495:3518":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:48946:180":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"16:5949:16020":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:2827:9040":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:2504:132":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:52861:3539":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:54293:3549":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:2232:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:10128:8685":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:50513:8669":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:47707:9001":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:22366:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"12:1085:15009":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:10466:16354":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:50270:9187":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:3864:3285":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:49011:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:10528:16157":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:20639:3493":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"17:12291:19235":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"16:6472:15034":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:8047:3199":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"17:9764:16256":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:8898:3425":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"6:6303:9710":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:7266:22074":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:50085:2927":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:2495:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"16:6593:16040":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"9:800:14946":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"16:2261:15058":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:2549:2586":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"6:6434:14205":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:11288:16756":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:4239:3322":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"16:5163:16003":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:54371:3533":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:5564:13744":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:22267:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"5:5391:2549":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:10520:16358":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:48852:3370":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:52591:3526":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:11521:8698":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:1986:182":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:9007:111":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:51132:8722":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"6:4222:13104":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"16:6070:2814":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"6:119:9509":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"1:9064:3441":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"17:11639:19062":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:2784:9035":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:7788:3178":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"6:4675:13153":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:8830:3435":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:9016:8629":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"6:7230:13292":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"16:7543:2839":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:11974:19147":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:12198:19223":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"16:2389:15089":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:21742:27861":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:46796:8789":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"12:1534:15012":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:5319:3399":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"12:1681:143":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"16:5703:16015":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"9:505:2875":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:5661:29657":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"2:51000:8701":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:47716:8990":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"9:977:14822":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:9110:21392":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","fast","DtorState"],"kind":"enum"},"2:47586:3115":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"5:6933:2533":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:2476:3237":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:4557:20409":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:10999:3406":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"12:738:3078":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"12:2205:2300":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:50067:3383":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:10642:16162":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"6:5792:13795":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:47608:8987":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:11184:21374":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"12:777:2502":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"1:11391:3274":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:10686:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"1:3157:3246":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:12176:19174":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:30016:27850":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"5:7053:2300":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:11850:1446":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:46957:199":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"16:6270:2821":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:4664:3305":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:4150:2896":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"16:6186:2820":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"12:1518:15011":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:3765:3274":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:904:2533":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"16:7872:16071":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:10721:2736":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"7:32:14789":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"16:5433:16006":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:12349:19300":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"6:4317:13116":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:956:3085":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:6354:3426":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:4218:204":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"6:6985:14583":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:11846:1029":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"17:8272:16143":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:47343:8827":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:46835:8625":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:3601:3269":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:7513:2629":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:8055:16124":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"6:4747:13160":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:54701:8598":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"16:7249:16052":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:7025:23764":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:49507:8638":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"18:491:33887":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:47655:8997":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:10156:8686":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:49211:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:3161:231":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:11535:8696":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"18:636:33896":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:21395:3487":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:9844:16263":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:11536:16309":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:3377:8769":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"1:1824:3135":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"17:11106:2750":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:51253:8731":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"12:697:3081":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"12:1832:3075":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:1786:3124":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"16:0:2155":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:51725:8615":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:57624:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:5878:15057":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"12:815:3082":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:8295:16144":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"16:2557:15096":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"6:5851:13008":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:10121:16265":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:2154:579":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:52530:27684":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:21539:28118":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"6:4525:13134":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:11199:20474":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"12:834:3084":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:6875:27390":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:1737:9079":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:13091:19962":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:46897:197":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:2582:115":{"crate_id":2,"path":["core","default","Default"],"kind":"proc_derive"},"6:4356:13120":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"16:7372:33139":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"6:6339:3356":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:8814:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"6:7289:14772":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:12265:19228":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"16:2894:15110":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"6:6519:14210":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:11345:8687":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}