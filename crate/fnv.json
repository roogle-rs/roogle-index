{"root":"0:0:2093","crate_version":"1.0.7","includes_private":false,"index":{"2:12110:25194":{"id":"2:12110:25194","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:8850"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:8846","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12165:31743":{"id":"2:12165:31743","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12077:31728":{"id":"2:12077:31728","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:15":{"id":"0:15","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[99,0],"end":[106,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1662","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:16:1666"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5446:24136":{"id":"5:5446:24136","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12197:24139"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7283:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2698:228-0:10:1662":{"id":"a:2:2698:228-0:10:1662","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2698:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1662","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2543:697":{"id":"2:2543:697","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2547-0:10:1662":{"id":"b:2:2547-0:10:1662","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2517:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1662","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2550:128","2:2551:1487"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2249:2302":{"id":"2:2249:2302","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12093:25153":{"id":"2:12093:25153","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9877:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9877:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12087:25150":{"id":"2:12087:25150","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41589:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9877:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9877:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12096:31733":{"id":"2:12096:31733","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11984:1406","crate::ops::IndexMut":"2:2982:3224","str::slice_unchecked":"2:12095:31732"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12091:25152":{"id":"2:12091:25152","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9877:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9877:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12083:21922":{"id":"2:12083:21922","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11343:8854"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12198:24140":{"id":"2:12198:24140","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12086:25154":{"id":"2:12086:25154","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11995:1509"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12202:31754":{"id":"2:12202:31754","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4534:31754"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43873:8862","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12076:2396":{"id":"2:12076:2396","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12078:31729":{"id":"2:12078:31729","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12101:1670":{"id":"2:12101:1670","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43542:2820","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12107:25193":{"id":"2:12107:25193","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:8850"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:8846","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12124:20914":{"id":"2:12124:20914","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11776:8850","`DoubleEndedIterator`":"2:7304:121","prim@char":"1:11978:418","str::split_whitespace":"2:12102:28795","str::rsplit":"2:12130:25187"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43556:3333","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:8846","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12169:31745":{"id":"2:12169:31745","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2550:128":{"id":"2:2550:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"5:5444:32409":{"id":"5:5444:32409","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2362","`String`":"5:7283:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2362","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7016:2979","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7283:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12113:25195":{"id":"2:12113:25195","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:8850"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:8846","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:8846","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:8847","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12195:24963":{"id":"2:12195:24963","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39626:25099","Self::is_ascii":"2:12194:24134"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39626:25099","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12142:25191":{"id":"2:12142:25191","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11978:418","str::splitn":"2:12139:25189","self::pattern":"2:11776:8850"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43678:8837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:8846","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:8846","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:8847","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12075:816":{"id":"2:12075:816","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11978:418"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12089:25151":{"id":"2:12089:25151","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41589:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9877:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9877:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:16:1666":{"id":"0:16:1666","crate_id":0,"name":"with_key","span":{"filename":"lib.rs","begin":[103,4],"end":[105,5]},"visibility":"public","docs":"Create an FNV hasher starting with a state corresponding\nto the hash `key`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["key",{"primitive":"u64"}]],"output":{"resolved_path":{"name":"FnvHasher","id":"0:10:1662","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12174:31748":{"id":"2:12174:31748","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:8850"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:8846","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12170:31746":{"id":"2:12170:31746","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2556:1486":{"id":"2:2556:1486","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:41731:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:13":{"id":"0:13","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[91,0],"end":[97,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2588:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1662","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:14:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:8313:3474-0:10:1662":{"id":"a:2:8313:3474-0:10:1662","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8313:3474","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1662","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12127:25185":{"id":"2:12127:25185","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:8850"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11599:8841","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:8846","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12194:24134":{"id":"2:12194:24134","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2681:220-0:10:1662":{"id":"a:2:2681:220-0:10:1662","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2681:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1662","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12080:31730":{"id":"2:12080:31730","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12078:31729"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12085:314":{"id":"2:12085:314","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12086:25154","`u8`":"1:11995:1509"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12098:25177":{"id":"2:12098:25177","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12097:25176"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3319:1500":{"id":"2:3319:1500","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39418:8923","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8314:3473-0:10:1662":{"id":"a:2:8314:3473-0:10:1662","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8314:3473","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1662","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:19:1669":{"id":"0:19:1669","crate_id":0,"name":"write","span":{"filename":"lib.rs","begin":[115,4],"end":[124,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["bytes",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12186:31750":{"id":"2:12186:31750","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:8850"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:8846","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12104:20915":{"id":"2:12104:20915","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43810:3331","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12136:31736":{"id":"2:12136:31736","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11776:8850","str::split":"2:12124:20914","prim@char":"1:11978:418","str::split_terminator":"2:12133:31735"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43624:8869","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:8846","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:8846","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:8847","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5428:32405":{"id":"5:5428:32405","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2362","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7016:2979","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2362","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7016:2979","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12151:2316":{"id":"2:12151:2316","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11776:8850","`DoubleEndedIterator`":"2:7304:121","prim@char":"1:11978:418","str::matches":"2:12151:2316"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43760:8867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:8846","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12099:28743":{"id":"2:12099:28743","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11978:418"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43526:8857","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3317-0:10:1662":{"id":"b:2:3317-0:10:1662","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2688:2354","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3315:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1662","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3319:1500"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12103:28780":{"id":"2:12103:28780","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12102:28795"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43839:8852","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:21:1676":{"id":"0:21:1676","crate_id":0,"name":"FnvHashMap","span":{"filename":"lib.rs","begin":[132,0],"end":[132,58]},"visibility":"public","docs":"A `HashMap` using a default FNV hasher.","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"typedef":{"type":{"resolved_path":{"name":"HashMap","id":"1:728:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"resolved_path":{"name":"FnvBuildHasher","id":"0:20:1674","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"2:12116:2436":{"id":"2:12116:2436","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41589:179","prim@char":"1:11978:418","self::pattern":"2:11776:8850"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:8846","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12196:24138":{"id":"2:12196:24138","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:10:1662":{"id":"0:10:1662","crate_id":0,"name":"FnvHasher","span":{"filename":"lib.rs","begin":[89,0],"end":[89,26]},"visibility":"public","docs":"An implementation of the Fowler–Noll–Vo hash function.\n\nSee the [crate documentation](index.html) for more details.","links":{},"attrs":["#[allow(missing_copy_implementations)]"],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:15","a:2:8314:3473-0:10:1662","a:2:2698:228-0:10:1662","a:2:8313:3474-0:10:1662","a:2:2738:2355-0:10:1662","a:2:2681:220-0:10:1662","b:2:2541-0:10:1662","b:2:2250-0:10:1662","b:2:2537-0:10:1662","b:2:3317-0:10:1662","b:2:2247-0:10:1662","b:2:2552-0:10:1662","b:2:2547-0:10:1662","0:17","0:13"]}}},"0:14:60":{"id":"0:14:60","crate_id":0,"name":"default","span":{"filename":"lib.rs","begin":[94,4],"end":[96,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"FnvHasher","id":"0:10:1662","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12145:31737":{"id":"2:12145:31737","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:8846","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5429:9164":{"id":"5:5429:9164","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7283:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7283:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:8846","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2247-0:10:1662":{"id":"b:2:2247-0:10:1662","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2688:2354","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2241:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1662","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2249:2302"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5443:32408":{"id":"5:5443:32408","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7283:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7283:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2551:1487":{"id":"2:2551:1487","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:41731:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12105:31734":{"id":"2:12105:31734","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43820:8864","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12139:25189":{"id":"2:12139:25189","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:8850","str::rsplitn":"2:12142:25191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43660:8839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:8846","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:20:1674":{"id":"0:20:1674","crate_id":0,"name":"FnvBuildHasher","span":{"filename":"lib.rs","begin":[128,0],"end":[128,56]},"visibility":"public","docs":"A builder for default FNV hashers.","links":{},"attrs":[],"deprecation":null,"inner":{"typedef":{"type":{"resolved_path":{"name":"BuildHasherDefault","id":"2:9474:1657","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"FnvHasher","id":"0:10:1662","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"2:2252:20904":{"id":"2:2252:20904","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2552-0:10:1662":{"id":"b:2:2552-0:10:1662","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1662","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2555:128","2:2556:1486"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5435:32407":{"id":"5:5435:32407","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7283:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7283:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12120:2395":{"id":"2:12120:2395","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41589:179","prim@char":"1:11978:418","self::pattern":"2:11776:8850"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:8846","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:8846","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:8847","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5447:24137":{"id":"5:5447:24137","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12198:24140"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7283:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12157:31740":{"id":"2:12157:31740","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11776:8850","`DoubleEndedIterator`":"2:7304:121","prim@char":"1:11978:418","str::rmatch_indices":"2:12160:31741"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43706:8865","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:8846","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12171:31747":{"id":"2:12171:31747","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:8850"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:8846","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:8846","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11801:8845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2541-0:10:1662":{"id":"b:2:2541-0:10:1662","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1662","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2543:697"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12133:31735":{"id":"2:12133:31735","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11776:8850","str::split":"2:12124:20914","prim@char":"1:11978:418","`DoubleEndedIterator`":"2:7304:121","str::rsplit_terminator":"2:12136:31736"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43606:8870","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:8846","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2093":{"id":"0:0:2093","crate_id":0,"name":"fnv","span":{"filename":"lib.rs","begin":[1,0],"end":[367,1]},"visibility":"public","docs":"An implementation of the [Fowler–Noll–Vo hash function][chongo].\n\n## About\n\nThe FNV hash function is a custom `Hasher` implementation that is more\nefficient for smaller hash keys.\n\n[The Rust FAQ states that][faq] while the default `Hasher` implementation,\nSipHash, is good in many cases, it is notably slower than other algorithms\nwith short keys, such as when you have a map of integers to other values.\nIn cases like these, [FNV is demonstrably faster][graphs].\n\nIts disadvantages are that it performs badly on larger inputs, and\nprovides no protection against collision attacks, where a malicious user\ncan craft specific keys designed to slow a hasher down. Thus, it is\nimportant to profile your program to ensure that you are using small hash\nkeys, and be certain that your program could not be exposed to malicious\ninputs (including being a networked server).\n\nThe Rust compiler itself uses FNV, as it is not worried about\ndenial-of-service attacks, and can assume that its inputs are going to be\nsmall—a perfect use case for FNV.\n\n\n## Using FNV in a `HashMap`\n\nThe `FnvHashMap` type alias is the easiest way to use the standard library’s\n`HashMap` with FNV.\n\n```rust\nuse fnv::FnvHashMap;\n\nlet mut map = FnvHashMap::default();\nmap.insert(1, \"one\");\nmap.insert(2, \"two\");\n\nmap = FnvHashMap::with_capacity_and_hasher(10, Default::default());\nmap.insert(1, \"one\");\nmap.insert(2, \"two\");\n```\n\nNote, the standard library’s `HashMap::new` and `HashMap::with_capacity`\nare only implemented for the `RandomState` hasher, so using `Default` to\nget the hasher is the next best option.\n\n## Using FNV in a `HashSet`\n\nSimilarly, `FnvHashSet` is a type alias for the standard library’s `HashSet`\nwith FNV.\n\n```rust\nuse fnv::FnvHashSet;\n\nlet mut set = FnvHashSet::default();\nset.insert(1);\nset.insert(2);\n\nset = FnvHashSet::with_capacity_and_hasher(10, Default::default());\nset.insert(1);\nset.insert(2);\n```\n\n[chongo]: http://www.isthe.com/chongo/tech/comp/fnv/index.html\n[faq]: https://www.rust-lang.org/en-US/faq.html#why-are-rusts-hashmaps-slow\n[graphs]: https://cglab.ca/~abeinges/blah/hash-rs/","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:10:1662","0:20:1674","0:21:1676","0:24:1680"],"is_stripped":false}}},"2:12154:31739":{"id":"2:12154:31739","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11776:8850","`DoubleEndedIterator`":"2:7304:121","prim@char":"1:11978:418","str::matches":"2:12151:2316"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43778:8868","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:8846","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:8846","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:8847","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12102:28795":{"id":"2:12102:28795","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12103:28780"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43830:8853","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2738:2355-0:10:1662":{"id":"a:2:2738:2355-0:10:1662","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2738:2355","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1662","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12097:25176":{"id":"2:12097:25176","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12098:25177"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12167:31744":{"id":"2:12167:31744","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:17":{"id":"0:17","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[108,0],"end":[125,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["write_length_prefix","write_i64","write_i8","write_u64","write_u8","write_i128","write_i16","write_u128","write_u16","write_isize","write_i32","write_usize","write_u32","write_str"],"trait":{"name":"Hasher","id":"2:9434:145","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1662","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:18:1668","0:19:1669"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12180:25196":{"id":"2:12180:25196","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:8850"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:8846","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:8846","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:8847","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12192:31752":{"id":"2:12192:31752","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11737:127","`FromStr`":"2:11736:3492"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41731:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:11736:3492","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11736:3492","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12197:24139":{"id":"2:12197:24139","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12199:31753":{"id":"2:12199:31753","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4536:31753"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43855:8861","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12130:25187":{"id":"2:12130:25187","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11776:8850","`DoubleEndedIterator`":"2:7304:121","prim@char":"1:11978:418","str::split":"2:12124:20914"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43574:8835","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:8846","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:8846","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:8847","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5432:32406":{"id":"5:5432:32406","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7283:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7283:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:8846","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12084:31731":{"id":"2:12084:31731","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:2540:2389":{"id":"2:2540:2389","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2514:133"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:18:1668":{"id":"0:18:1668","crate_id":0,"name":"finish","span":{"filename":"lib.rs","begin":[110,4],"end":[112,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12100:28773":{"id":"2:12100:28773","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11978:418"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43532:8856","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12160:31741":{"id":"2:12160:31741","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11776:8850","`DoubleEndedIterator`":"2:7304:121","prim@char":"1:11978:418","str::match_indices":"2:12157:31740"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43724:8866","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:8846","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:8846","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:8847","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2555:128":{"id":"2:2555:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32097:3509","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:12106:28744":{"id":"2:12106:28744","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43848:8851","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12163:31742":{"id":"2:12163:31742","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12177:21358":{"id":"2:12177:21358","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:8850"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:8846","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12183:31749":{"id":"2:12183:31749","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:8850"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:8846","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:8846","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:8847","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12201:3171":{"id":"2:12201:3171","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4537:3171"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43864:3172","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12074":{"id":"2:12074","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12075:816","2:12076:2396","2:12077:31728","2:12078:31729","2:12080:31730","2:12083:21922","2:12084:31731","2:12085:314","2:12086:25154","2:12087:25150","2:12089:25151","2:12091:25152","2:12093:25153","2:12095:31732","2:12096:31733","2:12097:25176","2:12098:25177","2:12099:28743","2:12100:28773","2:12101:1670","2:12102:28795","2:12103:28780","2:12104:20915","2:12105:31734","2:12106:28744","2:12107:25193","2:12110:25194","2:12113:25195","2:12116:2436","2:12120:2395","2:12124:20914","2:12127:25185","2:12130:25187","2:12133:31735","2:12136:31736","2:12139:25189","2:12142:25191","2:12145:31737","2:12148:31738","2:12151:2316","2:12154:31739","2:12157:31740","2:12160:31741","2:12163:31742","2:12165:31743","2:12167:31744","2:12169:31745","2:12170:31746","2:12171:31747","2:12174:31748","2:12177:21358","2:12180:25196","2:12183:31749","2:12186:31750","2:12189:31751","2:12192:31752","2:12194:24134","2:12195:24963","2:12196:24138","2:12197:24139","2:12198:24140","2:12199:31753","2:12201:3171","2:12202:31754"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12148:31738":{"id":"2:12148:31738","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:8846","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:8846","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:8847","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12189:31751":{"id":"2:12189:31751","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:8850"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:8846","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:8846","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:8847","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2250-0:10:1662":{"id":"b:2:2250-0:10:1662","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2688:2354","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2244:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1662","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2252:20904"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5445:3355":{"id":"5:5445:3355","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7283:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7283:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5427":{"id":"5:5427","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5428:32405","5:5429:9164","5:5432:32406","5:5435:32407","5:5443:32408","5:5444:32409","5:5445:3355","5:5446:24136","5:5447:24137"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2537-0:10:1662":{"id":"b:2:2537-0:10:1662","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1662","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2540:2389"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12095:31732":{"id":"2:12095:31732","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11984:1406","str::slice_mut_unchecked":"2:12096:31733","crate::ops::Index":"2:2978:3223"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:24:1680":{"id":"0:24:1680","crate_id":0,"name":"FnvHashSet","span":{"filename":"lib.rs","begin":[136,0],"end":[136,52]},"visibility":"public","docs":"A `HashSet` using a default FNV hasher.","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"typedef":{"type":{"resolved_path":{"name":"HashSet","id":"1:1430:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"FnvBuildHasher","id":"0:20:1674","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}}},"paths":{"6:1638:10846":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:14350:20616":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"11:1852:3197":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:45760:3654":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"6:4748:13428":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"6:1495:10831":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:11333:23649":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"6:4420:13395":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:14015:20595":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:10832:16556":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:11327:23653":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:2210:3282":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:2693:109":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"16:7331:34177":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"6:7517:13626":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:44295:9324":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"5:7308:8893":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:13574:20547":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:10314:21916":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"2:21104:3583":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"19:0:1036":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:8489:3488":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"5:5841:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"16:2399:15354":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:2919:2356":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"16:4900:16021":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:8974:107":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"17:12089:19305":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"16:7289:16318":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:42586:28764":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"11:2174:30495":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"0:10:1662":{"crate_id":0,"path":["fnv","FnvHasher"],"kind":"struct"},"1:11142:3314":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:11960:21841":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"16:6658:16305":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:40863:9123":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"6:4304:13385":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:3186:16558":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:3220:3350":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:13971:20590":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:6649:2409":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:11565:15310":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:47885:8748":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"11:97:33745":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:2632:3343":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"5:7045:2633":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"16:5382:2796":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:13673:20563":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:10812:16560":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"5:2141:31350":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:9965:21720":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"1:5386:3498":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"17:13109:19844":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:10445:2735":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:21025:3586":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"2:44307:9320":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:46411:28555":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:20803:3587":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"6:1911:11018":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"6:4469:13401":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:4008:29072":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:46491:3638":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"6:1520:10835":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:40143:8966":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:40421:9140":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:10390:16515":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"5:7065:31345":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:3407:2639":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"11:749:2633":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:635:3177":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:47946:8753":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:44168:8871":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:5422:3500":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"14:202:8891":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:0:2211":{"crate_id":17,"path":["object"],"kind":"module"},"9:357:15167":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:8558:3491":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:21102:3310":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"5:3596:2983":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"13:0:2201":{"crate_id":13,"path":["std_detect"],"kind":"module"},"17:13435:20552":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:582:3170":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"5:7246:3264":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"6:4368:13389":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:3501:27906":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:46235:3676":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:10544:16595":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:11981:1054":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:1068:3193":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:47905:8750":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:4694:3428":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:7994:21156":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"5:0:286":{"crate_id":5,"path":["alloc"],"kind":"module"},"5:3570:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:7860:3062":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"17:1184:16466":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:3729:3377":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"11:447:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:9952:16454":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"6:4949:13452":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:9022:3065":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:8296:3375":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"16:6175:2902":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:3510:3308":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:44472:205":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:14282:20611":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"5:7363:2653":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"6:482:9936":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"6:5080:13466":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"16:8138:16344":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:45821:3608":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:13566:20559":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"5:276:2362":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"5:4196:2639":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"11:2201:2351":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"14:187:15286":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:40463:9142":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:11847:8874":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"16:8166:16345":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"16:7505:16326":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:8315:3014":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:9215:8783":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:39446:8947":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"17:9887:16465":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:12618:19812":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:2824:9185":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"16:5940:16285":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:11983:1376":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:5745:3523":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:13719:20567":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"16:4698:15987":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:7225:9131":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:1558:2982":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:4488:3429":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"5:7379:2657":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:9806:16444":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"2:47894:8749":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"6:5767:14102":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:13795:20574":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"5:7230:28600":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:22451:177":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:12421:192":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"18:113:20636":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"18:538:2785":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:43526:8857":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"17:12878:19828":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"16:4441:15898":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:47601:3617":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:41525:3379":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"5:3178:3196":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"16:6160:33988":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:10253:16486":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:956:3190":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:42184:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:8792:3505":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"16:7445:16321":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:2738:2355":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:3139:9193":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"14:221:15288":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:40886:9125":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:12017:19300":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:39453:8932":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"11:332:2602":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"16:2541:15360":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"11:1663:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:44351:3577":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:4333:8947":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"6:6565:9986":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:41655:2983":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"17:10199:16494":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"16:8152:2946":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"6:6015:14121":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"6:4380:13391":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:10117:8841":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:40029:3172":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"5:1473:2985":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"6:6841:14545":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"5:261:2613":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:8798:186":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:21987:28658":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:44283:9323":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:11034:16642":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:12502:19804":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:3154:135":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"6:7558:13632":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:6673:21265":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"2:2505:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"16:4032:15561":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:12792:19822":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:4762:388":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:11548:9329":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:39269:198":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:10910:3249":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:2353:189":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:9777:16443":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:8109:3304":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"1:10770:3062":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"17:11272:16425":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:43372:8826":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:3977:3391":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:2840:9188":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"6:4833:13439":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:21952:3381":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:3985:3392":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"5:4236:2982":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:358:3168":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:45590:3636":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"18:515:20657":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:13803:20575":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"6:6625:3458":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:6809:3578":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:10923:3502":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"1:8186:3005":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"1:2378:3292":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:42651:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:41782:2983":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:42104:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"16:5363:16272":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"11:1838:3195":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:40360:9136":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"16:7707:16332":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:11109:16644":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:261:34831":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"16:7622:16330":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:44490:195":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:13854:20578":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"5:4395:2639":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:44120:8887":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:8949:16417":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"18:531:20658":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:41538:3370":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:2692:225":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"17:9032:2797":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:2517:238":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"1:11991:745":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:22418:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"5:2035:3063":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"5:7297:8892":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:22025:28650":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:45861:3620":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:44279:9321":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:43873:8862":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:39418:8923":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"11:1068:15269":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:2514:133":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"1:2376:3291":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"6:6688:10959":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"16:7693:2943":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:12161:19310":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"16:6815:16310":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"5:3671:2613":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:12966:19834":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:1928:656":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"6:5025:13460":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:2556:2706":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:8420:8846":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"16:2857:15373":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:40035:8939":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:43820:8864":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"5:3583:2982":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:9048:2813":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"5:4848:204":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"5:1776:2653":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"17:10161:16488":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"18:624:34846":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:7870:3301":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:4228:3423":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"16:2689:15366":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"7:0:1553":{"crate_id":7,"path":["unwind"],"kind":"module"},"11:760:2653":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:44056:8885":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:44575:8767":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"5:6319:2613":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:8322:3456":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"16:4785:16002":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"16:6789:16309":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:9706:16423":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:21671:3310":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:46021:3649":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:12605:19811":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"18:481:20655":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:8838:3508":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:21058:3581":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"6:4800:13435":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"6:6711:14536":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:11781:8846":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"6:7575:13634":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"16:6386:16296":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:5816:2714":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"5:1374:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"6:4650:13419":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:5406:3499":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"16:7665:2940":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"16:7012:33812":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"18:564:2787":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"18:671:20650":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:7732:3049":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"6:1696:10852":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"16:2737:15368":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"11:1012:3193":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:7463:15077":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"16:7855:16337":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"5:1442:2401":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"16:5567:16273":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:20853:9205":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"1:3377:3357":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"6:6671:10961":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"16:5301:16254":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:2160:9205":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"17:10066:16479":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:10417:16516":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:41672:3471":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"17:12936:19832":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:8228:3374":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"6:4483:13403":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:8165:3309":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"6:579:9949":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:8932:3538":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"16:6986:16315":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:11285:21154":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"16:7739:2944":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"16:2352:15352":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"6:1702:3414":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:30309:3033":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:12539:19806":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:2469:8981":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"18:660:20649":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:10430:16543":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:10025:2982":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:21896:3025":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"6:6775:14540":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"16:6214:16291":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:2844:9189":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:10957:16640":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:43864:3172":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:40044:8970":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:12614:140":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:1780:3229":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"16:5843:16283":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:12566:107":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"5:895:2982":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:20986:9205":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"2:4261:8942":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:43606:8870":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:13456:20554":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:11235:2741":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"2:2600:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:46645:3656":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:2511:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"1:6604:2725":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"17:12365:16602":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:9409:34814":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"16:7763:16334":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"6:4463:13400":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"11:968:3191":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:1574:3195":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:9044:21382":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"11:736:2985":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"2:4184:3002":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"16:7568:33861":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:9434:145":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"1:7848:3303":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:21124:3022":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"5:2223:31532":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"18:96:20635":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"16:55:15321":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"5:1257:3191":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:2819:9183":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:7853:3300":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:46310:28646":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"5:7283:224":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:10914:21401":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:3160:8937":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:4809:799":{"crate_id":2,"path":["core","iter"],"kind":"module"},"1:6534:3528":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:9875:16471":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:11398:2743":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:42024:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"6:6171:14155":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:12077:19304":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:11264:16652":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:4603:8958":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:13513:20556":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:8632:16407":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:9211:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:8449:3486":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:42898:3040":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:45791:3602":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"16:2715:15367":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"16:6018:16288":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:477:2701":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"6:6705:14535":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:8659:16408":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"6:4862:13443":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:8004:3344":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:21790:28437":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:3511:2633":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"6:7250:9896":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:45658:3607":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:43542:2820":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"6:4723:13425":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:11976:371":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"5:4350:245":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:23162:3031":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:10969:16641":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:9090:167":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:21227:3310":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"18:507:34837":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:10633:2827":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:40870:28777":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:12002:1134":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"6:4291:13384":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:8868:3536":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:11276:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:3179:29098":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:11160:21614":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"5:1302:3194":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:10790:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"1:6384:21265":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"17:13683:20564":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:7382:159":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"6:4543:13410":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:40237:3268":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"2:2241:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:2347:182":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:3315:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"1:11123:3021":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"1:8137:3013":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:8399:3485":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"6:1733:10855":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:11115:23875":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:4156:3420":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:7883:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"6:4475:13402":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:43706:8865":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:5119:191":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:42064:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"5:4076:2983":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:30379:28613":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"2:48061:8758":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:4315:13386":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:8739:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:4387:8948":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:1629:587":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"16:5553:2890":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:1059:3192":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:1921:3261":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"1:10226:3511":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:20665:29096":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:45991:3643":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:40412:3011":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:14044:20598":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:2789:9179":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:7843:3302":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"16:8125:16343":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:12840:19825":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"6:5863:14069":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"5:7055:2624":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:3645:2401":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:13043:19839":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:43514:8860":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:32097:3509":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:40351:3008":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:12851:19826":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"16:7515:16327":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:22091:3382":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:12148:19309":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"16:8176:16346":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:40666:9146":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"5:4428:2642":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:11988:643":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"17:12354:16601":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:42888:3486":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"16:6303:2920":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:4148:3419":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"6:6028:14123":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:5469:2639":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"2:22583:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:2853:9191":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:11098:16611":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:47969:8754":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:20620:28799":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"16:2874:15374":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:2785:3576":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:41502:28563":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:9188:2818":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"11:0:2206":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:673:3179":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"17:11241:16651":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:8381:3467":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:3166:8936":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"5:4166:2639":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"17:13981:20591":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:2923:2357":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:4:1019":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:9604:2801":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:13830:20576":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:640:3178":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:11949:3182":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:41799:183":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"16:7433:16320":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"14:165:15279":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:3299:3348":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:11178:16647":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:10403:16542":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"16:2900:15375":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"16:4536:15921":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:9100:219":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:11179:3540":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"17:582:16406":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:40329:3005":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"16:5590:16274":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:40430:9148":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:9083:2815":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:4628:22147":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"16:8210:16347":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:927:3186":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"6:4854:13442":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:8153:3305":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:10550:2736":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"5:5280:8808":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"16:7833:16336":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:13332:20549":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"5:5065:2648":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"16:2443:15356":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"10:36:33726":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:5372:3497":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"6:5987:14118":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:3834:3378":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:2468:3310":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:3963:3390":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:11999:1505":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:43778:8868":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:2150:588":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:40116:3172":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"6:5836:14109":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:10671:16600":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"18:766:20648":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:43724:8866":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"6:4955:13453":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"16:4814:16007":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"5:5687:232":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:6978:23999":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"16:5807:16282":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:1045:3191":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:7229:9130":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:10110:16490":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:0:1398":{"crate_id":1,"path":["std"],"kind":"module"},"17:10361:2825":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:10266:16485":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:13697:20565":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:1569:2653":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"2:7696:31043":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:43454:8832":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"5:6764:2666":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"7:32:15122":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"16:5737:16281":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:41587:181":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:4630:22149":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:45566:3600":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:44563:8769":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:39293:199":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:8542:16392":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:21979:28725":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:12372:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:3453:3306":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:11045:16608":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:11313:9283":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:43422:8815":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"6:1569:10840":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:4733:3407":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:9850:16447":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"2:45546:3635":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:46137:3609":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:8734:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:20851:29794":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"1:4466:3428":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:40150:8967":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:2765:9174":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:2508:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:21843:28396":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"5:3142:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:8531:3489":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"17:10786:16561":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"6:4518:13407":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"6:554:9945":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:9336:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"6:1595:10843":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"18:582:3034":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:9485:34820":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:30365:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:40680:9147":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"6:7278:14917":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"16:4592:15929":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"11:1121:3194":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:8547:3490":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"16:6142:194":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:11955:19295":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:9160:21361":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"16:7679:2942":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:40450:9132":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:10444:16511":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"1:5771:3051":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:10323:16541":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"5:2131:2630":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"16:7553:2937":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:1586:3197":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:4039:3396":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:4308:3424":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:47809:3657":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:11416:2834":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:9977:16422":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"16:5028:16053":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"11:723:2984":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:10351:2824":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:41714:9269":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"6:4992:13457":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"16:5882:16284":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:41723:193":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"6:4929:13449":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:8216:3331":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:5587:3010":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:44145:8889":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:10581:16576":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:47663:3651":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"18:614:34843":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:25972:3032":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:41419:3367":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:8955:3524":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"6:573:9948":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:8997:16391":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"16:5398:2797":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:7128:23646":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"18:574:34837":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:11084:16609":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:14037:20597":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:44291:9326":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:13604:20561":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"16:6357:16295":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:9274:2820":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:8472:3487":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:919:2986":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:40124:8861":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:9153:2817":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:43500:8863":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:8326:3458":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:11979:19297":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:14359:20617":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"6:119:9618":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:22550:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"17:13016:19837":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:11726:16659":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"5:2959:2458":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:2802:9184":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"6:4781:13432":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"6:4818:13437":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"16:5994:16287":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"16:5651:16278":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"11:657:2401":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"16:8252:16348":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"5:1523:3208":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"5:7033:3199":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:9673:2689":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"17:2105:16527":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"18:736:20647":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:43977:8882":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"6:4328:13387":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:4729:13426":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:8900:3537":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"16:8105:16342":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:1580:3196":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"9:450:15151":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:7727:3050":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"17:13937:20586":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:11790:8848":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:22484:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"17:10597:16597":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"6:7511:13625":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"16:5720:16280":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:7908:21336":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:41396:155":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:11994:743":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:21236:3022":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:12646:19814":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"5:7171:2351":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:40911:9126":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:498:2630":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"6:4842:13440":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:6638:217":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:11164:2830":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"16:6347:16294":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"10:0:2205":{"crate_id":10,"path":["adler"],"kind":"module"},"2:21042:3310":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"18:590:28733":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"6:1663:10848":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:632:3176":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:8872:16414":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"5:2962:31526":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"6:6130:14153":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:2777:9176":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"6:0:821":{"crate_id":6,"path":["libc"],"kind":"module"},"2:30343:8910":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"6:7272:14916":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:32137:9239":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"16:5972:2875":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"9:486:15150":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"16:6197:16290":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"16:6900:2932":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:8969:3052":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"16:3441:15383":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:43283:29060":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:2978:3223":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"1:11985:1490":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"6:5994:14119":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:41573:3372":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:11979:1525":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"6:4678:3387":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:40398:28796":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"6:6044:33344":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"18:719:20646":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:3932:2639":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:13069:19841":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:9913:16457":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:11127:16432":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:1591:3198":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:12577:2699":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"1:8209:3333":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"17:9966:2801":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:2918:210":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"16:6516:16302":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:47999:8756":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:42367:8793":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:10303:16539":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"16:7362:16319":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"6:653:9998":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"1:10935:21445":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"17:13749:20569":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:46091:3603":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:551:3154":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"11:1831:2653":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"17:11767:19289":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:13949:20587":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:2755:3575":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"5:1426:2983":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"6:6573:10791":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:12566:19808":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:22070:28774":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:13155:2831":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"6:4524:13408":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:11888:2842":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:3222:3351":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:3991:3393":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"5:4365:2642":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:42360:8792":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:9716:34813":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"0:0:2093":{"crate_id":0,"path":["fnv"],"kind":"module"},"1:7633:3169":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"5:5861:2648":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"15:306:15303":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:44083:8886":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:9225:8791":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:9272:3245":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"17:11591:2831":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:7755:3249":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:11992:746":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"5:878:2620":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:12186:19312":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"6:6744:14539":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"13:110:33792":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:1915:3213":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"6:6077:14126":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"6:587:9950":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:9219:8793":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"16:6332:16293":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"6:4489:13404":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:13659:16461":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:7739:3248":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"6:5882:14111":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:10740:24263":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"6:506:9940":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"11:793:3185":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:14177:20603":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:45720:3642":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:14259:20610":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"6:4606:13415":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"6:4764:13430":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"6:4872:13444":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:7655:3204":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:1543:2639":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"16:4564:15925":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:8854:3539":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"16:6554:16303":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:2592:3334":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"6:4638:13418":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:2760:9175":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:13029:19838":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:20650:29095":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:410:165":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"6:6022:14122":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:21452:3588":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"1:10800:3305":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"6:568:9947":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:20895:3594":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"17:10458:16544":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"17:11669:16657":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:8196:3332":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"6:6598:14532":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:10088:21921":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"16:2293:15324":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:1820:3212":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"5:207:2611":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:7589:2732":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:4111:3000":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"6:4587:13414":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:21549:3024":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"6:4754:13429":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:12174:19311":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:9474:1657":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:9181:132":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:42353:8784":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"11:630:2982":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"6:4944:13451":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"17:400:16404":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:41774:2982":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"6:7540:13629":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:11520:16433":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:2895:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:39335:201":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:7924:3063":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"16:5689:2891":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:5988:9149":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"5:3212:3195":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:0:496":{"crate_id":2,"path":["core"],"kind":"module"},"16:2781:15370":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:9867:3310":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:5381:2639":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:4560:3446":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:11234:16650":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:2929:2359":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:10520:16549":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"2:30437:28505":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"11:1027:15268":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"6:6136:13301":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"11:311:33734":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:9344:34809":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"2:4256:8941":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:12579:19809":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:8902:31045":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:5551:3503":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"16:3894:15447":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:5608:206":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"16:5916:2869":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"16:2637:15364":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"5:1492:2986":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:2688:2354":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:41731:210":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"1:841:2982":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"6:6156:14154":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:4389:13392":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"16:6427:16298":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"13:226:2952":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:10810:23878":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:3111:3358":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"6:6648:10976":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"5:6603:2651":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:2403:2218":{"crate_id":1,"path":["std","io"],"kind":"module"},"16:7463:16322":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:1982:184":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"16:3025:15378":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:14380:20618":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:10504:3350":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:8907:3016":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:10051:16452":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:46043:3655":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"5:3737:3209":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:12815:19823":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:41944:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"16:4323:15828":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:4142:3001":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"6:1545:10838":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:40207:28600":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"5:4944:2639":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"16:6470:2927":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:44155:8890":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"16:2465:15357":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:45612:3641":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:615:3174":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:3262:3353":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:12118:19307":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:11019:2738":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"6:1649:10847":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:45880:3669":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:9065:3067":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"14:160:15278":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:12671:19816":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:3231:8778":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:2771:9177":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:2982:3224":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:9359:29061":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"6:5058:13463":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"16:5775:2896":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:10510:3348":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:42596:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:20839:3589":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"17:9223:2819":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"4:0:2202":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"16:6239:34157":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:898:2633":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:7916:3342":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:43110:8817":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"16:2519:15359":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:9665:34830":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"11:119:2600":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:3667:3373":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"16:2332:2861":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:2703:2999":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"1:8203:2820":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"16:7525:2935":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"6:5900:14113":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"11:2194:33732":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:11992:19298":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:9926:16456":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:9518:16420":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:7020:2728":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:11696:16658":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"1:11539:3070":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"17:12727:19819":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:13140:19846":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:11103:3507":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"6:5015:13459":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:11354:16428":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"5:35:2609":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:7530:21254":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"16:2373:15353":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"6:5805:14106":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:6185:3056":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:21110:3585":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"6:1557:10839":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"5:6471:2613":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:12065:19303":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:10049:2983":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:41984:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"5:5877:9538":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:4047:3398":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:20667:29091":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"15:0:2209":{"crate_id":15,"path":["addr2line"],"kind":"module"},"17:10339:16513":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"16:5100:16077":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:11300:21152":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:10308:8839":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"6:4664:13420":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:32133:21406":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"9:0:2204":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:1562:2401":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"5:5284:8809":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"6:1681:10850":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:14403:20620":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:8794:16412":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"7:79:15129":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:42346:8783":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"6:5044:13461":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"5:676:231":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:4323:2675":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:8924:16416":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:14:1669":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:43810:3331":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"11:644:2983":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:12333:19796":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"16:6915:33963":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:10621:16599":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:11852:19293":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:10609:16598":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"18:80:20634":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:854:2983":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:47725:3672":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"5:1503:2987":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"6:1500:10832":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"5:7199:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"6:4446:13398":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"5:6273:2633":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:30349:9167":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"16:6571:16304":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"16:6456:2926":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"12:0:2207":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:21673:3584":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"5:2970:32515":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:21928:3026":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"11:844:3190":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:7275:2361":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:7999:3061":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"6:1709:10853":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"6:7552:13631":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:9223:8790":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:11967:19296":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"6:6067:14125":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:9017:3055":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:10138:21396":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"1:11927:21424":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"2:39411:9194":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:1841:3245":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:8144:3064":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:45742:3648":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:10377:2810":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:8887:3534":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:40482:9143":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"11:986:3192":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"9:330:15206":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:14216:20607":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:42642:71":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"6:5051:13462":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"6:6589:9820":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:43574:8835":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:12035:19301":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"18:755:20653":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"16:3777:15402":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:10280:16538":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"16:2803:15371":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"16:4965:16038":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:39238:9192":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"6:6726:14538":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:474:9935":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:40176:8964":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:11020:16612":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"11:1501:15271":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:950:3189":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:10845:16557":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"6:5890:14112":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:2521:237":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:9206:112":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"5:1011:2613":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:7652:3201":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:43830:8853":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:43106:28379":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:40195:3267":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:43532:8856":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"6:4436:13397":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:10745:3300":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"6:7609:15106":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:14205:20606":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"5:685:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:44525:3716":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:13167:19847":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"9:426:15153":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:46805:3610":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"16:4476:15909":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"6:4616:13416":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:7632:3310":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:1075:16459":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:46189:3621":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:20972:3590":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"17:11753:16660":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:14227:20608":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:10194:8842":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:41482:3037":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:39432:16347":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"16:5673:16279":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:10229:8835":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:4783:31291":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"5:3330:2653":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"5:3802:2653":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"1:5978:206":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"17:9475:16419":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:44311:3021":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"14:40:19291":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"15:327:2948":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:44533:3717":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:10981:16615":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:13083:19842":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:4164:3421":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:7659:9129":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"5:3217:31376":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"18:609:34866":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:46727:3604":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:3732:3376":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:46615:3650":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"16:7484:16324":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:4434:3004":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"11:805:3187":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"5:3722:3063":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:2797:9180":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"6:5818:14107":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:12359:136":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"16:7631:16331":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:9105:3540":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:3260:3352":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"6:4374:13390":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:6137:2699":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:11467:2837":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"18:0:2212":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:21208:3582":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"2:42224:3038":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:7721:3181":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"5:3183:31357":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:10735:22297":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"6:6850:14546":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:12002:112":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:42626:28720":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:6421:3183":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"16:4620:15933":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:40892:3357":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"14:31:15278":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:504:16405":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"6:4535:13409":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"6:4550:13411":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:434:15326":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:11210:16648":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:10471:16545":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"1:864:2401":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:872:2984":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"16:6128:16289":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:11074:16433":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"16:6724:16307":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:11007:16613":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"16:8086:16341":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"16:5704:2894":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"6:5849:14068":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:13448:20553":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"16:530:2873":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:43464:8833":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:5437:3501":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"16:5067:16068":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:20635:28799":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:9426:141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:10156:8828":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:11905:2844":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"11:403:33740":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:47771:3623":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:11989:645":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"6:6805:14542":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:12669:3200":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:44299:9325":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"6:1536:10837":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:10223:16492":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:14301:20612":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"5:3171:2982":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:20648:29093":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:12004:19299":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:1765:610":{"crate_id":1,"path":["std","env"],"kind":"module"},"6:5793:14104":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"16:7494:16325":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:1818:3239":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:7759:21406":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:2691:226":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"16:4724:15989":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:39626:25099":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"16:6323:2924":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:4126:23652":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:11144:16637":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"5:2690:31466":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"11:2180:33728":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"5:778:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:8304:3427":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:12394:19798":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"6:547:9944":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:20939:3595":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"2:11801:8845":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:3383:8919":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"2:2162:9206":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"1:4789:2710":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:39313:202":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"6:62:9564":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"17:8771:16411":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"16:4506:15915":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:13557:20558":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:40370:3009":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"6:5979:14117":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:43760:8867":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:2263:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"11:1517:15272":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:3996:29069":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:20607:3034":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:2920:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:11371:16429":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:10080:16505":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:10267:8836":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:728:142":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"6:4626:13417":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:4906:3454":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:13870:20580":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:12526:19805":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"5:1514:198":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:43352:8827":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"18:652:34837":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:5615:2712":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:7519:16406":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:11736:3492":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:11995:1509":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"6:4794:13434":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:10758:21407":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"16:3810:15411":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:11258:3512":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:12053:19302":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:42906:3041":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"16:6438:16299":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"5:7259:3265":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"0:21:1676":{"crate_id":0,"path":["fnv","FnvHashMap"],"kind":"typedef"},"16:3744:15393":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:4691:3455":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"5:3204:3197":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:3149:234":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:5073:21330":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:44008:8884":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:9095:218":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:42851:2342":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:11343:8854":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:22041:28657":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:11036:2740":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:45690:3637":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"5:7087:198":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:12864:19827":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:11978:418":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:10123:2822":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"16:4868:16013":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:13125:19845":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:4616:3393":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"6:1603:10844":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"5:2243:2991":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"16:3580:15384":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:8980:3152":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:8314:3473":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"6:4568:13413":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:11791:19290":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:2908:3206":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:12424:19800":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"11:836:3189":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:39253:200":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:6425:3525":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:21457:3596":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"2:1666:1092":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"6:6036:14124":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"5:629:31364":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:9877:222":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:2926:2358":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:46167:3615":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:10953:3508":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"5:6789:2670":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:12394:29749":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"6:1513:10834":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"16:6484:16300":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"6:7529:13628":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"6:4428:13396":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"16:149:2595":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:47920:8751":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:45945:3580":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"6:4908:13447":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:13914:20584":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"6:1527:10836":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:12377:19797":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:9469:3303":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"16:6540:2928":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:40498:9144":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"6:1575:10841":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:10486:16546":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"1:5554:3504":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"16:2589:15362":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:22616:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:944:3188":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:12757:19820":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"16:2663:15365":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:3184:28228":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:10330:16514":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"6:526:9941":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:40380:9137":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:11428:16431":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:43362:8825":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:9221:194":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:42867:2341":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"3:234:210":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:11642:16437":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:3344:3338":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:39152:8935":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:40131:8965":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:1979:185":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:1746:28710":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:43444:8834":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:48022:8757":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:43940:8880":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:10297:3501":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:32224:3035":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:43839:8852":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"9:177:2970":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:40072:8969":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:2960:8779":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"2:43409:8814":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:39439:29066":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"2:47865:8746":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:11815:19291":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:13492:20555":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:13055:19840":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:2793:9178":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:8288:3417":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"6:123:9619":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"17:13548:20557":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:9614:34822":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"6:4695:13422":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"5:7216:3266":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:20801:3310":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"17:14102:20600":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:40280:3281":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:2316:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:40901:2683":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:7678:2736":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"17:14163:20602":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:10780:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"6:4770:13431":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:2883:2709":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:11944:3071":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:40522:9133":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:43556:3333":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"16:6531:2598":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"2:41561:3371":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"5:1118:31406":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:10568:16555":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:8824:3507":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"16:7099:16317":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"18:727:2792":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"6:4848:13441":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"16:2497:15358":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:43848:8851":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:11943:19294":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"6:6868:14547":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:40157:8968":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"17:10313:16540":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"1:11030:2739":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"18:707:8848":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"6:4704:13423":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:40223:9259":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"5:4004:2633":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"16:7313:34132":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:43435:8831":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"6:4963:13454":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:4895:13446":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:45636:3601":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:5962:2712":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:30913:183":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"1:7570:2730":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:10906:16562":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:9442:34826":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:44134:8888":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:2750:3573":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"1:4025:3394":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:933:3187":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:10402:3505":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"5:2960:32516":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:10038:16453":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"16:6667:15297":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:914:3185":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:9213:8784":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:12346:16603":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:12769:19821":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:13639:2852":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"15:288:15302":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"6:4506:13406":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"6:5074:13465":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:9821:16445":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:13591:20560":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"6:7599:15105":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:11220:16649":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"16:2611:15363":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:8277:3425":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:10994:16614":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:42669:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:1077:3194":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:12659:19815":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:12003:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:21:684":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:10074:3333":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"17:12952:19833":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"11:1845:3196":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"11:399:33736":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"16:5414:34028":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:2362:3287":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:41824:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:12254:19793":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:11315:21350":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"16:7799:16335":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"6:1631:10845":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:10799:16559":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:13787:20573":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:47847:3678":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:42876:145":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:10499:16547":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"17:13732:20568":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:3517:3329":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:10069:3239":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"17:11498:16432":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:4035:3395":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:1843:3246":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"16:7648:198":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"9:52:2955":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"5:7095:2993":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"5:1672:2613":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:42859:3039":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:12106:19306":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:6348:166":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"6:4917:13448":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:2830:9186":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"14:215:15287":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:3371:8915":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"11:285:33737":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:42144:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:6894:2727":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"17:11199:16638":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:12001:1563":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"16:2926:15376":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:2208:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:4626:22145":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"17:10555:16596":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:43624:8869":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"8:0:2203":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:11998:1508":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"16:2962:15377":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:11483:3378":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"5:6720:244":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"6:7564:13633":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:12711:19818":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:1755:9216":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"16:6939:16313":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:9462:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"9:507:15154":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:12826:19824":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:13923:20585":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:11488:9330":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"5:6140:3719":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:43991:8883":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"16:6763:16308":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:8605:16390":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:9192:24270":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:11977:941":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"11:667:2986":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:3395:16563":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:9866:16448":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:10175:2801":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:12631:19813":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"5:5530:2651":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"18:681:20651":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:13964:20589":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:3076:3225":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"16:3042:15379":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:11872:2838":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"0:24:1680":{"crate_id":0,"path":["fnv","FnvHashSet"],"kind":"typedef"},"17:11924:2851":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:6061:2716":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"17:8740:16410":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:14341:20615":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:14329:20614":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:12000:793":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"5:1288:3192":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"16:4928:16025":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"11:2168:33731":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"5:6632:2665":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"17:12318:19795":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"6:7505:13624":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:11551:21372":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"2:40877:3183":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"6:5920:14114":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"5:5951:2639":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:9217:8792":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"6:4556:13412":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"16:5793:2901":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:13999:20593":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:11993:747":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"6:4456:13399":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"5:2170:2988":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:1892:3260":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"5:7272:2649":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"2:5529:9139":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"6:4973:13455":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"6:5955:14115":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"15:394:15313":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"17:13707:20566":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:11982:312":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:8348:3406":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"6:6834:14544":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"5:7079:2401":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:1636:9112":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:11564:9331":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"6:5737:14040":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:40441:9141":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:10716:3457":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"17:12691:19817":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:595:9951":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:9656:2688":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"2:41436:3368":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:22385:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"17:9899:2822":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:3927:3389":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:10097:16491":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"16:8043:16339":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:47931:8752":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"11:1858:3198":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"16:2825:15372":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:22352:178":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"11:1818:2982":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"11:817:3188":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"6:1690:10851":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:3301:3349":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"6:4341:13388":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"6:4887:13445":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"17:14395:20619":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"16:7592:16329":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:41790:2401":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"17:12435:19801":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:11155:16646":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:4731:3404":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:9744:34825":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:2814:9182":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:4984:13456":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"6:5008:13458":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:10945:16639":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:47271:3639":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"14:0:2208":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"16:6977:16314":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"5:6392:2401":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:14007:20594":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"16:5959:16286":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:7657:3159":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:10350:8838":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:41647:2982":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"16:6864:2887":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"6:494:9938":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:9840:16446":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"14:7:15278":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"6:5967:14116":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:41663:2401":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:40108:8862":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:46569:3644":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:10322:8837":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:11997:1507":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:11796:8847":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:45898:3675":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:2570:2689":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"16:3058:15380":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"6:4496:13405":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"16:7255:3471":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:2689:8776":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"5:7025:2401":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:9571:34829":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:11599:8841":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:22004:28604":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:43091:9311":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"5:4034:2613":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:41453:3369":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:5738:3522":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:10336:8840":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:9399:16418":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:9182:24269":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"16:6886:2931":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:2681:220":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"5:1102:31449":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"16:2567:15361":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:10293:16506":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:44330:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"1:11990:748":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:11252:3057":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"6:5799:14105":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"18:599:34853":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:11388:16430":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:11250:16616":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:40056:28522":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:11832:19292":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:12133:19308":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:11600:16435":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:14197:20605":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"16:6250:2917":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:44363:9338":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"6:4401:13393":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:21964:28602":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"16:2759:15369":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"11:2033:3191":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:3435:3307":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:9143:3572":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"6:4879:1006":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:5299:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"17:13882:20581":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:6153:2720":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"16:7584:16328":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"6:4413:13394":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:6590:3531":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"2:47413:3611":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:8282:3426":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:49867:3598":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"17:9016:2796":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:3187:28220":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:8899:16415":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:13905:20583":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:8916:3535":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:1782:3230":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"16:5342:16271":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:2848:9190":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:13894:20582":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:11118:16645":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"0:20:1674":{"crate_id":0,"path":["fnv","FnvBuildHasher"],"kind":"typedef"},"11:2049:3192":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"5:822:2618":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:2493:3341":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"16:4841:16010":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"16:8265:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:40096:8972":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:4378:2676":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:13991:20592":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"6:6796:14541":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"11:1611:2606":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:43962:8881":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:9171:3262":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:7370:28017":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:2360:3286":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"5:5236:2613":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:14189:20604":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:44482:211":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"1:9474:2734":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"17:13771:20571":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"6:1717:10854":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:2311:188":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:10868:8830":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"11:1103:15270":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:9590:2685":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"16:2314:15351":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"6:1673:10849":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:12994:19836":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:1430:144":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:6738:9135":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"16:6317:2922":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"2:40473:3012":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"16:6057:15323":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:44546:161":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:256:34821":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:2698:228":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"1:7900:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:11996:1506":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"16:5612:16275":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"6:6820:14543":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:12479:19803":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:4407:3003":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:13862:20579":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"16:3220:15381":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"16:3635:15385":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"11:1538:15273":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:12412:19799":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:46213:3670":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:30118:3380":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:11421:3377":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:9296:2821":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"18:521:20654":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"11:1826:2633":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:9734:16424":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:4043:8774":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:11776:8850":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"16:5639:16277":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:47065:3605":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:46388:28609":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:46881:3622":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:21203:3310":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"11:798:3186":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:9124:3314":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:44588:28768":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"2:6981:3013":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:30543:28597":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"16:6396:16297":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:10507:3352":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"6:5829:14108":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:3181:24515":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:40270:2677":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"5:7183:2352":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:12552:19807":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"5:1482:3185":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"16:3295:15382":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"17:12891:19829":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:13778:20572":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:9318:2798":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:11623:16436":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"6:1590:10842":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:4897:3453":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"6:7586:13635":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"9:393:15152":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:2213:2671":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"17:12905:19830":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:40190:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:9030:16317":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:10511:16548":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"5:7116:2401":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:22715:3384":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:47984:8755":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:14054:20599":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"11:365:2604":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"5:5757:2633":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:13620:20562":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"6:6618:14534":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:532:9942":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"5:3238:3198":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:8313:3474":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"16:7474:16323":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:8222:3375":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:12303:19794":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:3194:8777":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:40652:3332":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:10931:16628":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"16:6931:16312":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:40300:8814":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:7041:2715":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:11462:3376":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:2590:116":{"crate_id":2,"path":["core","default","Default"],"kind":"proc_derive"},"11:1822:2401":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:40320:3221":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"9:237:3486":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:22103:3385":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:8841:16413":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"16:2421:15355":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:2388:3297":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:43855:8861":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:885:2985":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:9010:21435":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:2746:9155":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"2:22077:3383":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:3933:3388":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:47523:3645":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"16:3867:15444":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:40086:8971":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:7652:3157":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"16:8068:16340":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:40342:3006":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"16:4396:15877":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"5:7124:2401":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:11761:2746":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"16:6502:16301":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:2741:8775":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"5:7016:2979":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:10529:16594":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:6288:206":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"16:7061:34029":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"18:699:2790":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:2217:3283":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"17:3519:16581":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:4020:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:5622:2713":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"5:782:2615":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"6:488:9937":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"16:7025:33995":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:46915:3671":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:7523:13627":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:41705:3472":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:47874:8747":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:2781:3574":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:5231:190":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:2743:106":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"16:7539:2936":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:13303:20548":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"16:6872:2930":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:21234:3591":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:4252:207":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:13096:19843":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:9655:16422":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"16:6372:2925":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:6832:9121":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"1:3492:3262":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:44188:8872":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:10835:8829":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"6:6607:14533":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:11542:16393":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"18:690:20652":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"6:7546:13630":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:13368:20550":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:8233:3366":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:9469:2339":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"16:7038:33943":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:30941:3034":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"6:5068:13464":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"6:562:9946":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:41904:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"5:2049:3209":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"2:2588:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:42691:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"16:7240:34141":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"6:4810:13436":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"6:4685:13421":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:12921:19831":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:11984:1406":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"17:9561:16421":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"16:6232:2886":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:43383:8816":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:46357:28545":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:22682:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"17:10863:2801":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:14236:20609":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"6:1506:10833":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:352:3167":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"6:6008:14120":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:11290:16426":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:9688:2694":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"17:13847:20577":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:6461:2724":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"6:4938:13450":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1:11558:15310":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:22517:3160":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"17:11189:2831":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"2:40389:9138":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:43660:8839":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:8810:3506":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:14026:20596":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:8711:16409":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:7706:3180":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:21912:2994":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:6785:29081":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:45843:3614":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:10883:16564":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:13957:20588":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:2735:9152":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"17:12457:19802":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"16:0:2210":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:11525:9332":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:1565:2633":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:44275:9318":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"1:6537:3529":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"6:4395:13236":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:10654:16575":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:7327:2360":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"18:636:34849":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"6:5775:14103":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"5:2966:32513":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:7304:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"10:44:2954":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"16:6289:16292":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"16:8021:16338":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"5:1273:3193":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:6240:2712":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:11329:16427":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"6:541:9943":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"16:5626:16276":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"16:7407:2883":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"6:4716:13424":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:41638:2400":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:1732:9217":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"6:7295:14918":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:41864:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:11091:3506":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:13427:20551":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:4955:3463":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:14150:20601":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:8270:3370":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:4177:3422":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:39357:203":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"6:5877:14110":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:13757:20570":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"11:695:2987":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:5042:21330":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:40919:9128":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:1973:16493":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"5:1464:2984":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:9528:34832":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:4380:3418":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"16:7073:16316":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:43334:8824":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"16:6713:15296":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:7262:134":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:13179:19848":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:11056:16643":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:12592:19810":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:42614:110":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:44303:9319":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:8846:2982":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:21561:28803":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"16:4996:16045":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:9939:16455":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"11:2060:3193":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"11:1048:33727":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:2836:9187":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"18:644:34837":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:5491:3502":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"17:14417:20621":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:43343:8823":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:39379:2345":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"17:12982:19835":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:43678:8837":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:46259:3677":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:11568:16434":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:44287:9322":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:22649:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"17:2133:16487":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:11329:9285":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"6:500:9939":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:10249:16499":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"5:6622:2663":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"16:4753:15994":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:40512:9145":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:9118:2816":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:908:2653":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"18:491:34850":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:2244:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:10013:16458":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:8987:21340":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"5:1411:2982":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:9990:16460":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:2164:16512":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:2809:9181":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"16:7753:16333":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"6:6720:14537":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:14315:20613":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:923:2987":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"11:2186:33730":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"16:6692:16306":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:11454:2835":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:8862:2401":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"6:4824:13438":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"6:4787:13433":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:46851:3616":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"16:6850:16311":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:8541:2982":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"3:0:442":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"6:4740:13427":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:4812:3403":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:39191:8780":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:4735:3408":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:7266:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:527:2702":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"5:1138:31450":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:12446:8985":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:10148:16489":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"5:2461:31401":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":26}