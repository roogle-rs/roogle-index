{"root":"0:0:2083","crate_version":"1.0.7","includes_private":false,"index":{"2:12027:24422":{"id":"2:12027:24422","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9813:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9813:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:16:1656":{"id":"0:16:1656","crate_id":0,"name":"with_key","span":{"filename":"lib.rs","begin":[103,4],"end":[105,5]},"visibility":"public","docs":"Create an FNV hasher starting with a state corresponding\nto the hash `key`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["key",{"primitive":"u64"}]],"output":{"resolved_path":{"name":"FnvHasher","id":"0:10:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:15":{"id":"0:15","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[99,0],"end":[106,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:16:1656"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3319-0:10:1652":{"id":"b:2:3319-0:10:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3321:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12078:24462":{"id":"2:12078:24462","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11888:419","str::splitn":"2:12075:24460","self::pattern":"2:11712:8841"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43479:8828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11717:8837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11732:8838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12106:31614":{"id":"2:12106:31614","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8249:3463-0:10:1652":{"id":"a:2:8249:3463-0:10:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8249:3463","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12135:31621":{"id":"2:12135:31621","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4535:31621"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43656:8852","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5382":{"id":"5:5382","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5383:32273","5:5384:9157","5:5387:32274","5:5390:32275","5:5398:32276","5:5399:32277","5:5400:3344","5:5401:25631","5:5402:25632"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12072:31604":{"id":"2:12072:31604","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11712:8841","str::split":"2:12060:23066","prim@char":"1:11888:419","str::split_terminator":"2:12069:31603"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43425:8860","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11717:8837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11732:8838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:10:1652":{"id":"0:10:1652","crate_id":0,"name":"FnvHasher","span":{"filename":"lib.rs","begin":[89,0],"end":[89,26]},"visibility":"public","docs":"An implementation of the Fowler‚ÄìNoll‚ÄìVo hash function.\n\nSee the [crate documentation](index.html) for more details.","links":{},"attrs":["#[allow(missing_copy_implementations)]"],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:15","a:2:2684:220-0:10:1652","a:2:8249:3463-0:10:1652","a:2:8250:3462-0:10:1652","a:2:2701:228-0:10:1652","a:2:2741:2345-0:10:1652","b:2:2251-0:10:1652","b:2:2542-0:10:1652","b:2:2248-0:10:1652","b:2:2538-0:10:1652","b:2:2553-0:10:1652","b:2:2548-0:10:1652","b:2:3319-0:10:1652","0:13","0:17"]}}},"2:12105:31613":{"id":"2:12105:31613","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12103:31612":{"id":"2:12103:31612","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2741:2345-0:10:1652":{"id":"a:2:2741:2345-0:10:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2741:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12113:22063":{"id":"2:12113:22063","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11888:419","self::pattern":"2:11712:8841"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41394:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12107:31615":{"id":"2:12107:31615","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11888:419","self::pattern":"2:11712:8841"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11717:8837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11737:8836","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12116:24465":{"id":"2:12116:24465","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11888:419","self::pattern":"2:11712:8841"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41394:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11717:8837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11732:8838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12119:31617":{"id":"2:12119:31617","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11888:419","self::pattern":"2:11712:8841"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11717:8837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11732:8838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12131:24221":{"id":"2:12131:24221","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39552:24360","Self::is_ascii":"2:12130:24220"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41394:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39552:24360","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5387:32274":{"id":"5:5387:32274","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7255:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7255:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12063:24456":{"id":"2:12063:24456","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11888:419","self::pattern":"2:11712:8841"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11535:8832","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12032:31601":{"id":"2:12032:31601","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11894:1397","crate::ops::IndexMut":"2:2985:3213","str::slice_unchecked":"2:12031:31600"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:3321:1491":{"id":"2:3321:1491","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39341:8916","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12012:2386":{"id":"2:12012:2386","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2544:694":{"id":"2:2544:694","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2248-0:10:1652":{"id":"b:2:2248-0:10:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2250:2292"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12034:24448":{"id":"2:12034:24448","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:12033:24447"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2250:2292":{"id":"2:2250:2292","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12016:31598":{"id":"2:12016:31598","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:12014:31597"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12020:31599":{"id":"2:12020:31599","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12041:31602":{"id":"2:12041:31602","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43621:8855","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12052:2426":{"id":"2:12052:2426","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41396:179","prim@char":"1:11888:419","self::pattern":"2:11712:8841"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41394:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12099:31610":{"id":"2:12099:31610","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12010":{"id":"2:12010","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12011:811","2:12012:2386","2:12013:31596","2:12014:31597","2:12016:31598","2:12019:25602","2:12020:31599","2:12021:314","2:12022:24424","2:12023:24420","2:12025:24421","2:12027:24422","2:12029:24423","2:12031:31600","2:12032:31601","2:12033:24447","2:12034:24448","2:12035:29109","2:12036:29075","2:12037:1660","2:12038:29111","2:12039:29099","2:12040:23067","2:12041:31602","2:12042:29110","2:12043:24464","2:12046:23855","2:12049:23857","2:12052:2426","2:12056:2385","2:12060:23066","2:12063:24456","2:12066:24458","2:12069:31603","2:12072:31604","2:12075:24460","2:12078:24462","2:12081:31605","2:12084:31606","2:12087:2306","2:12090:31607","2:12093:31608","2:12096:31609","2:12099:31610","2:12101:31611","2:12103:31612","2:12105:31613","2:12106:31614","2:12107:31615","2:12110:31616","2:12113:22063","2:12116:24465","2:12119:31617","2:12122:31618","2:12125:31619","2:12128:31620","2:12130:24220","2:12131:24221","2:12132:24223","2:12133:24224","2:12134:24225","2:12135:31621","2:12137:3160","2:12138:31622"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2684:220-0:10:1652":{"id":"a:2:2684:220-0:10:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2541:2379":{"id":"2:2541:2379","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2515:133"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:13":{"id":"0:13","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[91,0],"end":[97,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2589:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:14:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12014:31597":{"id":"2:12014:31597","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12040:23067":{"id":"2:12040:23067","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43611:3320","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2551:128":{"id":"2:2551:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"a:2:8250:3462-0:10:1652":{"id":"a:2:8250:3462-0:10:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8250:3462","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2552:1478":{"id":"2:2552:1478","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:41538:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:20:1664":{"id":"0:20:1664","crate_id":0,"name":"FnvBuildHasher","span":{"filename":"lib.rs","begin":[128,0],"end":[128,56]},"visibility":"public","docs":"A builder for default FNV hashers.","links":{},"attrs":[],"deprecation":null,"inner":{"typedef":{"type":{"resolved_path":{"name":"BuildHasherDefault","id":"2:9410:1647","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"FnvHasher","id":"0:10:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"2:12033:24447":{"id":"2:12033:24447","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_mut":"2:12034:24448"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12066:24458":{"id":"2:12066:24458","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11712:8841","`DoubleEndedIterator`":"2:7240:121","prim@char":"1:11888:419","str::split":"2:12060:23066"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43375:8826","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11717:8837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11732:8838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2701:228-0:10:1652":{"id":"a:2:2701:228-0:10:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12025:24421":{"id":"2:12025:24421","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41396:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41394:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9813:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9813:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12039:29099":{"id":"2:12039:29099","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12038:29111"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43640:8843","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12011:811":{"id":"2:12011:811","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11888:419"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12013:31596":{"id":"2:12013:31596","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2253:20738":{"id":"2:2253:20738","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:21:1666":{"id":"0:21:1666","crate_id":0,"name":"FnvHashMap","span":{"filename":"lib.rs","begin":[132,0],"end":[132,58]},"visibility":"public","docs":"A `HashMap` using a default FNV hasher.","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"typedef":{"type":{"resolved_path":{"name":"HashMap","id":"1:731:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"resolved_path":{"name":"FnvBuildHasher","id":"0:20:1664","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"2:12029:24423":{"id":"2:12029:24423","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9813:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9813:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12090:31607":{"id":"2:12090:31607","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11712:8841","`DoubleEndedIterator`":"2:7240:121","prim@char":"1:11888:419","str::matches":"2:12087:2306"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43579:8859","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11717:8837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11732:8838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12021:314":{"id":"2:12021:314","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12022:24424","`u8`":"1:11905:1499"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12122:31618":{"id":"2:12122:31618","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11888:419","self::pattern":"2:11712:8841"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12130:24220":{"id":"2:12130:24220","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12134:24225":{"id":"2:12134:24225","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5383:32273":{"id":"5:5383:32273","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:280:2352","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7004:2970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:280:2352","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7004:2970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12037:1660":{"id":"2:12037:1660","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43343:2812","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5390:32275":{"id":"5:5390:32275","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7255:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7255:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2557:1477":{"id":"2:2557:1477","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:41538:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:14:60":{"id":"0:14:60","crate_id":0,"name":"default","span":{"filename":"lib.rs","begin":[94,4],"end":[96,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"FnvHasher","id":"0:10:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:18:1658":{"id":"0:18:1658","crate_id":0,"name":"finish","span":{"filename":"lib.rs","begin":[110,4],"end":[112,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:24:1670":{"id":"0:24:1670","crate_id":0,"name":"FnvHashSet","span":{"filename":"lib.rs","begin":[136,0],"end":[136,52]},"visibility":"public","docs":"A `HashSet` using a default FNV hasher.","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"typedef":{"type":{"resolved_path":{"name":"HashSet","id":"1:1433:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"FnvBuildHasher","id":"0:20:1664","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"2:12019:25602":{"id":"2:12019:25602","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11279:8845"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2538-0:10:1652":{"id":"b:2:2538-0:10:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2541:2379"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2548-0:10:1652":{"id":"b:2:2548-0:10:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2551:128","2:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12084:31606":{"id":"2:12084:31606","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41394:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11717:8837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11732:8838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12101:31611":{"id":"2:12101:31611","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12125:31619":{"id":"2:12125:31619","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11888:419","self::pattern":"2:11712:8841"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11717:8837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11732:8838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2553-0:10:1652":{"id":"b:2:2553-0:10:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2556:128","2:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12132:24223":{"id":"2:12132:24223","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12046:23855":{"id":"2:12046:23855","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11888:419","self::pattern":"2:11712:8841"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12133:24224":{"id":"2:12133:24224","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12022:24424":{"id":"2:12022:24424","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11905:1499"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12023:24420":{"id":"2:12023:24420","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41396:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41394:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9813:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9813:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12043:24464":{"id":"2:12043:24464","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11888:419","self::pattern":"2:11712:8841"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12060:23066":{"id":"2:12060:23066","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11712:8841","`DoubleEndedIterator`":"2:7240:121","prim@char":"1:11888:419","str::split_whitespace":"2:12038:29111","str::rsplit":"2:12066:24458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43357:3322","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:19:1659":{"id":"0:19:1659","crate_id":0,"name":"write","span":{"filename":"lib.rs","begin":[115,4],"end":[124,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["bytes",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12110:31616":{"id":"2:12110:31616","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11888:419","self::pattern":"2:11712:8841"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12138:31622":{"id":"2:12138:31622","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4533:31622"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43674:8853","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5399:32277":{"id":"5:5399:32277","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:280:2352","`String`":"5:7255:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:280:2352","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7004:2970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7255:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5401:25631":{"id":"5:5401:25631","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12133:24224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7255:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5402:25632":{"id":"5:5402:25632","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12134:24225"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7255:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:17":{"id":"0:17","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[108,0],"end":[125,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["write_i8","write_u64","write_u8","write_i128","write_i16","write_u128","write_u16","write_isize","write_i32","write_usize","write_u32","write_str","write_length_prefix","write_i64"],"trait":{"name":"Hasher","id":"2:9370:145","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:18:1658","0:19:1659"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12038:29111":{"id":"2:12038:29111","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12039:29099"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43631:8844","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12042:29110":{"id":"2:12042:29110","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43649:8842","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12081:31605":{"id":"2:12081:31605","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41394:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12075:24460":{"id":"2:12075:24460","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11888:419","self::pattern":"2:11712:8841","str::rsplitn":"2:12078:24462"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43461:8830","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12087:2306":{"id":"2:12087:2306","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11712:8841","`DoubleEndedIterator`":"2:7240:121","prim@char":"1:11888:419","str::matches":"2:12087:2306"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43561:8858","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12049:23857":{"id":"2:12049:23857","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11888:419","self::pattern":"2:11712:8841"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11717:8837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11732:8838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12093:31608":{"id":"2:12093:31608","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11712:8841","`DoubleEndedIterator`":"2:7240:121","prim@char":"1:11888:419","str::rmatch_indices":"2:12096:31609"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43507:8856","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12035:29109":{"id":"2:12035:29109","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11888:419"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43327:8848","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2083":{"id":"0:0:2083","crate_id":0,"name":"fnv","span":{"filename":"lib.rs","begin":[1,0],"end":[367,1]},"visibility":"public","docs":"An implementation of the [Fowler‚ÄìNoll‚ÄìVo hash function][chongo].\n\n## About\n\nThe FNV hash function is a custom `Hasher` implementation that is more\nefficient for smaller hash keys.\n\n[The Rust FAQ states that][faq] while the default `Hasher` implementation,\nSipHash, is good in many cases, it is notably slower than other algorithms\nwith short keys, such as when you have a map of integers to other values.\nIn cases like these, [FNV is demonstrably faster][graphs].\n\nIts disadvantages are that it performs badly on larger inputs, and\nprovides no protection against collision attacks, where a malicious user\ncan craft specific keys designed to slow a hasher down. Thus, it is\nimportant to profile your program to ensure that you are using small hash\nkeys, and be certain that your program could not be exposed to malicious\ninputs (including being a networked server).\n\nThe Rust compiler itself uses FNV, as it is not worried about\ndenial-of-service attacks, and can assume that its inputs are going to be\nsmall‚Äîa perfect use case for FNV.\n\n\n## Using FNV in a `HashMap`\n\nThe `FnvHashMap` type alias is the easiest way to use the standard library‚Äôs\n`HashMap` with FNV.\n\n```rust\nuse fnv::FnvHashMap;\n\nlet mut map = FnvHashMap::default();\nmap.insert(1, \"one\");\nmap.insert(2, \"two\");\n\nmap = FnvHashMap::with_capacity_and_hasher(10, Default::default());\nmap.insert(1, \"one\");\nmap.insert(2, \"two\");\n```\n\nNote, the standard library‚Äôs `HashMap::new` and `HashMap::with_capacity`\nare only implemented for the `RandomState` hasher, so using `Default` to\nget the hasher is the next best option.\n\n## Using FNV in a `HashSet`\n\nSimilarly, `FnvHashSet` is a type alias for the standard library‚Äôs `HashSet`\nwith FNV.\n\n```rust\nuse fnv::FnvHashSet;\n\nlet mut set = FnvHashSet::default();\nset.insert(1);\nset.insert(2);\n\nset = FnvHashSet::with_capacity_and_hasher(10, Default::default());\nset.insert(1);\nset.insert(2);\n```\n\n[chongo]: http://www.isthe.com/chongo/tech/comp/fnv/index.html\n[faq]: https://www.rust-lang.org/en-US/faq.html#why-are-rusts-hashmaps-slow\n[graphs]: https://cglab.ca/~abeinges/blah/hash-rs/","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:10:1652","0:20:1664","0:21:1666","0:24:1670"],"is_stripped":false}}},"b:2:2542-0:10:1652":{"id":"b:2:2542-0:10:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5384:9157":{"id":"5:5384:9157","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7255:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7255:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12056:2385":{"id":"2:12056:2385","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41396:179","prim@char":"1:11888:419","self::pattern":"2:11712:8841"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41394:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11717:8837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11732:8838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2556:128":{"id":"2:2556:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32020:3498","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:12128:31620":{"id":"2:12128:31620","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11673:127","`FromStr`":"2:11672:3481"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41538:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:11672:3481","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11672:3481","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2251-0:10:1652":{"id":"b:2:2251-0:10:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2253:20738"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12137:3160":{"id":"2:12137:3160","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4536:3160"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43665:3161","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12031:31600":{"id":"2:12031:31600","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11894:1397","str::slice_mut_unchecked":"2:12032:31601","crate::ops::Index":"2:2981:3212"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12036:29075":{"id":"2:12036:29075","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11888:419"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43333:8847","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12069:31603":{"id":"2:12069:31603","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11712:8841","str::split":"2:12060:23066","prim@char":"1:11888:419","`DoubleEndedIterator`":"2:7240:121","str::rsplit_terminator":"2:12072:31604"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43407:8861","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5398:32276":{"id":"5:5398:32276","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7255:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7255:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12096:31609":{"id":"2:12096:31609","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11712:8841","`DoubleEndedIterator`":"2:7240:121","prim@char":"1:11888:419","str::match_indices":"2:12093:31608"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43525:8857","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11717:8837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11717:8837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11732:8838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5400:3344":{"id":"5:5400:3344","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7255:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7255:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"17:10527:16585":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:8925:22069":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"11:399:33528":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"6:5900:14089":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"6:6700:14512":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:22425:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:45491:3627":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:42476:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:10652:25914":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:40022:8965":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"18:531:20508":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:7821:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"8:0:2192":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:2929:2348":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:42449:71":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"17:13101:2844":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"5:1454:198":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"6:4875:13437":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"5:7195:3255":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"0:20:1664":{"crate_id":0,"path":["fnv","FnvBuildHasher"],"kind":"typedef"},"2:32056:21997":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"5:7019:3188":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:2911:3194":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:21879:28778":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:44131:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"16:5847:16249":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"5:7280:8884":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"10:0:2194":{"crate_id":10,"path":["adler"],"kind":"module"},"6:4845:13433":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"6:7258:14892":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:10357:2728":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:11783:8865":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:9981:3228":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"2:47214:3601":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:3881:3377":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:2589:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:20922:3299":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"2:2348:182":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"6:541:9936":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:40487:9140":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:9159:8781":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"6:562:9939":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"3:229:210":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:40408:9136":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"16:8090:16307":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"6:4851:13434":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"10:36:33514":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:41631:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:43245:8825":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:10142:16542":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:917:3174":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:10589:16587":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"6:5071:13457":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"11:0:2195":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"2:10244:8830":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"16:6164:33669":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:959:3179":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:44364:8760":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:10692:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"2:44283:211":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"16:5346:16238":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:41831:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:43621:8855":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"6:500:9932":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:4854:3443":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:41309:29788":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:11641:19161":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:13506:20449":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"9:481:15125":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"6:6578:14507":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:5586:2999":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"11:1050:15242":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:10104:2819":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"16:5779:2888":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:9149:8775":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:9592:2682":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:11893:1367":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:8479:2973":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"5:1422:3174":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:4019:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"11:1688:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:11891:1049":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"6:1650:10857":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"6:5843:14046":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"16:6293:16258":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"9:52:2946":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:21332:3575":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"2:1667:1087":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:13499:20448":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"5:0:286":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:11770:19644":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:44084:9316":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"6:5995:14096":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"16:6442:16265":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"16:7711:16298":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:1982:185":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:13219:20421":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"16:4932:15992":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:6907:2721":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"5:6446:2607":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:8843:3005":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:13812:20467":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:1071:3182":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"14:215:15261":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:13777:20464":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:3383:3296":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"18:538:2778":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"6:6057:14101":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:10545:16399":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"5:5642:232":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:3458:3297":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"1:2387:2207":{"crate_id":1,"path":["std","io"],"kind":"module"},"17:10626:16588":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:3931:2635":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:47666:8737":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:43989:8863":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:9566:16388":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:7318:159":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:10691:16591":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:9683:16441":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:4176:3412":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"6:4431:13389":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:242:34589":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:8931:2813":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:420:15294":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"9:325:15180":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"16:6431:16264":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:4328:3407":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:2753:3562":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"16:4445:15865":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:5439:3491":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"17:11037:16400":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"6:4947:13444":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"16:6943:16279":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:10478:16555":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:9876:16489":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:11072:20890":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:7198:134":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"6:6668:10787":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:9803:3299":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:41711:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:6373:3514":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:43210:8805":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:30272:9160":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"0:0:2083":{"crate_id":0,"path":["fnv"],"kind":"module"},"1:4639:3444":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"16:7335:33780":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:5926:206":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"17:11339:2830":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"5:7095:2391":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"16:8025:16304":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"17:12033:19658":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:8147:3322":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:7854:3331":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"6:7443:15052":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"16:6793:16275":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"5:5798:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"18:624:34622":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:41203:155":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"2:9609:2683":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"17:12072:19661":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"6:4439:13390":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"16:6361:16261":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:13121:20413":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"5:1213:3182":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:9157:194":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:22524:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:4681:3396":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:12178:19668":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:20577:30977":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:12512:2693":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:4251:207":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:45367:3590":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:10015:16537":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:6101:2714":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"16:2616:15331":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:9108:34613":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:10865:3497":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"6:7520:13607":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:5067:191":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"16:7488:16290":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:13443:20442":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"5:6598:2658":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"5:3158:3184":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:44080:9314":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:9985:2974":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:43640:8843":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:40367:9134":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:46716:3661":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"16:2830:15340":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:43479:8828":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:3292:3327":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:45844:3645":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:9155:8784":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"11:1071:33531":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"6:1728:10865":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:11615:19159":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"6:4527:13401":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:10516:16550":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"11:828:3176":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:247:34603":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:10569:16553":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"11:859:3178":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:2593:116":{"crate_id":2,"path":["core","default","Default"],"kind":"proc_derive"},"1:3135:22942":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:30864:3023":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"17:10125:16517":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"11:652:2974":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:44100:9318":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"16:3782:15370":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"6:4698:13415":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:10505:16584":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:9218:2794":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"5:4818:204":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:8598:16383":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:40057:8958":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:5179:190":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"16:7103:16283":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:21665:28530":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:11422:19145":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"16:4568:15892":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"6:1532:10846":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"5:1463:3196":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:875:2975":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"5:3622:2607":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:2963:8770":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:2344:3275":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"17:10989:16399":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"11:2087:3182":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"6:1594:10853":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:11210:20894":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"6:7491:13603":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:41445:2390":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:13803:20466":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:30836:183":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"1:11449:3059":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"16:5386:2789":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:10657:3289":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"17:12307:19675":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:11424:9323":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"16:6460:2917":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:30302:28811":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"6:4423:13388":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"6:4688:13414":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:10272:8831":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:13211:20420":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:3449:22738":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:42917:8808":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:4564:3382":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"16:2470:15325":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:9409:16410":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"2:43857:8876":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:43343:2812":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:3234:8769":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:13763:20463":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:975:16425":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"18:609:34643":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:7786:3292":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"5:3775:2607":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:4074:27467":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:6482:3517":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"6:6047:14100":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"6:4377:13383":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:487:16371":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:40424:9137":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:5320:3486":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"17:12646:19698":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:43969:8862":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:39192:198":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"16:3225:15349":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"16:7757:16299":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:39982:28807":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:39216:199":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:2208:3271":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"1:3911:3379":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:13791:20465":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:8256:16356":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:11832:16544":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:8776:3497":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"16:7652:198":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"16:6022:16254":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:11902:19651":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:947:3177":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"6:7544:13611":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:42683:145":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"6:4478:13395":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:46060:3667":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"6:1692:10861":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:11821:16543":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:39970:8963":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"5:3117:2973":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:7275:14893":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:8075:3002":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:2741:2345":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:6296:166":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:11220:16602":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:11520:19152":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"16:6327:2915":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:13041:20409":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:11573:19156":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"16:7697:2934":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:11913:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"17:13461:20444":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"5:3547:2974":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:7509:2723":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:7932:23618":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"5:4207:2973":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:618:3163":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"18:727:2785":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:10823:16394":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"16:6671:15268":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"18:707:8839":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"16:6243:33732":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:41597:2391":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"17:8953:2791":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:21803:3015":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:3680:3365":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"13:0:2190":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:12357:192":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"6:4619:13409":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:13516:20450":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:3079:3214":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:7588:3189":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"11:1561:15247":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"11:821:3175":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:11859:3171":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"6:5974:14094":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"6:4751:13421":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:2749:9148":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"11:1879:3187":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"17:13033:20408":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:8387:3475":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:43579:8859":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:49668:3588":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"17:11891:19650":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:13082:20412":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"16:6376:2916":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:953:3178":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:8918:3141":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:8242:3416":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"5:5485:2646":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"5:6248:2630":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"16:3640:15353":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:8548:16381":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:11391:2843":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:8469:3478":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:9410:1647":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:1062:3181":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:11011:16359":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:43236:8822":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"5:3753:2596":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"6:4732:13419":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:5334:3487":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"17:13145:20415":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:13015:20406":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:45561:3644":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"16:4596:15896":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"16:2905:15343":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:40306:9130":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:3440:3251":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"17:10428:16582":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"11:783:2600":{"crate_id":11,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"16:6254:2908":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:5370:3489":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"17:11532:19153":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:11717:8837":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"6:5022:13452":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:10635:2822":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"5:783:2609":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"6:1555:10849":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:32060:9232":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:46158:28745":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:731:142":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:9028:167":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:11912:1126":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"6:6785:14517":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:9617:16419":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:8730:3494":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:7528:2725":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:9028:16384":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"6:4553:13404":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:46292:3628":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:43184:8807":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"16:154:2585":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"16:6132:16255":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:11060:2823":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:2827:9178":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"11:2198:30680":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:11895:1481":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:9038:219":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:8753:2808":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:2758:3564":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:4406:2993":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:21718:28520":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"5:680:231":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:22458:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:47526:3662":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"6:4629:13410":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"6:595:9944":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:44112:3010":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"11:638:2973":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"18:507:34623":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:4903:3452":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:46866:3595":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:2839:9180":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:47732:8743":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:8047:3293":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"16:4728:15956":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:844:2973":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:2161:9198":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"16:5976:2867":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:3510:2630":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:41462:2974":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"1:1565:2391":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:3933:3381":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"6:4499:13398":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:20770:9198":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"6:7485:13602":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:47686:8739":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"5:5834:9531":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:7693:3238":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"6:5058:13455":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"2:39334:9187":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:2800:9173":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:12483:19687":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:1846:3235":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:44104:9312":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:21900:28648":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:2362:3281":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"17:13419:20439":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:10165:8826":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:41530:193":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"16:4904:15988":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"5:7103:2391":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"6:5947:14091":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:12835:20399":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:10615:16579":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:2696:109":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:12372:19680":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"16:7588:16294":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:9374:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"6:1539:10847":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"16:2357:15320":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:20549:30658":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"9:174:2961":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"18:660:20499":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:7632:29673":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:2470:8974":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:44092:9319":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"16:5920:2861":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"6:4743:13420":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:4920:13441":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"16:6218:16257":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:13469:20445":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:3247:3337":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"6:1709:10863":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"16:5367:15290":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"6:4398:13227":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"6:5785:14081":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:6332:23600":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"17:12496:19688":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:4641:13411":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:2509:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:44164:9331":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:44152:3566":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:2691:2344":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"16:5000:16012":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"16:7509:16292":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:45699:3665":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"6:6008:14098":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"16:4845:15977":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:10822:3238":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"5:7074:2983":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"6:579:9942":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:9696:2814":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"5:7004:2970":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:45968:3605":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"16:2319:15319":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:22293:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:40324:28914":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"5:2189:2982":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:9641:16430":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"16:6474:2918":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"18:755:20503":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:43425:8860":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:9038:34607":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:10039:16497":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:47823:8748":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"16:6390:16262":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"6:4486:13396":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:21827:3370":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:8858:2811":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:8573:16382":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:11585:19157":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:9596:16424":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"11:703:2978":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:11892:312":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:10682:3051":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"5:6097:3709":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"6:5880:14088":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:10735:16594":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:1931:653":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"1:867:2391":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:9188:34596":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"6:6545:9979":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:20984:3572":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"14:40:19141":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:10422:3337":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:9161:8782":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"5:1314:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:9043:3529":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:2843:9181":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:45622:3598":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:926:2978":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:47800:8747":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"16:6854:16277":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"5:3184:3187":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"6:4559:13405":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:8195:16358":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:21966:3371":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:12959:20404":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:5468:2635":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"5:7352:2653":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:10712:3294":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:7838:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"6:7578:15081":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"16:8142:16310":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:3163:8930":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:13181:20418":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:8208:3359":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:10334:2794":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:9184:3234":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"16:8129:16309":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:22326:177":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"17:11924:19652":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"5:2908:31166":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:2869:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:40034:8853":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:21083:3299":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:6538:3520":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"16:7837:16302":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:21945:30260":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"16:8170:16311":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:2774:9170":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"9:352:15142":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"18:644:34623":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:4:1014":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:11721:19643":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:43333:8847":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"5:7028:2630":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:13689:20459":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"5:7066:198":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:44096:9317":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"6:4932:13442":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"5:1716:2596":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"2:7211:2351":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:40670:9116":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"16:6819:16276":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"16:2426:15323":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:562:16372":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:22491:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"2:43665:3161":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"5:3534:2973":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"6:4416:13387":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"16:4969:16005":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"16:2967:15345":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:4260:8935":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"5:1612:2607":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:12902:20401":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:9370:145":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:2522:237":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"16:7767:16300":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:2540:2700":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:8215:3414":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:42421:110":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:7665:3039":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"1:10050:23607":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"5:6696:244":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"5:1366:2974":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:11653:19162":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:11484:9322":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:9350:34594":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"6:5747:14077":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:6721:28367":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:21559:3299":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:41479:3460":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"6:4898:13439":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:13639:20454":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:585:3159":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:10923:2827":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"6:5065:13456":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"5:5908:2635":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"16:2642:15332":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:7263:2350":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"7:0:1543":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:3325:3346":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"16:7293:16284":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:10722:22331":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"16:5418:33904":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:12113:19664":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:11911:1553":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"17:11879:19649":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:10942:2732":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"6:1715:10864":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:1572:2596":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"6:4521:13400":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:8082:3053":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"6:4449:13391":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"16:8072:16306":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:43223:8806":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:41454:2973":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"6:1682:10860":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"15:219:2939":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:41751:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"6:1609:10854":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:8091:3294":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:42695:3475":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"1:5570:2707":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"6:6002:14097":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"11:2076:3181":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:47610:3647":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:20909:3584":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"2:43778:8873":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"16:2862:15341":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"6:4827:13431":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:3983:3384":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:4104:3409":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"6:7503:13605":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"19:0:1031":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:40050:8852":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:7781:3291":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:7697:21997":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:9362:141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:44389:30267":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"16:5998:16253":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:3157:135":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:40693:9118":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:11861:19648":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:10936:2829":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"5:7255:224":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:39280:203":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"6:6814:14519":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"16:2572:15329":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"11:744:2976":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"16:2448:15324":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"3:0:443":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"6:6724:14514":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:10402:16570":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:11904:740":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:41871:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:43265:8824":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:501:2623":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:2898:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:2360:3280":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:40069:8959":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:3677:3366":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:5719:3040":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:30041:3369":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"16:6919:33896":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:43674:8853":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"11:1091:15243":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"16:5616:16241":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:11434:19146":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:8806:3525":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:4377:2670":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"6:4836:13432":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"6:494:9931":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:10130:8833":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:13857:20470":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"11:1866:3185":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:11909:1495":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:8736:186":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"6:4821:13430":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"5:880:2973":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"5:6180:2650":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"17:13053:20410":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:9877:22516":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"2:45990:3611":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:3152:234":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:6917:3002":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:40708:2677":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"16:4327:15795":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:9721:16440":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"16:4702:15954":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:39961:8932":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:2515:133":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"11:359:2594":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"6:506:9933":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:11899:643":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"1:7791:3289":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:11910:789":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"16:2668:15333":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:9275:34601":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"6:7526:13608":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:1895:3249":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"6:5935:14090":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:43327:8848":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"9:388:15127":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:12770:20397":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:9107:3251":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:11091:3529":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"17:12980:20405":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:11193:16601":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"6:5862:14086":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:9178:16387":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:12576:19694":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:45543:3638":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:45681:3659":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:43525:8857":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:20938:3570":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:8907:3041":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:9895:16463":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:7862:3052":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"6:4288:13376":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:386:16370":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:1924:3250":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"17:12461:19686":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:21004:3011":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:5385:3490":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"11:393:33527":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"6:4952:13445":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:10354:16506":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:7572:3158":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"11:97:33515":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"16:5571:16239":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:10203:8827":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:21561:3573":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"7:32:15097":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:13659:20456":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:13842:20469":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:12433:19684":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"16:6307:2911":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:11331:3366":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:10598:16398":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"17:11484:19150":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:47862:8749":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"16:6061:15291":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:10897:16397":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:2706:2989":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"1:4737:2704":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:8141:2812":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"16:6767:16274":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"6:5967:14093":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"14:221:15262":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"16:4510:15882":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:11844:19647":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:13385:20436":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"16:6575:16270":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:1844:3234":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"5:4005:2607":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"6:6553:10783":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:46682:3612":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:7591:3192":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:11600:19158":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"6:7497:13604":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"16:2931:15344":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:9796:16443":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:3644:2391":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:9734:16439":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:10681:16590":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:43375:8826":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:12542:140":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"16:7244:33606":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:11969:19654":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:12331:19677":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"6:0:816":{"crate_id":6,"path":["libc"],"kind":"module"},"11:768:2596":{"crate_id":11,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"17:10080:16540":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:39236:202":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:46014:3660":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:2832:2703":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"6:123:9612":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:3170:3340":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"14:187:15260":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:9523:16422":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:1919:16477":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:13309:20428":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:11556:19155":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:2692:8767":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"11:816:3174":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:10314:3494":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"18:736:20497":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:9557:2794":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:11854:3060":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:8319:3456":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"16:6336:16259":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"16:7743:2935":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:46111:28740":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:21:681":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:11493:15278":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:6977:2709":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:8854:3524":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:2822:9176":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:4183:2992":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:13721:20461":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:39258:201":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:4332:8940":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"17:12403:19682":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:2215:3272":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"6:4667:13413":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:1433:144":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"6:6848:14522":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:8360:16375":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:8955:3044":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"6:5077:13458":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:13865:20471":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:4433:2994":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"14:160:15252":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"15:198:15271":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"11:1847:2630":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:355:3156":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:3317:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"16:2404:15322":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:47072:3629":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"6:4466:13393":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"5:1995:3197":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:13564:20451":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:6674:9128":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:10847:22336":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:1783:3218":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:1561:2973":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:9512:16423":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"11:279:33516":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:21787:2984":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:11901:742":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"6:1700:10862":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:46416:3640":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:9312:16389":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:1821:3228":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"17:13249:20424":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:13024:20407":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:9917:2817":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:1080:3183":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:40315:9131":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:2796:9171":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:11410:19144":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:12308:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:1785:3219":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:42160:8775":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:3355:2635":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"6:4784:13425":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:42031:3027":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:6085:2693":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"16:7317:33910":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:10628:3446":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"17:12419:19683":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:13426:20440":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:43656:8852":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"6:4865:13436":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:30266:8903":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:43507:8856":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:8234:3364":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:8160:3364":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:11898:642":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"1:638:3166":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"5:1432:2977":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"16:2720:15335":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"11:1540:15246":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:43809:8875":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:11461:23644":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"2:2812:9174":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:10761:16392":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"6:4538:13402":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"6:4803:13428":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"5:3163:31388":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:13744:20462":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:2933:16500":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:11544:19154":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"6:4882:1001":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"18:690:20502":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:8838:29675":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"5:5035:2644":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:10857:16396":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:47402:3607":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:5380:2635":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"5:7238:3254":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:7015:27468":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:11468:23515":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:40718:9119":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:4990:23596":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:9653:16456":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"6:4331:13380":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:13332:20431":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:4096:3408":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"5:280:2352":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"18:681:20501":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:10452:16557":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"6:62:9557":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:4386:8941":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"1:7616:2729":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:21952:3372":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"6:5015:13451":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:930:3175":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:40076:8960":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:8496:3480":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:2312:188":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:2614:3332":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"6:6569:9813":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:39372:8940":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"1:11015:3496":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"6:5829:14045":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:21107:3299":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:3169:8929":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:46652:3606":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:10771:8820":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"11:1852:2596":{"crate_id":11,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"5:4167:2635":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:43921:8878":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"16:2742:15336":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"6:1519:10844":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:42705:3029":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:12536:19691":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:22260:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"6:1576:10851":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"11:2060:3180":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:9670:16442":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"6:532:9935":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:4782:30279":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:8286:3395":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"16:6990:16281":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"16:4818:15974":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:11813:16545":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"16:6351:16260":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"6:6706:14513":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:4960:13446":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"16:7467:16288":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:10092:16541":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:42433:28670":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:45391:3626":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:2851:9183":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"13:110:33577":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:7165:9123":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:2469:3299":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:11225:20837":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:8748:3495":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:11355:2834":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"16:4400:15844":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"5:5191:2607":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:2746:106":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:2512:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:25847:3021":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:2922:2346":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:11905:1499":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:47770:8745":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:9098:23626":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"17:9228:34604":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"5:2169:32352":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:45644:3604":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"6:4681:3376":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:2346:3276":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:6188:2706":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:11907:1497":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:11889:1515":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"1:413:165":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"6:4653:13412":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"5:211:2605":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:6151:14130":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:13698:20460":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:10068:16539":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"16:7543:2927":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"5:7209:29795":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:4125:3411":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:6621:23600":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"1:3129:21174":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:9577:16426":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:44108:9313":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"16:55:15288":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"2:41470:2391":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:2805:9177":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:5987:9142":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"5:2087:31382":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:3465:3318":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:888:2976":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:2817:9175":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:3060:3347":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"16:6400:16263":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:45746:3569":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"16:3030:15346":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:45892:3593":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:43144:8814":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:12607:19696":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:20742:3580":{"crate_id":2,"path":["core","core_simd","cast","SimdCastPtr"],"kind":"trait"},"17:12510:19689":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:7644:3169":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:4436:3418":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"15:180:15270":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:901:2630":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"15:0:2198":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:857:2974":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:12293:19674":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:11628:19160":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:12236:19671":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:2738:9145":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"17:9340:16390":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"16:2298:15292":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:12550:19692":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:3995:29223":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:43084:29108":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:11069:16401":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:9405:2329":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"16:6520:16268":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"17:13678:20458":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:922:2977":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:11894:1397":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:1630:588":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"6:4813:13429":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:10721:16558":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"16:4624:15900":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:9098:16385":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:9147:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:41589:2974":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:8670:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:4845:3442":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:45347:3625":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:12522:19690":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:1034:16428":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:2518:238":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"17:9469:16414":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:2242:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"1:7595:3148":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:11319:19143":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:11903:744":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:32147:3024":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"6:4472:13394":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:5717:14017":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:43946:8880":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"5:3124:3185":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:530:2696":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"17:9772:16445":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"16:5944:16251":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:40206:3270":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:2695:225":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:10948:2733":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"5:963:2607":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:8971:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"2:2792:9172":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"6:547:9937":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"5:6294:2607":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:8337:3474":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:45437:3591":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:20579:30973":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:41289:3026":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:2694:226":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:11500:15278":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:2784:3563":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"16:5630:16242":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"17:9534:16421":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:40399:3001":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"16:8256:16314":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:30466:28738":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:41538:210":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"17:13488:20447":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"6:4797:13427":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"18:599:34637":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:40459:3321":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:9961:2973":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"6:4392:13385":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:9959:16490":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:3382:8912":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"16:7596:16295":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:39955:3161":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:2550:2683":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:13651:20455":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:30288:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"17:9826:16437":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:6485:3518":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"0:24:1670":{"crate_id":0,"path":["fnv","FnvHashSet"],"kind":"typedef"},"1:8103:3298":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:41394:181":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"6:4767:13423":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:10010:3322":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"17:3142:16505":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:42674:2331":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:8521:16380":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:10416:3339":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"17:11299:19142":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:9295:30994":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"1:11237:25917":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:10138:3500":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"6:5959:14092":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:9424:16411":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:2856:9184":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"14:165:15253":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:21431:3013":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:6552:2719":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:8825:3523":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:9062:3303":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:45792:3633":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:41581:2973":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"5:1228:3181":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"5:7178:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"11:1126:15244":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"6:4991:13449":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"18:96:20485":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"6:5870:14087":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:7471:23638":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"5:689:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"16:3872:15412":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:41243:3357":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:46446:3646":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:23037:3020":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"5:6608:2660":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"2:39302:2335":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:20869:3577":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"18:614:34634":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:8667:2790":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"5:2905:2448":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:8792:3528":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:4110:2990":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:39341:8916":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"6:5779:14080":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:0:1389":{"crate_id":1,"path":["std"],"kind":"module"},"1:8982:20944":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:40012:8964":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:3142:9186":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:11535:8832":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:47648:3668":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:8960:3054":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:22392:3149":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"11:991:3180":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"6:1614:10855":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"6:4726:13418":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"16:0:2199":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:3875:3378":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:6768:9114":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:40389:9135":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:44076:9311":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"2:40286:9129":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:20594:30978":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"6:4911:13440":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:44334:3707":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"11:757:2630":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"5:3521:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:9120:23513":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"6:4999:13450":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:41911:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"16:7635:16297":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"5:6579:2646":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"6:554:9938":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:3208:3341":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:8389:16376":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:40277:2997":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"5:4399:2638":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:5910:2706":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"5:2906:31177":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:21114:3578":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:46528:3594":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:3995:3387":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:41991:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"6:1657:10858":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:11145:2734":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"6:6024:32971":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"16:5402:2790":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:2206:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"11:1524:15245":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:10840:16395":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"16:5643:16243":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:6133:3045":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:911:2596":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"11:1035:3182":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:8651:2789":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"16:7077:16282":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:10000:21756":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"17:12923:20403":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:39176:200":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:13433:20441":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:6865:26200":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:7846:22945":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:13135:20414":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:10257:16503":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:47706:8741":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:10286:8829":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:3370:8908":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"1:11900:745":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"6:6116:13292":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"16:6321:2913":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"2:40296:2998":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:7670:3038":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"4:0:2191":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"6:1752:10867":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"16:6179:2893":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"6:4609:13408":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:13376:20435":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:2768:9167":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"16:5557:2882":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:5021:23596":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:7259:3460":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"7:79:15104":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:8762:3496":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:41512:3461":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:6369:3172":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:43301:8854":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"9:502:15129":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"5:1404:2975":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:10835:3491":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:11938:112":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"16:6696:16272":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:39114:8771":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"17:12126:19665":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:10316:16499":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"5:6367:2391":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"5:3688:3197":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:47695:8740":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"5:7225:3253":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:11054:3303":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:39075:8928":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"6:4294:13377":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"14:0:2197":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:7808:3290":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"6:1588:10852":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:32020:3498":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"6:6685:14510":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:8948:23619":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:9986:16491":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:11887:936":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"6:4707:13416":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:10416:16581":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:11162:3046":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:8134:3321":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:3782:3367":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"16:8214:16313":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:12282:19673":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:40116:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:361:3157":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:4760:3392":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:9488:16427":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:9380:16409":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:1583:3185":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"5:3129:31379":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:40226:8805":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:47572:3613":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:13399:20437":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:4574:25906":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"17:11502:19151":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:11109:16403":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"11:305:33524":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:11888:419":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:3987:3385":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:41671:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:20596:30975":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:9628:16418":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:7460:16372":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:11726:8839":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"16:5797:2892":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:10052:16518":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"16:2524:15327":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:13316:20429":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"18:582:3023":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:10705:16592":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"17:13453:20443":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:43173:8817":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:11282:19141":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"6:6136:14129":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:8443:16378":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:45662:3610":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"11:840:3177":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:11446:19147":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:12059:19660":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:12597:3203":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:4255:8934":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:7677:3237":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"17:11471:19149":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:8410:3476":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"5:2116:2979":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:13169:20417":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:0:2200":{"crate_id":17,"path":["object"],"kind":"module"},"17:9907:2816":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:7257:21206":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:40268:2996":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"6:5857:14085":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:10000:16536":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"6:6598:14509":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"16:5963:16252":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:7590:3146":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"16:7065:33902":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:20982:3299":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:4007:29221":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:12358:19679":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"6:474:9928":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:5502:3493":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:43792:8874":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"5:6740:2650":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:10670:22301":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"11:119:2590":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"16:2764:15337":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:39365:28950":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"1:2867:210":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"17:11136:16599":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:43611:3320":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:43135:8815":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:41226:3356":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"16:7042:33694":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"11:1839:2973":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:40726:9121":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:14:1659":{"crate_id":2,"path":["core","write"],"kind":"macro"},"5:1042:32381":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"5:4366:2635":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"16:2378:15321":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"18:564:2780":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:554:3143":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"5:3150:3186":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:41791:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:5798:14082":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"6:4980:13448":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:1978:16462":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:13879:20472":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:12295:136":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:11243:22570":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"18:574:34623":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"5:6765:2664":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"6:4509:13399":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:5247:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:11870:22315":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"6:1525:10845":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:8310:16374":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:8226:3406":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:7942:3333":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"16:3749:15361":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"16:7529:2926":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"5:5712:2630":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:635:3165":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:10826:22147":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"17:9839:16436":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"6:6691:14511":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"16:4789:15969":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:10931:2731":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:9478:16429":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:4318:13379":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"18:766:20498":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:2780:9169":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:9322:34593":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"16:7498:16291":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:13367:20434":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"5:1058:31180":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:43935:8879":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"6:4404:13386":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:6409:2718":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:10419:3341":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"2:45413:3631":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"6:5755:14078":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"6:568:9940":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"16:4037:15529":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"6:4790:13426":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:12138:19666":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"5:780:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:20768:29350":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"16:2694:15334":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:2506:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:47721:8742":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"6:4571:13406":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:4383:13384":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:4578:25910":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"6:587:9943":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"16:8180:16312":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:44347:161":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:21116:3011":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:11672:3481":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"6:1908:11010":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:47675:8738":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"6:6587:14508":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:4307:13378":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:2744:8766":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"17:13411:20438":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:12330:28342":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"6:7538:13610":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:43763:8872":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:12388:19681":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:9973:16466":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:10258:8828":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:1747:28641":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:3197:8768":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"6:6016:14099":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"16:7557:2928":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"6:4970:13447":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"5:1351:2973":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"16:6890:2922":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:9151:8774":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:643:3167":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:9813:222":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:12449:19685":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"11:60:33526":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:2847:9182":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:22227:178":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:8909:2812":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:47464:3641":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:11902:743":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:40684:3172":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:5693:3512":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:4042:8765":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"16:7366:16285":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:2788:3565":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"10:44:2945":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"11:2204:33520":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:20536:3023":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:10967:16398":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:12098:19663":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:21854:28808":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:10377:16504":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:11035:3010":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"2:2932:2349":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:7202:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:43561:8858":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"1:8154:3320":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:21443:30661":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"6:5809:14083":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:21978:3374":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:2264:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"6:4546:13403":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"5:1242:3183":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"11:1859:3184":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"16:2337:2853":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"6:6628:10810":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:45459:3597":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:40255:2995":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"16:2502:15326":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:5686:3511":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"11:1009:3181":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"18:521:20504":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:8683:2805":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:43649:8842":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"6:6776:14516":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:1768:610":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:5499:3492":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"17:9866:16457":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:3939:3382":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:11279:8845":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"16:6728:16273":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:9545:16420":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:11308:2736":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:13821:20468":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"16:2786:15338":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"16:8269:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"16:7519:16293":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:11393:3367":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"16:6662:16271":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:10440:16583":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:13194:20419":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:12915:20402":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"16:6717:15267":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"6:4344:13381":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"16:7478:16289":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:44291:195":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:39998:8962":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"16:5724:16246":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:41606:183":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"5:2077:2623":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:10209:3490":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"16:7437:16286":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:47324:3635":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:6800:14518":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"16:8109:16308":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"6:1514:10843":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:43407:8861":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:21916:28800":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:11500:9324":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:40083:8961":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:8260:3445":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:9265:16388":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:7161:9124":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:8979:34587":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"16:7016:33932":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:42498:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"1:8171:3355":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:42458:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"17:12019:19657":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:8427:3477":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"16:6201:16256":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:2317:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"17:3266:16523":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:43884:8877":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:6009:2710":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:42174:8784":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"5:4047:2974":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"6:1736:10866":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"16:5305:16221":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"5:633:31196":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"6:119:9611":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:42898:9304":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:8251:3003":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:676:3168":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"2:40438:9138":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:2211:2665":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"9:421:15128":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:10283:16502":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:13344:20432":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:2985:3213":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"16:6236:2878":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"16:3815:15379":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:46189:28644":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:21088:3571":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"5:4321:245":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:43631:8844":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:3401:3295":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:9138:16386":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:9117:132":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:2151:589":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:12085:19662":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"16:7411:2875":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:8912:107":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"17:10303:16498":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:41345:3359":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:13159:20416":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:9498:2814":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:11737:8836":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:39552:24360":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"17:13625:20453":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:936:3176":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:9003:3056":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:12006:19656":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"5:863:2614":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:41332:3368":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:3168:3339":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"18:719:20496":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"16:4757:15961":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"5:4914:2635":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:4492:13397":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"5:265:2607":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"17:12799:20398":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:44088:9315":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:3973:3383":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:11461:9325":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:20564:30658":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:11195:20897":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"6:5051:13454":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:10712:16593":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:9886:16464":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:10053:8832":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"5:7058:2391":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"0:21:1666":{"crate_id":0,"path":["fnv","FnvHashMap"],"kind":"typedef"},"9:0:2193":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"16:6876:2921":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:6236:206":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"9:234:3475":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"16:3300:15350":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"6:6605:3447":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"6:5773:14079":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:9526:2679":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"17:10885:2826":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"16:6868:2879":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"5:5818:2644":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:11688:2739":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:5528:9132":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:4683:3397":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"6:4459:13392":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:7937:3050":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:45521:3632":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"14:202:8882":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"16:6981:16280":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:41521:9262":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:11712:8841":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:4808:795":{"crate_id":2,"path":["core","iter"],"kind":"module"},"5:1443:2978":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:11090:16402":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:12259:19672":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:9748:2794":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:9822:16450":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:1568:2630":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:13233:20422":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"6:7555:13612":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:20879:9198":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"2:42153:8774":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"16:5708:2886":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:8823:2810":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:9933:2802":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"14:31:15252":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"6:4857:13435":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"6:6755:14515":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:22359:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"6:6110:14128":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"16:3047:15347":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:5764:2708":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"6:653:9991":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"6:488:9930":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:4576:25908":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"6:7509:13606":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:12158:19667":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:1544:2635":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"0:10:1652":{"crate_id":0,"path":["fnv","FnvHasher"],"kind":"struct"},"5:3673:3052":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:7659:3170":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:10462:2729":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:41260:3358":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"16:5104:16044":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"18:113:20486":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"5:7150:2341":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:43956:8881":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"6:6821:14520":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"5:35:2603":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"16:7859:16303":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:40356:9141":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:4414:3417":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"16:5677:16245":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:4642:3417":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:12345:19678":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:1985:184":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:8490:16379":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"16:7626:16296":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:42713:3030":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"11:1144:3183":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:21337:3585":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"2:42167:8783":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"16:6935:16278":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"18:515:20507":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:2981:3212":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"16:6558:16269":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:480:2695":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:40677:29102":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"2:2833:9179":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:12894:20400":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:6585:2399":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"11:1634:2601":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:21862:28793":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"6:6830:14521":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:43357:3322":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"5:5235:8799":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:12501:107":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"17:8420:16377":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:40133:29795":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:10270:16501":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:9381:3292":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"2:3182:31057":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:40338:3000":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:22590:3373":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"16:7029:33946":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:2354:189":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"16:4872:15980":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"16:7803:16301":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:10226:21754":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"16:8156:2937":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:1916:3201":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:8283:16373":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"16:2594:15330":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:7595:9122":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:13324:20430":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:12046:19659":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:4602:8951":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:11265:9278":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"16:5071:16035":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:40196:2671":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:11993:19655":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:9033:218":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:3132:22939":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:21839:29792":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:11732:8838":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"6:5816:14084":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:1756:9209":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"11:2219:2341":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:20729:3579":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:9443:16412":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:10649:16589":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:11168:3501":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:20760:3576":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"9:445:15126":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:1787:16444":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:13667:20457":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:4322:2669":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:39379:8925":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:9453:16413":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:12224:19670":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:12382:8978":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"6:4890:13438":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:1594:3187":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:8784:2973":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"18:80:20484":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:2763:9168":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:9386:2727":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"16:6146:194":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"16:2879:15342":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"16:2546:15328":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:10747:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"18:481:20505":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"5:3088:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:40149:9252":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:4112:3410":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:11163:16600":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"11:675:2977":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:11886:371":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"16:7669:2931":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:40042:3161":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:1637:9105":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:47785:8746":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"18:699:2783":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:13477:20446":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"5:3975:2630":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:43163:8816":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"5:1413:2976":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:6757:3567":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:1577:3184":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"18:671:20500":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:43255:8823":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"16:6544:2919":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:46036:3666":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"5:1197:3180":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:4679:3393":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:6586:217":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:13257:20425":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"16:6506:16267":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:42666:3028":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:22557:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"5:7044:31389":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:9153:8783":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:8893:3513":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:5563:2706":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"6:7532:13609":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:30232:3022":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:4256:3413":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:11249:9276":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:9142:112":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:44273:205":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:12634:19697":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:40473:9139":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"6:1668:10859":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:40699:3346":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:45822:3639":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"16:3446:15351":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:2926:2347":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:40448:9126":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:20990:3574":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:20841:3583":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"2:47747:8744":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:11258:19140":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"6:5032:13453":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"16:535:2865":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"5:7335:2596":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"1:3249:3338":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:40163:3257":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"1:3210:3342":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"18:0:2201":{"crate_id":18,"path":["memchr"],"kind":"module"},"16:7449:16287":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"5:2916:31165":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"6:7230:9889":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:40347:9133":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"5:2636:31346":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"6:7568:15080":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:40376:9125":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:4508:3435":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:45592:3592":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:1589:3186":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:11906:1496":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1:8870:3527":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"11:452:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:10647:22523":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"6:1546:10848":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:7571:3299":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:8166:3363":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:5354:3488":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:43741:8871":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"5:815:2612":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"5:1382:2391":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:46212:28815":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:4761:389":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"16:5594:16240":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:11372:2836":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"11:2192:33523":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"5:7162:2342":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:10092:8819":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"16:5693:2883":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:20804:3582":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"2:43153:8818":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:9624:2688":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:44326:3706":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:40121:3256":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:46606:3600":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:40102:8957":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"6:573:9941":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"16:3585:15352":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:42403:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:11027:22307":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:13612:20452":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"16:4540:15888":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"6:526:9934":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"16:6535:2588":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"1:8124:2995":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:8788:2809":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:10580:16586":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"16:7572:33931":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"11:1843:2391":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:21771:3014":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"6:4773:13424":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"5:2407:31173":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"13:226:2943":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:8968:16283":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"6:7252:14891":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:42913:28148":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:0:497":{"crate_id":2,"path":["core"],"kind":"module"},"2:8249:3463":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:12592:19695":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:40246:3210":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:3925:3380":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:2245:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"16:3899:15415":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:11003:3495":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:8356:8837":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:9081:3561":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"16:7683:2933":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"5:4137:2635":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"5:3276:2596":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"16:8047:16305":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"18:636:34638":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"6:4757:13422":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:13240:20423":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"11:665:2391":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"16:5886:16250":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"16:5741:16247":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:1947:16438":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:8264:3447":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"16:6488:16266":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"18:491:34625":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:2684:220":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"17:10465:16556":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:41380:3361":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:1733:9210":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:9068:34588":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"6:1622:10856":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:8838:3526":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"16:6904:2923":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"5:7269:8883":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:11908:1498":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"1:11837:22324":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"2:8250:3462":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:12563:19693":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"6:4941:13443":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"18:652:34623":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"16:5811:16248":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:43315:8851":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:2372:3286":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"17:11946:19653":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:13356:20433":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:10702:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"5:1078:32379":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:10026:16538":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:8718:2807":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"11:867:3179":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"5:7013:2391":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:11372:3365":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:9853:16488":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:2163:9199":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"2:2701:228":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"17:11459:19148":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"5:2912:31167":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"16:3063:15348":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"11:731:2975":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:10743:16391":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:11785:19645":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"16:4480:15876":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:45938:3599":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:5556:206":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:2603:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"17:12318:19676":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:8485:3479":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"1:3615:3362":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:10804:8821":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"6:482:9929":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:1821:3200":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:8800:2391":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"11:2212:33521":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"11:326:2592":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:10670:16580":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:44376:8758":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"17:10555:16551":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"6:5988:14095":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:41951:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"11:1873:3186":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"5:7036:2618":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:1048:3180":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:11234:19139":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"6:6651:10784":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"6:1564:10850":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:7798:3051":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:42393:28643":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:30360:28804":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"5:5239:8800":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:10798:16393":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"14:7:15252":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"5:4336:2638":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:46370:3634":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:42658:2332":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:8220:3415":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:4141:2991":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:2574:3323":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:39358:16313":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"6:1721:3403":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"5:1981:3052":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:11800:19646":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"16:5032:16020":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:13265:20426":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:39161:9185":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:12622:2823":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:8675:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"16:2808:15339":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:43461:8830":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:9946:16465":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"12:0:2196":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"18:590:30252":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:2477:3330":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:12194:19669":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:9148:34600":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:10660:2823":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"2:7240:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:13066:20411":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"6:4590:13407":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"6:4719:13417":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:4371:13382":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:8632:16357":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:10491:16554":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"16:5655:16244":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:13292:20427":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:41368:3360":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":26}