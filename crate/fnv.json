{"root":"0:0:2241","crate_version":"1.0.7","includes_private":false,"index":{"0:10:1812":{"id":"0:10:1812","crate_id":0,"name":"FnvHasher","span":{"filename":"lib.rs","begin":[89,0],"end":[89,26]},"visibility":"public","docs":"An implementation of the Fowler‚ÄìNoll‚ÄìVo hash function.\n\nSee the [crate documentation](index.html) for more details.","links":{},"attrs":["#[allow(missing_copy_implementations)]"],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:15","a:2:32928:2513-0:10:1812","a:2:42553:3353-0:10:1812","a:2:2966:254-0:10:1812","a:2:42554:3648-0:10:1812","a:2:32846:244-0:10:1812","b:2:2444-0:10:1812","b:2:2748-0:10:1812","b:2:2754-0:10:1812","b:2:3560-0:10:1812","b:2:2759-0:10:1812","b:2:2441-0:10:1812","b:2:2744-0:10:1812","0:13","0:17"]}}},"2:12861:23294":{"id":"2:12861:23294","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10643:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10643:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12936:30154":{"id":"2:12936:30154","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2441-0:10:1812":{"id":"b:2:2441-0:10:1812","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32847:2512","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2435:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1812","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2443:2455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3560-0:10:1812":{"id":"b:2:3560-0:10:1812","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32847:2512","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3558:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1812","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3562:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12971:22972":{"id":"2:12971:22972","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12869:23323":{"id":"2:12869:23323","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:12870:23324"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42425:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12973:24494":{"id":"2:12973:24494","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:910:34308"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2744-0:10:1812":{"id":"b:2:2744-0:10:1812","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1812","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2747:2548"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12927:30151":{"id":"2:12927:30151","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12541:9020","`DoubleEndedIterator`":"2:7934:128","prim@char":"1:12106:458","str::matches":"2:12924:2470"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44547:9038","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:9016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12546:9016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12561:9017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12867:23319":{"id":"2:12867:23319","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_checked":"2:12869:23323","str::split_at_mut":"2:12868:23320"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12880:21693":{"id":"2:12880:21693","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12106:458","self::pattern":"2:12541:9020"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:9016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12975:30165":{"id":"2:12975:30165","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4739:30165"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44624:9031","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12970:22971":{"id":"2:12970:22971","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12845:883":{"id":"2:12845:883","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12106:458"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42553:3353-0:10:1812":{"id":"a:2:42553:3353-0:10:1812","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42553:3353","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1812","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12846:2555":{"id":"2:12846:2555","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2758:1631":{"id":"2:2758:1631","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42572:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2728:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12921:23336":{"id":"2:12921:23336","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42425:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:9016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12546:9016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12561:9017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2750:753":{"id":"2:2750:753","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5537:30854":{"id":"5:5537:30854","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:2517","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:281:2517","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5553:30858":{"id":"5:5553:30858","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:281:2517","`String`":"5:7544:250"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:2517","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7544:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2966:254-0:10:1812":{"id":"a:2:2966:254-0:10:1812","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2966:254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1812","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12847:30142":{"id":"2:12847:30142","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5554:3530":{"id":"5:5554:3530","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7544:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7544:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2444-0:10:1812":{"id":"b:2:2444-0:10:1812","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32847:2512","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2438:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1812","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2446:21855"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12878:30148":{"id":"2:12878:30148","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44589:9034","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12915:23333":{"id":"2:12915:23333","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12106:458","str::splitn":"2:12912:23331","self::pattern":"2:12541:9020"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44447:9007","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:9016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12546:9016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12561:9017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2762:135":{"id":"2:2762:135","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32776:3680","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:12944:30159":{"id":"2:12944:30159","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12106:458","self::pattern":"2:12541:9020"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:9016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12546:9016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12566:9015","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5536":{"id":"5:5536","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5537:30854","5:5538:9347","5:5541:30855","5:5544:30856","5:5552:30857","5:5553:30858","5:5554:3530","5:5555:22968","5:5556:22969"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12900:23327":{"id":"2:12900:23327","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12106:458","self::pattern":"2:12541:9020"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12357:9011","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:9016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12854:30145":{"id":"2:12854:30145","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12924:2470":{"id":"2:12924:2470","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12541:9020","`DoubleEndedIterator`":"2:7934:128","prim@char":"1:12106:458","str::rmatches":"2:12927:30151"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44529:9037","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:9016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12883:23337":{"id":"2:12883:23337","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12106:458","self::pattern":"2:12541:9020"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:9016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12968:24490":{"id":"2:12968:24490","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40377:23274","Self::is_ascii":"2:12967:22966"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42425:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40377:23274","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12879:28269":{"id":"2:12879:28269","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44617:9021","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12959:30162":{"id":"2:12959:30162","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12106:458","self::pattern":"2:12541:9020"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:9016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12947:30160":{"id":"2:12947:30160","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12106:458","self::pattern":"2:12541:9020"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:9016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2759-0:10:1812":{"id":"b:2:2759-0:10:1812","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2728:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1812","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2762:135","2:2763:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:17":{"id":"0:17","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[108,0],"end":[125,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["write_str","write_i128","write_i16","write_u128","write_u16","write_isize","write_i32","write_usize","write_u32","write_length_prefix","write_i64","write_i8","write_u64","write_u8"],"trait":{"name":"Hasher","id":"2:10211:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1812","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:18:1818","0:19:1819"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12943:30158":{"id":"2:12943:30158","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5555:22968":{"id":"5:5555:22968","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12970:22971"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7544:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12942:30157":{"id":"2:12942:30157","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12848:30143":{"id":"2:12848:30143","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12940:30156":{"id":"2:12940:30156","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2443:2455":{"id":"2:2443:2455","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5541:30855":{"id":"5:5541:30855","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7544:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7544:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:9016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12856:23296":{"id":"2:12856:23296","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12123:1653"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12865:30146":{"id":"2:12865:30146","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12112:1548","str::slice_mut_unchecked":"2:12866:30147","crate::ops::Index":"2:40008:3392"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12855:340":{"id":"2:12855:340","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12856:23296","`u8`":"1:12123:1653"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42554:3648-0:10:1812":{"id":"a:2:42554:3648-0:10:1812","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42554:3648","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1812","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5552:30857":{"id":"5:5552:30857","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7544:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7544:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12974:24495":{"id":"2:12974:24495","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:910:34308"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12912:23331":{"id":"2:12912:23331","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12106:458","self::pattern":"2:12541:9020","str::rsplitn":"2:12915:23333"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44429:9009","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:9016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12877:26683":{"id":"2:12877:26683","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44579:3506","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12844":{"id":"2:12844","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12845:883","2:12846:2555","2:12847:30142","2:12848:30143","2:12850:30144","2:12853:23275","2:12854:30145","2:12855:340","2:12856:23296","2:12857:21327","2:12859:21332","2:12861:23294","2:12863:23295","2:12865:30146","2:12866:30147","2:12867:23319","2:12868:23320","2:12869:23323","2:12870:23324","2:12872:28268","2:12873:28123","2:12874:1820","2:12875:28080","2:12876:28235","2:12877:26683","2:12878:30148","2:12879:28269","2:12880:21693","2:12883:23337","2:12886:23338","2:12889:2595","2:12893:2554","2:12897:23325","2:12900:23327","2:12903:23329","2:12906:30149","2:12909:30150","2:12912:23331","2:12915:23333","2:12918:23335","2:12921:23336","2:12924:2470","2:12927:30151","2:12930:30152","2:12933:30153","2:12936:30154","2:12938:30155","2:12940:30156","2:12942:30157","2:12943:30158","2:12944:30159","2:12947:30160","2:12950:21878","2:12953:23339","2:12956:30161","2:12959:30162","2:12962:30163","2:12965:30164","2:12967:22966","2:12968:24490","2:12969:22970","2:12970:22971","2:12971:22972","2:12972:24493","2:12973:24494","2:12974:24495","2:12975:30165","2:12977:3340","2:12978:30166"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12863:23295":{"id":"2:12863:23295","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10643:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10643:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:18:1818":{"id":"0:18:1818","crate_id":0,"name":"finish","span":{"filename":"lib.rs","begin":[110,4],"end":[112,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12850:30144":{"id":"2:12850:30144","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:12848:30143"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:15":{"id":"0:15","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[99,0],"end":[106,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1812","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:16:1816"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2754-0:10:1812":{"id":"b:2:2754-0:10:1812","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2728:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2724:265","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1812","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2757:135","2:2758:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5556:22969":{"id":"5:5556:22969","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12971:22972"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7544:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12906:30149":{"id":"2:12906:30149","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12541:9020","str::split":"2:12897:23325","prim@char":"1:12106:458","`DoubleEndedIterator`":"2:7934:128","str::rsplit_terminator":"2:12909:30150"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44375:9040","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:9016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12893:2554":{"id":"2:12893:2554","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42427:198","prim@char":"1:12106:458","self::pattern":"2:12541:9020"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42425:201","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:9016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12546:9016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12561:9017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12870:23324":{"id":"2:12870:23324","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-L√∂f\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:12869:23323"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42425:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2747:2548":{"id":"2:2747:2548","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2721:142"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12876:28235":{"id":"2:12876:28235","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12875:28080"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44608:9022","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:19:1819":{"id":"0:19:1819","crate_id":0,"name":"write","span":{"filename":"lib.rs","begin":[115,4],"end":[124,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["bytes",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:20:1824":{"id":"0:20:1824","crate_id":0,"name":"FnvBuildHasher","span":{"filename":"lib.rs","begin":[128,0],"end":[128,56]},"visibility":"public","docs":"A builder for default FNV hashers.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"std::hash::BuildHasherDefault","id":"2:10251:1807","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"FnvHasher","id":"0:10:1812","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:0:2241":{"id":"0:0:2241","crate_id":0,"name":"fnv","span":{"filename":"lib.rs","begin":[1,0],"end":[367,1]},"visibility":"public","docs":"An implementation of the [Fowler‚ÄìNoll‚ÄìVo hash function][chongo].\n\n## About\n\nThe FNV hash function is a custom `Hasher` implementation that is more\nefficient for smaller hash keys.\n\n[The Rust FAQ states that][faq] while the default `Hasher` implementation,\nSipHash, is good in many cases, it is notably slower than other algorithms\nwith short keys, such as when you have a map of integers to other values.\nIn cases like these, [FNV is demonstrably faster][graphs].\n\nIts disadvantages are that it performs badly on larger inputs, and\nprovides no protection against collision attacks, where a malicious user\ncan craft specific keys designed to slow a hasher down. Thus, it is\nimportant to profile your program to ensure that you are using small hash\nkeys, and be certain that your program could not be exposed to malicious\ninputs (including being a networked server).\n\nThe Rust compiler itself uses FNV, as it is not worried about\ndenial-of-service attacks, and can assume that its inputs are going to be\nsmall‚Äîa perfect use case for FNV.\n\n\n## Using FNV in a `HashMap`\n\nThe `FnvHashMap` type alias is the easiest way to use the standard library‚Äôs\n`HashMap` with FNV.\n\n```rust\nuse fnv::FnvHashMap;\n\nlet mut map = FnvHashMap::default();\nmap.insert(1, \"one\");\nmap.insert(2, \"two\");\n\nmap = FnvHashMap::with_capacity_and_hasher(10, Default::default());\nmap.insert(1, \"one\");\nmap.insert(2, \"two\");\n```\n\nNote, the standard library‚Äôs `HashMap::new` and `HashMap::with_capacity`\nare only implemented for the `RandomState` hasher, so using `Default` to\nget the hasher is the next best option.\n\n## Using FNV in a `HashSet`\n\nSimilarly, `FnvHashSet` is a type alias for the standard library‚Äôs `HashSet`\nwith FNV.\n\n```rust\nuse fnv::FnvHashSet;\n\nlet mut set = FnvHashSet::default();\nset.insert(1);\nset.insert(2);\n\nset = FnvHashSet::with_capacity_and_hasher(10, Default::default());\nset.insert(1);\nset.insert(2);\n```\n\n[chongo]: http://www.isthe.com/chongo/tech/comp/fnv/index.html\n[faq]: https://www.rust-lang.org/en-US/faq.html#why-are-rusts-hashmaps-slow\n[graphs]: https://cglab.ca/~abeinges/blah/hash-rs/","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:10:1812","0:20:1824","0:21:1826","0:24:1830"],"is_stripped":false}}},"2:12874:1820":{"id":"2:12874:1820","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44311:2987","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2757:135":{"id":"2:2757:135","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2728:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"2:3562:1644":{"id":"2:3562:1644","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:40190:9085","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12930:30152":{"id":"2:12930:30152","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12541:9020","`DoubleEndedIterator`":"2:7934:128","prim@char":"1:12106:458","str::rmatch_indices":"2:12933:30153"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44475:9035","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:9016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12868:23320":{"id":"2:12868:23320","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:12867:23319","str::split_at_mut_checked":"2:12870:23324"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12950:21878":{"id":"2:12950:21878","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12106:458","self::pattern":"2:12541:9020"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42425:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:9016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12965:30164":{"id":"2:12965:30164","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12502:134","`FromStr`":"2:12501:3666"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42572:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12501:3666","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12501:3666","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12956:30161":{"id":"2:12956:30161","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12106:458","self::pattern":"2:12541:9020"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:9016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12546:9016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12561:9017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32928:2513-0:10:1812":{"id":"a:2:32928:2513-0:10:1812","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32928:2513","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1812","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:13":{"id":"0:13","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[91,0],"end":[97,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2795:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1812","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:14:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12918:23335":{"id":"2:12918:23335","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42425:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:9016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12953:23339":{"id":"2:12953:23339","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12106:458","self::pattern":"2:12541:9020"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42425:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:9016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12546:9016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12561:9017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12897:23325":{"id":"2:12897:23325","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12541:9020","`DoubleEndedIterator`":"2:7934:128","prim@char":"1:12106:458","str::split_whitespace":"2:12875:28080","str::rsplit":"2:12903:23329"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44325:3508","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:9016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12962:30163":{"id":"2:12962:30163","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12106:458","self::pattern":"2:12541:9020"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:9016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12546:9016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12561:9017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:21:1826":{"id":"0:21:1826","crate_id":0,"name":"FnvHashMap","span":{"filename":"lib.rs","begin":[132,0],"end":[132,58]},"visibility":"public","docs":"A `HashMap` using a default FNV hasher.","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"std::collections::HashMap","id":"1:723:151","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"resolved_path":{"name":"FnvBuildHasher","id":"0:20:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"2:12972:24493":{"id":"2:12972:24493","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:910:34308"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12886:23338":{"id":"2:12886:23338","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12106:458","self::pattern":"2:12541:9020"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:9016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12546:9016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12561:9017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12933:30153":{"id":"2:12933:30153","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12541:9020","`DoubleEndedIterator`":"2:7934:128","prim@char":"1:12106:458","str::match_indices":"2:12930:30152"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44493:9036","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:9016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12546:9016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12561:9017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32846:244-0:10:1812":{"id":"a:2:32846:244-0:10:1812","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32846:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1812","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12978:30166":{"id":"2:12978:30166","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4737:30166"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44642:9032","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12909:30150":{"id":"2:12909:30150","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12541:9020","str::split":"2:12897:23325","prim@char":"1:12106:458","str::split_terminator":"2:12906:30149"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44393:9039","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:9016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12546:9016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12561:9017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:24:1830":{"id":"0:24:1830","crate_id":0,"name":"FnvHashSet","span":{"filename":"lib.rs","begin":[136,0],"end":[136,52]},"visibility":"public","docs":"A `HashSet` using a default FNV hasher.","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"std::collections::HashSet","id":"1:1446:153","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"FnvBuildHasher","id":"0:20:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"0:14:60":{"id":"0:14:60","crate_id":0,"name":"default","span":{"filename":"lib.rs","begin":[94,4],"end":[96,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"FnvHasher","id":"0:10:1812","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12903:23329":{"id":"2:12903:23329","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12541:9020","`DoubleEndedIterator`":"2:7934:128","prim@char":"1:12106:458","str::split":"2:12897:23325"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44343:9005","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:9016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12546:9016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12561:9017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12967:22966":{"id":"2:12967:22966","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12969:22970":{"id":"2:12969:22970","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5538:9347":{"id":"5:5538:9347","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7544:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7544:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:9016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2748-0:10:1812":{"id":"b:2:2748-0:10:1812","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1812","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2750:753"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12875:28080":{"id":"2:12875:28080","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12876:28235"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44599:9023","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12853:23275":{"id":"2:12853:23275","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12096:9024"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12889:2595":{"id":"2:12889:2595","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42427:198","prim@char":"1:12106:458","self::pattern":"2:12541:9020"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42425:201","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:9016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2763:1629":{"id":"2:2763:1629","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:42572:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2728:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5544:30856":{"id":"5:5544:30856","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7544:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7544:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12872:28268":{"id":"2:12872:28268","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12106:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44295:9027","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12859:21332":{"id":"2:12859:21332","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42427:198"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42425:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10643:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10643:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2446:21855":{"id":"2:2446:21855","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12938:30155":{"id":"2:12938:30155","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12857:21327":{"id":"2:12857:21327","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42427:198"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42425:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10643:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10643:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12977:3340":{"id":"2:12977:3340","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4740:3340"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44633:3341","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12873:28123":{"id":"2:12873:28123","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12106:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44301:9026","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:16:1816":{"id":"0:16:1816","crate_id":0,"name":"with_key","span":{"filename":"lib.rs","begin":[103,4],"end":[105,5]},"visibility":"public","docs":"Create an FNV hasher starting with a state corresponding\nto the hash `key`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["key",{"primitive":"u64"}]],"output":{"resolved_path":{"name":"FnvHasher","id":"0:10:1812","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12866:30147":{"id":"2:12866:30147","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12112:1548","crate::ops::IndexMut":"2:3222:3393","str::slice_unchecked":"2:12865:30146"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"16:2596:15640":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:2721:142":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"17:12972:16679":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:12459:2976":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"2:6587:2847":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"2:11631:9000":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"2:39343:9374":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"12:0:2360":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:46384:3796":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:4703:22864":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"6:1596:11037":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:12290:16920":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"6:6047:14390":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"6:6666:10985":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:11113:16733":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:46670:3830":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"5:5651:2811":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:21547:3481":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:1900:9401":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:10006:8961":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"16:5088:16347":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:42179:3542":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:4810:3583":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"6:4764:13676":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:12572:16943":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"17:12052:16845":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:11364:2904":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"2:40151:2503":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"16:7792:16613":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"5:281:2517":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"16:6467:16578":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"18:590:28159":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"11:1142:15546":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:645:3347":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:44475:9035":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:21323:27728":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:43435:28152":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:34847:9368":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:34328:9364":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:44529:9037":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"5:6845:2811":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:47031:3832":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:22277:3879":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"1:5447:3671":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:12555:9018":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"6:4947:13698":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"6:4824:13683":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:12112:1548":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1:12118:807":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:3584:16864":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:31620:3198":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"16:2406:15632":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:7987:2515":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:12784:3000":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:13441:3371":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"17:14251:20156":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:45305:3885":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:14662:20878":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"5:3738:3228":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:11412:16769":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:13676:16886":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:15519:20933":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:14208:20153":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"16:7554:3100":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:30990:3197":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"16:7102:16595":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"16:8294:135":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"5:5993:2808":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:15356:20925":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:7935:3472":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:4195:26638":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"18:644:33399":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:41078:3390":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:43405:3165":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:8355:3376":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:44705:9050":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"11:123:2759":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:4928:16951":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"2:42213:3544":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"6:4556:13658":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:45064:9519":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:7859:9312":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:7610:13881":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"6:501:10133":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"5:3594:3148":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"16:5403:2959":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:21284:3198":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"18:699:2953":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:46514:3803":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:11550:3552":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"6:5928:14384":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"18:609:33419":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:12306:9523":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"6:7651:13887":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"10:0:2358":{"crate_id":10,"path":["adler"],"kind":"module"},"18:548:150":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"16:3764:15671":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"16:4613:16208":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:10111:26959":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"6:1501:11026":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:3014:3738":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"6:6927:14820":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"6:1674:11043":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"5:5345:2772":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"5:2973:29897":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:47577:3765":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:41147:9321":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"5:3581:180":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:43451:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:1885:3413":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"5:3217:3368":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"19:0:1142":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"6:6059:14391":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"6:4535:13655":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:11014:16735":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:2032:205":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:11523:2973":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:1054:3363":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:21953:3481":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"2:45241:147":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"5:4366:271":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:26433:273":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"11:2469:2813":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"2:46532:3809":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:7611:3180":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:45262:214":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:12930:16717":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:11168:16761":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"17:15990:21098":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"16:6499:3092":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:38764:9373":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:13976:20139":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:22824:28132":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:16170:19621":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"2:12246:9524":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"16:7041:32570":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:14001:20141":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"5:1315:3365":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"16:8134:16621":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:42404:3547":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:12055:21958":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"17:14887:20887":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:15507:20932":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"6:4523:13653":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:48657:8916":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:43395:28262":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:13463:19633":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:12758:16713":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:12202:16926":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"6:4841:13685":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:44311:2987":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"16:7736:16611":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"5:7432:2509":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:8307:3541":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:14324:20161":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:13648:20120":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:9985:22589":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"5:266:2772":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:6691:14808":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:44168:8986":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"5:5155:2808":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:41629:3696":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:46563:3757":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:13285:19620":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"11:1160:3365":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:23800:190":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"17:15367:20926":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:15689:20946":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"6:6012:14389":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:10265:112":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"1:3346:3524":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:12357:9011":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:42493:3149":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:11085:9007":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:7206:26633":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:11173:159":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"16:0:2363":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:45040:9512":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"16:6361:16572":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:14385:20165":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:11429:21987":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:11693:15587":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:14057:20144":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:12255:16927":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:11439:16790":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:12366:16932":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:3388:261":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"14:187:15563":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:21321:27743":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:15535:20935":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:13273:19619":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"16:7694:3105":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:2504:208":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:44742:9052":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"6:1691:11045":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:3041:9375":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"2:48666:8917":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:12797:3002":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"6:475:10129":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:8928:3712":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:41405:3507":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:2434:3462":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"6:1703:3589":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"11:774:3150":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"16:5612:16553":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:5682:2798":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"18:707:9018":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"16:2864:15651":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:40204:9093":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"5:2474:29752":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:9169:241":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"6:6898:14818":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:1590:3366":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:13869:20131":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"5:1424:3148":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:42425:201":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:6877:3743":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"6:4401:13641":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:5819:3694":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:15321:20921":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:42938:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"6:5111:13715":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"2:45056:9520":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:8277:2987":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:12541:9020":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:2268:3453":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:13121:19615":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"5:5005:2798":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:4998:13703":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"6:4776:13677":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:15212:20910":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:15480:20930":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"18:719:21135":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:42899:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:9962:141":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"16:7067:32398":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"11:844:3358":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:12113:1634":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:12072:3236":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"6:5867:14378":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:11485:16797":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:9918:16701":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:3187:138":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:12501:3666":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:15493:20931":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"16:7269:32649":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:40882:9130":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"17:12127:16898":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"16:7503:16602":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:9139:3232":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:22857:3560":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"6:6682:10013":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:14904:20876":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"16:6968:16592":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:10788:3148":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:9054:3321":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:11679:26934":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"17:15253:20914":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:40778:3341":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:1914:28286":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"5:7277:3145":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"16:2321:15629":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"18:507:33399":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:3222:3393":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:14470:20171":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:7650:2893":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"10:36:32192":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:4629:3171":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:893:2792":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"6:5829:14313":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:42501:2559":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"6:7645:13886":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:12117:702":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:2675:3481":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:33721:9360":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:10618:33391":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:11369:16776":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"6:1604:11038":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:7604:13880":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"6:119:9811":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"18:727:2955":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"6:4783:13678":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:5461:3672":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:22779:28266":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:7714:3338":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:10455:2859":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:42555:9463":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:12129:1708":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:2718:160":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:44128:8993":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:40008:3392":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"6:6813:14813":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:10051:2960":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"6:4610:13664":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:4573:2840":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"11:1923:3369":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"17:15374:20927":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"6:1514:11028":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"6:6764:11155":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:12140:16897":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:12548:16938":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"17:595:16694":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:11527:2906":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:44375:9040":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:10716:16707":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"13:110:32262":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:46985:3825":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:8605:3663":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"17:11590:16795":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"1:8546:3661":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:40107:221":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:39922:9096":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"11:837:3357":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:3557:26902":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"17:11657:16831":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"2:9944:3429":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"6:6263:14430":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"5:1486:3151":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:12432:16941":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"6:1718:11048":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:8344:3545":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"0:21:1826":{"crate_id":0,"path":["fnv","FnvHashMap"],"kind":"type_alias"},"17:10608:16706":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"6:489:10131":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:22650:3191":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:13254:3016":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:939:3359":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:8227:3476":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"11:2124:3362":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:2492:2371":{"crate_id":1,"path":["std","io"],"kind":"module"},"16:3797:15680":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:15337:20923":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"16:6268:32641":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:12220:16715":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"16:5939:3034":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:44910:9059":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:40875:9031":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:10522:2899":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"17:13832:20129":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:13322:19623":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:9084:26945":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"6:596:10145":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"5:5878:2792":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:22845:3557":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:1802:9291":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"16:5419:2960":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:14497:20172":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:2197:16771":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"6:6248:14429":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:40908:9133":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"17:401:16692":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"16:536:3038":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:11449:16822":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:10701:22882":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"17:10471:33382":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:10988:16737":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:43707:3204":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"5:903:3148":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"16:7568:3101":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:10726:33372":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"11:1896:2813":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"1:10417:2898":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"6:5891:14380":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"16:7768:3109":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:15003:20892":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:16134:21109":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"0:10:1812":{"crate_id":0,"path":["fnv","FnvHasher"],"kind":"struct"},"7:0:1698":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:3029:9359":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:21306:27733":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"2:2110:8949":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:3460:16846":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:3251:16841":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"16:6171:213":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"16:6742:15573":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"5:7294:3370":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:13504:19636":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:8523:3660":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"11:1910:3367":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:10925:3215":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"5:7356:3159":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:21549:3746":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"6:4388:13640":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:10957:9012":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:12110:339":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:46492:3797":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:47499:3759":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:12324:16930":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:3172:3378":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:47417:3811":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:32812:22314":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:12322:9525":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:10423:2853":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"6:7639:13885":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"6:1558:11033":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:12356:16931":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"6:569:10141":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:11444:21966":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:10896:16725":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"16:6844:16589":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:8302:3549":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:2035:204":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"6:6086:14394":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"13:0:2354":{"crate_id":13,"path":["std_detect"],"kind":"module"},"17:14439:20169":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"5:6118:2798":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"15:327:3113":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:7802:3351":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:12077:3352":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:0:2364":{"crate_id":17,"path":["object"],"kind":"module"},"6:4698:13671":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:44068:28621":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:9031:3181":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"6:4854:13687":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:7759:2899":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"18:80:21123":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"6:5955:14342":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:38654:9371":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:22597:28072":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"16:3461:15661":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"17:15184:20907":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"11:1007:3362":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:7892:143":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:10355:136":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"1:9043:3217":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"6:1496:11025":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:3159:124":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"6:4884:13691":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:11779:2992":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:2351:9390":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"2:40894:9131":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"17:13787:20127":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"16:6352:3089":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:9730:16696":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"16:5905:16563":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:14921:20889":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:42326:28099":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:12387:16934":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"16:6226:16569":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:40065:219":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"11:1051:3364":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:5853:9322":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"6:7633:13884":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:7948:137":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"17:12345:16921":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"17:12244:16894":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:6676:2888":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:13336:114":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:41021:2841":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:10422:16703":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:6582:28302":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"2:12612:9044":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:12082:9480":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"5:4411:2798":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"5:6014:9731":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:23060:193":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"6:4496:13650":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:7053:25205":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:3267:3526":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:4217:3594":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:15546:20936":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"16:2428:15633":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:23242:195":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:44220:9001":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:504:2789":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"11:1891:2792":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"11:1728:153":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"16:6560:2757":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"2:34501:9365":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:7787:3350":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:42485:3148":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"5:6969:270":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:40041:217":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"17:15049:20896":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:4691:3568":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:7096:2891":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:30759:3555":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:10000:8963":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"6:7365:15192":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"5:2703:29750":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"16:5017:16324":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:10746:137":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"5:1455:2559":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:15645:20942":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:42385:3546":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"6:5885:14379":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:12410:16935":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:40946:3438":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:9142:9016":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:12128:858":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"5:7326:29891":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:9179:159":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"17:14282:20158":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"6:6781:11153":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:13218:3007":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:14843:20885":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"6:1537:11031":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"18:574:33399":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"14:40:19616":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:32816:16626":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"16:7391:16598":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"9:177:3136":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:15329:20922":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:21352:27737":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"17:10852:16723":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:2271:2835":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"5:886:2779":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:22795:28156":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"9:486:15426":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"6:4351:13637":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:3903:3553":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"5:6606:2559":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:4449:3593":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"16:8072:16618":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:47183:28276":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"16:6376:16573":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:4808:3582":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:11399:16770":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"6:1632:11039":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:5030:3638":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:33535:9357":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"1:3460:2798":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"16:6721:16585":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:4218:8942":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:6053:227":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"6:7556:15353":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:15842:19614":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"2:40867:3341":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"6:4989:13702":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:3193:140":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:14087:20145":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:914:3152":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:16004:21099":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"5:2256:3157":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"5:1301:3363":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"6:5117:13716":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"2:40784:9101":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:10775:21995":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"16:7360:32631":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:9860:16700":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:4582:9112":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"16:2305:15628":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"2:46717:3745":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:10784:21909":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"16:6386:16574":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"14:202:9061":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:14786:20883":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"11:2151:3364":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:15125:20903":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:10016:16671":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:45048:9517":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:33349:9358":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:15108:20901":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:11497:2989":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:3470:8948":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:11611:3553":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"5:4050:2772":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:7671:2877":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"5:7306:2792":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"16:5696:16558":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"5:7013:2830":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:21568:3189":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"6:5009:13705":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:43057:3202":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"5:1505:3152":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:7599:16694":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"6:4616:13665":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"16:7613:16607":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:12119:804":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"6:4549:13657":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"6:7692:15381":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:922:3357":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:6391:9332":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"11:396:2763":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:8396:3631":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:22682:3192":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"6:7668:13889":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:12898:16716":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:7733:3326":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"16:7708:3107":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"16:8115:16620":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:12077:16911":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:3576:3501":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"11:2140:3363":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:41031:3452":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"5:7628:2813":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"17:10569:33379":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:14181:20151":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"6:6804:14812":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:7389:28620":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:12828:16714":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:10736:3227":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"2:22741:28086":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:5148:26927":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:4095:2798":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"5:2983:29742":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:43169:8962":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:12066:9478":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:15279:20916":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:44624:9031":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:32837:9429":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:22193:3877":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"5:7340:2559":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:6363:227":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:12096:9024":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:3082:9367":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:32823:29327":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"16:6513:16579":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"6:527:10135":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:12659:16675":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:3667:2792":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"17:10803:16709":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"16:2380:15631":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"16:4462:16177":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:13083:16982":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"2:32928:2513":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:2438:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:7905:2516":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:9320:3413":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"2:12566:9015":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:43685:154":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"16:3232:15659":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:43423:28140":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"6:1528:11030":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"6:5052:13710":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"16:5661:16556":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"6:4529:13654":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:14235:20155":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:16146:21110":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"1:9061:21881":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:3141:8946":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"2:6576:9315":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"2:44773:9054":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"6:4878:13690":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"6:654:10192":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"6:588:10144":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:11755:16881":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:22718:28018":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:5777:2798":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:4108:3571":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:4171:29335":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:9987:118":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"16:4835:16286":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:23990:3559":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"17:16049:21102":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"6:4584:13661":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:46593:3763":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"6:4738:3562":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"16:7318:16597":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:12126:1652":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"18:636:33415":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"6:507:10134":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:9006:3711":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:8260:3172":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"5:4252:3148":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:3010:9337":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"2:23610:188":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"17:10915:16726":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:45254:234":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"6:6169:14401":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:10990:2903":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"6:7616:13882":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"16:7651:16609":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:24031:243":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:2031:16777":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:16076:21104":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"17:10775:16708":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"6:4628:13666":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:13219:9153":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"16:5435:32601":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:15980:21097":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"17:9678:16682":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:10974:2976":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:41270:9328":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:42631:2559":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:40927:9129":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:22316:3882":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"2:32846:244":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:3405:9097":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:12584:16942":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"2:4183:29321":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"16:4806:16281":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:16062:21103":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"5:692:117":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:11088:16738":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:12445:16940":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"5:0:314":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:5194:211":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"17:15725:20948":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:41170:3178":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"16:4641:16212":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"18:690:21141":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:5067:864":{"crate_id":2,"path":["core","iter"],"kind":"module"},"1:4297:3598":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"18:652:33399":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:10892:3675":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"17:9651:16695":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"6:4922:13696":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:12131:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"6:4666:13668":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:13347:2864":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"6:4449:13645":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:3801:3551":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"5:2144:2789":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:42553:3353":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:15160:20905":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:7808:3416":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:42572:233":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"6:574:10142":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:7610:25210":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:357:3336":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"11:2554:32207":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"6:6136:31504":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:945:3360":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"11:1883:3148":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:48185:3766":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"5:2975:29743":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:14399:20166":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:8239:3480":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:47263:3793":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:13167:29018":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:13882:20132":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:43162:8955":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"18:681:21140":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:42349:3554":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"17:9813:16699":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:14934:20890":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:16180:19623":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"2:32873:251":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"11:1087:32216":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:7713:3481":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"5:7544:250":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"6:5969:14385":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"16:4889:16292":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:41051:3475":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"2:46939:3770":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:2509:132":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"1:11204:22876":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:4303:3167":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:11071:9009":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:859:2559":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:48543:3778":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:8001:3228":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:1832:1199":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"18:614:33395":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:44848:9056":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:41663:9308":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:13948:20137":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"5:4866:224":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:6228:2882":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"6:6819:14814":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:14485:2996":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:9891:16674":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:6929:3097":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:9651:3183":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"5:790:2774":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:15301:20919":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:9256:22845":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","DtorState"],"kind":"enum"},"17:13663:20121":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:48497:3827":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:5967:3177":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:8283:3508":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"16:2504:15636":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:867:3150":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:6532:2887":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:11462:22836":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:13516:19637":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"6:6700:14809":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:1063:3364":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:7441:9303":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:11672:8992":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"17:11052:16707":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:2966:254":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:44194:8984":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"5:1151:30942":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:15027:20894":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"6:6079:14393":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"16:5866:16562":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"16:2526:15637":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:11459:16823":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"6:483:10130":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"5:3184:3148":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:11890:2909":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"15:288:15579":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:42979:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"16:3065:15658":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:15079:20898":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:10479:3527":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"17:12396:16899":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:8473:3659":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"16:6569:3093":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"6:6658:10180":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:11226:16789":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:15294:20918":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:12121:806":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"16:6456:16577":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:9029:3695":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"18:481:21144":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:3996:3564":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:11136:3485":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"16:3049:15657":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:4377:3599":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:12115:16924":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"16:3915:15726":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:2712:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"17:16160:21111":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"1:918:3153":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"16:5798:3061":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:2847:3432":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"1:5306:210":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"0:0:2241":{"crate_id":0,"path":["fnv"],"kind":"module"},"6:5140:13719":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:9791:8952":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"16:4053:15840":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:31116:28263":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"16:4745:16268":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:7450:26670":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:4225:3595":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"5:1270:3362":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:13309:19622":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"6:5982:14387":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:7738:3328":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:11243:16775":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:4:1125":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"16:5384:16551":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"16:7660:16610":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"16:6156:16568":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:2275:3454":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"11:883:3361":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"11:364:2761":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:15101:20900":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"5:7286:2559":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:11041:2964":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:4046:3566":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"6:4814:13682":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:10907:21897":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:621:3343":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"6:4745:13674":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:15235:20912":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:42623:3149":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:11767:16882":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"6:6100:14395":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"16:7474:16600":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:40012:9378":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:44617:9021":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:9994:8955":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"6:4480:13648":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:13334:19624":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:14099:20146":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"5:7316:2783":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:10102:2982":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:2457:111":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"11:1917:3368":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"11:1566:15547":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:43460:3165":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"5:2048:3228":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"5:2972:2618":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"11:832:3356":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:2266:136":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:44147:8995":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:3548:3429":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"5:4092:3149":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"5:7533:2809":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"2:43668:3203":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:7896:163":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"11:875:3360":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"6:4566:13659":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:48043:3794":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:10919:8998":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:13097:19614":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:12546:9016":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"5:3191:3367":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"5:2062:3381":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"2:2728:264":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1:8356:3601":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"18:538:2948":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:14266:20157":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"5:1516:3153":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"5:7569:9063":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"6:7388:15194":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"16:6332:3085":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:46863:3758":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"16:3032:15656":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:14413:20167":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:9646:29315":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:11632:16829":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"2:10880:9011":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:4002:3563":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"16:6415:16575":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:40901:9132":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"16:4417:16156":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:10812:3149":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:46815:3810":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:15:1819":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:31222:28225":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"6:4455:13487":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:15733:20949":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:3558:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:41240:9326":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:4528:9111":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"6:6128:14399":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:1824:3397":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:4766:3630":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"11:742:3153":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"11:2536:32208":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"5:4381:2801":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:12109:1162":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"5:7644:2817":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:15087:20899":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"16:7862:16615":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"11:2352:3364":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"16:3830:15689":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:41118:9319":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:8081:3519":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:46763:3798":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"14:7:15555":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"16:6204:3067":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:46652:3824":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:14346:20162":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:22430:3873":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"2:44301:9026":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:10293:2987":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"6:6159:14400":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:12180:16925":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"5:3196:31082":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:14221:20154":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:14509:20173":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:23151:194":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:6037:2883":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:38709:9372":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"14:221:15565":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"5:1387:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:48581:3812":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:5941:14341":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:32959:8943":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"17:11141:16759":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:44821:9055":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:8296:3550":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:482:2866":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"6:4755:13675":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:8399:29318":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"6:4543:13656":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:3305:3527":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"16:6261:3051":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:10440:2854":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"17:14426:20168":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:13909:20134":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:10941:16728":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:47129:28141":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:13754:20125":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:3046:9376":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"16:8239:16626":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"6:4908:13694":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"9:357:15443":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:9464:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:2797:123":{"crate_id":2,"path":["core","default","Default"],"kind":"proc_derive"},"1:2446:3468":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"6:6222:14428":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:45095:129":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"16:3655:15663":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:22831:3558":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:4981:3629":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:40847:9137":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"5:1131:29901":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:16123:21108":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"2:42821:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:42704:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:3315:218":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:12283:9526":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:41280:9316":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"6:4977:13701":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:12120:805":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"1:12116:700":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:45360:28267":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"16:2722:15645":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"16:5816:3066":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:41221:9325":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"5:4182:2798":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"10:44:3120":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"16:6901:3095":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"5:40:2768":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"6:1576:11035":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"5:3230:31086":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"6:1697:11046":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:8362:3592":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:7918:3471":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:23515:191":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:3229:22565":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:8270:3507":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:41100:3173":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:10706:22873":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"14:160:15555":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:13856:20130":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"5:3225:3366":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:11590:3551":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"5:5808:258":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:22464:3872":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"17:13365:19626":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"16:2284:15601":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:44599:9023":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:10137:2983":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:41179:9323":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"4:0:2355":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"5:1477:3150":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:13297:19621":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:8361:9311":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:32776:3680":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"1:10090:3407":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"2:43715:3205":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:11065:16740":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:2435:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:21958:3752":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"1:9234:26960":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","Key"],"kind":"struct"},"18:755:21142":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:11714:16838":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"6:5085:13713":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"6:4860:13688":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:1795:642":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"1:2728:3518":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:4635:3621":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"6:1546:11032":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:11576:16826":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:16087:21105":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"5:4212:2798":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:44953:9042":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:1809:666":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:21494:3481":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:2971:3166":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:4773:16945":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"1:909:3356":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:11001:16736":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:4195:108":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:3509:3477":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:4557:3604":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:40025:220":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:9488:3474":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"17:12230:16892":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:6606:3700":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:13202:3003":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:1826:3398":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:47687:3826":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:42860:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:10682:3632":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"11:687:3149":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:3432:3532":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"1:3491:3478":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"18:564:2950":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:13026:16980":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:34132:9361":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"6:4440:13644":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:44283:9030":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:11469:16824":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"5:1789:2813":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"6:6120:14398":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"16:8167:16623":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:47623:3771":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:4518:2839":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:6609:3701":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:11307:16772":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:10633:3481":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:44589:9034":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"9:0:2357":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:11334:22847":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"2:48718:8921":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:2676:9149":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:11686:15587":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:5374:127":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:44899:9058":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:12191:16891":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:256:33386":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"15:394:15590":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"17:15868:21095":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"6:6961:14823":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"11:2369:15550":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"2:46961:3776":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"5:3818:2813":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"6:0:888":{"crate_id":6,"path":["libc"],"kind":"module"},"1:1862:3407":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"17:15177:20906":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"5:6352:3887":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:14757:20880":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:3393:144":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:41199:9324":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:44547:9038":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"6:4808:13681":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"11:434:32211":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"5:212:2770":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:15133:20904":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:46615:3769":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:5705:3704":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"16:5760:16560":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:8422:3581":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"16:5363:16550":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:3265:3525":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"3:234:233":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:9198:3485":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:12111:1515":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"6:6943:14822":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"16:7677:217":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:12125:1651":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"16:5634:16554":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:11958:16843":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"6:5146:13720":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"6:5015:13706":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:563:10140":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:44447:9007":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:12301:16929":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:46362:3791":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:1446:153":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:32848:252":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"11:1107:15545":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"6:4902:13693":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:42362:3545":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"6:6718:3633":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:12106:458":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:10207:2985":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:8071:26946":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:41208:9314":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:39961:8947":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"2:40807:28305":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:41156:28101":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:6496:3697":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:4233:3596":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:45072:9514":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:13145:162":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"16:5982:16565":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:16109:21107":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"18:0:2365":{"crate_id":18,"path":["memchr"],"kind":"module"},"16:4344:16107":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:6423:183":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:45347:8935":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"18:766:21137":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:44633:3341":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:5698:2883":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:12614:16711":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:363:3337":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:44727:9051":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:8615:3148":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:10766:3476":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"2:41653:2849":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"17:13742:20124":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"15:0:2362":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:8043:176":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"6:5044:13709":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:13765:20126":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"6:1664:11042":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"6:4710:13672":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:11381:3222":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"16:8195:16624":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:40988:3439":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"2:31592:203":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"16:2450:15634":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:13235:3009":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:10004:8960":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:48833:8926":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:1913:11213":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"6:4893:13692":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:47837:3760":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:13584:20118":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:1072:3365":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"11:0:2359":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"2:9998:8962":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:21338:27731":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:32929:3199":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:42615:3148":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"6:4955:13699":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"6:4789:13679":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"11:2383:3148":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"11:2304:3362":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"16:6243:16570":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"7:31:15398":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:6662:3703":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"6:5897:14381":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:46909:3764":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"16:4986:16317":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:1990:186":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:1203:16746":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"6:4676:13669":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"6:4932:13697":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:7971:2497":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"16:7128:16596":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:13478:19634":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"14:31:15555":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"5:3155:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:48703:8920":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:2436:3463":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:43176:8963":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"6:5033:13708":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"6:1521:11029":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"11:2403:3149":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"5:7491:28234":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:5995:3040":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:11800:16858":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:2977:2873":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:46793:3804":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"16:5743:16559":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:2806:135":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:22:740":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:41231:3179":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:4972:3628":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:42510:3646":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"6:6837:14815":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"16:7054:32576":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:15659:20943":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:8400:3633":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:1094:16739":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"16:2766:15647":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:44756:9053":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"6:6228:13553":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:41429:9330":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"16:6189:32573":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"6:6741:11170":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:11414:21875":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"16:6545:16581":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"16:6696:15574":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"18:671:21139":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:7913:3474":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"6:6071:14392":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:5846:3216":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:12107:1669":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:41671:9310":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:14041:20143":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"11:1582:15548":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:14312:20160":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"18:531:21147":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"11:2326:3363":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"1:1040:3362":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"14:215:15564":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:43478:135":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:8912:3215":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:2652:2870":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:14156:20149":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:10337:2961":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:22758:28109":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:10973:2901":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:44137:8997":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:637:3345":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"6:5123:13717":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"2:22328:27961":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"17:10785:33384":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:10724:21899":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"18:521:21143":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:9996:8954":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:11030:9006":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:47082:28085":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:11113:9008":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"16:8097:16619":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"16:2548:15638":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:7985:22567":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"16:4585:16204":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:10984:2902":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:10315:2988":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"5:3251:3369":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:14359:20163":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:12009:2964":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:10657:2964":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:9104:16596":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:10251:1807":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"9:393:15428":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:22370:3883":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:45335:8937":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:3801:2559":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"5:2236:29894":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"17:15527:20934":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:8216:3229":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:12953:16680":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"16:6346:3087":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"6:6889:14817":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:9992:127":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"16:6425:16576":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:4988:28937":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:10374:3678":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"18:491:33414":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:4334:3168":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"16:7492:16601":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:13162:19617":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:41109:3175":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:13935:20136":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"6:1734:11049":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"6:4870:13689":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:11727:16859":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:10476:3525":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"18:113:21125":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"11:299:32193":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"7:78:15405":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:12772:118":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:10813:33381":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:11675:16877":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:11126:16732":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:41622:9305":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"16:8205:16625":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"5:6531:2772":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:6212:2864":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:2688:3509":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:48756:8923":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"16:7621:16608":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:15192:20908":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:43900:9505":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"5:3343:2813":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"2:10643:246":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"16:6485:3091":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"11:102:32205":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"16:5712:3056":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"5:3607:3149":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"5:2183:3154":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:10203:150":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"11:2542:28971":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:14765:20881":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:1708:2798":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:34674:9366":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"11:800:2792":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:12718:16712":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:42476:171":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:10035:2959":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"18:599:33413":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:4104:3570":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"11:1603:15549":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:8352:3372":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:4116:3573":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"6:7343:10090":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:45244:226":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"6:7371:15193":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:15224:20911":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:15631:20941":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"6:4603:13663":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:11991:16840":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:9091:3220":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"16:149:2754":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"17:14950:20891":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:32961:113":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:10109:22888":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"2:3051:9377":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"2:3399:9098":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"6:4595:13662":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:44207:8985":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:5637:3677":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:7934:128":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:14021:20142":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:45132:9532":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"17:11321:2964":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:41138:9320":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:11194:16762":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"17:15961:19618":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"2:44325:3508":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"5:7348:217":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:15200:20909":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:40823:9134":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"5:5393:8979":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"6:5152:13721":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:34073:9362":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"16:6583:16582":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"6:5104:13714":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:14633:20877":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:3378:9379":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"5:6868:2823":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:3003:9335":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:38599:9370":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:12105:1044":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:8866:3678":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:6710:240":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"6:4473:13647":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:7824:3417":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:10756:126":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"17:11563:16799":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:12264:16928":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:45297:3884":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"16:6893:3052":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:21675:3747":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:8378:3602":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"1:11117:3188":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"18:624:33402":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:43660:2499":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:8898:3679":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"5:6878:2825":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"17:12153:16896":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:9624:16670":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"11:351:32196":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"2:13194:212":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"1:10884:3417":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"2:47387:3805":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:4060:3568":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:9790:16698":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:12029:16847":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"11:430:32215":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:4535:3603":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"11:787:3151":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"11:1066:15544":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"16:7284:3646":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"5:1685:2772":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:31024:9080":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"16:7462:16599":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:2546:209":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:14989:16741":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:9943:16681":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"16:3315:15660":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"6:542:10137":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:44295:9027":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"17:12273:16714":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"17:435:15603":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"16:7342:32614":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"6:7702:15382":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:13436:19631":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"15:306:15580":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:13056:16981":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:11604:16827":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"1:12088:21975":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:2418:3457":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"17:12510:16944":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"16:6879:16590":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:8290:3506":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"16:5322:16533":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:723:151":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:533:2867":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"17:14122:20147":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:11598:8999":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"6:4516:13652":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"11:700:2559":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:43915:28281":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"16:2618:15641":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:9493:2897":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"2:10246:2498":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"5:7507:3434":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:13809:20128":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:48295:3800":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:6868:14816":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:495:10132":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:11690:16878":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:44493:9036":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:42543:3647":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:41058:8984":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"16:4719:16266":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:3798:3552":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:11701:16879":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:8961:3707":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:31046:3165":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:45076:3188":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:15589:20939":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:8076:3226":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"1:8872:206":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:8990:3708":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:41087:3172":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"16:7722:3108":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"5:1439:3149":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:12850:16715":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:12596:16710":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"16:6279:3082":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:15903:21096":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"2:42743:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:10510:16704":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"0:20:1824":{"crate_id":0,"path":["fnv","FnvBuildHasher"],"kind":"type_alias"},"1:12130:1258":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:5691:227":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:40958:28234":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"9:450:15427":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:21555:3749":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"16:2881:15652":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"6:6913:14819":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:3307:3528":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:11256:16774":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:11269:2976":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:44642:9032":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"6:1591:11036":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"6:4488:13649":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:13707:20122":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:3433:8945":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:4701:22862":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:22107:3748":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"16:6960:16591":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"16:7006:16593":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:4864:2874":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:43155:8954":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:261:33367":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"16:8154:16622":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"16:2359:15630":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:10482:3523":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"2:48646:8915":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:2666:2854":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"18:515:21146":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:8884:3214":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:22238:3878":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"17:10432:33388":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:11476:3119":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"5:1286:3364":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:8370:3550":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:15432:20929":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"8:0:2356":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"16:4497:16188":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"17:16032:21101":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"1:849:3149":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"16:2644:15642":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:8632:3665":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:44157:8996":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"6:5130:13718":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:42156:168":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"2:2353:9391":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"17:2228:16796":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"16:5574:3055":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"6:5023:13707":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"11:2569:2509":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:1923:9400":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:13395:19628":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"16:4862:16289":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:44608:9022":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"11:2548:32201":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:6136:2878":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"16:6531:16580":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:12104:408":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"17:15062:20897":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:13145:19616":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:5481:3673":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"5:4020:2792":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"16:5588:16552":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:21340:27740":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:3019:3740":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:15267:20915":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"5:1115:30941":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:48741:8922":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:7219:2567":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"18:660:21138":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:1602:3368":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:6492:3696":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:44249:9003":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"5:7477:3436":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:9174:242":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"6:1507:11027":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:41256:9327":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"17:12486:16946":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"2:42554:3648":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"16:7015:16594":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"5:5389:8978":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:11645:16830":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"2:3190:139":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"16:7544:16606":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"16:2969:15655":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:15345:20924":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:11743:16880":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:48794:8925":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:23895:187":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:2584:3516":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:14145:20148":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:40183:9380":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:3226:27205":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:12600:135":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"16:4774:16273":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"16:7523:16604":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"5:683:257":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:2420:3458":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:13896:20133":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:44229:9004":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:10357:2851":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"16:6915:3096":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:4246:3597":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:8936:2559":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"6:1650:11041":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:22415:3481":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"1:5512:112":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:7976:2496":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"2:42782:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:47341:3799":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:13695:16885":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:10962:16745":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"5:2979:29741":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:9118:21984":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:5634:3676":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"6:1570:11034":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"5:3753:3381":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:2540:202":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"6:123:9812":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"17:511:16693":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"6:4506:13651":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:10925:16727":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:14455:20170":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:45052:9516":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:40190:9085":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:40795:9135":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:2959:8944":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:11817:16883":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:47160:28307":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"11:811:2813":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"17:15680:20945":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:12561:9017":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:5026:3533":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"1:6315:2883":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:41638:9307":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:15384:20928":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"11:1025:3363":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"5:7558:9062":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:40859:9032":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"11:2443:2792":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"1:8207:3180":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"5:4444:2801":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"6:7657:13888":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"5:7385:2559":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"9:52:3121":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:1581:2792":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"6:7622:13883":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:46318:3790":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:15612:20940":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:13633:20119":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:928:3358":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:23705:189":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"6:4461:13646":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:12418:16950":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"2:0:540":{"crate_id":2,"path":["core"],"kind":"module"},"6:5974:14386":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:6711:14810":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"16:7513:16603":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"11:856:3359":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:4054:3567":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"16:7582:3102":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:7669:2895":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:9559:16672":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"5:5962:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:22330:9390":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"2:31030:9282":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:10992:9005":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:22459:3874":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"16:2472:15635":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:12124:1650":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:2715:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"5:7460:2803":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:47653:3777":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:640:3346":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"6:4968:13700":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:4445:228":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:12474:2964":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"6:7598:13879":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"6:5004:13704":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:415:182":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:21677:3189":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:10667:33385":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:41415:9329":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"6:555:10139":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:836:3148":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:1607:3369":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:1596:3367":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:10950:16751":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:41615:28112":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"17:16098:21106":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"1:1975:713":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"1:9481:136":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"17:12380:16933":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"14:0:2361":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"5:1527:217":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:880:3151":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:42665:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"16:7782:16612":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:13419:19630":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"16:2907:15653":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"6:7679:13890":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"11:2231:3119":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"2:48435:3806":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:11097:3679":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:7908:3473":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:1585:2813":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"16:6753:16586":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:11215:16763":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"6:580:10143":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"16:2810:15649":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"11:2423:2559":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"2:44920:9060":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:4967:426":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:44119:8994":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"5:7520:3435":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:13922:20135":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"6:5068:13711":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:10559:16705":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:44239:9002":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:46633:3775":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"6:4375:13639":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"16:2933:15654":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"11:328:32200":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:40129:223":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"5:830:2777":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"11:490:151":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:46338:3755":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:44269:9033":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:43676:2500":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"6:4647:13667":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"5:1024:2772":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:12921:2996":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:44933:9041":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:12127:1649":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:4032:3565":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:9096:3230":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"17:12872:16673":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"11:1887:2559":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"6:548:10138":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:10711:3471":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"17:12999:16979":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"6:6798:14811":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:11387:3683":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"16:2788:15648":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:41644:3532":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"6:1682:11044":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:13383:19627":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:15943:19617":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"1:4769:3603":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"6:533:10136":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:1578:2559":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"16:2696:15644":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:11027:16734":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:10211:154":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"1:7925:3227":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"17:9968:16702":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:33955:3739":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:22105:3481":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:15557:20937":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"6:5075:13712":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:10067:2980":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:31058:28283":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"1:1574:3148":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:13386:149":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:11099:9010":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"5:3687:2772":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:12684:16677":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:3418:28630":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:11666:16832":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"17:12746:2999":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"16:2339:3026":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:1968:3428":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:44393:9039":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:42196:3543":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:11932:16844":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:8942:3709":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:12122:802":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:12123:1653":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"18:96:21124":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:46462:3792":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:40085:222":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:13407:19629":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:7993:3517":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"16:5049:16332":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:3183:2514":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:2724:265":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"1:4806:3579":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:14969:3017":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:686:1808":{"crate_id":1,"path":["std","collections"],"kind":"module"},"2:10002:213":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:40837:9136":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"6:4847:13686":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"16:6083:15600":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"16:5830:16561":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:6963:2890":{"crate_id":1,"path":["std","sys","pal","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"16:6687:16584":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:15566:20938":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"16:2832:15650":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:0:1540":{"crate_id":1,"path":["std"],"kind":"module"},"1:5891:2876":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:10242:2986":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:11083:3214":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:21983:3190":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:22706:3556":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:11978:16839":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:13961:20138":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:43697:3660":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"16:6017:16566":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:3344:3523":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:22301:3481":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"1:8563:3662":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"11:673:3148":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:48677:8918":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"16:5648:16555":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:42640:203":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:15287:20917":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:3736:3548":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"6:6934:14821":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:15747:20950":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"9:507:15430":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:16016:21100":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"1:8455:3642":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:7324:9317":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"2:32830:9111":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"17:12335:2996":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:10520:33392":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:11507:2990":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:48619:3833":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:8974:3710":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:12103:16923":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"16:4921:16300":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:13684:16884":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:21496:3750":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"2:48771:8924":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:1887:3414":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"17:15710:20947":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"16:7534:16605":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:11536:16798":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:4705:22866":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"1:588:3339":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"16:6818:16588":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"6:4428:13642":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:9048:114":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:47007:3831":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:10881:16724":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:12536:16939":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"1:3566:3479":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"11:1903:3366":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"16:8181:3111":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:22666:3160":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"16:7436:3048":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:41128:3176":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:41188:9331":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"16:8281:16627":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"16:3888:15723":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:45068:9513":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"6:5921:14383":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:40377:23274":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"6:4830:13684":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:4454:9104":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"18:582:3198":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"5:6485:2792":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:21666:3481":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"6:4686:13670":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"6:4578:13660":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:42564:3329":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:14698:20879":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"16:5727:3059":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:10837:3508":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"1:7965:126":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:46408:3756":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:9217:3737":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:44579:3506":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"6:4914:13695":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"6:4939:1112":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:45060:9518":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:44885:9057":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:21995:27741":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"9:426:15429":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:23424:197":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"17:12166:16895":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"5:1536:3380":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:903:2813":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"1:3012:135":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"0:24:1830":{"crate_id":0,"path":["fnv","FnvHashSet"],"kind":"type_alias"},"2:42242:3201":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:45318:178":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"5:7038:2834":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"9:237:3660":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:15855:19615":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"1:951:3361":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:4377:3169":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"16:6600:16583":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"16:7828:16614":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:9759:16697":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"16:8050:16617":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"11:1676:2765":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"18:736:21136":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:9164:184":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:2961:116":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"1:8920:3148":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"16:5121:16356":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:32847:2512":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:43018:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:13491:19635":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"6:62:9757":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:34191:9363":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"16:6041:16567":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"6:4800:13680":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:7855:9313":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:15117:20902":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:11294:16773":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:10282:22889":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"11:2562:32203":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"5:2154:29866":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:4806:9123":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"16:3600:15662":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:10191:3682":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"2:45120:3742":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:7325:9318":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:2341:643":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:11456:22839":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:11426:16821":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"14:165:15556":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"11:710:3152":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:557:3323":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:11667:3235":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"6:4364:13638":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:8621:3664":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:48373:3772":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:14878:20886":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:11395:16783":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:34014:3741":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:14822:20884":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:22969:196":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"6:5859:14377":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:9459:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"5:6688:2772":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"16:2670:15643":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:4094:3569":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:45044:9515":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:40974:3437":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:15013:20893":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:15671:20944":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:3389:3513":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"17:12560:16974":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"17:15244:20913":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:5497:3674":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:22544:28259":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:12091:16922":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"16:2744:15646":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:14778:20882":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"16:4557:16200":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:11617:16828":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2:44343:9005":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:22733:28069":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:11274:25147":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"1:3010:233":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"1:5812:3693":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:13724:20123":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"3:0:485":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:4237:9100":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"17:10172:2984":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:11345:16778":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"16:6401:3090":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:11945:16842":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:5117:26927":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:14194:20152":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:13989:20140":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:43919:8987":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"5:1495:3356":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:11549:16825":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:14296:20159":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:4449:9103":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"16:7090:32566":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"6:6107:14396":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"5:634:29786":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:15037:20895":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"16:6318:16571":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"16:4527:16194":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:3232:22564":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"16:6944:32422":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:2169:16810":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:13448:19632":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:21294:27733":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"2:40941:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"6:6114:14397":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"6:5910:14382":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:48692:8919":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:11154:21902":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"16:2574:15639":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:11109:21972":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"9:330:15482":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:11155:16760":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"17:14896:20888":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"16:7884:16616":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:13182:19618":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:12701:16678":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:23333:192":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"2:36723:9369":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:22384:9390":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"6:4434:13643":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:13347:19625":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"16:7597:32463":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"6:5992:14388":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"5:7444:2510":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:14373:20164":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"16:5963:16564":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"5:7377:2559":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:4602:3170":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:48637:8914":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"16:5673:16557":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:6260:3221":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"17:15311:20920":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"16:4949:16304":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:14170:20150":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:43500:8953":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"6:1639:11040":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:8351:3600":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:12310:2995":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"13:226:3117":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"16:6792:16587":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:5566:3675":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"6:1710:11047":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:4887:3578":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:44429:9009":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:1939:3427":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:2795:123":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"5:786:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"6:4724:13673":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:46430:3762":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}