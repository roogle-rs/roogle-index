{"root":"0:0:2036","crate_version":"1.0.7","includes_private":false,"index":{"2:13776:52479":{"id":"2:13776:52479","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"self::pattern":"2:13334:2999","prim@char":"1:15883:2168","str::splitn":"1:15889:2173"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:49913:3393","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:3000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13344:3000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13359:3002","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13723:52441":{"id":"2:13723:52441","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:47810:178"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47810:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11207:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11207:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3449:2942":{"id":"2:3449:2942","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3451:183","2:3452:563"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2955:179":{"id":"2:2955:179","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2956:421","2:2957:2325","2:2958:2326","2:2959:2327"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2924:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"PartialOrd","id":"2:2965:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13729:2580":{"id":"2:13729:2580","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"str::slice_mut_unchecked":"1:15889:2173","`str`":"1:15889:2173","crate::ops::Index":"2:3674:2716"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13750:2376":{"id":"2:13750:2376","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"self::pattern":"2:13334:2999","prim@char":"1:15883:2168","`None`":"2:47810:178"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47810:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:3000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10565:110":{"id":"2:10565:110","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10566:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13734:3028":{"id":"2:13734:3028","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:15883:2168"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49767:3414","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10584:2967":{"id":"2:10584:2967","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10585:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3508:3043":{"id":"2:3508:3043","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3510:183","2:3511:1245"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10813:147":{"id":"2:10813:147","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10814:656","2:10815:1612","2:10816:2312","2:10817:2313","2:10818:2314","2:10819:2315","2:10820:2316","2:10821:2317","2:10822:2318","2:10823:2319","2:10824:2320","2:10825:2321","2:10826:2322","2:10827:2323","2:10828:2324","2:10829:1550"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23389:12921":{"id":"2:23389:12921","crate_id":2,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23390:56142","2:23391:56143","2:23392:56144"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:23382:2495","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3745:3490":{"id":"2:3745:3490","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3747:57106","2:3748:57107","2:3749:52481"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3371:2301","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:8684:2305":{"id":"2:8684:2305","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8686:2337","2:8688:2338","2:8689:2339"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2864:98":{"id":"2:2864:98","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2866:51075"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3371:2301","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2861:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3532:3055":{"id":"2:3532:3055","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3534:1246"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3909:2928":{"id":"2:3909:2928","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:9536:2723-0:20:1606":{"id":"a:2:9536:2723-0:20:1606","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:9536:2723","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:20:1606","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:13739:57970":{"id":"2:13739:57970","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:50055:3427","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4467:2405":{"id":"1:4467:2405","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4468:1612","1:4469:54485","1:4471:54486","1:4472:3881","1:4473:54484","1:4474:54487","1:4475:51939","1:4484:2365"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:2870-0:20:1606":{"id":"b:2:2870-0:20:1606","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3371:2301","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2864:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:20:1606","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2872:51075"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:20:1606":{"id":"0:20:1606","crate_id":0,"name":"FnvHasher","span":{"filename":"lib.rs","begin":[89,0],"end":[89,26]},"visibility":"public","docs":"An implementation of the Fowler–Noll–Vo hash function.\n\nSee the [crate documentation](index.html) for more details.","links":{},"attrs":["#[allow(missing_copy_implementations)]"],"deprecation":null,"kind":"struct","inner":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:25","a:2:3378:224-0:20:1606","a:2:9536:2723-0:20:1606","a:2:3366:215-0:20:1606","a:2:3407:2302-0:20:1606","a:2:9535:2724-0:20:1606","b:2:3203-0:20:1606","b:2:2867-0:20:1606","b:2:3209-0:20:1606","b:2:4099-0:20:1606","b:2:3199-0:20:1606","b:2:2870-0:20:1606","b:2:3214-0:20:1606","0:23","0:27"]}},"2:3622:133":{"id":"2:3622:133","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3624:183","2:3625:384"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6186:51688":{"id":"5:6186:51688","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:15889:2173"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3173:150":{"id":"2:3173:150","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3175:2329"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3602:2435":{"id":"2:3602:2435","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3603:550"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Deref","id":"2:3589:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3481:2956":{"id":"2:3481:2956","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3483:1112"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3170:74":{"id":"2:3170:74","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3172:2328"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3371:2301","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:12774:3603":{"id":"2:12774:3603","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12775:2340","2:12776:57528"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3202:2329":{"id":"2:3202:2329","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:3176:136"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3656:2996":{"id":"2:3656:2996","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3658:242","2:3659:208","2:3660:57535"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3814:3491":{"id":"2:3814:3491","crate_id":2,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3371:2301","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"2:3745:3490","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13764:52475":{"id":"2:13764:52475","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"`DoubleEndedIterator`":"2:8719:121","self::pattern":"2:13334:2999","str::split":"1:15889:2173","prim@char":"1:15883:2168"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:49809:3389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:3000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13344:3000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13359:3002","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3514:3046":{"id":"2:3514:3046","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3516:183","2:3517:1248"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23240:2520":{"id":"2:23240:2520","crate_id":2,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:23230:2495","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5425:2512":{"id":"1:5425:2512","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5426:51368","1:5427:3702"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:2495","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:23765:3082":{"id":"2:23765:3082","crate_id":2,"name":"SimdPartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23766:1284","2:23767:1283","2:23768:1281","2:23769:1280"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdPartialEq","id":"2:23177:3081","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:5906:3616":{"id":"5:5906:3616","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5908:183","5:5909:438"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3371:2301","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3837:2931":{"id":"2:3837:2931","crate_id":2,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3839:55326"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3199-0:20:1606":{"id":"b:2:3199-0:20:1606","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3176:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3173:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:20:1606","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3202:2329"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3179:233":{"id":"2:3179:233","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3181:128","2:3182:1432"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13828:3610":{"id":"2:13828:3610","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6168:58625":{"id":"5:6168:58625","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8472:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:3000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2924:125":{"id":"2:2924:125","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2919:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3455:2945":{"id":"2:3455:2945","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3457:183","2:3458:1111"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6187:51689":{"id":"5:6187:51689","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:15889:2173"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13709:798":{"id":"2:13709:798","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:15883:2168"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6184:58628":{"id":"5:6184:58628","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`String`":"5:8472:220","`Box<str>`":"5:444:2306"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:2306","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8217:3622","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3473:2952":{"id":"2:3473:2952","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3475:899"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13732:52465":{"id":"2:13732:52465","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:15889:2173"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13721:52440":{"id":"2:13721:52440","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:47810:178"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47810:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11207:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11207:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3613:2303":{"id":"2:3613:2303","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3614:583"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:0:2036":{"id":"0:0:2036","crate_id":0,"name":"fnv","span":{"filename":"lib.rs","begin":[1,0],"end":[367,1]},"visibility":"public","docs":"An implementation of the [Fowler–Noll–Vo hash function][chongo].\n\n## About\n\nThe FNV hash function is a custom `Hasher` implementation that is more\nefficient for smaller hash keys.\n\n[The Rust FAQ states that][faq] while the default `Hasher` implementation,\nSipHash, is good in many cases, it is notably slower than other algorithms\nwith short keys, such as when you have a map of integers to other values.\nIn cases like these, [FNV is demonstrably faster][graphs].\n\nIts disadvantages are that it performs badly on larger inputs, and\nprovides no protection against collision attacks, where a malicious user\ncan craft specific keys designed to slow a hasher down. Thus, it is\nimportant to profile your program to ensure that you are using small hash\nkeys, and be certain that your program could not be exposed to malicious\ninputs (including being a networked server).\n\nThe Rust compiler itself uses FNV, as it is not worried about\ndenial-of-service attacks, and can assume that its inputs are going to be\nsmall—a perfect use case for FNV.\n\n\n## Using FNV in a `HashMap`\n\nThe `FnvHashMap` type alias is the easiest way to use the standard library’s\n`HashMap` with FNV.\n\n```rust\nuse fnv::FnvHashMap;\n\nlet mut map = FnvHashMap::default();\nmap.insert(1, \"one\");\nmap.insert(2, \"two\");\n\nmap = FnvHashMap::with_capacity_and_hasher(10, Default::default());\nmap.insert(1, \"one\");\nmap.insert(2, \"two\");\n```\n\nNote, the standard library’s `HashMap::new` and `HashMap::with_capacity`\nare only implemented for the `RandomState` hasher, so using `Default` to\nget the hasher is the next best option.\n\n## Using FNV in a `HashSet`\n\nSimilarly, `FnvHashSet` is a type alias for the standard library’s `HashSet`\nwith FNV.\n\n```rust\nuse fnv::FnvHashSet;\n\nlet mut set = FnvHashSet::default();\nset.insert(1);\nset.insert(2);\n\nset = FnvHashSet::with_capacity_and_hasher(10, Default::default());\nset.insert(1);\nset.insert(2);\n```\n\n[chongo]: http://www.isthe.com/chongo/tech/comp/fnv/index.html\n[faq]: https://www.rust-lang.org/en-US/faq.html#why-are-rusts-hashmaps-slow\n[graphs]: https://cglab.ca/~abeinges/blah/hash-rs/","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:20:1606","0:30:1617","0:31:1619","0:34:1623"],"is_stripped":false}},"1:5575:2483":{"id":"1:5575:2483","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5576:51395"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:844:227":{"id":"5:844:227","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:845:2398","5:846:2399","5:847:2400"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10572:120":{"id":"2:10572:120","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10573:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3461:2948":{"id":"2:3461:2948","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3462:183","2:3463:919"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2872:51075":{"id":"2:2872:51075","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3376:107":{"id":"2:3376:107","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2886:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:11207:218":{"id":"2:11207:218","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:11209:183","2:11210:52440","2:11211:52441","2:11212:52442","2:11213:52443","2:11214:757","2:11215:758"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3371:2301","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:11198:2495","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8671:137":{"id":"2:8671:137","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8673:688"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13829:51690":{"id":"2:13829:51690","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6576:2501":{"id":"1:6576:2501","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6577:51662"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:2495","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5505:2477":{"id":"1:5505:2477","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5506:51395","1:5507:51561","1:5508:51562"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13823:57987":{"id":"2:13823:57987","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:15883:2168","self::pattern":"2:13334:2999"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:3000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13344:3000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13359:3002","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3486:3038":{"id":"2:3486:3038","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3487:183","2:3488:958"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3407:2302-0:20:1606":{"id":"a:2:3407:2302-0:20:1606","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:3407:2302","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:20:1606","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3366:215":{"id":"2:3366:215","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13738:3958":{"id":"2:13738:3958","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:50045:2433","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13832:57988":{"id":"2:13832:57988","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:15883:2168"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:50090:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5513:2478":{"id":"1:5513:2478","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5514:51395","1:5515:51626"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3528:3053":{"id":"2:3528:3053","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3530:363"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13758:52472":{"id":"2:13758:52472","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:13334:2999","`DoubleEndedIterator`":"2:8719:121","prim@char":"1:15883:2168","str::rsplit":"1:15889:2173","str::split_whitespace":"1:15889:2173"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49791:2432","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:3000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13718:57968":{"id":"2:13718:57968","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:3444:2938":{"id":"2:3444:2938","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3446:183","2:3447:898"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6165:2434":{"id":"5:6165:2434","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8472:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:3000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6183:58627":{"id":"5:6183:58627","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8472:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13359:3002":{"id":"2:13359:3002","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13361:2330","2:13362:56461","2:13363:56462"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Searcher","id":"2:13353:2998","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:2:4099-0:20:1606":{"id":"b:2:4099-0:20:1606","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:3371:2301","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:4097:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:20:1606","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:4101:1444"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13826:3277":{"id":"2:13826:3277","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"2:13273:2629","FromStr::Err":"2:13273:2629"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47935:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:13273:2629","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:13273:2629","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6645:2491":{"id":"1:6645:2491","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6646:51726"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3374:222":{"id":"2:3374:222","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10574:2963":{"id":"2:10574:2963","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10575:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13770:57972":{"id":"2:13770:57972","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"str::split_terminator":"1:15889:2173","prim@char":"1:15883:2168","str::split":"1:15889:2173","self::pattern":"2:13334:2999"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:49859:3419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:3000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13344:3000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13359:3002","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:4898:3167":{"id":"2:4898:3167","crate_id":2,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4899:2340","2:4900:57174","2:4901:2343"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:27":{"id":"0:27","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[108,0],"end":[125,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["write_i32","write_usize","write_u32","write_length_prefix","write_i64","write_i8","write_u64","write_u8","write_str","write_i128","write_i16","write_u128","write_u16","write_isize"],"trait":{"name":"Hasher","id":"2:10813:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:20:1606","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:28:656","0:29:1612"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3274:128":{"id":"2:3274:128","crate_id":2,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3275:3517","2:3277:54053","2:3278:54054","2:3279:54055"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"2:10565:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Display","id":"2:10572:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:25":{"id":"0:25","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[99,0],"end":[106,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:20:1606","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:26:1610"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:14542:2602":{"id":"2:14542:2602","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14543:52015","2:14544:52016","2:14545:52017","2:14546:52018","2:14547:52019","2:14548:52020","2:14549:2365"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3176:136":{"id":"2:3176:136","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3178:685"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3674:2716":{"id":"2:3674:2716","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3676:183","2:3677:757"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3371:2301","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"a:2:9535:2724-0:20:1606":{"id":"a:2:9535:2724-0:20:1606","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:9535:2724","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:20:1606","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3872:2927":{"id":"2:3872:2927","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3371:2301","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13725:52442":{"id":"2:13725:52442","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11207:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11207:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:9536:2723":{"id":"2:9536:2723","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2861:97":{"id":"2:2861:97","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2863:2238"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3371:2301","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13714:57967":{"id":"2:13714:57967","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:15889:2173"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:28:656":{"id":"0:28:656","crate_id":0,"name":"finish","span":{"filename":"lib.rs","begin":[110,4],"end":[112,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13785:2252":{"id":"2:13785:2252","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"`DoubleEndedIterator`":"2:8719:121","str::matches":"1:15889:2173","prim@char":"1:15883:2168","self::pattern":"2:13334:2999"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:49995:3425","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:3000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13364:3003":{"id":"2:13364:3003","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13359:3002","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3105:3062":{"id":"2:3105:3062","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:3104:2495","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6841:2541":{"id":"1:6841:2541","crate_id":1,"name":"TcpStreamExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6842:51973","1:6843:51974"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:2495","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:4148:3090":{"id":"2:4148:3090","crate_id":2,"name":"Provider","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4149:54055"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10803:143":{"id":"2:10803:143","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10804:718","2:10806:51371"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3250:116":{"id":"2:3250:116","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3251:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5567:2481":{"id":"1:5567:2481","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5568:51988"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:2495","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3217:128":{"id":"2:3217:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:39110:2671","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"2:10578:2965":{"id":"2:10578:2965","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10579:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13744:52482":{"id":"2:13744:52482","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:15883:2168","self::pattern":"2:13334:2999"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:3000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8638:3243":{"id":"2:8638:3243","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8640:2390"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3434:2594":{"id":"2:3434:2594","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3436:183","2:3437:270"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3371:2301":{"id":"2:3371:2301","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13805:57983":{"id":"2:13805:57983","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:15883:2168","self::pattern":"2:13334:2999"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:3000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13344:3000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:13364:3003","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:29:1612":{"id":"0:29:1612","crate_id":0,"name":"write","span":{"filename":"lib.rs","begin":[115,4],"end":[124,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["bytes",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23104:3216":{"id":"2:23104:3216","crate_id":2,"name":"SimdInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23105:3079","2:23106:56275","2:23107:1239","2:23108:1240","2:23109:39907","2:23110:56319","2:23111:56320","2:23112:56321","2:23113:56322","2:23114:56323","2:23115:56276","2:23116:56277","2:23117:56278","2:23118:56279","2:23119:56280","2:23120:56281","2:23121:56282"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3376:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23153:2495","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13794:57977":{"id":"2:13794:57977","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"`DoubleEndedIterator`":"2:8719:121","prim@char":"1:15883:2168","self::pattern":"2:13334:2999","str::match_indices":"1:15889:2173"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:49959:3423","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:3000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13344:3000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13359:3002","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3203-0:20:1606":{"id":"b:2:3203-0:20:1606","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3176:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:20:1606","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3205:685"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3212:128":{"id":"2:3212:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:3183:232","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"2:13730:57969":{"id":"2:13730:57969","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"str::slice_unchecked":"1:15889:2173","`str`":"1:15889:2173","crate::ops::IndexMut":"2:3678:3101"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:8744:2304":{"id":"2:8744:2304","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8745:798","2:8746:2336"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8876:158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:24074:3080":{"id":"2:24074:3080","crate_id":2,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:24075:3079"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:24070:2495","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Copy","id":"2:3376:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6219:2501":{"id":"1:6219:2501","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6220:2848","1:6221:2849","1:6222:51661","1:6223:51772","1:6225:51776","1:6227:51773","1:6228:51774","1:6230:51775"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:2495","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:31:1619":{"id":"0:31:1619","crate_id":0,"name":"FnvHashMap","span":{"filename":"lib.rs","begin":[132,0],"end":[132,58]},"visibility":"public","docs":"A `HashMap` using a default FNV hasher.","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"HashMap","id":"1:1261:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"resolved_path","inner":{"name":"FnvBuildHasher","id":"0:30:1617","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"1:4410:2420":{"id":"1:4410:2420","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4411:2786","1:4412:52192","1:4414:52193","1:4415:52194","1:4416:2421","1:4417:52195","1:4418:51653","1:4420:52196","1:4421:2365","1:4422:1613","1:4423:2348","1:4425:2360"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8719:121":{"id":"2:8719:121","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8720:2330","2:8721:2331","2:8722:2332","2:8723:2333","2:8727:2334","2:8730:2335"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8876:158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3477:2954":{"id":"2:3477:2954","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3479:564"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13719:310":{"id":"2:13719:310","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:15889:2173","`u8`":"1:15900:2182"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13831:51692":{"id":"2:13831:51692","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5431:2510":{"id":"1:5431:2510","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5432:4427","1:5433:51188"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:2495","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10848:2278":{"id":"2:10848:2278","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10849:147","2:10850:30271","2:10851:51511"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13761:28833":{"id":"2:13761:28833","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"self::pattern":"2:13334:2999","prim@char":"1:15883:2168"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:13126:3386","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:3000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5519:2479":{"id":"1:5519:2479","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5520:52098","1:5521:52099","1:5522:51395","1:5523:52100","1:5524:2848","1:5525:2849","1:5526:52101","1:5527:1318","1:5528:52102","1:5529:52103","1:5530:52104","1:5531:52105","1:5532:52106","1:5533:52107","1:5534:52108","1:5535:52109"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4752:2525":{"id":"1:4752:2525","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4753:2553","1:4754:52390"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3209-0:20:1606":{"id":"b:2:3209-0:20:1606","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3183:232","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3179:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:20:1606","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3212:128","2:3213:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:23177:3081":{"id":"2:23177:3081","crate_id":2,"name":"SimdPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23178:3079","2:23179:1261","2:23180:1286"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6185:2456":{"id":"5:6185:2456","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8472:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13710:2336":{"id":"2:13710:2336","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:14074:151":{"id":"2:14074:151","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:14075:183","2:14076:151","2:14077:772"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13814:52484":{"id":"2:13814:52484","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:15883:2168","self::pattern":"2:13334:2999"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47810:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:3000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13344:3000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13359:3002","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13731:52464":{"id":"2:13731:52464","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:15889:2173"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13767:57971":{"id":"2:13767:57971","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"prim@char":"1:15883:2168","self::pattern":"2:13334:2999","str::rsplit_terminator":"1:15889:2173","`DoubleEndedIterator`":"2:8719:121","str::split":"1:15889:2173"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:49841:3418","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:3000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8199:3171":{"id":"2:8199:3171","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8200:56022","2:8201:56023","2:8202:56020","2:8203:56016","2:8204:56024","2:8205:56021","2:8206:56019"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2886:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"PartialOrd","id":"2:2965:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:24:59":{"id":"0:24:59","crate_id":0,"name":"default","span":{"filename":"lib.rs","begin":[94,4],"end":[96,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:20:1606","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6241:2498":{"id":"1:6241:2498","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6242:54608","1:6243:37018","1:6244:54609","1:6245:54610","1:6246:54611","1:6247:54612"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:2495","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:30:1617":{"id":"0:30:1617","crate_id":0,"name":"FnvBuildHasher","span":{"filename":"lib.rs","begin":[128,0],"end":[128,56]},"visibility":"public","docs":"A builder for default FNV hashers.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"BuildHasherDefault","id":"2:10853:1601","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:20:1606","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"2:23140:3229":{"id":"2:23140:3229","crate_id":2,"name":"SimdUint","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23141:56275","2:23142:1239","2:23143:1240","2:23144:56276","2:23145:56277","2:23146:56278","2:23147:56279","2:23148:56280","2:23149:56281","2:23150:56282"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3376:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23153:2495","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3831:138":{"id":"2:3831:138","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3833:691"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Try","id":"2:3826:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3375:221":{"id":"2:3375:221","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6573:2515":{"id":"1:6573:2515","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6574:51594","1:6575:52001"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:2495","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:14059:139":{"id":"2:14059:139","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:14060:183","2:14061:1020"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13717:51188":{"id":"2:13717:51188","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12798:3566"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13273:2629":{"id":"2:13273:2629","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13274:127","2:13275:54471"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13712:57966":{"id":"2:13712:57966","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23051:3076":{"id":"2:23051:3076","crate_id":2,"name":"SimdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23052:3079","2:23053:56275","2:23054:56506","2:23055:56507","2:23056:56508","2:23057:39907","2:23058:56510","2:23059:56511","2:23060:56512","2:23061:56513","2:23062:56514","2:23063:56515","2:23064:56516","2:23065:56517","2:23066:56518","2:23067:56519","2:23068:56323","2:23069:56520","2:23070:56521","2:23071:56522","2:23072:56523","2:23073:56276","2:23074:56277","2:23075:56278","2:23076:56279"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3376:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23153:2495","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10576:2964":{"id":"2:10576:2964","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10577:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8675:152":{"id":"2:8675:152","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8676:2340","2:8677:2341","2:8678:773"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2869:2238":{"id":"2:2869:2238","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13811:11434":{"id":"2:13811:11434","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:13334:2999","prim@char":"1:15883:2168"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47810:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:3000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3589:117":{"id":"2:3589:117","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3590:226","2:3591:548"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3439:2565":{"id":"2:3439:2565","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3441:183","2:3442:1369"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10580:2966":{"id":"2:10580:2966","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10581:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9163:3170":{"id":"2:9163:3170","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Step","id":"2:8199:3171","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:23":{"id":"0:23","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[91,0],"end":[97,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:3250:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:20:1606","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:24:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3616:131":{"id":"2:3616:131","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3618:382"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3619:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6171:58626":{"id":"5:6171:58626","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8472:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13344:3000":{"id":"2:13344:3000","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13346:2998","2:13347:57055","2:13348:57056","2:13349:57057","2:13350:57059","2:13351:57058","2:13352:57060"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13801:57980":{"id":"2:13801:57980","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:9156:2561":{"id":"2:9156:2561","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8876:158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3524:3051":{"id":"2:3524:3051","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3526:360"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3498:2563":{"id":"2:3498:2563","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3500:183","2:3501:359"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6163":{"id":"5:6163","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5976:1354","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6164:58624","5:6165:2434","5:6168:58625","5:6171:58626","5:6183:58627","5:6184:58628","5:6185:2456","5:6186:51688","5:6187:51689"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13834:2546":{"id":"2:13834:2546","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:15883:2168"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:50099:2547","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:9143:2517":{"id":"1:9143:2517","crate_id":1,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9144:51212","1:9145:51213","1:9146:51214","1:9147:51215","1:9148:51216","1:9149:36456","1:9150:51211"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:2495","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13773:52477":{"id":"2:13773:52477","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"self::pattern":"2:13334:2999","prim@char":"1:15883:2168","str::rsplitn":"1:15889:2173"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:49895:3392","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:3000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13733:3449":{"id":"2:13733:3449","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:15883:2168"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49761:3413","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13835:57989":{"id":"2:13835:57989","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:15883:2168"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:50108:3432","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13737:28956":{"id":"2:13737:28956","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"1:15889:2173"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:50074:3429","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5563:2475":{"id":"1:5563:2475","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5564:52099"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:34:1623":{"id":"0:34:1623","crate_id":0,"name":"FnvHashSet","span":{"filename":"lib.rs","begin":[136,0],"end":[136,52]},"visibility":"public","docs":"A `HashSet` using a default FNV hasher.","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"HashSet","id":"1:1991:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"resolved_path","inner":{"name":"FnvBuildHasher","id":"0:30:1617","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"2:23437:3118":{"id":"2:23437:3118","crate_id":2,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdElement","id":"2:24074:3080","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23428:2495","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:9159:3074":{"id":"2:9159:3074","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8876:158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:4485:2424":{"id":"1:4485:2424","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4486:54330","1:4487:36868","1:4488:54332","1:4489:54331"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8634:3244":{"id":"2:8634:3244","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8636:2389"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13797:57978":{"id":"2:13797:57978","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3503:2564":{"id":"2:3503:2564","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3505:183","2:3506:362"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13720:52444":{"id":"2:13720:52444","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:15900:2182"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13747:52483":{"id":"2:13747:52483","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:15883:2168","self::pattern":"2:13334:2999"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:3000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13344:3000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13359:3002","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3366:215-0:20:1606":{"id":"a:2:3366:215-0:20:1606","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:3366:215","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:20:1606","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3619:132":{"id":"2:3619:132","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3621:383"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3622:133","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:14458:142":{"id":"2:14458:142","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14459:283","2:14460:523","2:14461:286","2:14462:1088"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9535:2724":{"id":"2:9535:2724","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3183:232":{"id":"2:3183:232","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3185:128","2:3186:1431"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13741:52481":{"id":"2:13741:52481","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:15883:2168","self::pattern":"2:13334:2999"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:3000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6498:228":{"id":"5:6498:228","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6499:1411"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6339:2548":{"id":"1:6339:2548","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6340:51361","1:6341:51362"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:4101:1444":{"id":"2:4101:1444","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:46338:3091","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3407:2302":{"id":"2:3407:2302","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3469:2596":{"id":"2:3469:2596","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3471:1370"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3218:1431":{"id":"2:3218:1431","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47935:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"name":"TryFrom","id":"2:3183:232","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2965:186":{"id":"2:2965:186","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2967:1004","2:2968:832","2:2969:797","2:2970:716","2:2971:700"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3371:2301","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2919:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13754:2335":{"id":"2:13754:2335","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"self::pattern":"2:13334:2999","prim@char":"1:15883:2168","`None`":"2:47810:178"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47810:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:3000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13344:3000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13359:3002","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6467:2479":{"id":"1:6467:2479","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6468:51091","1:6469:51092","1:6470:51093","1:6471:51094","1:6472:51095","1:6473:51096","1:6474:51097","1:6475:51098","1:6476:51099","1:6477:51100","1:6478:51101","1:6479:51102","1:6480:51103","1:6481:51104","1:6482:51105","1:6483:51106","1:6484:51107"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13353:2998":{"id":"2:13353:2998","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13355:3021","2:13356:928","2:13357:57500","2:13358:57501"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:7602:2670":{"id":"1:7602:2670","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7603:51685"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3537:3058":{"id":"2:3537:3058","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3539:1249"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2886:105":{"id":"2:2886:105","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2887:414","2:2888:416"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13736:28966":{"id":"2:13736:28966","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"1:15889:2173"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:50065:3428","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3205:685":{"id":"2:3205:685","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10515:2405":{"id":"2:10515:2405","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10516:1550","2:10517:51938","2:10519:51939"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6745:2490":{"id":"1:6745:2490","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6746:52380"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:4097:68":{"id":"2:4097:68","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4098:1444"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"2:13808:57984":{"id":"2:13808:57984","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:15883:2168","self::pattern":"2:13334:2999"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:3000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5910:3618":{"id":"5:5910:3618","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5912:183","5:5913:30058"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8876:158":{"id":"2:8876:158","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8877:2340","2:8878:928","2:8879:2342","2:8882:2343","2:8883:500","2:8885:2344","2:8888:2345","2:8889:2346","2:8890:2347","2:8891:2348","2:8893:2349","2:8895:2350","2:8896:2351","2:8898:847","2:8901:2352","2:8908:2353","2:8910:2354","2:8913:2355","2:8914:2356","2:8915:2357","2:8917:2358","2:8919:2359","2:8922:1322","2:8923:2360","2:8924:2361","2:8928:1628","2:8931:2362","2:8932:2363","2:8933:2364","2:8935:2365","2:8936:1630","2:8938:2366","2:8941:2367","2:8943:2368","2:8953:2369","2:8968:2370","2:8970:2371","2:8974:2372","2:8983:2373","2:8986:2374","2:8988:2375","2:8991:282","2:8998:300","2:9005:2376","2:9012:2377","2:9021:2378","2:9031:1021","2:9038:2379","2:9045:2325","2:9046:2326","2:9047:2380","2:9059:2381","2:9066:2382","2:9078:2383","2:9085:2384","2:9086:2385","2:9091:2386","2:9094:1629","2:9097:2387","2:9098:2388","2:9100:2389","2:9102:2390","2:9104:421","2:9107:2391","2:9110:1004","2:9113:2392","2:9116:608","2:9119:2393","2:9122:913","2:9124:832","2:9126:797","2:9128:716","2:9130:700","2:9132:2394","2:9133:2395","2:9141:2396"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3167:75":{"id":"2:3167:75","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3169:311"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3371:2301","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13804:57982":{"id":"2:13804:57982","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13788:57975":{"id":"2:13788:57975","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:13334:2999","prim@char":"1:15883:2168","str::matches":"1:15889:2173","`DoubleEndedIterator`":"2:8719:121"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:50013:3426","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:3000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13344:3000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13359:3002","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3826:229":{"id":"2:3826:229","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3827:183","2:3828:2931","2:3829:690","2:3830:375"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FromResidual","id":"2:3831:138","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Try","id":"2:3826:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13735:1613":{"id":"2:13735:1613","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49777:2430","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3493:2562":{"id":"2:3493:2562","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3495:183","2:3496:357"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13711:57965":{"id":"2:13711:57965","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23770:12940":{"id":"2:23770:12940","crate_id":2,"name":"SimdOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23771:56522","2:23772:56521","2:23773:56523"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdPartialOrd","id":"2:23765:3082","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6647:2504":{"id":"1:6647:2504","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6648:52359"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13708":{"id":"2:13708","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:12787:1354","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:13709:798","2:13710:2336","2:13711:57965","2:13712:57966","2:13714:57967","2:13717:51188","2:13718:57968","2:13719:310","2:13720:52444","2:13721:52440","2:13723:52441","2:13725:52442","2:13727:52443","2:13729:2580","2:13730:57969","2:13731:52464","2:13732:52465","2:13733:3449","2:13734:3028","2:13735:1613","2:13736:28966","2:13737:28956","2:13738:3958","2:13739:57970","2:13740:28951","2:13741:52481","2:13744:52482","2:13747:52483","2:13750:2376","2:13754:2335","2:13758:52472","2:13761:28833","2:13764:52475","2:13767:57971","2:13770:57972","2:13773:52477","2:13776:52479","2:13779:57973","2:13782:57974","2:13785:2252","2:13788:57975","2:13791:57976","2:13794:57977","2:13797:57978","2:13799:57979","2:13801:57980","2:13803:57981","2:13804:57982","2:13805:57983","2:13808:57984","2:13811:11434","2:13814:52484","2:13817:57985","2:13820:57986","2:13823:57987","2:13826:3277","2:13828:3610","2:13829:51690","2:13830:51691","2:13831:51692","2:13832:57988","2:13834:2546","2:13835:57989"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13791:57976":{"id":"2:13791:57976","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"`DoubleEndedIterator`":"2:8719:121","str::rmatch_indices":"1:15889:2173","self::pattern":"2:13334:2999","prim@char":"1:15883:2168"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:49941:3422","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:3000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4492:2427":{"id":"1:4492:2427","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4493:55854","1:4494:55855","1:4495:55857","1:4497:2426","1:4498:55856","1:4500:52472","1:4501:3958"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Read","id":"1:4410:2420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:2:3214-0:20:1606":{"id":"b:2:3214-0:20:1606","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3173:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3183:232","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:20:1606","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3217:128","2:3218:1431"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13799:57979":{"id":"2:13799:57979","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13830:51691":{"id":"2:13830:51691","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:26:1610":{"id":"0:26:1610","crate_id":0,"name":"with_key","span":{"filename":"lib.rs","begin":[103,4],"end":[105,5]},"visibility":"public","docs":"Create an FNV hasher starting with a state corresponding\nto the hash `key`.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["key",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:20:1606","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13740:28951":{"id":"2:13740:28951","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:50083:3430","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13820:57986":{"id":"2:13820:57986","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:15883:2168","self::pattern":"2:13334:2999"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:3000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3378:224-0:20:1606":{"id":"a:2:3378:224-0:20:1606","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3378:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:20:1606","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:5497:2476":{"id":"1:5497:2476","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5498:54415","1:5499:54417","1:5500:54416","1:5501:54418"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5553:2480":{"id":"1:5553:2480","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5554:51193","1:5555:51194","1:5556:51195","1:5557:51196"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3678:3101":{"id":"2:3678:3101","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3680:758"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3371:2301","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Index","id":"2:3674:2716","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13782:57974":{"id":"2:13782:57974","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47810:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:3000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13344:3000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13359:3002","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2919:185":{"id":"2:2919:185","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2921:608","2:2922:913"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3371:2301","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:1031:2544":{"id":"1:1031:2544","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:1032:2398","1:1033:3610","1:1034:51688","1:1035:51689","1:1036:51690","1:1037:51691","1:1038:51692"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10582:191":{"id":"2:10582:191","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10583:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10586:2968":{"id":"2:10586:2968","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10587:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6164:58624":{"id":"5:6164:58624","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:2306","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8217:3622","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:2306","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8217:3622","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6649:2505":{"id":"1:6649:2505","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6650:54460"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13779:57973":{"id":"2:13779:57973","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47810:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:3000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3520:3049":{"id":"2:3520:3049","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3522:358"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3213:1432":{"id":"2:3213:1432","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47935:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:3183:232","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13817:57985":{"id":"2:13817:57985","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:13334:2999","prim@char":"1:15883:2168"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:3000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13344:3000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13359:3002","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3378:224":{"id":"2:3378:224","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3465:2595":{"id":"2:3465:2595","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3467:271"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13803:57981":{"id":"2:13803:57981","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2867-0:20:1606":{"id":"b:2:2867-0:20:1606","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3371:2301","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2861:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:20:1606","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2869:2238"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13727:52443":{"id":"2:13727:52443","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11207:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11207:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"2:49959:3423":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:7939:2767":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"12:815:2702":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:8497:2855":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"12:1203:3910":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:47935:207":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"1:14453:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:24889:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"5:4036:4564":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:51633:3130":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:13215:49863":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:11436:2432":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"6:1551:38031":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"16:3908:42861":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:46700:3587":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"2:50090:3431":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:11102:44331":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:1489:2707":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"12:880:2555":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"16:2772:4291":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:53732:18489":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"18:645:4468":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:50767:3239":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"12:2392:59847":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:9394:4611":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:10416:2495":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"6:1531:38028":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:15315:4747":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:2924:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"19:0:1000":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:14894:2591":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:13562:110":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"16:5289:4009":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:39110:2671":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"12:843:2698":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:11713:45225":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:10851:44513":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"16:3243:4275":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:8288:2612":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"16:6949:4314":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"5:5962:4576":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"6:1600:38036":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:11491:2644":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"18:782:60716":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:7062:51640":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:11836:2663":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"5:7731:3681":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:3434:2594":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:49520:3391":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"6:1634:38040":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:49791:2432":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:49767:3414":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:7602:2670":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:14379:2516":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"12:1238:3911":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:12660:49281":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:3371:2301":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"1:15895:2177":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:7248:187":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:2046:2412":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"12:2059:2557":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:12082:214":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:2481:2778":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"12:1784:4562":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:7539:2664":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"6:4287:40175":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"16:2733:3982":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"12:379:3915":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:51757:3163":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:11937:44545":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"12:787:2701":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:48003:180":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"6:5439:40813":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:10082:4437":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"6:4242:40172":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"6:4532:40204":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:50510:3440":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"16:3366:4282":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:10801:4336":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:47927:190":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"16:7379:4032":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"16:7051:4098":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:13323:49975":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:8610:163":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"9:927:41993":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"6:6856:41755":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"6:5478:40815":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:2183:583":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:9517:2430":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:10813:147":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:5036:3332":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:1108:7642":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"5:1533:2709":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:2654:181":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:48828:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"1:12072:2866":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"6:6097:37972":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:11022:2528":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"17:12496:49209":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:12770:49357":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:10580:2966":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:11998:2616":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:10048:44397":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:14067:2449":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"6:3920:40140":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:12557:49213":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"16:5238:42699":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"16:7792:4046":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:3366:215":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:8744:2304":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"16:3155:4271":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:50386:3017":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"12:1703:3923":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:0:1345":{"crate_id":1,"path":["std"],"kind":"module"},"2:3528:3053":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:47978:2553":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"17:12892:49750":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:22849:56654":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"2:53537:3122":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:47918:36383":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:50506:3437":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"1:15887:2171":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:1447:2700":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:50737:3452":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:2512:4389":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:46936:3175":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:10147:44396":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:853:2738":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"6:6114:41223":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:12596:51645":{"crate_id":1,"path":["std","sys","unix","fs","TimespecDebugAdapter"],"kind":"struct"},"7:38:41874":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"18:136:50812":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:13549:50355":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"6:4256:40173":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:12360:49200":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:973:2767":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"6:1567:38033":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"16:7741:4111":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:53475:3157":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"5:8241:2554":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"14:189:42619":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:3405:2436":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:14630:8662":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:50365:3015":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"16:4495:43232":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"16:5348:4053":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"5:8373:2291":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:11449:2643":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"6:1748:38050":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:12026:49115":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"16:6604:4093":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"5:1760:3710":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:11256:2839":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:8939:2680":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:11628:45056":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:1088:2780":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:12170:49186":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:11282:44333":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:3537:3058":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:13515:50351":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"5:4665:4567":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"16:5855:4073":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:14458:142":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:3619:132":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:2651:182":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"8:0:2138":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:1991:146":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"16:6286:3928":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"6:5390:40807":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:3394:3113":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:50351:3014":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:15890:2174":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:10789:2690":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:9259:4666":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:4785:2412":{"crate_id":2,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"2:50526:3443":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:3801:207":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"2:46617:3303":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:9826:4402":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:9786:44325":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"12:466:59859":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:11198:2495":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:22864:56654":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:5280:2978":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"18:169:50814":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:49132:147":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"6:5260:40776":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:3498:2563":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:4855:3231":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:2864:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"6:3972:40144":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:48947:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"1:10643:2783":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"6:4038:40151":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:12093:49123":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:8929:44315":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:13421:50337":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:13735:50371":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"6:5378:40806":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:12406:49202":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:10586:44539":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:1441:2555":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"2:51655:3134":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"5:8226:2341":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:10464:4418":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"6:3907:40139":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:48873:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"5:4281:2554":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:5513:2478":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"6:5149:40748":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"18:837:2998":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"5:2376:3756":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"16:2959:4268":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:11181:4682":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:6576:2501":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:10775:44510":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:9064:44318":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:46173:198":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:12746:44334":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"14:47:42619":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:10228:51677":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:10913:44619":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:48843:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"17:9431:4675":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"5:3960:3705":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:51673:56216":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:10455:4419":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"5:6739:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:39146:3721":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:46299:2284":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:3477:2954":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:10291:4391":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:8849:4375":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"6:4446:40195":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"5:2266:4566":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:13859:2663":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"6:6914:40330":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:4163:3096":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"6:4020:40149":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"6:0:803":{"crate_id":6,"path":["libc"],"kind":"module"},"17:9131:44320":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:49701:3406":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"6:6027:41222":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:607:37150":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"16:4439:43224":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"16:5257:4666":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:11207:218":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"12:399:3914":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"16:3103:4281":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"6:4098:40159":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"18:729:60728":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:3503:2564":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:9746:44324":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"6:4474:40198":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:23439:3079":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:50222:3010":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:10058:4443":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:47851:2553":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:25120:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"6:6902:40328":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:10899:44610":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:10036:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"16:6630:4302":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:12482:49208":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:50729:3451":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:12067:164":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:47295:2725":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:3173:150":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"6:6205:41229":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:2919:185":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:15038:2575":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:53706:18487":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"6:4379:40186":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"16:7782:4018":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:2361:8650":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"16:3686:42711":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:13273:2629":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"16:3051:4327":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:5145:2736":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:3465:2595":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:9143:2517":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:3909:2928":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:15896:2178":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"6:6671:41595":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"13:121:42574":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"6:4218:40170":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:10902:2462":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"17:11142:44332":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:9159:3074":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:12030:2618":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:15888:2172":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:3105:3062":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:7139:188":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"17:12758:49354":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:13612:50367":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:6745:2490":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:49681:3404":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:10438:2744":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"12:1162:3908":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:10266:4400":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"5:7753:3682":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"16:7684:4021":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"16:6012:4008":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"16:7141:4106":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"6:5447:40814":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"12:2398:56142":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:15253:2834":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:15232:2827":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"6:5331:40804":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:10643:44523":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"16:7155:4107":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"16:3461:4278":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:23437:3118":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"6:5541:40843":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:8545:2864":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:4829:2627":{"crate_id":1,"path":["std","net","ip","display_buffer","IpDisplayBuffer"],"kind":"struct"},"1:10973:2429":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:696:2733":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:13180:49860":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:48570:2964":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:15881:2166":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"1:12558:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"2:53781:18492":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"5:3905:4564":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"16:2813:4284":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:8000:4597":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"16:6342:4086":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:8217:3704":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"1:11270:2847":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:23104:3216":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:4492:2427":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:14542:2602":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"18:849:4460":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:49777:2430":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"9:963:3842":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:3461:2948":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:10318:4402":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:7093:51640":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:4843:3230":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:50522:3445":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:9657:3000":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"5:2843:3717":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:13595:50365":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:14074:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"18:712:3085":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:607:44312":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:13975:50492":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:10187:44393":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"18:811:4457":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:10921:2460":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:9004:44316":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:3589:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:3183:232":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"18:739:60735":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:15899:2181":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:24790:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:10428:51765":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"17:12117:49182":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:5575:2483":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:28332:3248":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:10435:4370":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:2886:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:46677:3586":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"17:10136:44326":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:13953:50456":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:50542:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"18:754:60720":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:2510:2779":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"1:14061:2451":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"17:8902:44314":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:46365:3212":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"1:14801:4624":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:46803:3498":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"6:6943:40334":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:6645:2491":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:12197:3407":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:15192:2826":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:23428:2495":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"16:4271:43176":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:3755:2693":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:49749:3241":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:3745:3490":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:14255:57300":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"1:10278:4616":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"16:7281:4015":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:8199:3171":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"17:11701:45116":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"17:10115:4440":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:12646:49280":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:10525:135":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:14150:189":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"1:3284:2440":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"16:2937:4290":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:15170:2534":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:9361:4673":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:5154:2827":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:1387:2697":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:2422:8667":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:4178:2451":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:3167:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"6:3987:39992":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"18:857:4461":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:52001:3138":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"5:1673:2697":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"6:4402:40189":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"6:4061:40154":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:9653:4615":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"16:6407:4087":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"16:5396:4056":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:3520:3049":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:48322:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:11105:2626":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"5:3948:2444":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:10028:44380":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"16:5516:4247":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:11409:2641":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:11670:3392":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:11882:2667":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:3170:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:32634:3527":{"crate_id":2,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"17:11031:44330":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:9512:2822":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"16:5498:4061":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"6:571:37146":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:53413:3137":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:50676:203":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"6:5419:40810":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"5:7312:2554":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:11956:44544":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:15902:2184":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:46730:3589":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:3613:2303":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"9:234:3802":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"16:0:2145":{"crate_id":16,"path":["gimli"],"kind":"module"},"6:1764:38051":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"6:1544:38030":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"6:4012:40148":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:12716:49290":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"12:971:2706":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:47054:3185":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"5:5488:2412":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:10719:2444":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:24074:3080":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"5:981:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:46756:3307":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:50563:2597":{"crate_id":2,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"17:11945:44543":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:12565:2783":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"16:5959:4001":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:9636:44322":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:9267:54043":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"9:1075:3845":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"9:1056:3837":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"0:31:1619":{"crate_id":0,"path":["fnv","FnvHashMap"],"kind":"typedef"},"6:5274:40777":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:11907:49005":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:11563:45017":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:10703:2807":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"16:6433:4088":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"16:6858:4310":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:6647:2504":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:3602:2435":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:11387:2553":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:47810:178":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:10068:4400":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:9676:60704":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"16:3521:42701":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:13138:49814":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:10407:4387":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:15633:4625":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:48448:3507":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:5978:2844":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:1418:2699":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"9:809:2641":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"16:5948:4264":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:46965:3178":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:13245:2841":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"1:11842:183":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"17:10831:4402":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"16:4660:43301":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:1374:2553":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:8715:2725":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"6:1621:38038":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:52303:3164":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:47066:3186":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"5:844:227":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:11457:44734":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:13472:50344":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:8974:51655":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"2:22902:56887":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:3042:2789":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:5271:3340":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:15849:4748":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:8634:3244":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:12228:5285":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"6:6129:41225":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:5425:2512":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:10476:4420":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:47867:2341":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:24242:3465":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:53583:3140":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:4:985":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:46946:3176":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"16:5374:4055":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:13744:2662":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:51378:56268":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:24922:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:4428:2422":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"5:1296:3713":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:53686:18485":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:51572:56258":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:49859:3419":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:13155:49857":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:51979:3135":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:13602:50366":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:14460:2423":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:14142:2746":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:49761:3413":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"17:10788:44509":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:4258:2450":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:3622:133":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:46099:2936":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"5:8314:2341":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:52539:3144":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:24425:36168":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"5:6562:2554":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:53335:3153":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:24366:4727":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:13126:3386":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"18:720:56221":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:9646:60662":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:8187:2767":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"2:8451:2726":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:11968:49011":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:12330:4593":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"17:11784:45239":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:10986:2432":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"16:4903:43352":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:11013:44329":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:49354:3608":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:8453:2854":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:49358:3607":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:10417:2734":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:48577:2963":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"16:6873:3501":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"12:2072:2559":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"2:46605:3302":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:52071:3124":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"12:1103:2708":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:5708:2901":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:10584:2967":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"16:3743:42744":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:46997:3181":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:46358:3211":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"1:2911:2784":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:11494:44950":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:25087:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"2:47017:3182":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"5:1729:2701":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:50534:3438":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"5:2619:3718":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"16:3770:42747":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:13539:50354":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"6:6229:41231":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:527:37141":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:10468:2746":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"16:3576:42702":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:14968:2675":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:6642:3179":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:10568:110":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"17:13167:49859":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:9561:4381":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"16:6518:4025":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"16:7247:4043":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"6:3966:40143":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:1592:2709":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:52727:3121":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:14371:3453":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"16:4411:43220":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:13394:8660":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"16:5649:4066":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"5:3395:2553":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:6241:2498":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"7:85:41881":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"5:7048:3628":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"6:4116:40161":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"9:749:3779":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"16:4599:43288":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"12:1881:146":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:11134:4745":{"crate_id":1,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"17:12282:49194":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:14779:4622":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"16:7768:4017":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:46657:3592":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:15898:2180":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:10364:4392":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"14:194:42620":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"6:5229:40797":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"16:6504:4091":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:10304:4390":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:52381:3152":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:53677:18484":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:3374:222":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"12:2040:2554":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"16:5721:4070":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:51903:3143":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:49895:3392":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"6:5998:37020":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:1405:2698":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:46669:3432":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"5:2396:3714":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:48584:2965":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:50419:3513":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"16:7449:4019":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"5:3838:2697":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:3372:2929":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:50530:3444":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:9183:4345":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:10576:2964":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:5431:2510":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:3532:3055":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:23976:56652":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:12798:3566":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"6:1606:38037":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:11591:3389":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:6841:2541":{"crate_id":1,"path":["std","os","net","tcp","TcpStreamExt"],"kind":"trait"},"6:4410:40190":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"6:1558:38032":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:47304:31678":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:53659:3125":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:15901:2183":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:24402:3280":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:5729:3214":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:13352:49989":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"6:5301:40802":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:13233:49904":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"9:157:3794":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"18:829:4459":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:4143:2814":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"6:5567:40844":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:9535:2724":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"5:8271:2341":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"16:7169:4026":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"5:8257:57717":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:10039:44381":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:6100:2845":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"16:6075:4010":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:11250:2905":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"5:4694:240":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"16:7826:3211":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"10:0:2140":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:11530:4687":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"5:8308:2341":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:49599:3399":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:23230:2495":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:50779:3237":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"17:11335:4341":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"5:1740:2702":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:4410:2420":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"9:469:4697":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"16:4840:43337":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:46233:200":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"5:3104:2398":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:48070:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:6477:51100":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"6:6007:41220":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"16:5427:4058":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"6:6184:41228":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"18:0:2147":{"crate_id":18,"path":["memchr"],"kind":"module"},"6:1680:38043":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:7314:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:22881:56886":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:11292:11029":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"6:1712:38046":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"16:4198:43127":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:50314:3013":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"6:5405:40809":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:47026:3197":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"16:4716:43309":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"6:4160:40166":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"16:6717:4095":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:11238:2527":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:10648:2488":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:11305:44334":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:11411:2697":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"16:6141:4081":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"6:6643:37098":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:3514:3046":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:9163:3170":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:8281:204":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:5708:7646":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:24463:36160":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:25522:3292":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:10638:2543":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:32990:3104":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:23770:12940":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"2:0:493":{"crate_id":2,"path":["core"],"kind":"module"},"1:11190:2828":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"16:5668:4067":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:24417:36150":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"16:547:4249":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:13361:50306":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"16:4573:43286":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:1311:4444":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:12957:49752":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:6649:2505":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:13785:50410":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:52025:3120":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:53717:18488":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:4256:2449":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"18:661:4469":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:3070:2800":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"17:12318:49196":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"6:601:37149":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"16:7369:4012":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"12:1256:2711":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:11168:4680":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:24334:3284":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:52169:56223":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:3473:2952":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"16:2839:4265":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"6:539:37143":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:14422:203":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"1:5738:2904":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:11288:2514":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:47076:3187":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:13873:50441":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"6:4464:40197":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:50193:3004":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"16:6130:4080":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"5:3114:57818":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:9716:60709":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"6:4346:40182":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:2215:1057":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:8863:2684":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"16:2754:4258":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"6:5186:40793":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"14:216:42628":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:11922:49006":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:46880:3189":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:10223:4368":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"6:533:37142":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"18:152:50813":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:4351:2459":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:9706:44323":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:46956:3177":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"6:672:37183":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"1:15053:2576":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:46126:2997":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"17:13774:50409":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:1610:2711":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"12:895:3900":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"1:10443:2765":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"6:4526:40203":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:10253:4366":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"16:7063:4099":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"3:0:436":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"1:14795:4623":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"9:0:2139":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:56640:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:47045:3184":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"5:69:3676":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:8024:3063":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:10390:4398":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:13257:49907":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:8646:51655":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"17:13345:49977":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:14185:30062":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:48364:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:7422:2658":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"6:580:9941":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"5:6340:3681":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:46737:3590":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:1146:7644":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"16:6482:4299":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:7938:2349":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"16:3402:3999":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:10565:110":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"1:11952:2611":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:5519:2479":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:12157:49185":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:3274:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:32694:57371":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"2:50399:3512":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:3814:3491":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:4383:2412":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:3524:3051":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:1477:2705":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:9326:4415":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:48931:2962":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"2:12230:3408":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"6:4440:40194":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:49571:3396":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"5:8249:3749":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:11797:45240":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:2141:2557":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"12:353:59852":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:25021:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"12:777:2341":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"6:4362:40184":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"15:269:3935":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:4485:2424":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:49162:4735":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:14912:51451":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"5:5609:3639":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:47313:2459":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:11514:4683":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"16:7131:4105":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"16:7323:4031":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"12:933:2703":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"5:1751:196":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:12196:49188":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"16:3029:4270":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:7470:2661":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"16:4871:43344":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:51692:3119":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:10963:2428":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"1:10303:4618":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:9427:54644":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"2:46905:2428":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:11409:44732":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:11479:3386":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:10217:44313":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:15897:2179":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"6:4538:40205":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:5300:2623":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:50055:3427":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:6481:51104":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"16:5460:4060":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"6:4127:40162":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"6:4055:40153":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:46633:3305":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:11944:2553":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:11960:2341":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:9087:44319":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:32642:57374":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"2:47859:2697":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:5226:2977":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"5:8549:2555":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"2:48895:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"6:3896:40138":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"6:1740:38049":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"12:952:2705":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:11985:2615":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"16:4803:43324":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"16:6277:4084":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"6:5488:40816":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:11017:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:11905:51638":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"5:3110:57817":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"5:6759:3639":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"12:2052:2556":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"12:472:59855":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"16:5698:4069":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:51710:56238":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:47994:2341":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:11518:3387":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"16:5443:4059":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:14931:2590":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"1:11314:2503":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:24313:36144":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"1:7834:2767":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"16:6907:4096":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"18:801:4456":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:11890:49004":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:681:44313":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:5497:2476":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:23293:3079":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:47086:3192":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"5:8472:220":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:13129:49813":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"5:984:3746":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:2543:4417":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:13908:50449":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:11518:2647":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:12527:49211":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:47097:2429":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:23051:3076":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"1:3371:2441":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:10489:44439":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:11002:44622":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:11234:4377":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:13763:50408":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"6:4148:40165":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:11048:2531":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"6:5210:40795":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:12687:49283":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"4:0:2137":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"17:11085:4382":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:4217:2453":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:10720:56228":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"5:4581:3736":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"16:7110:4103":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"6:6931:40332":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:46974:56103":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"6:1704:38045":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:2119:2553":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"5:3428:2558":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:13281:49971":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:12431:49204":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:49154:4734":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"16:5902:4074":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:12383:49201":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"5:8420:3497":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:13359:3002":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:3179:233":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"1:12077:213":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"16:7637:4109":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"17:13247:49906":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"16:6089:4078":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:52877:3145":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:13377:50334":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:10665:2489":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:13073:49808":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:4008:44512":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"6:6016:41221":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"5:8361:2290":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:542:3986":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:46277:201":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:11177:2895":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"16:6381:4023":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"11:46:59846":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"5:1055:3747":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:15065:2582":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"6:3877:40136":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:9796:60663":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:11245:2902":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"5:7551:4564":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"16:6533:4297":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:1397:2341":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"16:6060:4049":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:13961:50458":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:10445:44438":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:46770:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"6:157:36828":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"17:10571:4349":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"12:2045:2555":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"2:8378:2458":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"16:5639:4065":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"18:885:4463":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:56244:3108":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"6:1669:38042":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"16:6679:4306":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:10799:2445":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"16:6557:4092":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:10503:4421":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"5:1719:2700":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"6:6937:40333":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:9563:4614":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"6:4198:40168":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:10527:2712":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"16:5605:4064":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:24508:36170":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:12700:49289":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:10104:4439":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"16:6099:4079":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:2484:44426":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:21:676":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:8876:158":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"16:6190:4083":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"5:3105:59074":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"5:1072:2553":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:14862:2665":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:4036:2461":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"5:7891:239":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"12:979:2707":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:23382:2495":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:6924:11032":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"6:5547:40052":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"5:8483:3623":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"6:5293:40801":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:10660:44542":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:13452:50342":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:46787:3497":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"14:244:42621":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"16:6173:4082":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:13522:50352":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:11501:2553":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"6:5240:40798":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:3872:2927":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:14404:2488":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"2:53697:18486":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"5:8466:57725":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"1:8295:2613":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:46417:3313":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"6:6896:40327":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"16:5273:4667":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:11034:2529":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"17:12543:49212":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:15893:2175":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:3508:3043":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:11212:4379":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:46372:2977":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"2:49841:3418":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"5:8232:3748":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:2123:2341":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:56601:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:10942:2425":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"12:183:3916":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:13783:2664":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"16:6490:4090":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"12:856:2699":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"2:10252:3373":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:15884:2169":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"6:6135:41226":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"12:2032:2553":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"5:853:109":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:11868:2666":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:1456:2702":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:25054:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"2:3674:2716":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:9240:4338":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:49995:3425":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:49913:3393":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"5:8217:3622":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:13147:49815":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"9:27:3826":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"2:23964:2519":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:9948:44328":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"18:637:60716":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"6:1526:38027":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"16:4775:43320":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"6:88:36762":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"17:13404:50336":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:11684:3393":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"12:2280:2710":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"5:777:57709":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:4476:51971":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:2326:604":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:14059:139":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:15894:2176":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:12620:49278":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:46723:3588":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"5:1502:2708":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"16:5745:4071":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"6:161:36829":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:49941:3422":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:37954:3085":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"1:15071:2583":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:14399:54025":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"17:11689:45115":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:12014:2617":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:46896:3190":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"5:8566:3677":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"13:233:4696":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:15883:2168":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:3060:2795":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"5:3106:57724":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:48154:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:15908:2190":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:5149:3333":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"16:3340:4257":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"16:6050:4077":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:49107:2281":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:15886:2170":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"17:12048:49116":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:859:2739":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:10545:44537":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"6:5247:40799":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"6:1576:38034":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:7484:2662":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:15377:3939":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:12053:2860":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:2288:3222":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:8195:2641":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"16:5530:4062":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:24070:2495":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:2359:8649":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"6:6214:41230":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:11754:45235":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:10678:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"1:9434:4612":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"1:13413:54642":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"5:2328:3715":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:46775:3496":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:51803:3151":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:14394:51723":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"0:34:1623":{"crate_id":0,"path":["fnv","FnvHashSet"],"kind":"typedef"},"6:1721:38047":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"6:5288:40800":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:5080:2715":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"1:8446:2852":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:13353:2998":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"6:4179:40167":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"15:230:3930":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:3449:2942":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"17:12143:49184":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:13369:50307":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"13:0:2136":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:9537:2749":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"6:4315:40178":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"16:4316:43197":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"5:8449:3701":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"6:6665:41594":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:9539:4376":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:6339:2548":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"6:4386:40187":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"16:6468:4089":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:11507:2646":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"16:5217:4259":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:24515:3543":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:10198:44392":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:23140:3229":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"5:6775:3652":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:15339:51767":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"16:6691:4094":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"6:4048:40152":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:6902:57382":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"17:12469:49207":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"6:1588:38035":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:5154:3334":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:23153:2495":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"2:47107:3188":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:3803:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:10340:4394":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"16:4743:43312":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:11712:3395":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:11256:44304":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:5505:2477":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:50750:159":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"16:7208:4108":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:6467:2479":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:3407:2302":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:52047:3123":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:24541:3481":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:4752:2525":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"1:1601:2710":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:14886:52411":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"16:5784:4072":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:50376:3016":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:14417:51672":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"17:10166:44394":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:13928:4621":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"1:5151:2826":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"9:603:4712":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:7734:2766":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"17:9396:4674":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:10980:2430":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"17:13029:49805":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:52457:3159":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:15903:2185":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:50171:3001":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:13428:50340":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"16:4942:43367":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:51603:3142":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"16:7868:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:48406:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:12674:49282":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:10574:2963":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:24479:36171":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"5:3402:2557":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:48810:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"17:10962:44597":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:3837:2931":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:49659:3402":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:10578:2965":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"6:4208:40169":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:8954:4347":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:7456:2660":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:13364:3003":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:13052:3420":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:9836:60660":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:39186:3114":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:8435:56113":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:10914:2458":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"5:3407:3630":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:10516:44440":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:52427:3156":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:8675:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:5755:784":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:1236:44395":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:10655:2785":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"1:1460:2703":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:11603:45054":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:49609:3400":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:2135:2556":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:9156:2561":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:47842:2340":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:13481:2630":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"17:10394:4388":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"16:7100:4102":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"16:6026:4006":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:24350:4721":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"17:13196:49861":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"16:6656:4304":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:49123:2280":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:9439:54637":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"1:1105:7640":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:51855:3158":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"11:0:2141":{"crate_id":11,"path":["adler"],"kind":"module"},"17:294:60711":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"16:7264:196":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"16:2905:4267":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"16:5326:4052":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:2152:2559":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:48834:134":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"2:56653:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:997:2551":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:9558:4613":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"1:12087:2590":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"18:766:60725":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:9756:60710":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:24390:3279":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:1578:2708":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"16:4467:43228":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"6:5426:40811":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"6:4493:40200":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:46716:3431":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:9291:4671":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:11854:2665":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"16:7721:4022":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:50694:192":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"1:10511:7641":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:3376:107":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"6:5398:40808":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:24529:3482":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:11201:2830":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:8719:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:10572:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"9:722:3778":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"17:10093:4438":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"6:5311:40803":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"16:3314:4256":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"6:4081:40157":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"5:4765:4569":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:12634:49279":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"6:1912:38186":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:53743:18490":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:11474:44949":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"16:3199:4273":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:13557:50356":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:12585:49228":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"5:3436:2556":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"6:4416:40191":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"5:1152:4564":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:9988:44378":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:9275:4667":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"6:1626:38039":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:24988:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"6:5974:37061":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:12222:49190":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"17:13565:50357":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"15:248:3931":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"6:3960:40142":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:9206:44321":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"0:0:2036":{"crate_id":0,"path":["fnv"],"kind":"module"},"17:13859:50423":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:56627:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:50686:30061":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:11822:45254":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"6:6120:41224":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:5531:3583":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:53621:3160":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:10586:2968":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:4097:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"6:4277:40174":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:13817:50414":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:3743:4333":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"6:5204:40794":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:5278:2834":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:13761:54638":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"16:7025:4002":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"16:3007:4269":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:51402:3161":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:9466:4676":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:13016:49753":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"5:4372:2697":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:46596:29525":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"5:1276:3712":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"5:4509:2553":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:46850:4587":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:3843:2933":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:4146:2815":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"6:4075:40156":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:4467:2405":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:1113:7643":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"15:0:2144":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:50538:3439":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:50575:3524":{"crate_id":2,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"2:8638:3243":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:46988:3180":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"6:4509:40201":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:3459:2443":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"6:5582:40845":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"16:3297:4329":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:2397:8660":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:51502:3162":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:10530:44536":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"16:4975:43376":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:13331:49976":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"16:7471:4007":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:23240:2520":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:11966:2614":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"16:6980:4097":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:12442:49205":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:15388:3939":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"6:4340:40181":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"5:7960:4584":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:46331:2935":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:23177:3081":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"16:7238:4029":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"16:3077:4328":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:3378:224":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"17:9160:4378":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"5:8406:3699":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:23765:3082":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"2:50287:3012":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:53225:3133":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:7599:2668":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"5:4017:2555":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"2:10853:1601":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"6:3981:40145":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:13755:50407":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:56614:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:13075:3421":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:50013:3426":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:15907:2189":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:3455:2945":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:52200:56203":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"5:4308:4564":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"6:6034:11029":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:52122:56213":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:46918:3191":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:13899:50448":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"5:4709:4569":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:50239:3011":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:49809:3389":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"16:3129:4280":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"6:4028:40150":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:13607:2673":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"6:4088:40158":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"5:3441:3631":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"16:3494:42700":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:4491:2341":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:47288:31676":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"16:3478:4277":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:9033:44317":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"18:896:4464":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:46338:3091":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1:8732:2874":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"12:940:2704":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:3444:2938":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:22836:3085":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"16:5998:3980":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:12015:49114":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:49735:3508":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"6:6925:40331":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"5:8494:3624":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"12:1183:3909":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:51532:3150":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:13037:49807":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:13293:49973":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"6:6153:41227":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"0:20:1606":{"crate_id":0,"path":["fnv","FnvHasher"],"kind":"struct"},"12:1666:3921":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"16:6931:4313":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"16:6035:4048":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"14:11:42619":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"12:750:2553":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:10127:4402":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:10554:3721":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"1:11890:54024":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"1:3381:4595":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:13271:49909":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"6:5366:40805":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:11725:45226":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:13747:50406":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"16:5303:4051":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:47333:31681":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:15900:2182":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"1:11894:52164":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"5:7477:2341":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:48196:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:25153:3468":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:56666:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:13917:50450":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"5:3366:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:10975:44596":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:14634:2513":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"18:866:4462":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:51470:3129":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"18:790:4455":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:51424:3149":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"16:7295:4016":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"16:7200:4028":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:14647:51670":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:57954:56250":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"12:928:2700":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"6:5178:40792":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:11629:3390":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:11196:2829":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"6:6057:37995":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"12:2253:2708":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:15904:2186":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:12774:3603":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:3384:2523":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"18:820:4458":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"5:5388:202":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"6:1537:38029":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:10610:44541":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:9526:2823":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:53873:18496":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"16:5887:4254":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:53834:18495":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:6250:41233":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"12:764:2697":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"6:4230:40171":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"5:5910:3618":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"12:2036:2341":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"3:321:207":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:9579:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"1:2126:2554":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"16:5869:191":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:5553:2480":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:3481:2956":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:2955:179":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"6:4485:40199":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"7:0:1497":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:510:44311":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:52617:3132":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"12:869:2554":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"16:5941:4076":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:24955:2770":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"16:5923:4075":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:6723:2506":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"0:30:1617":{"crate_id":0,"path":["fnv","FnvBuildHasher"],"kind":"typedef"},"2:46255:199":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:13840:50417":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:10598:44540":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:15882:2167":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"16:5412:4057":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:12512:49210":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:3486:3038":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:15889:2173":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"16:5176:43553":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:5323:2979":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"6:4425:40192":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:11698:3394":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:46213:197":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"6:4270:2846":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"12:432:3913":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"6:3933:40141":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:4219:2454":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:15865:51759":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:46694:2547":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:12573:49214":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:57975:56150":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"16:2792:3998":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"5:1518:2710":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:0:2146":{"crate_id":17,"path":["object"],"kind":"module"},"1:14429:2785":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"5:1547:2711":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:5216:3339":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:1483:2706":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"5:3462:2559":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"6:6243:41232":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"5:6498:228":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:3826:229":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:2420:5285":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"17:11354:4340":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:6573:2515":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:13344:3000":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"16:7659:4110":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:3254:116":{"crate_id":2,"path":["core","default","Default"],"kind":"proc_derive"},"6:1662:38041":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"6:1727:38048":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:47322:31679":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:11130:4679":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"16:6310:4085":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"6:4332:40180":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"16:7355:4011":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"6:6268:41234":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:11671:45059":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"5:1663:2553":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:10794:2691":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:11314:4416":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:11912:4746":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"1:1466:2704":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:50083:3430":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:13721:50370":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"6:4321:40179":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"6:6979:41782":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"16:7702:4020":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"6:4296:40176":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:13708:50369":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:46647:3591":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:6479:51102":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"6:4373:40185":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:12567:4620":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:51554:3154":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:13938:50451":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"5:1684:2341":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"5:1701:2698":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"11:54:3898":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"6:4067:40155":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"6:593:37148":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:1452:2701":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"5:7358:4564":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:2147:2558":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:14665:2667":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"5:1626:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:13507:50350":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:3469:2596":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"12:1147:2710":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:10550:8662":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:10015:44379":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:12125:2592":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:10988:44595":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"12:162:3912":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:10930:2423":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:14064:2453":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:3044:2790":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:9920:44327":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:47117:3065":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:48280:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:51448:3141":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:50514:3442":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"5:5906:3616":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:11341:11033":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:13529:50353":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"12:1682:3922":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:1031:2544":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"16:4351:43208":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:50045:2433":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"16:6643:4303":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:49672:3403":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:56679:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:46927:3194":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:299:60705":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:10517:2567":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"2:13410:3006":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:10558:44538":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:14960:4741":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"18:621:60730":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:47986:2697":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"6:586:37147":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"16:7184:4315":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:24171:3463":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:10622:4677":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"16:2883:4285":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"6:3883:40137":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:4180:2452":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:10247:3372":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"18:668:4470":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:7415:4030":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:10534:8655":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"17:12130:49183":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:15023:2574":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:10848:2278":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:50208:3007":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:47035:3183":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"6:626:37153":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:23234:2518":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:12003:49058":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:2914:2786":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"17:12302:49195":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:3104:2495":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"5:2005:2555":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"5:8279:196":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:11653:45058":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:13463:50343":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:6219:2501":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:32794:57368":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"2:2190:32270":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"1:7782:4597":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"2:50099:2547":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:15324:51766":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:49620:3401":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:15905:2187":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"16:4628:43293":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"5:2284:3633":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:10422:44437":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:14874:2666":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:14361:3168":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"17:13094:49809":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:46860:9180":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"5:383:3698":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:11547:45016":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"6:6908:40329":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:12070:49122":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"6:4142:40164":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:11088:2533":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"6:6967:41781":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:11381:44724":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"16:3265:4276":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:52663:3136":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"12:2404:59851":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:4140:2813":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:12921:49751":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"16:7309:4014":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:2265:3217":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:12183:49187":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"16:3177:4272":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:11769:45238":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"16:3221:4274":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"12:2412:59848":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:6719:3193":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"6:4135:40163":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:11432:2642":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:13794:50413":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:12250:49192":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:1431:2554":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:48112:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:7436:2659":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"9:996:3843":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:12262:49193":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:11591:45019":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"5:6851:2412":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"5:8287:3614":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:22883:56884":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:3493:2562":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"6:521:37140":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"18:704:60716":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:11556:3388":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:46189:196":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"18:774:60716":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"5:3554:2555":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"6:612:37151":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:783:4615":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"5:7207:4578":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"2:53758:18491":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:9873:44326":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:48238:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:4157:4350":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:9587:60708":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"18:611:4466":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:5000:3331":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:14109:57299":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:11742:45234":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:8096:2767":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"16:7079:4100":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:13584:50359":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:3616:131":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:49144:2641":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:53796:18493":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"16:7121:4104":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:10695:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"6:5433:40812":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:48028:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:2393:2681":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"6:4454:40196":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:4898:3167":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"6:4434:40193":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"9:686:3775":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"2:50074:3429":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:14:1612":{"crate_id":2,"path":["core","write"],"kind":"macro"},"6:6688:41596":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"6:4516:40202":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:10937:44621":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"16:7754:4112":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"12:1121:2709":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:3058:2794":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"17:11810:45253":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:4148:3090":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"2:8129:3173":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:39150:3234":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"17:13481:50345":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"12:0:2142":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"5:1909:4564":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:13306:49974":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:52693:3139":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:11264:2828":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:10874:44511":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"5:5948:4573":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"2:10041:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:2130:2555":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"16:5566:4063":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:2965:186":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:9930:60712":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:13495:50347":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"9:41:3827":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"17:12348:49199":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"12:2419:2290":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:11359:2631":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"6:6080:37969":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:11433:44733":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:48591:2966":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:46590:2547":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:10496:7638":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"6:4110:40160":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:49691:3405":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"9:692:3777":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"18:694:4471":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"6:618:37152":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:12417:49203":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"16:2861:4266":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:23389:12921":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:8777:2721":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:52223:56214":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:47006:3195":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:10803:143":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:49580:3397":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:13887:50447":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:11579:45018":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"14:0:2143":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"16:2981:4279":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:11615:45055":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:12731:49291":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:13091:3424":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:50518:3441":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"6:3993:40146":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:5567:2481":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"5:444:2306":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"6:4005:40147":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"12:559:144":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:22904:56889":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"9:776:3824":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"6:545:37144":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:37930:180":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:24856:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"16:4689:43306":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:5746:2906":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"6:565:37145":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:3250:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:3176:136":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"6:1733:2840":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:8671:137":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:10211:44398":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:8860:2861":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:11154:2894":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"5:8389:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"6:5982:37968":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"5:7935:4578":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:7161:3196":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:2504:3213":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"14:250:42627":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:24823:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"17:9958:60668":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:11068:4346":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:47909:3503":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:7739:54643":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"2:2279:3221":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"6:513:37139":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"5:1710:2699":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:49589:3398":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"6:634:37154":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"9:1020:3844":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:47876:3501":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"17:13440:50341":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:9883:60661":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:10582:191":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"16:6595:4024":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"16:4381:43214":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:12607:49277":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:13334:2999":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:14437:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:2909:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"18:678:143":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:15854:7645":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:3439:2565":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:3678:3101":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:3831:138":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:50108:3432":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"9:900:42026":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:10949:44598":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:2861:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"1:2917:2421":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"1:5563:2475":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:10814:4337":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"16:5685:4068":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:9536:2723":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:32628:2722":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:53083:3165":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:32594:3489":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:11071:2532":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"1:5730:2903":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:10993:2433":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:12209:49189":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:13660:50368":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"12:114:59858":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:51949:3131":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"5:0:283":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:10999:2527":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"2:49115:4733":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:13573:50358":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:14470:52407":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:32448:3538":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:12455:49206":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:49646:3189":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:2767:584":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:5860:2836":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:48861:108":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"5:3814:161":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:51358:56232":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"5:3825:2553":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"6:6954:40335":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"16:6549:4027":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:10240:4363":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"16:7090:4101":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"18:651:4465":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"6:4356:40183":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"12:2066:2558":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"14:56:44734":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"6:5455:59760":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"5:5861:4564":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:24442:36169":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"5:1256:59094":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:3375:221":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:12106:2591":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"16:6159:4013":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"16:6331:3927":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:1261:144":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:13015:3417":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:10925:44620":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:50065:3428":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:53811:18494":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:3855:2934":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:5636:2898":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"18:744:60723":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:15906:2188":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"5:8436:3700":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:10515:2405":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:4867:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:11985:49014":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:3656:2996":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"14:231:3626":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:8684:2305":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:51833:3155":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"6:1694:38044":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:2314:4393":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"6:4392:40188":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:5759:2907":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:11640:45057":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"6:5216:40796":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:12237:49191":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:10711:2442":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"16:5362:4054":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"6:4308:40177":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"12:2269:2709":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"}},"external_crates":{"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":21}