{"root":"0:0:2030","crate_version":"1.0.7","includes_private":false,"index":{"2:11458:3607":{"id":"2:11458:3607","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11421:58825":{"id":"2:11421:58825","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11040:3136","`DoubleEndedIterator`":"2:7079:119","prim@char":"1:12376:407","str::rmatch_indices":"2:11424:58826"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:50165:3402","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11045:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2526:126":{"id":"2:2526:126","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2497:232","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"2:11453:58836":{"id":"2:11453:58836","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12376:407","self::pattern":"2:11040:3136"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11045:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11045:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11060:3140","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11359:58817":{"id":"2:11359:58817","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"str::slice_mut_unchecked":"2:11360:58818","crate::ops::Index":"2:2987:2566","`str`":"1:12382:1351"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11394:54387":{"id":"2:11394:54387","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"str::split":"2:11388:54383","self::pattern":"2:11040:3136","prim@char":"1:12376:407","`DoubleEndedIterator`":"2:7079:119"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:50033:2552","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11045:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11045:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11060:3140","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:19:1606":{"id":"0:19:1606","crate_id":0,"name":"write","span":{"filename":"lib.rs","begin":[115,4],"end":[124,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["bytes",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11366:56565":{"id":"2:11366:56565","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11367:56558"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:50289:3408","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2516:2326":{"id":"2:2516:2326","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2490:131"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3321-0:10:1599":{"id":"b:2:3321-0:10:1599","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2294","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3319:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1599","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3323:1439"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:18:1605":{"id":"0:18:1605","crate_id":0,"name":"finish","span":{"filename":"lib.rs","begin":[110,4],"end":[112,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11360:58818":{"id":"2:11360:58818","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12382:1351","crate::ops::IndexMut":"2:2991:2567","str::slice_unchecked":"2:11359:58817"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11374:54394":{"id":"2:11374:54394","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"2:11040:3136","prim@char":"1:12376:407"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11045:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11427:58827":{"id":"2:11427:58827","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2531:126":{"id":"2:2531:126","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:39298:2647","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"2:11444:54396":{"id":"2:11444:54396","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:11040:3136","prim@char":"1:12376:407"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48047:177","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11045:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11045:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11060:3140","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11344:58815":{"id":"2:11344:58815","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11342:58814"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11384:2332":{"id":"2:11384:2332","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:48049:175","prim@char":"1:12376:407","self::pattern":"2:11040:3136"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48047:177","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11045:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11045:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11060:3140","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7736:2800-0:10:1599":{"id":"a:2:7736:2800-0:10:1599","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7736:2800","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1599","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11462:58837":{"id":"2:11462:58837","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4467:58837"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:50314:3411","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11367:56558":{"id":"2:11367:56558","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11366:56565"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:50298:3409","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11371:54393":{"id":"2:11371:54393","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"2:11040:3136","prim@char":"1:12376:407"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11045:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:17":{"id":"0:17","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[108,0],"end":[125,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["write_length_prefix","write_i64","write_i8","write_u64","write_u8","write_str","write_i128","write_i16","write_u128","write_u16","write_isize","write_i32","write_usize","write_u32"],"trait":{"name":"Hasher","id":"2:8832:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1599","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:18:1605","0:19:1606"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:2532:1425":{"id":"2:2532:1425","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48191:206","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"name":"TryFrom","id":"2:2497:232","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5123:51567":{"id":"5:5123:51567","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:11461:51570"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6992:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11447:58834":{"id":"2:11447:58834","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:11040:3136","prim@char":"1:12376:407"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11045:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11045:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11060:3140","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5108:59472":{"id":"5:5108:59472","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:6992:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6992:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11045:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5120:59475":{"id":"5:5120:59475","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`String`":"5:6992:220","`Box<str>`":"5:286:2302"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:2302","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6737:2527","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6992:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11341:58813":{"id":"2:11341:58813","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:13":{"id":"0:13","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[91,0],"end":[97,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2564:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1599","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:14:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11450:58835":{"id":"2:11450:58835","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:11040:3136","prim@char":"1:12376:407"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11045:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11464:2411":{"id":"2:11464:2411","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4468:2411"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:50323:2412","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11362:54376":{"id":"2:11362:54376","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11361:54375"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2527:1426":{"id":"2:2527:1426","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48191:206","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2497:232","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11418:58824":{"id":"2:11418:58824","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11040:3136","`DoubleEndedIterator`":"2:7079:119","str::matches":"2:11415:2246","prim@char":"1:12376:407"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:50237:3406","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11045:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11045:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11060:3140","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2726:2295-0:10:1599":{"id":"a:2:2726:2295-0:10:1599","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2726:2295","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1599","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2523-0:10:1599":{"id":"b:2:2523-0:10:1599","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2497:232","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2493:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1599","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2526:126","2:2527:1426"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11459:51568":{"id":"2:11459:51568","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11370:56572":{"id":"2:11370:56572","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:50307:3410","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11348:58816":{"id":"2:11348:58816","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:24:1617":{"id":"0:24:1617","crate_id":0,"name":"FnvHashSet","span":{"filename":"lib.rs","begin":[136,0],"end":[136,52]},"visibility":"public","docs":"A `HashSet` using a default FNV hasher.","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"HashSet","id":"1:1476:142","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"resolved_path","inner":{"name":"FnvBuildHasher","id":"0:20:1611","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"2:11429:58828":{"id":"2:11429:58828","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11403:54389":{"id":"2:11403:54389","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12376:407","str::rsplitn":"2:11406:54391","self::pattern":"2:11040:3136"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:50119:2556","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11045:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:14:59":{"id":"0:14:59","crate_id":0,"name":"default","span":{"filename":"lib.rs","begin":[94,4],"end":[96,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1599","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11364:3167":{"id":"2:11364:3167","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12376:407"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49991:3394","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11460:51569":{"id":"2:11460:51569","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11388:54383":{"id":"2:11388:54383","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11040:3136","prim@char":"1:12376:407","str::split_whitespace":"2:11366:56565","`DoubleEndedIterator`":"2:7079:119","str::rsplit":"2:11394:54387"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:50015:2543","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11045:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11433:58830":{"id":"2:11433:58830","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11353:54351":{"id":"2:11353:54351","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:48049:175"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48047:177","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9137:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9137:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11365:1607":{"id":"2:11365:1607","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:50001:2736","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11349:308":{"id":"2:11349:308","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"1:12393:1447","str::as_mut_ptr":"2:11350:54354"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:20:1611":{"id":"0:20:1611","crate_id":0,"name":"FnvBuildHasher","span":{"filename":"lib.rs","begin":[128,0],"end":[128,56]},"visibility":"public","docs":"A builder for default FNV hashers.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"BuildHasherDefault","id":"2:8872:1594","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1599","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"a:2:2676:224-0:10:1599":{"id":"a:2:2676:224-0:10:1599","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2676:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1599","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11355:54352":{"id":"2:11355:54352","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9137:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9137:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11415:2246":{"id":"2:11415:2246","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"str::matches":"2:11415:2246","prim@char":"1:12376:407","self::pattern":"2:11040:3136","`DoubleEndedIterator`":"2:7079:119"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:50219:3405","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11045:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2517-0:10:1599":{"id":"b:2:2517-0:10:1599","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1599","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2519:672"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:7735:2801-0:10:1599":{"id":"a:2:7735:2801-0:10:1599","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7735:2801","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1599","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11340:2333":{"id":"2:11340:2333","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11347:54209":{"id":"2:11347:54209","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:10608:3564"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11397:58820":{"id":"2:11397:58820","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"str::rsplit_terminator":"2:11400:58821","self::pattern":"2:11040:3136","str::split":"2:11388:54383","prim@char":"1:12376:407","`DoubleEndedIterator`":"2:7079:119"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:50065:3398","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11045:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11465:58838":{"id":"2:11465:58838","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4465:58838"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:50332:3412","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5122:51566":{"id":"5:5122:51566","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:11460:51569"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6992:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11441:51992":{"id":"2:11441:51992","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:11040:3136","prim@char":"1:12376:407"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48047:177","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11045:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2528-0:10:1599":{"id":"b:2:2528-0:10:1599","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2497:232","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1599","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2531:126","2:2532:1425"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11350:54354":{"id":"2:11350:54354","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12393:1447"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5119:59474":{"id":"5:5119:59474","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:6992:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6992:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5105:2739":{"id":"5:5105:2739","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:6992:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6992:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11045:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5111:59473":{"id":"5:5111:59473","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:6992:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6992:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11361:54375":{"id":"2:11361:54375","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11362:54376"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11339:788":{"id":"2:11339:788","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12376:407"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3323:1439":{"id":"2:3323:1439","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:46526:2572","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2240:2231":{"id":"2:2240:2231","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:2030":{"id":"0:0:2030","crate_id":0,"name":"fnv","span":{"filename":"lib.rs","begin":[1,0],"end":[367,1]},"visibility":"public","docs":"An implementation of the [Fowler–Noll–Vo hash function][chongo].\n\n## About\n\nThe FNV hash function is a custom `Hasher` implementation that is more\nefficient for smaller hash keys.\n\n[The Rust FAQ states that][faq] while the default `Hasher` implementation,\nSipHash, is good in many cases, it is notably slower than other algorithms\nwith short keys, such as when you have a map of integers to other values.\nIn cases like these, [FNV is demonstrably faster][graphs].\n\nIts disadvantages are that it performs badly on larger inputs, and\nprovides no protection against collision attacks, where a malicious user\ncan craft specific keys designed to slow a hasher down. Thus, it is\nimportant to profile your program to ensure that you are using small hash\nkeys, and be certain that your program could not be exposed to malicious\ninputs (including being a networked server).\n\nThe Rust compiler itself uses FNV, as it is not worried about\ndenial-of-service attacks, and can assume that its inputs are going to be\nsmall—a perfect use case for FNV.\n\n\n## Using FNV in a `HashMap`\n\nThe `FnvHashMap` type alias is the easiest way to use the standard library’s\n`HashMap` with FNV.\n\n```rust\nuse fnv::FnvHashMap;\n\nlet mut map = FnvHashMap::default();\nmap.insert(1, \"one\");\nmap.insert(2, \"two\");\n\nmap = FnvHashMap::with_capacity_and_hasher(10, Default::default());\nmap.insert(1, \"one\");\nmap.insert(2, \"two\");\n```\n\nNote, the standard library’s `HashMap::new` and `HashMap::with_capacity`\nare only implemented for the `RandomState` hasher, so using `Default` to\nget the hasher is the next best option.\n\n## Using FNV in a `HashSet`\n\nSimilarly, `FnvHashSet` is a type alias for the standard library’s `HashSet`\nwith FNV.\n\n```rust\nuse fnv::FnvHashSet;\n\nlet mut set = FnvHashSet::default();\nset.insert(1);\nset.insert(2);\n\nset = FnvHashSet::with_capacity_and_hasher(10, Default::default());\nset.insert(1);\nset.insert(2);\n```\n\n[chongo]: http://www.isthe.com/chongo/tech/comp/fnv/index.html\n[faq]: https://www.rust-lang.org/en-US/faq.html#why-are-rusts-hashmaps-slow\n[graphs]: https://cglab.ca/~abeinges/blah/hash-rs/","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:10:1599","0:20:1611","0:21:1613","0:24:1617"],"is_stripped":false}},"2:11380:2373":{"id":"2:11380:2373","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"prim@char":"1:12376:407","self::pattern":"2:11040:3136","`None`":"2:48049:175"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48047:177","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11045:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2241-0:10:1599":{"id":"b:2:2241-0:10:1599","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2294","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2235:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1599","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2243:51470"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11391:54385":{"id":"2:11391:54385","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12376:407","self::pattern":"2:11040:3136"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:10864:2558","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11045:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:10:1599":{"id":"0:10:1599","crate_id":0,"name":"FnvHasher","span":{"filename":"lib.rs","begin":[89,0],"end":[89,26]},"visibility":"public","docs":"An implementation of the Fowler–Noll–Vo hash function.\n\nSee the [crate documentation](index.html) for more details.","links":{},"attrs":["#[allow(missing_copy_implementations)]"],"deprecation":null,"kind":"struct","inner":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:15","a:2:7736:2800-0:10:1599","a:2:2676:224-0:10:1599","a:2:7735:2801-0:10:1599","a:2:2662:216-0:10:1599","a:2:2726:2295-0:10:1599","b:2:2241-0:10:1599","b:2:2528-0:10:1599","b:2:3321-0:10:1599","b:2:2513-0:10:1599","b:2:2238-0:10:1599","b:2:2517-0:10:1599","b:2:2523-0:10:1599","0:13","0:17"]}},"0:15":{"id":"0:15","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[99,0],"end":[106,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1599","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:16:1603"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11406:54391":{"id":"2:11406:54391","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"str::splitn":"2:11403:54389","self::pattern":"2:11040:3136","prim@char":"1:12376:407"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:50137:2554","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11045:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11045:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11060:3140","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11338":{"id":"2:11338","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:10603:1351","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11339:788","2:11340:2333","2:11341:58813","2:11342:58814","2:11344:58815","2:11347:54209","2:11348:58816","2:11349:308","2:11350:54354","2:11351:54350","2:11353:54351","2:11355:54352","2:11357:54353","2:11359:58817","2:11360:58818","2:11361:54375","2:11362:54376","2:11363:3430","2:11364:3167","2:11365:1607","2:11366:56565","2:11367:56558","2:11368:3966","2:11369:58819","2:11370:56572","2:11371:54393","2:11374:54394","2:11377:54395","2:11380:2373","2:11384:2332","2:11388:54383","2:11391:54385","2:11394:54387","2:11397:58820","2:11400:58821","2:11403:54389","2:11406:54391","2:11409:58822","2:11412:58823","2:11415:2246","2:11418:58824","2:11421:58825","2:11424:58826","2:11427:58827","2:11429:58828","2:11431:58829","2:11433:58830","2:11434:58831","2:11435:58832","2:11438:58833","2:11441:51992","2:11444:54396","2:11447:58834","2:11450:58835","2:11453:58836","2:11456:3321","2:11458:3607","2:11459:51568","2:11460:51569","2:11461:51570","2:11462:58837","2:11464:2411","2:11465:58838"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5121:2760":{"id":"5:5121:2760","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:6992:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6992:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11435:58832":{"id":"2:11435:58832","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12376:407","self::pattern":"2:11040:3136"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11045:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11045:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11065:3135","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11412:58823":{"id":"2:11412:58823","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48047:177","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11045:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11045:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11060:3140","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:21:1613":{"id":"0:21:1613","crate_id":0,"name":"FnvHashMap","span":{"filename":"lib.rs","begin":[132,0],"end":[132,58]},"visibility":"public","docs":"A `HashMap` using a default FNV hasher.","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"HashMap","id":"1:774:140","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"resolved_path","inner":{"name":"FnvBuildHasher","id":"0:20:1611","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"2:11409:58822":{"id":"2:11409:58822","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48047:177","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11045:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2662:216-0:10:1599":{"id":"a:2:2662:216-0:10:1599","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2662:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1599","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11424:58826":{"id":"2:11424:58826","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"prim@char":"1:12376:407","`DoubleEndedIterator`":"2:7079:119","str::match_indices":"2:11421:58825","self::pattern":"2:11040:3136"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:50183:3403","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11045:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11045:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11060:3140","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:16:1603":{"id":"0:16:1603","crate_id":0,"name":"with_key","span":{"filename":"lib.rs","begin":[103,4],"end":[105,5]},"visibility":"public","docs":"Create an FNV hasher starting with a state corresponding\nto the hash `key`.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["key",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1599","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2513-0:10:1599":{"id":"b:2:2513-0:10:1599","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2490:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2487:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1599","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2516:2326"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11357:54353":{"id":"2:11357:54353","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9137:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9137:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11400:58821":{"id":"2:11400:58821","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"prim@char":"1:12376:407","str::split_terminator":"2:11397:58820","self::pattern":"2:11040:3136","str::split":"2:11388:54383"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:50083:3399","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11045:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11045:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11060:3140","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5104:59471":{"id":"5:5104:59471","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:2302","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6737:2527","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:2302","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6737:2527","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11438:58833":{"id":"2:11438:58833","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:11040:3136","prim@char":"1:12376:407"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11045:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11456:3321":{"id":"2:11456:3321","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11002:125","`FromStr`":"2:11001:2826"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48191:206","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:11001:2826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11001:2826","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5103":{"id":"5:5103","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5014:1351","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5104:59471","5:5105:2739","5:5108:59472","5:5111:59473","5:5119:59474","5:5120:59475","5:5121:2760","5:5122:51566","5:5123:51567"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11369:58819":{"id":"2:11369:58819","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:50279:3407","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2519:672":{"id":"2:2519:672","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11342:58814":{"id":"2:11342:58814","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2238-0:10:1599":{"id":"b:2:2238-0:10:1599","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2294","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2232:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:10:1599","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2240:2231"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11434:58831":{"id":"2:11434:58831","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11431:58829":{"id":"2:11431:58829","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11461:51570":{"id":"2:11461:51570","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11363:3430":{"id":"2:11363:3430","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12376:407"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49985:3393","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11351:54350":{"id":"2:11351:54350","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:48049:175"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48047:177","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9137:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9137:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2243:51470":{"id":"2:2243:51470","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11368:3966":{"id":"2:11368:3966","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:50269:2738","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11377:54395":{"id":"2:11377:54395","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12376:407","self::pattern":"2:11040:3136"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11045:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11045:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11060:3140","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"2:2847:2437":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"6:7279:42084":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"6:7214:40603":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:25216:3134":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:3157:229":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:7955:2820":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"1:4302:2468":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:8911:61127":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"16:7297:4124":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:954:2448":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"16:6294:4047":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:3269:2753":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"6:519:37168":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:4972:2626":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:2932:2297":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:5845:2691":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:10108:4427":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:9422:44773":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"6:4191:40414":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:39338:2569":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"16:5488:4077":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:12103:49650":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:8137:44703":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:9250:44759":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:10944:2757":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:8147:2751":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:10075:44894":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:11873:49634":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:4653:40463":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:9303:4408":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:10257:44985":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"12:669:2809":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:12896:50416":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:13327:50838":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:12674:50252":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:6852:3013":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"17:11500:49445":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:8083:2974":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"17:1903:44806":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"5:2746:58204":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:6016:3045":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"16:4288:43567":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"17:11576:49454":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:11365:52318":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:12396:1446":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"6:5749:60192":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:9627:4406":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:46346:3293":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:2917:2740":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"16:7868:4034":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"6:1562:38060":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:62:36784":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"1:8076:2476":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:9548:52293":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:6042:3046":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:3147:3482":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:1967:2968":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"17:11853:49633":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"12:861:2815":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:49026:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"5:1594:4648":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:47089:2679":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:10753:3397":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:1771:4401":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:48793:2580":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:11909:49636":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:8612:2584":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:2154:576":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"5:5561:3663":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"16:6682:4039":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:10708:4486":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"5:5822:13187":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"18:636:61315":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"12:320:3922":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:2564:114":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"16:2885:4316":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:9501:4408":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:1751:57723":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"9:977:3756":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:9539:4398":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:8832:143":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"16:5959:4279":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:4268:2467":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:8227:2752":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:49991:3394":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"16:6450:3936":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:10420:4521":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:4838:2901":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:49323:2274":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:2969:3117":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:7300:53614":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:12781:50304":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:9371:44710":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:12347:7746":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"6:1600:38064":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:11460:4697":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"6:4185:40413":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:1500:38052":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"5:6463:4661":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:2839:2433":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"5:2993:3655":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"5:5525:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:54134:18540":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:12909:50417":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:47233:2698":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:9567:2556":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:8719:3038":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:11594:49498":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:51870:3220":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:4906:51673":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"17:8272:4492":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:3157:3003":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:13518:50917":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"9:505:3743":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"6:6409:41515":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:12060:49647":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"5:1690:2448":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"9:33:3844":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"2:46778:2412":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"5:6170:4648":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"16:4680:43671":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:7051:2301":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:9569:4824":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:12030:3947":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"5:5633:2725":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:48115:2547":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"17:1931:4397":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:13168:50824":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"16:3590:43061":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"6:4398:40437":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"16:6219:4100":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"16:5175:43039":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"12:1138:2819":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"16:7256:4120":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"9:111:3811":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"5:6302:3632":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:8796:11100":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:8631:4751":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:5348:52310":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:10947:2753":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"6:4239:40419":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:4403:3076":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:1105:2817":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:4585:3034":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:11175:2476":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"5:6799:194":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:5894:2889":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:39334:3719":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"18:736:4547":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"5:6769:3689":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"16:7321:4027":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"6:4635:40461":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:9415:2893":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:1828:8738":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:50980:3434":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:51971:3200":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:12550:50195":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:9722:4755":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:12926:50418":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:719:7745":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"5:4531:200":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:21256:3324":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"6:6524:41523":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:11230:2648":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:7978:8750":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:4505:3026":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"5:5908:4661":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"2:8606:2582":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"6:4449:40441":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:11340:8750":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"6:4621:40459":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:47552:4674":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"5:778:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:10682:4491":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:8071:2972":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"12:2184:56784":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"6:4475:40443":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:8412:2454":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:8598:110":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"1:4316:2463":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:965:2809":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"5:2029:58356":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"16:7215:4117":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:10578:3601":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:12291:49729":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"16:6030:4096":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:20422:2417":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"6:5720:41102":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:2758:2456":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"12:1852:2449":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:6430:2346":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"16:6597:4109":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:4195:3338":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:4326:2596":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:47570:31861":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:5227:11099":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:2662:216":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"17:10752:4385":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"12:822:2812":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:10455:4522":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:50137:2554":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:6838:3012":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"2:49050:129":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"16:2252:4284":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:973:2811":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:47537:31858":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:7860:53822":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"2:52641:3234":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"6:6430:41518":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:13091:50792":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:49959:3499":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:2833:2430":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:8871:44706":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"16:2570:4354":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:562:44702":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:50323:2412":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:13114:50795":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:8393:4369":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:29541:2799":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"9:800:42336":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"6:4565:40452":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:20294:2417":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:20302:2922":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:3980:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:50307:3410":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:13039:50785":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:12391:721":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:13527:50918":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"15:193:3939":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"10:0:2133":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:46821:3247":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:5506:186":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:7737:2913":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"18:614:61325":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:11436:49443":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"6:1505:38053":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:3953:2780":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"16:2984:4312":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:11923:3024":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:53215:3215":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:8650:3020":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"7:79:42186":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:6819:2803":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:2817:2418":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:1114:2818":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:8946:2842":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"17:967:44775":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:11716:51511":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:10583:4387":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:2232:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:13176:50825":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"14:215:42965":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"6:4247:40420":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:4200:40415":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:990:2813":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"14:160:42963":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"16:6149:4068":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:8448:151":{"crate_id":1,"path":["std","net","ip_addr","IpAddr"],"kind":"enum"},"2:50762:3420":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:2856:2442":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:49896:2548":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:47129:2683":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"16:7948:4032":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:49925:2550":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:10221:45006":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:4312:2469":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:11547:44927":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"6:4551:40450":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:6409:4687":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"6:4274:40423":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:6441:4816":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"17:242:61150":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:50033:2552":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:7150:52008":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"12:646:2547":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"6:1574:38061":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"12:387:60388":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:2780:2505":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:10385:4463":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:53921:3210":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:46560:2595":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"12:1518:3929":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"5:4026:240":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:12964:50752":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"5:1369:2338":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:8555:130":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"5:2737:58237":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:2444:2417":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"16:4376:43583":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"16:7447:4028":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"16:7404:4044":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:47219:2697":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:4200:3339":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:12860:50350":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:9297:182":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:8956:2446":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:54015:18531":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:10204:4675":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"1:12395:1445":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"16:5194:4743":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:48512:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"16:3707:43106":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:10233:45007":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:524:4676":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:2676:224":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"17:9328:4501":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"18:755:4548":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"5:6331:3634":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"1:8741:11093":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:8363:2762":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"18:531:4554":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"6:4598:40456":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:4:982":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:996:2814":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"16:7245:4119":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:11449:4696":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:11356:45561":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"6:6981:41896":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:52171:3225":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:49915:2549":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:11683:2653":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"6:4534:40448":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"16:5472:4076":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:12934:50419":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:12322:49731":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"5:6095:2338":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:21333:56928":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:48436:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:13374:50876":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"6:4778:40476":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:12739:50258":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:9844:4511":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:47210:2696":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:11161:45367":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:11893:201":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"5:2049:3712":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:4117:3024":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"16:6843:4338":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:20296:2920":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:47158:2686":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:46991:3489":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:12948:50420":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:50600:3153":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"16:6230:4101":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"6:5660:41096":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:8822:60832":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"6:1580:38062":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:11186:45369":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:9721:5279":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"17:13436:50883":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:11656:57670":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:56939:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:8471:2619":{"crate_id":1,"path":["std","net","ip_addr","Ipv4Addr"],"kind":"struct"},"16:5226:60665":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:12816:4774":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:12390:720":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:9609:2555":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:50279:3407":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:353:2927":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"6:5625:41095":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:11235:45422":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"18:521:4550":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:50972:3433":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:46377:194":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:48047:177":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"14:40:45151":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"5:6746:2338":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"16:7095:4294":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:20265:3292":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"2:2568:114":{"crate_id":2,"path":["core","default","Default"],"kind":"proc_derive"},"18:681:4542":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:1476:142":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:10670:4490":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"6:1686:38071":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:8222:2864":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:12361:49797":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:8604:2581":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"6:6572:41527":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:900:2547":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"5:4944:2521":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"6:4267:40422":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:9526:4399":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:56978:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:10321:4519":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:11974:49641":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:47167:56533":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"16:6794:4335":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:46260:2516":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:9353:2887":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:10840:2639":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:4346:2598":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:11266:110":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"16:4565:43652":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:1626:2450":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:8488:2620":{"crate_id":1,"path":["std","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:20177:3291":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"17:11617:49555":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"9:709:2839":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:52507:56935":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:46361:196":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:11622:134":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"19:0:998":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"16:2456:4324":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:7875:2955":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"13:0:2129":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:50742:3422":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"16:6654:4025":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"6:495:37164":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:10466:45011":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:48250:2338":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"5:2947:2446":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:9581:2554":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:50165:3402":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"16:5379:4071":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"6:4126:40409":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:8328:3379":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:12134:49652":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:49089:126":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:21809:2960":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:50730:3418":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"17:12073:49648":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:8818:139":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"5:1395:2807":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"6:1643:38067":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:47048:9273":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:50785:120":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:4719:772":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:12087:49649":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"5:6828:2338":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"18:564:4556":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:11997:53823":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:51840:3232":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:12251:49721":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:13031:50784":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:52048:56980":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:3486:2654":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:7426:2455":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:11787:49628":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:11106:4773":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"6:487:37163":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:12380:306":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:9399:2892":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:6782:3052":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:9337:2643":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:5826:2646":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:6759:2762":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:53001:3206":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"5:3763:4648":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:9873:44922":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:50538:3150":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:10245:45008":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"5:3484:3727":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"5:286:2302":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:50623:3503":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"5:6419:239":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"6:6269:37085":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:12375:911":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:8055:4381":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"6:5727:41103":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:10434:45010":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:7805:4692":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:48183:189":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"5:1240:2819":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:19980:2403":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:2578:2748":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:11060:3140":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"9:956:3751":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:8505:2621":{"crate_id":1,"path":["std","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:1887:5279":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"16:5715:4085":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:51022:2906":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"17:12033:49645":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:10608:4388":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:46857:3412":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"5:1195:2816":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"16:6323:4023":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:1632:2451":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"6:4307:40428":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"6:4575:40453":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"16:7475:4024":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:4254:2465":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:2248:127":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:8370:2764":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:11330:45547":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"6:4367:40435":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:11684:49563":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"18:624:61322":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:8110:44696":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:8595:110":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:57017:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:2484:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:8614:2585":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:21204:4792":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:21279:56998":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:5574:118":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:12397:1443":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:57004:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:6921:52314":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"1:1637:2452":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:8962:2844":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"16:3557:43052":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:2768:2499":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"16:4253:43556":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"12:632:2446":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:11893:49635":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:2672:222":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"16:2648:4314":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"12:2178:60393":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:10283:44983":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:11220:117":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"6:5741:41105":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:8295:44704":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"6:5699:41100":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"5:2476:3715":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"6:4737:40472":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"18:707:3139":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"16:6048:4009":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:5169:2413":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:12394:1444":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"6:4726:40471":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:10608:3564":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:3162:133":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"16:6178:4098":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:9658:2881":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"6:4768:40475":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:8475:4364":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:21220:4798":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:12874:50352":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"6:4224:40417":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"5:6926:3693":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"16:5154:4285":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"16:7227:4118":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:2674:107":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"6:4417:40438":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:4126:2594":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:48588:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:1889:8755":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"9:188:3819":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"2:29569:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:21743:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:8872:1594":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"16:5606:4082":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:46805:3245":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:21776:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"17:12955:50432":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"18:609:61326":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"16:6101:4017":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"5:3106:2448":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"2:52363:3190":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"5:4626:2725":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"16:4597:43660":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"16:6087:4043":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:5394:187":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"6:4294:40426":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"5:1445:3708":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:9274:44761":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:6315:4680":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"17:13340:50839":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:979:2812":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"5:630:58200":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:1091:2816":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:9345:2446":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:38141:2403":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"1:11677:4817":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"6:1511:38054":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:49823:2540":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"14:165:42964":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:11661:4699":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"12:1065:3917":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:910:2338":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:2916:4424":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:3084:3481":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:2670:2665":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"9:592:3794":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"6:507:37166":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"16:2696:4305":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:12022:49644":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:6009:3043":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:47252:2700":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"6:4300:40427":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:3160:3004":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:50750:3424":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"5:7014:3649":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"0:0:2030":{"crate_id":0,"path":["fnv"],"kind":"module"},"1:12218:4702":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"16:4208:43535":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:11001:2826":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"18:652:61313":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:10854:4447":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:11288:45542":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"5:2738:58205":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"6:6415:41516":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:586:37176":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"18:574:61313":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"18:80:51310":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:9631:4396":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:48123:2338":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:50298:3409":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:6677:2802":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"16:2596:4355":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:8093:2477":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:12046:49646":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:11188:51657":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"16:7907:4129":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"6:1695:38072":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"16:3393:43043":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"5:1943:2952":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"16:4740:43683":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:6496:2888":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:4014:3016":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:53959:3230":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:8613:2782":{"crate_id":1,"path":["std","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:50219:3405":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"16:7430:194":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:50237:3406":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"16:7934:4031":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"16:6139:4097":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"5:1404:2808":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:12388:722":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"5:6807:3658":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:47149:2685":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"16:5974:4093":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:6393:3435":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:2250:2973":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"6:5841:40321":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:13158:50823":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:9831:4510":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:13536:50919":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:10360:4520":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:9367:2890":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:12850:50349":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"16:4777:43696":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:46487:2277":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"5:6488:4667":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:50463:3148":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:8139:2749":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:50937:191":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:11199:45370":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:3236:3284":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:5660:2635":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:11862:3435":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"17:13231:50836":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:11851:2916":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"16:7920:4130":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:48234:2446":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:3616:2338":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"6:5510:41087":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:4379:40436":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"18:644:61313":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:8323:3378":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:2399:2983":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:50015:2543":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"17:12164:49654":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"16:4432:43591":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:11070:4764":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"12:393:60385":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:10520:45015":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:10532:126":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:11200:2974":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"1:9514:52285":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:1608:2338":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:49905:2551":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:50754:3425":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"9:676:3841":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"18:96:51311":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:9534:4114":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:3422:2649":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:11902:3017":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:52011:56997":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"16:3017:43040":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:54172:18542":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:12609:50196":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:11708:30055":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"6:4335:40431":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:1550:38059":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:9165:60831":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"5:1311:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:46904:3411":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:9401:44774":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:13148:50801":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:13184:50826":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:48098:2337":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"12:444:140":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:20874:57132":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:12617:50197":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"6:5472:41083":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:12383:1429":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"16:6354:4104":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:2612:2741":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"5:36:3627":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"6:135:36851":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"17:11149:45366":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:9595:2557":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:10921:45141":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"12:1003:2817":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"12:777:3908":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"1:11533:2642":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"3:223:206":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:51010:2908":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:48474:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:7841:3137":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:11764:53612":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"6:4605:40457":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:10406:3031":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"1:10665:2651":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:46784:29490":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:8212:4485":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:46845:3590":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:12349:49794":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"18:481:4551":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:5317:52310":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:9284:2446":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:51808:3199":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"12:1534:3930":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"6:5523:41088":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:9671:4372":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:49370:4805":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"6:5504:41086":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"16:2358:4300":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"6:5541:41090":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"5:1226:2817":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:3232:2758":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"16:2740:4307":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:21908:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"17:9885:44923":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"6:1738:38076":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"6:4592:40455":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:9293:4504":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:29507:3310":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:1826:8737":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"16:7022:4291":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"12:725:2806":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:3184:3265":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"16:7958:4064":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:50643:3504":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:11939:49639":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"6:4816:40480":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:10506:44986":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"5:3733:2447":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:9908:127":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"1:3479:2655":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"17:8796:4389":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"6:5876:41136":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:10062:44896":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"5:1436:194":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:9857:4435":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:21383:3469":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"16:2674:4304":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"16:6807:4336":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:54024:18532":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:9415:2544":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:4246:2464":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"16:3680:43103":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:20710:12993":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"5:4986:4656":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"2:54211:18543":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:50806:2883":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:4530:3581":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:9488:2552":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"6:7266:40610":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:9468:4812":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:12398:766":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"6:5498:41085":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:2029:180":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:49795:2539":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"6:501:37165":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:9127:2417":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:8066:2925":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"17:8162:4433":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"6:4745:40473":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:11111:3143":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"6:5692:41099":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:54096:18538":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:46526:2572":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"6:6538:41524":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"6:4683:40467":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:3347:2763":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"1:1938:2967":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"1:12374:365":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"17:9691:4450":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:5087:2478":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:50446:3147":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:51762:3219":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:10270:44984":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"0:10:1599":{"crate_id":0,"path":["fnv","FnvHasher"],"kind":"struct"},"5:1953:3657":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:7924:7739":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:9317:4500":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:0:484":{"crate_id":2,"path":["core"],"kind":"module"},"2:51941:3212":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"16:5681:4084":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:9183:44712":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"6:4698:40468":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"5:6986:58239":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"2:6807:56564":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"16:4879:43726":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"6:4804:40478":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:12382:1351":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1:8590:2416":{"crate_id":1,"path":["std","net","socket_addr","SocketAddr"],"kind":"enum"},"1:0:1343":{"crate_id":1,"path":["std"],"kind":"module"},"1:4904:51671":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"6:4461:40442":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:11014:45263":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:8418:4432":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:51696:56990":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:4262:3344":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:47139:2684":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:46911:3586":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:969:2810":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:21974:165":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:4272:2595":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:52193:3228":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"16:2833:4281":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"5:2959:3654":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:4766:2632":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:2493:233":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"16:4912:43735":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"6:4257:40421":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"6:1654:38068":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"6:4506:40445":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:20446:2417":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:7433:2793":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"16:2548:4303":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:51786:3211":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"18:0:2140":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:7736:2800":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:1021:4505":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:46519:3266":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"6:5582:41091":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:8639:3018":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"15:175:3938":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"16:4348:43579":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:10883:4695":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:2255:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:52030:3189":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:2588:4678":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"6:1518:38055":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:12836:50347":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:46553:57060":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"6:5672:41097":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:9658:44817":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:12148:49653":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:13492:50910":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:10159:44899":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:3968:3295":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:47294:2703":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"7:32:42179":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"16:4318:43573":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:8596:4750":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:49331:4804":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:52538:57007":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:8526:4466":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"16:2718:4306":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"6:5861:41135":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:554:37171":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:22406:3120":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:20862:2921":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"6:5587:41092":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"9:649:3796":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"6:1722:38075":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:9909:4756":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:8699:3080":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"6:4665:40465":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"18:719:4545":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"16:6506:4107":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:11054:4760":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"12:985:2816":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"16:3845:43220":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:49163:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"1:8645:3019":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:11800:49629":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:9137:218":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:4317:3345":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:11210:128":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"2:21167:56573":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"17:10642:4493":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"6:6311:41513":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:8123:117":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:49378:4806":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:20240:3250":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"1:11572:2880":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"16:7037:3492":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"16:3623:43070":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:661:2969":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:46944:3249":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:9155:44711":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"16:7144:4116":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"16:6441:4105":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"6:567:37173":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:386:44700":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"5:6992:220":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"6:6554:41526":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"16:7489:3999":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:9820:4508":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:4657:3035":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:47098:2454":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"16:6262:4030":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:10864:2558":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"16:2816:4309":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:11758:53611":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"5:3804:2547":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"16:4808:43703":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:50332:3412":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"6:545:37170":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"16:5739:4086":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:3314:2744":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"5:2254:3716":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:2285:184":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"5:5211:3632":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:12265:49722":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"9:827:3750":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:11761:49626":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"16:4404:43587":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:8241:4489":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"18:582:2403":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"6:4317:40429":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:10894:4429":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"6:7166:42056":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:8666:4752":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:4425:3078":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:11034:45264":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:47543:2763":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:5064:2491":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:628:2409":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:49147:2579":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"5:6761:2447":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:8701:4753":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"5:5000:4659":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"1:12381:1321":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"17:11343:45548":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:10529:52379":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"2:21296:56932":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"16:7413:4060":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:21710:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"17:8752:2736":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:47562:31859":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:12198:49717":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"12:2053:2816":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:9791:44820":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:21317:57006":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:7042:148":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:48165:3494":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:8625:2783":{"crate_id":1,"path":["std","net","socket_addr","SocketAddrV6"],"kind":"struct"},"5:6777:58223":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:12393:1447":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"6:560:37172":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:48191:206":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"16:6881:4114":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"16:2784:4310":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:7896:2934":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:10735:2638":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"1:10579:2860":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"16:5365:4018":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"5:3349:2446":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"14:7:42963":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:2726:2295":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"6:1714:38074":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:21188:3328":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:46299:3118":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:9473:2916":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:918:2806":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:5680:2636":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:50929:207":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"1:4894:2467":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:12379:1016":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"5:3014:2452":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:8106:128":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"18:766:4549":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:29641:3479":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"5:869:2446":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:47335:2694":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"16:5927:4092":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"5:4900:4648":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:8379:2648":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:50083:3399":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:10497:45014":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:49833:2541":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"16:5941:190":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:12768:50303":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:7429:2791":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"5:4948:2519":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"16:7461:4029":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:49985:3393":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"1:6785:2871":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:39347:2668":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"16:4536:43647":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:50575:3151":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"16:5817:4090":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:38124:179":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"1:4969:2624":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"5:4747:3662":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"16:6188:4099":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:4454:3082":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:20705:3183":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"5:781:3686":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:8737:2625":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:11217:45371":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"6:4280:40424":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:9333:2543":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"5:949:4648":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:8534:4821":{"crate_id":1,"path":["std","net","ip_addr","fmt","Span"],"kind":"struct"},"2:8600:118":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"5:6321:3633":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"17:8494:4743":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:7079:119":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:21061:3450":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:10973:45150":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"16:7535:4022":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"12:1681:142":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:49348:143":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:21369:3535":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"6:4673:40466":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"16:6337:4103":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:9118:60961":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:2652:2750":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"6:5480:41084":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"6:6479:41520":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:13082:50791":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:12118:49651":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:7102:2300":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"6:6500:41521":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:52765:3226":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:48807:2583":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"6:4659:40464":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:944:2447":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:46546:4063":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"1:9610:214":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:11174:45368":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:8814:127":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"1:1864:8748":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:11065:3135":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:9526:4822":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:2401:2984":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"17:12797:50305":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"6:5733:41104":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:48107:2446":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"12:1044:3916":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"12:834:2813":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"6:6329:11093":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:9386:2891":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"12:853:2814":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:13007:50782":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:5695:2637":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"16:5793:4089":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:8763:2627":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"16:5402:4072":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:48259:179":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"16:7266:4121":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:6610:2794":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"12:2190:60392":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:2713:2667":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"16:2921:4003":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:52241:3213":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:46401:195":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:8422:2704":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"17:13071:50790":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:10374:4462":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:9263:44760":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:46882:2412":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:49077:108":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"2:2784:2493":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:12399:1500":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"17:13024:50783":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:8554:3072":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"2:8608:2583":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:12392:717":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:51910:56926":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:2987:2566":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:10845:4487":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:4059:3336":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"5:852:3687":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:53065:3191":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:5534:41089":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:21644:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"16:6820:60546":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"4:0:2130":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:47120:2682":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:2321:178":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:52561:56941":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"6:1678:38070":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:50395:3138":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"16:6012:4095":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:52317:3205":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:4559:40451":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:4262:2466":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"9:0:2132":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:47199:2690":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:50269:2738":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"1:2869:2866":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:2792:2510":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:48626:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:2938:2299":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:2905:126":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:12514:50194":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:53997:3195":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"6:7255:40609":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:9947:44925":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"18:538:4555":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:4712:43679":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:11639:49556":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"5:6893:2284":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:4672:7747":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"5:4041:4651":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"16:7825:4128":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:10445:4487":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"5:5436:2447":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"5:5545:3662":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"5:1077:3711":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:7786:4690":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"5:4071:2725":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"16:6768:4112":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"16:7374:4126":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:3086:2765":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"16:2622:4315":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:46918:3587":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:39298:2647":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"1:1615:2448":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"2:2851:2439":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:46958:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:13047:50788":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:9431:2894":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:49044:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"2:2763:2497":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:3461:2484":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"16:7887:4036":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:11661:49562":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"12:119:3924":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"5:6956:3694":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:9433:44772":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:11466:4698":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:887:2446":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:49813:2542":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:10350:4383":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"6:4152:40411":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"14:0:2136":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:2669:2294":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"1:7939:7742":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"16:7850:4035":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:9751:4451":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:6709:2798":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:47111:2681":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"6:4581:40454":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"3:0:431":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"17:9223:44758":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:50746:3426":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:10796:4484":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:9361:2338":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"5:4104:4651":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:10528:4483":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:9458:4370":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:3908:2725":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"16:5592:4273":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"16:2478:4301":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:12358:53784":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:52287:3201":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"16:7071:4115":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"9:586:3792":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"6:6302:41512":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:11774:49627":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:52795:3229":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"16:6308:4102":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"17:12638:50251":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"16:3448:43044":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"16:5536:4080":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:8864:2839":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:2497:232":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:22007:3455":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"12:762:2448":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"1:11154:2628":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"17:11315:45546":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:20453:3187":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"16:2402:4319":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"12:274:60381":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:3168:2677":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:5624:58076":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"17:9071:61037":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"12:1836:2338":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:46925:3588":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"12:1832:2446":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:46465:199":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:8217:2863":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:13059:50789":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:2481:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1:1811:596":{"crate_id":1,"path":["std","env"],"kind":"module"},"11:36:60380":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"2:20455:3181":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:48174:36408":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"12:1866:2451":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:6886:213":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:1620:2449":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"5:7003:3648":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:48242:2547":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:10139:4410":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:56952:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:9915:2972":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"1:8705:3029":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:1760:3539":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:8881:61069":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:8941:44707":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:52095:3233":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"5:3472:2751":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:11721:49623":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"12:1845:2448":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"6:4115:40408":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:21941:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"16:7581:4045":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:7982:3719":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"5:677:227":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"12:1840:2447":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:46888:3585":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"16:5856:4091":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:13100:50793":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:2487:146":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"12:0:2135":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"6:6448:41519":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:10625:4390":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:487:44701":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"16:6721:4111":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:2935:2298":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:49570:3605":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:3194:2756":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:8904:2841":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"6:4797:40477":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:10774:4383":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:12695:50253":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:50183:3403":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"5:6909:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"16:2291:4325":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"6:5568:41057":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:4086:3337":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"7:0:1490":{"crate_id":7,"path":["unwind"],"kind":"module"},"14:202:3651":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"5:3429:4648":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:931:2807":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:11828:49631":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:47284:2702":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:9805:4507":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"6:6352:38020":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:13354:50840":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"18:515:4553":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:10986:2934":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"5:1386:2806":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:52460:56940":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:11734:49624":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:9061:4410":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:11353:2640":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"9:622:3795":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"17:8339:44705":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:53563:3203":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"9:863:3753":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:2812:2422":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"16:6697:4331":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:8330:2766":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"17:10546:44713":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:12307:49730":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:47068:2528":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"6:5554:41056":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:48284:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:48360:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:2904:115":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"12:60:60384":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:20008:57129":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"6:600:37178":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:7870:2932":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"16:5758:4087":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:9376:2558":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"12:98:3920":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:11979:4827":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:8429:2736":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"17:11125:45330":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:50001:2736":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:8510:4744":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:2991:2567":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:1611:2447":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:50734:3421":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:7192:4689":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:7737:44702":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:20968:2417":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:6640:52314":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"1:3377:2725":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"16:7545:4048":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"12:1859:2450":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:10207:44997":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:51993:3204":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:29747:3480":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"16:4653:43668":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"6:4716:40470":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:53421:3235":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"6:4427:40439":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"16:7189:4010":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"6:5782:41107":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:9681:44818":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:21677:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:11760:57674":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"16:153:4007":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"16:7113:4295":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:13192:50827":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"5:6940:3488":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:29583:3478":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"17:13506:50916":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:9700:4449":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:1552:2725":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:2800:2514":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:12225:49719":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:11040:3136":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:53875:3192":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:2235:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:2515:2747":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:7057:2919":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:20048:57379":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"16:0:2138":{"crate_id":16,"path":["gimli"],"kind":"module"},"16:2500:4313":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:10127:2546":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:3594:2622":{"crate_id":1,"path":["std","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:6516:2680":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:12023:3947":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:10829:3404":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:13478:50892":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:2739:2669":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:56965:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"18:699:4544":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"16:2762:4308":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"16:5424:4073":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:10997:45151":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"6:4690:972":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"16:3254:43042":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:7848:2417":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"6:7226:40605":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:678:7741":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:11087:4766":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"12:810:2808":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:21842:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:50766:3514":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"5:5976:2447":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"6:5713:41101":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:411:161":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:47038:4668":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"16:5642:4083":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:3470:52173":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:11545:54190":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:21:664":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"5:0:281":{"crate_id":5,"path":["alloc"],"kind":"module"},"5:1358:2547":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:13404:50879":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"18:507:61313":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"5:686:109":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:52719:3222":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:2788:2508":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:13221:50835":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"16:6632:4110":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"5:3910:2446":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:48132:3492":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"17:8441:4488":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"18:491:61327":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"12:697:2810":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:49111:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"17:9488:4363":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:49870:2528":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"16:3001:4311":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"6:1701:38073":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"14:187:42972":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:9930:44909":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"6:4437:40440":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:7962:8743":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"6:1707:3030":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:54070:18536":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"6:5684:41098":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"0:21:1613":{"crate_id":0,"path":["fnv","FnvHashMap"],"kind":"typedef"},"16:7615:4033":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:13279:50837":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:3192:2755":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"9:19:3843":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"2:49339:2273":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:10121:4428":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:6136:4680":{"crate_id":1,"path":["std","sync","mpmc","array","Channel"],"kind":"struct"},"2:47305:2704":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:2383:2978":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"6:7289:42085":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:6078:3055":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"16:5519:4079":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:50314:3411":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"6:4644:40462":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:11919:138":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:2026:181":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:11683:188":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"16:6474:4106":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:12748:50259":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:54044:18534":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:3174:3261":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:47521:31856":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:9778:4452":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"12:300:3923":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"16:6545:4037":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:11839:2785":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:11137:45331":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:48550:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"6:4179:40412":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:9193:61032":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:11780:4701":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"16:4135:43486":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:50119:2556":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:5013:2490":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"6:4096:40406":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"9:896:3755":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:11271:45535":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:11259:45532":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:19993:57129":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"14:31:42963":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:12630:50249":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:9323:2642":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:8131:2996":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:3125:44898":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:11536:44926":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"16:7366:4042":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:10332:4527":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"15:214:3943":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:12389:719":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:48800:2582":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:11609:2879":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"1:484:4701":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"6:1541:38058":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"16:7637:4016":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:1595:38063":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:9526:2553":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:9712:4754":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"16:6124:4067":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:50417:3141":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"5:1414:2809":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:4191:203":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:247:60989":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:54035:18533":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:12016:2404":{"crate_id":2,"path":["core","const_closure","ConstFnMutClosure"],"kind":"struct"},"5:3560:4648":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:11485:49444":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:9308:2547":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"5:1425:2810":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"6:7243:40607":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"9:382:3748":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:47190:2695":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"16:3179:43041":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:52385:3193":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:4369:2597":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:13572:50925":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:51740:3231":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:50610:3154":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:11165:51659":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"17:11813:49630":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:56582:3440":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"16:6855:4113":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:50993:157":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:20253:2417":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"2:46421:198":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:50758:3419":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:774:140":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"6:581:37175":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"0:24:1617":{"crate_id":0,"path":["fnv","FnvHashSet"],"kind":"typedef"},"6:5595:41093":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"16:6276:4046":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"5:2954:2450":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:49360:2839":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"1:11521:2641":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"5:6969:3695":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"5:6022:4648":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:21362:57798":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:7249:40608":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:4210:2900":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"0:20:1611":{"crate_id":0,"path":["fnv","FnvBuildHasher"],"kind":"typedef"},"5:1211:2818":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"5:3541:2448":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"17:10394:4464":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:2290:123":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:2753:2494":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"1:5646:2634":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1:7539:53887":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"17:13141:50800":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:3271:2754":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:13459:50886":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:48322:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"16:2332:4318":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:10875:4430":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:5457:2689":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:10594:3603":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"5:2742:58203":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:14:1606":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:46963:3487":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"6:7220:40604":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:54055:18535":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:48786:2581":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:9521:4815":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"5:7086:3628":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:50738:3423":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:8165:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"18:599:61319":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:5772:41106":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"8:0:2131":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"5:1059:3710":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"6:6509:41522":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:9639:2880":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"15:0:2137":{"crate_id":15,"path":["addr2line"],"kind":"module"},"16:5574:4081":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:5011:2488":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:2805:2420":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"16:7307:4125":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:11240:54186":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:6232:202":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:5880:202":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:20970:3182":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:46605:3254":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"16:6248:4020":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:12972:50753":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:11045:3137":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:2903:206":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"16:7276:4122":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:12337:4487":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:12980:50780":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:12485:50193":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"16:5771:4088":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"16:2424:4297":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:46975:3488":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:9620:2879":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:12342:4828":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:48398:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"12:1085:3918":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"16:6115:4015":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:2411:2989":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:8814:2829":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"17:13203:50828":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:7945:2458":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"16:6571:4108":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:4324:2471":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:0:2139":{"crate_id":17,"path":["object"],"kind":"module"},"17:13557:50920":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"6:5605:41094":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"12:2069:2817":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:53031:3209":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:10510:8748":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"17:11368:45562":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:2257:2733":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:2578:126":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:1919:2915":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:6604:162":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:52339:3208":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:11841:49632":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"12:751:2447":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:3230:2757":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:53751:3207":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:9382:44776":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"6:575:37174":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:46865:3584":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"16:2526:4302":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"6:6975:41895":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:8442:2738":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"5:1043:58234":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:49883:2529":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"6:4761:40474":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"14:221:42971":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"12:738:2807":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"6:4354:40433":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:10088:44895":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:11997:49642":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:2822:2425":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:10094:2545":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"16:8047:126":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:10941:2755":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"18:590:57810":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"16:6164:4019":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"6:1636:38066":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:1737:3540":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"16:7335:4040":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"5:2988:2449":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:10296:44982":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"6:4361:40434":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"16:5113:43912":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"6:6998:41897":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:5709:2638":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:56991:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:1604:2446":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:10490:45013":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:20027:57376":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:21271:57721":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:29547:3311":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:9309:2641":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:20046:57377":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"16:4840:43711":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:20343:3181":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:11708:49622":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:8545:2484":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:11344:2859":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:47528:2802":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:9479:2956":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:52409:3194":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:54119:18539":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:50432:3144":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:12377:1463":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:8610:190":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:51716:56989":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:20214:3177":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:8887:2840":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"12:659:2338":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:4216:2899":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:11515:49446":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:2796:2512":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:10822:44714":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"6:6375:37994":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"5:3362:2547":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:10721:4759":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:12884:50414":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:3404:2483":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:9350:4503":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:3956:3294":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"6:4540:40449":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"18:727:4546":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"12:353:3921":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"5:3338:159":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:960:2808":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"6:4496:40444":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:6544:202":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"11:44:3906":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"6:539:37169":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:7735:2801":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:7748:52004":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:11247:45423":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:12386:628":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:49973:2828":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:2774:2502":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:9291:2639":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"16:5503:4078":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:50289:3408":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:6563:3130":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:9453:2559":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"6:4139:40410":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:11748:49625":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:7001:2693":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"6:4629:40460":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:12756:50301":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:12401:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"17:10403:4385":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"16:7521:4021":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:53673:3223":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:21244:3323":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:13214:50834":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"5:2918:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:2445:2673":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:4744:2626":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:4017:3017":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:54149:18541":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"5:6881:2283":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"12:1029:2818":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:1643:3308":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:12176:49668":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:20025:57374":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"6:6277:37993":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:5887:2888":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"6:1525:38056":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:50511:3149":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:8694:3077":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"16:7287:4123":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"16:2380:4296":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"18:690:4543":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"5:6752:3688":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"6:1608:38065":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:7849:2945":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:12400:1090":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"6:6293:37044":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:10310:45009":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"6:646:37208":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:9644:4395":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:4003:2914":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"6:4346:40432":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:47243:2699":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"16:2311:4002":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:9764:44819":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"6:608:37179":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"6:4206:40261":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:10752:52381":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"2:21395:3468":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"5:6834:2338":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:5380:2688":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"16:6037:4299":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:13126:50798":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:52955:3202":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"5:217:3685":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:6216:2888":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:2843:2435":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:50919:201":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"16:5450:4075":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"13:108:60437":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:54081:18537":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:52877:3214":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:1672:1054":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:11528:44928":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:420:3987":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:11054:3139":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"6:5443:41027":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:12278:49723":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"12:2205:2283":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:11862:3016":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:49059:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"1:9920:4694":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:58313:57720":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"2:50589:3152":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:4441:3081":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:9108:44710":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"6:1532:38057":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"6:4231:40418":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"16:524:4275":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"16:5995:4094":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:3154:3002":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:2490:131":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"5:6791:2338":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:9021:44709":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:1825:2868":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:4433:3079":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:12008:49643":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"12:1872:2452":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"1:4908:51675":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"6:7237:40606":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:49744:3392":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"6:1887:38212":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:9553:4410":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"16:2859:4282":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:5823:2644":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"16:7992:4063":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:5763:2640":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"18:548:139":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"6:7208:40602":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"5:2980:2451":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:46793:3244":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:10790:3400":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:29332:3530":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:12211:49718":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:4102:40407":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"5:5370:228":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:598:2904":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:11635:30054":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:12376:407":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:5178:2778":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:49574:2531":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"16:8034:4000":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"6:4286:40425":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:8774:4382":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:11170:54172":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"1:9615:215":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:6681:3056":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:11951:49640":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"12:1555:3931":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:2673:221":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:8687:2416":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:47269:2701":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:52141:3221":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"6:4489:3037":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:8748:57859":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"6:6322:41514":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:50818:3516":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"6:0:793":{"crate_id":6,"path":["libc"],"kind":"module"},"2:8160:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:13366:50875":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"16:6495:3935":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:11383:2643":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"6:4212:40416":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:3382:2570":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"17:9031:61301":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"6:6953:37122":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:11300:45543":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:1002:2815":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:12387:629":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:8951:61054":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:11974:2526":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:49804:2538":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"6:1668:38069":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"6:4810:40479":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:8973:2845":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:9897:44924":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"16:4626:43665":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:10182:44897":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:10476:45012":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:8867:2270":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:13134:50799":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:9454:3051":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:1123:2819":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:12237:49720":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:20427:12975":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"17:8368:4384":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"18:660:4540":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:9577:4402":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"12:2198:60389":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"6:4706:40469":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:10949:45149":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"16:6668:4026":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:50065:3398":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:53813:3227":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"5:7069:2448":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"17:9475:4360":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"6:6424:41517":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:2253:2975":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:359:2928":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:8991:61196":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"12:815:2811":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"9:920:3752":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:47181:2687":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:13594:50961":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:49844:2530":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:46443:197":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:545:2952":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:2827:2427":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:1636:575":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:8561:4446":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:9491:51989":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"16:7803:4127":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:2327:185":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:13580:50927":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"5:1348:2446":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:51892:3224":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"5:2736:2395":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"6:4527:40447":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:48664:3498":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:7038:132":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:3249:4436":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:5009:2479":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:21875:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:47320:2705":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:11590:51516":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"16:6646:4333":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"12:2080:2818":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"13:220:4790":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:9738:4453":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:681:7743":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"6:5835:41134":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"16:6713:4041":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:21114:3452":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"16:5210:4744":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"5:1981:3713":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:9601:4400":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:9446:44778":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"11:0:2134":{"crate_id":11,"path":["adler"],"kind":"module"},"1:11746:51503":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"5:271:4648":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"17:13393:50878":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"16:7350:4342":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:11559:49451":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"16:6759:4038":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:11606:49554":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:2928:2296":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"6:131:36850":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"1:9599:163":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:3319:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"16:2273:4283":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:8391:2734":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"1:574:2957":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"12:1120:3919":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:9362:4410":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"6:513:37167":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"6:6392:37997":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:13382:50877":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:46835:3589":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:13413:50882":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:8435:2543":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:11553:3514":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"2:2681:2600":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"18:113:51312":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:4693:57056":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:8577:3073":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"6:4611:40458":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"6:6545:41525":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:3199:3285":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:7005:2692":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:11731:51500":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:8713:3018":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:9339:4502":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:12730:50257":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:3370:2571":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"12:1628:4646":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"6:4515:40446":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:10813:3401":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"6:4329:40430":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:1962:4448":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"6:592:37177":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"16:5438:4074":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:7156:155":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:8981:44708":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:58292:57722":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"17:9283:44777":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:8602:2580":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"1:2385:2979":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:686:7744":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"5:6737:2527":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"18:671:4541":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"16:4510:43645":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"}},"external_crates":{"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}