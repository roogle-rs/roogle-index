{"root":"0:0:2222","crate_version":"1.0.7","includes_private":false,"index":{"b:2:3433-0:10:1793":{"id":"b:2:3433-0:10:1793","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2806:2495","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3431:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1793","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3435:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12687:25095":{"id":"2:12687:25095","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:12686:25094"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12669:29977":{"id":"2:12669:29977","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:12667:29976"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2856:2496-0:10:1793":{"id":"a:2:2856:2496-0:10:1793","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2856:2496","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1793","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12734:25112":{"id":"2:12734:25112","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41870:200","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:8993","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2816:253-0:10:1793":{"id":"a:2:2816:253-0:10:1793","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2816:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1793","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:2799:243-0:10:1793":{"id":"a:2:2799:243-0:10:1793","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2799:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1793","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:15":{"id":"0:15","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[99,0],"end":[106,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1793","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:16:1797"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:16:1797":{"id":"0:16:1797","crate_id":0,"name":"with_key","span":{"filename":"lib.rs","begin":[103,4],"end":[105,5]},"visibility":"public","docs":"Create an FNV hasher starting with a state corresponding\nto the hash `key`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["key",{"primitive":"u64"}]],"output":{"resolved_path":{"name":"FnvHasher","id":"0:10:1793","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12691:27586":{"id":"2:12691:27586","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12692:27577"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44042:9000","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12743:29984":{"id":"2:12743:29984","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12360:8997","`DoubleEndedIterator`":"2:7752:127","prim@char":"1:12032:448","str::matches":"2:12740:2453"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43990:9015","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:8993","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12365:8993","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12380:8994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12752:29987":{"id":"2:12752:29987","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12682:25071":{"id":"2:12682:25071","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10449:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10449:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:3435:1627":{"id":"2:3435:1627","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39632:9062","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12790:3317":{"id":"2:12790:3317","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4597:3317"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44076:3318","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12725:29983":{"id":"2:12725:29983","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12360:8997","str::split":"2:12713:25102","prim@char":"1:12032:448","str::split_terminator":"2:12722:29982"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43836:9016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:8993","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12365:8993","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12380:8994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12788:29998":{"id":"2:12788:29998","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4596:29998"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44067:9008","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12673:29978":{"id":"2:12673:29978","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12709:2536":{"id":"2:12709:2536","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41872:197","prim@char":"1:12032:448","self::pattern":"2:12360:8997"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:8993","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12365:8993","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12380:8994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12692:27577":{"id":"2:12692:27577","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12691:27586"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44051:8999","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5532:9318":{"id":"5:5532:9318","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7529:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:8993","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12666:29975":{"id":"2:12666:29975","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12672:25053":{"id":"2:12672:25053","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11915:9001"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5550:24449":{"id":"5:5550:24449","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12787:24452"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12696:21459":{"id":"2:12696:21459","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12032:448","self::pattern":"2:12360:8997"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:8993","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2287-0:10:1793":{"id":"b:2:2287-0:10:1793","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2806:2495","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2281:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1793","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2289:2438"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12791:29999":{"id":"2:12791:29999","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4594:29999"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44085:9009","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:21:1807":{"id":"0:21:1807","crate_id":0,"name":"FnvHashMap","span":{"filename":"lib.rs","begin":[132,0],"end":[132,58]},"visibility":"public","docs":"A `HashMap` using a default FNV hasher.","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"std::collections::HashMap","id":"1:723:150","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"resolved_path":{"name":"FnvBuildHasher","id":"0:20:1805","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"5:5549:24448":{"id":"5:5549:24448","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12786:24451"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2590-0:10:1793":{"id":"b:2:2590-0:10:1793","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1793","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2593:2530"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12756:29989":{"id":"2:12756:29989","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12737:25113":{"id":"2:12737:25113","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41870:200","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:8993","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12365:8993","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12380:8994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12766:23390":{"id":"2:12766:23390","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12032:448","self::pattern":"2:12360:8997"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41870:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:8993","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12716:25104":{"id":"2:12716:25104","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12032:448","self::pattern":"2:12360:8997"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12176:8988","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:8993","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8846:3625-0:10:1793":{"id":"a:2:8846:3625-0:10:1793","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8846:3625","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1793","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:13":{"id":"0:13","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[91,0],"end":[97,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2641:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1793","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:14:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12769:25116":{"id":"2:12769:25116","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12032:448","self::pattern":"2:12360:8997"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41870:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:8993","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12365:8993","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12380:8994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12746:29985":{"id":"2:12746:29985","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12360:8997","`DoubleEndedIterator`":"2:7752:127","prim@char":"1:12032:448","str::rmatch_indices":"2:12749:29986"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43918:9012","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:8993","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5535:30659":{"id":"5:5535:30659","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7529:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:8993","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12690:1801":{"id":"2:12690:1801","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43754:2962","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12693:27032":{"id":"2:12693:27032","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44022:3483","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5530":{"id":"5:5530","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5531:30658","5:5532:9318","5:5535:30659","5:5538:30660","5:5546:30661","5:5547:30662","5:5548:3507","5:5549:24448","5:5550:24449"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12675:25072":{"id":"2:12675:25072","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12049:1636"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12676:21093":{"id":"2:12676:21093","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41872:197"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41870:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10449:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10449:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12728:25108":{"id":"2:12728:25108","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12032:448","self::pattern":"2:12360:8997","str::rsplitn":"2:12731:25110"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43872:8986","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:8993","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:18:1799":{"id":"0:18:1799","crate_id":0,"name":"finish","span":{"filename":"lib.rs","begin":[110,4],"end":[112,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2605-0:10:1793":{"id":"b:2:2605-0:10:1793","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1793","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2608:134","2:2609:1612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12678:21098":{"id":"2:12678:21098","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41872:197"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41870:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10449:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10449:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2593:2530":{"id":"2:2593:2530","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2567:141"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:20:1805":{"id":"0:20:1805","crate_id":0,"name":"FnvBuildHasher","span":{"filename":"lib.rs","begin":[128,0],"end":[128,56]},"visibility":"public","docs":"A builder for default FNV hashers.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"std::hash::BuildHasherDefault","id":"2:10059:1788","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"FnvHasher","id":"0:10:1793","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"2:2603:134":{"id":"2:2603:134","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"b:2:2600-0:10:1793":{"id":"b:2:2600-0:10:1793","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2570:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1793","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2603:134","2:2604:1614"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5547:30662":{"id":"5:5547:30662","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2500","`String`":"5:7529:249"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2500","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:14:60":{"id":"0:14:60","crate_id":0,"name":"default","span":{"filename":"lib.rs","begin":[94,4],"end":[96,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"FnvHasher","id":"0:10:1793","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:10:1793":{"id":"0:10:1793","crate_id":0,"name":"FnvHasher","span":{"filename":"lib.rs","begin":[89,0],"end":[89,26]},"visibility":"public","docs":"An implementation of the Fowler‚ÄìNoll‚ÄìVo hash function.\n\nSee the [crate documentation](index.html) for more details.","links":{},"attrs":["#[allow(missing_copy_implementations)]"],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:15","a:2:8846:3625-0:10:1793","a:2:8845:3330-0:10:1793","a:2:2856:2496-0:10:1793","a:2:2816:253-0:10:1793","a:2:2799:243-0:10:1793","b:2:2290-0:10:1793","b:2:2287-0:10:1793","b:2:2600-0:10:1793","b:2:2590-0:10:1793","b:2:2605-0:10:1793","b:2:2594-0:10:1793","b:2:3433-0:10:1793","0:13","0:17"]}}},"2:2609:1612":{"id":"2:2609:1612","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:42015:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2222":{"id":"0:0:2222","crate_id":0,"name":"fnv","span":{"filename":"lib.rs","begin":[1,0],"end":[367,1]},"visibility":"public","docs":"An implementation of the [Fowler‚ÄìNoll‚ÄìVo hash function][chongo].\n\n## About\n\nThe FNV hash function is a custom `Hasher` implementation that is more\nefficient for smaller hash keys.\n\n[The Rust FAQ states that][faq] while the default `Hasher` implementation,\nSipHash, is good in many cases, it is notably slower than other algorithms\nwith short keys, such as when you have a map of integers to other values.\nIn cases like these, [FNV is demonstrably faster][graphs].\n\nIts disadvantages are that it performs badly on larger inputs, and\nprovides no protection against collision attacks, where a malicious user\ncan craft specific keys designed to slow a hasher down. Thus, it is\nimportant to profile your program to ensure that you are using small hash\nkeys, and be certain that your program could not be exposed to malicious\ninputs (including being a networked server).\n\nThe Rust compiler itself uses FNV, as it is not worried about\ndenial-of-service attacks, and can assume that its inputs are going to be\nsmall‚Äîa perfect use case for FNV.\n\n\n## Using FNV in a `HashMap`\n\nThe `FnvHashMap` type alias is the easiest way to use the standard library‚Äôs\n`HashMap` with FNV.\n\n```rust\nuse fnv::FnvHashMap;\n\nlet mut map = FnvHashMap::default();\nmap.insert(1, \"one\");\nmap.insert(2, \"two\");\n\nmap = FnvHashMap::with_capacity_and_hasher(10, Default::default());\nmap.insert(1, \"one\");\nmap.insert(2, \"two\");\n```\n\nNote, the standard library‚Äôs `HashMap::new` and `HashMap::with_capacity`\nare only implemented for the `RandomState` hasher, so using `Default` to\nget the hasher is the next best option.\n\n## Using FNV in a `HashSet`\n\nSimilarly, `FnvHashSet` is a type alias for the standard library‚Äôs `HashSet`\nwith FNV.\n\n```rust\nuse fnv::FnvHashSet;\n\nlet mut set = FnvHashSet::default();\nset.insert(1);\nset.insert(2);\n\nset = FnvHashSet::with_capacity_and_hasher(10, Default::default());\nset.insert(1);\nset.insert(2);\n```\n\n[chongo]: http://www.isthe.com/chongo/tech/comp/fnv/index.html\n[faq]: https://www.rust-lang.org/en-US/faq.html#why-are-rusts-hashmaps-slow\n[graphs]: https://cglab.ca/~abeinges/blah/hash-rs/","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:10:1793","0:20:1805","0:21:1807","0:24:1811"],"is_stripped":false}}},"2:12699:25114":{"id":"2:12699:25114","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12032:448","self::pattern":"2:12360:8997"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:8993","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12695:27576":{"id":"2:12695:27576","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44060:8998","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12705:2577":{"id":"2:12705:2577","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41872:197","prim@char":"1:12032:448","self::pattern":"2:12360:8997"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:8993","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2596:741":{"id":"2:2596:741","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12740:2453":{"id":"2:12740:2453","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12360:8997","`DoubleEndedIterator`":"2:7752:127","prim@char":"1:12032:448","str::rmatches":"2:12743:29984"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43972:9014","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:8993","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12772:29994":{"id":"2:12772:29994","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12032:448","self::pattern":"2:12360:8997"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:8993","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12365:8993","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12380:8994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2292:21621":{"id":"2:2292:21621","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12763:29993":{"id":"2:12763:29993","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12032:448","self::pattern":"2:12360:8997"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:8993","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12754:29988":{"id":"2:12754:29988","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12680:25070":{"id":"2:12680:25070","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10449:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10449:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12686:25094":{"id":"2:12686:25094","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_mut":"2:12687:25095"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12759:29991":{"id":"2:12759:29991","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12674:339":{"id":"2:12674:339","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12675:25072","`u8`":"1:12049:1636"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12722:29982":{"id":"2:12722:29982","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12360:8997","str::split":"2:12713:25102","prim@char":"1:12032:448","`DoubleEndedIterator`":"2:7752:127","str::rsplit_terminator":"2:12725:29983"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43818:9017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:8993","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12778:29996":{"id":"2:12778:29996","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12032:448","self::pattern":"2:12360:8997"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:8993","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12365:8993","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12380:8994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12781:29997":{"id":"2:12781:29997","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12321:133","`FromStr`":"2:12320:3643"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42015:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12320:3643","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12320:3643","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2604:1614":{"id":"2:2604:1614","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42015:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12783:24446":{"id":"2:12783:24446","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8845:3330-0:10:1793":{"id":"a:2:8845:3330-0:10:1793","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8845:3330","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1793","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12784:24867":{"id":"2:12784:24867","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39819:25001","Self::is_ascii":"2:12783:24446"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41870:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39819:25001","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12787:24452":{"id":"2:12787:24452","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:17":{"id":"0:17","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[108,0],"end":[125,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["write_length_prefix","write_i64","write_i8","write_u64","write_u8","write_str","write_i128","write_i16","write_u128","write_u16","write_isize","write_i32","write_usize","write_u32"],"trait":{"name":"Hasher","id":"2:10019:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1793","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:18:1799","0:19:1800"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12702:25115":{"id":"2:12702:25115","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12032:448","self::pattern":"2:12360:8997"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:8993","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12365:8993","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12380:8994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:19:1800":{"id":"0:19:1800","crate_id":0,"name":"write","span":{"filename":"lib.rs","begin":[115,4],"end":[124,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["bytes",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12685:29980":{"id":"2:12685:29980","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12038:1531","crate::ops::IndexMut":"2:3099:3370","str::slice_unchecked":"2:12684:29979"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12664:869":{"id":"2:12664:869","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12032:448"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12665:2537":{"id":"2:12665:2537","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12689:27629":{"id":"2:12689:27629","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12032:448"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43744:9003","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12749:29986":{"id":"2:12749:29986","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12360:8997","`DoubleEndedIterator`":"2:7752:127","prim@char":"1:12032:448","str::match_indices":"2:12746:29985"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43936:9013","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:8993","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12365:8993","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12380:8994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12731:25110":{"id":"2:12731:25110","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12032:448","str::splitn":"2:12728:25108","self::pattern":"2:12360:8997"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43890:8984","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:8993","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12365:8993","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12380:8994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2290-0:10:1793":{"id":"b:2:2290-0:10:1793","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2806:2495","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2284:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1793","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2292:21621"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12760:29992":{"id":"2:12760:29992","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12032:448","self::pattern":"2:12360:8997"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:8993","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12365:8993","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12385:8992","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12786:24451":{"id":"2:12786:24451","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5538:30660":{"id":"5:5538:30660","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7529:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2289:2438":{"id":"2:2289:2438","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:24:1811":{"id":"0:24:1811","crate_id":0,"name":"FnvHashSet","span":{"filename":"lib.rs","begin":[136,0],"end":[136,52]},"visibility":"public","docs":"A `HashSet` using a default FNV hasher.","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"std::collections::HashSet","id":"1:1406:152","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"FnvBuildHasher","id":"0:20:1805","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"2:2608:134":{"id":"2:2608:134","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32292:3657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:12713:25102":{"id":"2:12713:25102","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12360:8997","`DoubleEndedIterator`":"2:7752:127","prim@char":"1:12032:448","str::split_whitespace":"2:12691:27586","str::rsplit":"2:12719:25106"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43768:3485","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:8993","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12684:29979":{"id":"2:12684:29979","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12038:1531","str::slice_mut_unchecked":"2:12685:29980","crate::ops::Index":"2:3095:3369"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12667:29976":{"id":"2:12667:29976","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12688:27575":{"id":"2:12688:27575","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12032:448"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43738:9004","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12758:29990":{"id":"2:12758:29990","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12775:29995":{"id":"2:12775:29995","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12032:448","self::pattern":"2:12360:8997"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:8993","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12785:24450":{"id":"2:12785:24450","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12694:29981":{"id":"2:12694:29981","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44032:9011","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2594-0:10:1793":{"id":"b:2:2594-0:10:1793","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1793","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2596:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5531:30658":{"id":"5:5531:30658","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2500","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2500","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12719:25106":{"id":"2:12719:25106","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12360:8997","`DoubleEndedIterator`":"2:7752:127","prim@char":"1:12032:448","str::split":"2:12713:25102"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43786:8982","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:8993","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12365:8993","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12380:8994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5546:30661":{"id":"5:5546:30661","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7529:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5548:3507":{"id":"5:5548:3507","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7529:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12663":{"id":"2:12663","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12664:869","2:12665:2537","2:12666:29975","2:12667:29976","2:12669:29977","2:12672:25053","2:12673:29978","2:12674:339","2:12675:25072","2:12676:21093","2:12678:21098","2:12680:25070","2:12682:25071","2:12684:29979","2:12685:29980","2:12686:25094","2:12687:25095","2:12688:27575","2:12689:27629","2:12690:1801","2:12691:27586","2:12692:27577","2:12693:27032","2:12694:29981","2:12695:27576","2:12696:21459","2:12699:25114","2:12702:25115","2:12705:2577","2:12709:2536","2:12713:25102","2:12716:25104","2:12719:25106","2:12722:29982","2:12725:29983","2:12728:25108","2:12731:25110","2:12734:25112","2:12737:25113","2:12740:2453","2:12743:29984","2:12746:29985","2:12749:29986","2:12752:29987","2:12754:29988","2:12756:29989","2:12758:29990","2:12759:29991","2:12760:29992","2:12763:29993","2:12766:23390","2:12769:25116","2:12772:29994","2:12775:29995","2:12778:29996","2:12781:29997","2:12783:24446","2:12784:24867","2:12785:24450","2:12786:24451","2:12787:24452","2:12788:29998","2:12790:3317","2:12791:29999"],"negative":false,"synthetic":false,"blanket_impl":null}}}},"paths":{"6:4516:13618":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"5:4177:2780":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:21138:28610":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:14515:20874":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:43140:3637":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"16:2526:15603":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:2558:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"17:8826:16656":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"5:5645:2793":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:2567:141":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:2652:134":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:22646:3535":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"11:351:31930":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"16:6915:3073":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:40518:3367":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"16:7792:16579":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:8858:3689":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:2799:243":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"17:10384:16734":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:46425:3802":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:44216:9031":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:8385:3619":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"11:700:2541":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:45824:3773":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:40263:9110":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:13990:20835":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:44051:8999":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:41938:3126":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:10593:3125":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"11:687:3126":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:9173:2958":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:6540:3677":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"6:7388:15160":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"16:3049:15623":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"13:0:2337":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:39368:9073":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:1541:2774":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:4824:417":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:3032:123":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:2205:2813":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:8168:3349":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:10904:8987":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"6:5104:13680":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"6:4401:13607":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"16:7651:16575":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:1746:9368":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"16:2380:15597":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"8:0:2339":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"5:3225:29590":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:8959:3672":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"6:4523:13619":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:9999:16699":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"16:2881:15618":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"6:4455:13453":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:10430:3655":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:9103:2955":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:9770:140":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"17:13668:20812":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:46157:3722":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"16:4745:16234":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:12057:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"6:4506:13617":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:10164:2829":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"17:14500:20873":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:13041:20082":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"6:4428:13608":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:9467:135":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"2:22:728":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:9048:23385":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"17:13677:20813":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"16:2450:15600":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:12453:20047":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"16:6156:16534":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:10662:16843":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:9208:2959":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:13711:20815":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:11436:8977":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"2:2927:9335":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"6:4488:13615":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"5:1434:3126":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:11789:16905":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:11901:9446":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:2350:207":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:42186:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:5240:209":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"1:2354:3435":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"5:3150:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:8849:16657":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:4307:9079":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"16:5121:16322":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:6162:2861":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:11619:15553":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"6:4908:13660":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:43150:3181":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:21383:3166":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:11382:23231":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:12032:448":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:11477:8969":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"1:9069:3209":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"16:6792:16553":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"5:6856:2805":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:5518:2780":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"16:2359:15596":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"16:7391:16564":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:4469:3580":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:10127:16725":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"1:11340:21721":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:8954:16660":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:12176:8988":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:9791:33012":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:31136:3175":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:3255:9347":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"18:609:33041":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:43600:8973":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"6:4610:13630":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:42225:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:40710:9299":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"5:3212:3345":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:22279:3849":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"16:7360:32348":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:1545:2795":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"18:113:20891":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:4376:2817":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:9278:2961":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:637:3322":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:10840:24624":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:14111:20847":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:14356:20864":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"5:2149:29594":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:44396:9019":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"16:4613:16174":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:10449:245":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:9014:23820":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:39527:221":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:43343:9471":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:42058:3125":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"16:6376:16539":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:13852:20823":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:11516:3528":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:30540:9057":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"14:187:15529":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"5:7333:216":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"11:883:3338":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"16:3830:15655":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:22983:193":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:41946:2541":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:23707:242":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:11449:16672":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:3099:3370":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:10535:16764":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:12044:2993":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"5:261:2754":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:6927:14786":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"6:1674:11009":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:46939:3736":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"16:4462:16143":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"5:1310:3342":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:10095:23232":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"2:40277:9112":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:13114:20087":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:9565:16665":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:859:2541":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"16:2339:3003":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"16:6968:16558":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:6415:28847":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"2:41601:167":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"5:6346:3864":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"6:5130:13684":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"16:7828:16580":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:21109:28607":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"1:6610:2867":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"5:6681:2754":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:7895:125":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:5746:3670":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:2197:9357":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"2:2303:110":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"11:2554:31919":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:40381:106":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:11998:3213":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"6:5152:13687":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:6357:182":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"6:654:10158":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:2878:9329":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"6:574:10108":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:2574:263":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"16:5673:16523":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"16:2864:15617":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:11368:16864":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:7843:3451":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:13923:20830":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:43768:3485":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"16:7722:3085":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:22359:28441":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"16:6261:3028":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:11408:16671":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:44353:9036":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"6:1501:10992":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:357:3313":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"5:7529:249":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:1760:3375":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:12622:20055":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:11359:16899":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:44363:9037":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:12035:1145":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"11:2443:2774":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"17:11688:16679":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:3239:3504":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:12025:2986":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:46623:28125":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"16:8205:16591":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"5:1522:216":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:10812:125":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:48143:8897":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"11:2536:31916":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"6:6079:14359":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:3060:137":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:6297:226":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:7529:16651":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:11152:16890":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:12238:19558":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:13203:20093":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:14034:20839":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:11282:2972":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"18:582:3175":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:10155:23431":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"2:30546:9321":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:2810:250":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"6:119:9777":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:4040:29040":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:9128:3462":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:2187:632":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:11536:2976":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"16:6467:16544":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:2693:3409":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"17:11762:16682":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:21370:3726":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"18:531:20913":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"6:1591:11002":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:41641:3520":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"6:548:10104":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:22952:192":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"17:11202:16857":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:9608:16666":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:48059:3810":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:8850:3125":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:3732:3529":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:9094:183":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:44342:9035":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:45902:3769":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"5:5383:8955":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:415:181":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:48097:8893":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:1406:152":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:15:1800":{"crate_id":2,"path":["core","write"],"kind":"macro"},"1:645:3324":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:4964:3615":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"6:1703:3566":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:22412:28437":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:3241:3505":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"16:5727:3036":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"16:7474:16566":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:4740:3556":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"6:1521:10995":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:4052:29020":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:2643:122":{"crate_id":2,"path":["core","default","Default"],"kind":"proc_derive"},"1:8146:3206":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1:2911:2852":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:12474:16849":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:11049:16876":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"5:5872:2774":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:40322:9106":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:2958:9342":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"6:5085:13679":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:40315:9008":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"16:8154:16588":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:12055:1691":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"17:13056:20083":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:10054:2481":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"14:221:15531":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:11491:16674":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:686:1789":{"crate_id":1,"path":["std","collections"],"kind":"module"},"17:10617:16795":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"18:521:20909":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"6:5004:13670":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:39593:2486":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"1:8991:23362":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"6:5974:14352":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:9810:212":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:4386:9087":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:8274:3522":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:256:33029":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"6:563:10106":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:400:16649":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:12380:8994":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"11:2548:31920":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:10715:16845":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"5:2968:29645":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"5:5387:8956":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:4703:3580":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"16:7554:3077":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:46033:3740":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:2895:9330":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"16:4585:16170":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"11:1917:3345":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:8551:3641":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"6:6071:14358":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"6:4947:13664":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"17:582:16651":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"16:4344:16073":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"6:4860:13654":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:43836:9016":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:22053:3855":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"2:4192:3145":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"5:2139:2771":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:10059:1788":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"6:588:10110":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:5571:3654":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:2561:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"1:12039:1617":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:7805:2498":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:22185:3860":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:21309:3458":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:4303:227":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:11711:2973":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:10548:16791":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:6596:3680":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"6:596:10111":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:9479:2876":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:5613:2780":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"15:306:15546":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:588:3316":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:23014:194":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"5:6479:2774":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"5:7291:2774":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:10642:3485":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"1:8281:3577":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"7:0:1681":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:2942:9339":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:11099:16863":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:12038:1531":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"17:9897:16692":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:13423:20803":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"18:727:2934":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:5395:3649":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:22573:28050":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"11:1582:15514":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"6:489:10097":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:44800:28840":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"17:12197:19555":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:12998:20079":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"5:4361:270":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:30738:28035":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"16:6844:16555":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"9:237:3637":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:4800:13646":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"9:0:2340":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"6:5897:14347":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:6813:14779":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:44538:128":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:7673:9284":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:1821:3391":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"16:2618:15607":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"16:5760:16526":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:6896:2869":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"5:4015:2774":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"11:1923:3346":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"16:6279:3059":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"11:1896:2795":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"17:11317:16886":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"17:10963:16805":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"5:7271:2541":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"18:707:8995":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"6:7657:13854":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:3837:3530":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"16:2744:15612":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"5:687:116":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:13877:20825":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"6:6263:14396":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"6:7692:15347":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"16:5049:16298":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:41870:200":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"5:7613:2795":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:7580:2872":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:5082:23780":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:13555:20807":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"16:5435:32311":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"11:837:3334":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"16:6944:32112":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"19:0:1125":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:45848:3733":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:10917:16807":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"6:1734:11015":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:4845:29197":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:7901:2480":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"1:8308:3579":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:3565:16829":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"6:501:10099":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"18:690:20907":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:40578:9291":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:11390:16670":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"5:2178:3131":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:12831:20069":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"9:426:15395":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"16:6456:16543":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:8978:113":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"17:11138:16860":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:903:2795":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:4235:3146":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"16:536:3015":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:22481:3137":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:3674:2541":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:4635:26931":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:12056:1241":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"5:5956:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"18:699:2932":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:11087:16889":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:11382:16900":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:12385:8992":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:12946:20075":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:4151:3571":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"18:96:20890":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"11:1891:2774":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"16:2832:15616":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:43726:9007":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:46092:3801":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:12591:117":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:46401:3753":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:13950:20831":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"16:5995:3017":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:4087:8919":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:7754:3394":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:46203:3775":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:939:3336":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"6:4955:13665":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:43158:3182":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:22921:195":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"16:3232:15625":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"16:6415:16541":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"16:4921:16266":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:14309:20859":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:39625:9348":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"6:4789:13645":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:2564:159":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"1:11370:21669":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:11063:16887":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:43119:2483":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"5:1146:29495":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:13803:20819":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:1966:204":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"6:4998:13669":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"6:6248:14395":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:46073:3752":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:22230:3458":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"6:4676:13635":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:10638:16797":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"2:2889:9331":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"6:4584:13627":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:10944:21728":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"17:12514:20049":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:12555:20052":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:8300:3527":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:12268:19560":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:39549:220":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:10685:8988":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:8403:3636":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:2971:9345":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"6:1639:11006":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"16:5939:3011":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:13163:2843":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"1:9021:3197":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"16:5088:16313":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"16:8134:16587":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:11125:16861":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:40540:3150":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"16:4641:16178":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:9522:16664":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"11:2326:3340":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"11:2423:2541":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"17:9138:2957":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"6:5068:13677":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:10247:3659":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"5:3179:3125":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:5044:13675":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"6:1682:11010":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:9973:16701":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"11:490:150":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:10940:3394":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"11:1883:3125":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"6:4473:13613":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:13869:20824":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:12014:23389":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"6:4364:13604":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:42943:8930":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:11846:16907":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"5:881:2761":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:10198:16754":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:11307:2973":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"5:7429:2493":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"11:673:3125":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:12045:792":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"17:14325:20861":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"6:123:9778":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:40235:9111":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:32346:9087":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"5:7445:2785":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"16:6386:16540":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:9922:16716":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:43103:2482":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:5446:111":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"18:515:20912":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:4167:3573":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:12438:20046":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:3394:2780":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"1:504:2771":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:23076:196":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:945:3337":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:8891:3684":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"11:2151:3341":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:40610:3155":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"6:1913:11179":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"18:636:33064":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"6:5033:13674":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:8237:3518":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:13452:20804":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:6543:3678":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"6:555:10105":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"16:2696:15610":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:909:3333":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:3988:3544":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:10293:2943":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:5987:226":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"6:4434:13609":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:40527:3149":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"11:0:2342":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:11045:2881":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:10876:8986":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:21920:3458":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:22672:3537":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:7037:2549":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:9454:29373":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"6:7365:15158":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:10479:2967":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"5:3576:179":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:9373:2940":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"6:7610:13847":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:5639:3681":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"5:1126:29643":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:3425:3455":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:46379:3747":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:22008:3854":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"7:31:15364":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:14402:20866":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:10647:16842":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"5:7476:28860":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"5:3246:3346":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"6:4808:13647":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:46003:3734":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:43744:9003":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"6:4783:13644":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:41060:28775":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"2:2386:201":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"6:4724:13639":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:10473:2877":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"5:7417:2492":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:13201:148":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"14:215:15530":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"18:548:149":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:8476:3638":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:22116:3458":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"17:13612:20810":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:0:530":{"crate_id":2,"path":["core"],"kind":"module"},"2:43650:8962":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"6:5123:13683":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"17:11574:2977":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:32328:24165":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"11:832:3333":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:8226:3527":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:11144:3191":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:3270:143":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:7717:3327":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:7599:2874":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"16:2722:15611":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:8984:3298":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"17:11174:16891":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:10024:16667":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:11873:16908":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:9186:24090":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"2:47937:3804":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:44148:9027":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:849:3126":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:9802:8932":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:44495:9482":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"5:5149:2790":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:12209:19556":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"18:766:20903":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"6:7556:15319":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"16:7523:16570":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"16:4806:16247":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:14077:20843":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"11:2383:3125":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"11:2304:3339":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"17:9661:33028":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"5:1281:3341":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"16:2596:15606":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:9752:3406":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"17:10629:16796":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"1:11051:2882":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:11236:16893":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"6:4830:13650":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"16:7462:16565":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:5971:2862":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:11112:16862":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:41794:3531":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:44487:9481":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"6:1507:10993":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:46055:3746":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:10762:27426":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"17:8595:16637":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"11:1566:15513":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:10097:23812":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"17:14336:20862":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:363:3314":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"16:6893:3029":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"6:1496:10991":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:10495:2952":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:261:33027":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:10738:3609":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"17:11720:16680":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:42612:8939":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:40596:28768":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"5:2698:29611":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:41998:9429":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"6:6898:14784":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:12423:20045":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"16:4986:16283":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:44185:9029":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:14297:20858":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"6:495:10098":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:4460:3147":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:13898:20827":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:42264:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:21490:3724":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:40874:9301":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"16:4557:16166":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:44067:9008":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:21155:28611":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"6:6804:14778":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"5:6599:2541":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"6:4738:3539":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:10617:3126":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:12672:20058":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:11403:8976":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"5:1296:3340":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:10751:2969":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"11:800:2774":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"16:6742:15539":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:2806:2495":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"1:8006:3203":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:13149:20089":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:12811:20068":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:5992:14354":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"18:0:2348":{"crate_id":18,"path":["memchr"],"kind":"module"},"5:4999:2780":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"5:2970:29608":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:914:3129":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:9575:33024":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:10230:2832":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"17:13568:20808":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:40461:2819":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"7:78:15371":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"6:4556:13624":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:2622:3486":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:12779:20066":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:3166:23969":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:46827:3782":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"6:1570:11000":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:2209:16761":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"16:7492:16567":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"5:7311:29607":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:44199:9030":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:21798:3167":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:2178:16736":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:10266:16738":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:13287:20098":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:39571:222":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:2899:3716":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"18:719:20901":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"5:898:3125":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:7710:142":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:1555:2780":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:10439:3458":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"15:327:3090":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"11:774:3127":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:10011:149":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1:1819:3390":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"6:4710:13638":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:40428:3416":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"16:6513:16545":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"16:6818:16554":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"6:4461:13612":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:4906:3605":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:40619:9294":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"5:0:313":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:41108:9279":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:7838:3450":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:47277:3737":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:9071:2938":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"11:2569:2492":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"5:2231:31093":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"6:6169:14367":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"16:5982:16531":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:23231:186":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:40680:9297":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:7489:2856":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"11:2231:3096":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"6:7616:13848":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:2426:2354":{"crate_id":1,"path":["std","io"],"kind":"module"},"18:652:33043":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:12065:9490":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:7540:23422":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:11178:3165":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"1:8011:3496":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:3066:139":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"16:5588:16518":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"10:36:31915":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"11:710:3129":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:3045:3355":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:40639:9295":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:7143:9289":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:9868:16690":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:1534:3125":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:40471:3429":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:43362:8964":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"9:52:3098":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:4663:9099":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:2518:3493":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"6:7598:13845":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:8973:3194":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"11:430:31935":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"16:5798:3038":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:9391:135":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"6:475:10095":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:1567:3346":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"16:6189:32330":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"5:781:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"6:4939:1095":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"16:6721:16551":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:13163:20090":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"5:6112:2780":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"5:3220:3343":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:1969:203":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:44745:3862":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"5:7492:3411":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"11:1142:15512":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:836:3125":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"18:644:33043":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:12725:20062":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:13779:16706":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:2962:9343":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"6:5921:14349":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"9:330:15448":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"16:8195:16590":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"6:6682:9979":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"18:491:33042":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:10604:16794":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"17:11935:19542":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:4569:3598":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:3510:3478":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:22465:3168":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"16:7015:16560":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:4491:3581":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"16:5661:16522":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:6983:23425":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:10968:23373":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:928:3335":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"17:12935:20074":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:12738:20063":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"16:6545:16547":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"17:12087:19547":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:12137:19551":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"5:5802:257":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:8845:3330":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:42422:90":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:11290:2883":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"17:9913:16693":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"5:6525:2754":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:44170:9028":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:11885:9444":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:3063:138":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:39407:8924":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"1:12050:1633":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"16:7736:16577":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"16:4835:16252":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:11034:2880":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"6:4764:13642":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:8814:3191":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:5381:3648":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"17:10686:16803":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:13229:20095":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:8687:16652":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:7738:3393":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"17:12306:19563":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"11:1025:3340":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:12125:9489":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:45972:3786":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:1054:3340":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:8802:205":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:10797:8982":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:46233:3781":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:40226:9077":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"6:527:10101":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"16:7318:16563":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"5:3589:3125":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"14:202:9038":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:48273:8903":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:46569:28037":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:6409:9286":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"2:2915:9334":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"5:7325:2541":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"6:5023:13673":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:40850:3484":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:12042:688":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"1:2662:3495":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:39507:218":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:42848:3142":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:7752:127":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"11:123:2741":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"6:0:874":{"crate_id":6,"path":["libc"],"kind":"module"},"17:14222:20855":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:44085:9009":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:4383:3570":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:12961:161":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"5:7023:2812":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:9459:3160":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:2380:3445":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:41116:9281":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"6:6700:14775":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:44511:9479":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:8846:3625":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:40341:9108":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"6:4847:13652":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:42083:202":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:44694:233":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"5:3813:2795":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"1:11158:3656":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:40628:9302":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:12983:28183":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:3095:3369":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"6:4388:13606":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:2284:103":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:43672:8981":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:44702:213":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:12102:9492":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:2811:115":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:40367:9105":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:9960:16702":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"11:787:3128":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"5:1265:3339":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"6:7651:13853":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"9:486:15392":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:7644:3315":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:8453:3637":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:3323:3490":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"16:2504:15602":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:11338:16897":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:40498:8961":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:13827:20821":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"11:2352:3341":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"17:14127:20849":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:12253:19559":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:13967:20832":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"16:7090:32302":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:10508:16763":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:45932:3774":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:3366:3509":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"16:6352:3066":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:9800:126":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:48181:8899":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:9099:240":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:2859:8920":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"1:10532:3502":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"6:5111:13681":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"1:867:3127":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"6:4698:13637":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:4312:9080":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:10767:3448":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"5:2057:3358":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:10421:16787":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:44758:177":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"16:8050:16583":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:8866:2541":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:10772:16823":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:39632:9062":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1:7668:3305":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:21362:3458":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:10113:16724":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:11743:16681":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:2281:102":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:40414:3414":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:32440:3176":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:3443:3454":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:10578:2878":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:2392:208":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:918:3130":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"6:4884:13657":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:9104:241":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:9795:117":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"5:2967:2600":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:39646:9070":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:3232:16806":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"16:6569:3070":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"16:3915:15692":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:42303:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:2641:122":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:40860:9300":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:11163:16856":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:3980:3543":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:44291:9033":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:46110:3807":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:9887:16691":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"16:5017:16290":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:10469:2966":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:10789:16848":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:43738:9004":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:45870:3739":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:32353:9395":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"6:5146:13686":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"6:4375:13605":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:4841:13651":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:3278:3500":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"6:4496:13616":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:8847:3158":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"18:538:2927":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:7568:3078":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:13974:20833":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:44264:9032":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"6:5867:14344":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:4028:3546":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:11355:21726":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:9267:84":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:12099:19548":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:41955:3623":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"5:35:2750":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"6:5075:13678":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:2809:251":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"6:4914:13661":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"6:507:10100":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:11296:16895":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"5:825:2759":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"17:1075:16704":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:9446:16663":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"0:10:1793":{"crate_id":0,"path":["fnv","FnvHasher"],"kind":"struct"},"1:8207:2962":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"18:614:33051":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"16:7694:3082":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"5:7370:2541":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:893:2774":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"5:1784:2795":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"18:507:33043":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"11:742:3130":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"16:4719:16232":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:39483:216":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:48117:8895":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:39819:25001":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:4915:3606":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:44503:9484":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:44563:3719":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"6:6159:14366":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:4231:3575":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:12960:20076":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:7643:3458":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"11:396:2745":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"9:450:15393":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"5:4406:2780":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:32339:28416":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"18:660:20904":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:46303:3735":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:12053:1632":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"6:1691:11011":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"15:394:15556":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"1:8904:3687":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:2861:112":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:11612:15553":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"9:177:3113":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"18:736:20902":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"5:3682:2754":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:8660:16635":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:5780:3193":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:10338:24140":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"16:3315:15626":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"1:3966:3542":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:13010:211":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"16:6332:3062":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:9599:8929":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"2:44499:9486":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"16:2969:15621":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"16:3764:15637":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"14:160:15521":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:9532:33020":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"5:5987:2790":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:44483:9478":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"2:3431:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"6:4776:13643":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:22497:3169":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"5:1500:3129":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:11972:19544":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:46703:3770":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"0:24:1811":{"crate_id":0,"path":["fnv","FnvHashSet"],"kind":"type_alias"},"16:6696:15540":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:46349:3741":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"5:629:29584":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:44042:9000":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:6426:3673":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"6:4893:13658":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:10831:24621":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"1:1040:3339":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:10371:16735":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:10739:16847":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"5:3186:3344":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"11:299:31924":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:12047:794":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"6:6107:14362":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:42066:3126":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:10724:8975":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:6644:239":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"5:4376:2783":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"16:5363:16516":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:44737:3861":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"5:7262:3122":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:1902:3405":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:22533:28829":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:434:15569":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:2873:3717":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"6:7645:13852":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"16:5866:16528":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"6:1604:11004":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:880:3128":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:12185:19554":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:43890:8984":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:1562:3345":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:12141:9491":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:11197:3462":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:10535:3504":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"11:2542:27542":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:9272:91":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"6:4989:13668":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"11:1051:3341":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:13035:9129":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:12320:3643":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:13072:20084":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"6:4814:13648":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:8286:3578":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:723:150":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:2864:9309":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"2:5689:9293":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:40348:9109":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"17:13488:20805":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:8958:8993":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:12532:20050":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:43936:9013":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"6:6764:11121":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:40386:3415":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:5308:126":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:640:3323":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"16:5816:3043":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:14084:20844":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"6:7679:13856":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:42108:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"6:5928:14350":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"16:6243:16536":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:11474:16673":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:12791:20067":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"16:6901:3072":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:47063:3748":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"16:2644:15608":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:40696:9298":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:7207:28774":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:12360:8997":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:10918:8985":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"6:1710:11013":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"16:6560:2739":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"1:4042:3548":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:5568:3653":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:43128:153":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"6:4878:13656":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:3491:23657":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"14:31:15521":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:12046:793":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"16:8281:16593":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"6:1718:11014":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:12365:8993":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:8220:3483":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"6:1596:11003":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"6:6666:10951":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"6:6961:14789":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:43692:8980":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:43990:9015":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:11328:16896":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:41930:3125":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"1:8562:3642":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:9147:3714":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:8842:3192":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"16:7768:3086":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:9763:33030":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:10822:3453":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"2:26109:272":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:2821:3143":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:44328:9034":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:46447:3808":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:40334:9107":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"17:11216:16859":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:44376:9018":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"17:10411:16755":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"16:7006:16559":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"6:6943:14788":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:14119:20848":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:43111:3180":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"16:2428:15599":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"9:507:15396":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:5632:2862":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:8200:3484":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"11:875:3337":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:21136:28605":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"16:4949:16270":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"6:6718:3610":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:2600:2833":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:13839:20822":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"6:6819:14780":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:9824:16688":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:7732:3328":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:1760:28062":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"16:6401:3067":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:5128:210":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"1:4744:3560":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:21810:28600":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:44507:9485":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:10589:16793":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"11:328:31927":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:2209:3431":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"16:2284:15567":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:7689:2878":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:1873:3404":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:11915:9001":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:46857:3788":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:11273:16894":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"0:21:1807":{"crate_id":0,"path":["fnv","FnvHashMap"],"kind":"type_alias"},"1:8545:3125":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"6:1664:11008":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:12036:338":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:12033:1652":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:504:16650":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"6:6059:14357":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"6:5885:14345":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"16:3600:15628":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:4883:3510":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"16:5696:16524":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"5:2974:29609":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:9243:2960":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:13633:20811":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:11394:134":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"5:4087:3126":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:42903:3142":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"5:1490:3333":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"16:6929:3074":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:12044:795":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"16:7621:16574":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:22143:28799":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"6:6086:14360":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:43571:8970":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:11227:16892":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"18:590:28844":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:11587:2979":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:23169:188":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"11:1087:31934":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"5:1419:3125":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:11911:19541":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:48086:8892":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:13175:20091":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"6:4854:13653":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:46255:3787":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:7663:3303":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:3276:9075":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"16:2907:15619":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:11234:158":{"crate_id":1,"path":["std","sys","unix","time","Instant"],"kind":"struct"},"6:533:10102":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:12054:844":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:10215:16740":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:13025:20081":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"6:4535:13621":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:22610:28046":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"6:5910:14348":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"4:0:2338":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"5:1382:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"5:276:2500":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:13547:20806":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"16:2933:15620":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:8213:3485":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"6:4595:13628":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:30506:3174":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:3056:2497":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:8330:3610":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:8001:23824":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:1678:1182":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:6811:3720":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:10341:16741":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:4159:3572":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:3192:217":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:42381:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"5:7279:3347":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:23107:190":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"16:7513:16569":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"16:2810:15615":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:21311:3727":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:11215:21722":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:41849:3524":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:4798:2853":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"16:7436:3025":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:8795:16655":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:41687:3178":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"5:7462:3413":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:41658:3521":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:12049:1636":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:44022:3483":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"17:14025:20838":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:12003:3329":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:10441:16789":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"2:4161:3144":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:43712:9010":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:10085:16698":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"6:542:10103":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:10953:3652":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"1:11593:3212":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:4038:3547":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"6:6781:11119":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:6420:2825":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"16:6226:16535":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"17:10521:16790":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:2352:3434":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"12:0:2343":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"6:5859:14343":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:1184:16711":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"11:364:2743":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:14164:20853":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:7026:2870":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:11476:3529":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:9034:16562":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:2920:9338":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:8177:9282":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:10562:16760":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"16:7342:32340":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"6:6837:14781":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:22521:3533":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:9004:16662":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:23138:187":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"6:6012:14355":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"16:7862:16581":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:39467:219":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"14:40:19542":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:43818:9017":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:10431:16788":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"2:47875:3783":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"5:1472:3127":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:5625:226":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:10019:153":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"1:8872:3686":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"16:5322:16499":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:3936:3540":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:11992:2980":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:14347:20863":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:21153:28597":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:12847:20070":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:951:3338":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:10890:8984":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:8326:3608":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:4487:3148":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"16:5648:16521":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"5:4045:2754":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:9804:8931":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:40549:3152":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"11:856:3336":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:12497:20048":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:7906:2479":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"18:755:20908":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"9:393:15394":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"6:4666:13634":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:3265:260":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:42838:28036":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:13686:20814":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:11952:19543":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:13576:20809":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:8171:3353":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:9702:16667":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"13:110:31986":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"18:564:2929":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:46522:28060":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"6:1632:11005":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"16:7782:16578":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:10802:136":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:10076:3384":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"17:12466:16851":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:9087:2939":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:23045:191":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:12048:790":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:39454:9346":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:22548:27969":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"16:8239:16592":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:11192:16678":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:4431:2818":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:2966:9344":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:2816:253":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"5:7554:9040":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:13011:20080":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"16:7597:32275":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"6:6889:14783":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:11388:23218":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:21364:3723":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:7714:162":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"6:62:9723":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:43972:9014":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"11:2562:31922":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"5:7505:3412":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"11:434:31936":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"6:4902:13659":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:3310:8922":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:3968:2780":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"5:2978:29610":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"16:5830:16527":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:3163:23966":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:5500:3652":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"1:12031:1028":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:47625:3743":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"16:4053:15806":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"16:6960:16557":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:12008:2984":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"16:6499:3069":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"6:4616:13631":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:30632:28088":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:3014:8923":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"2:2199:9358":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"16:6204:3044":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:10166:16727":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"1:8137:3157":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:44575:9498":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"16:3461:15627":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:4:1108":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:1641:631":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"6:4549:13623":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:30279:3532":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:557:3300":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:4821:3555":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"6:6222:14394":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:42619:8940":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"16:6425:16542":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"16:7041:32298":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"11:2369:15516":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"16:6346:3064":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"6:7371:15159":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"6:7668:13855":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:9971:21660":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"1:5753:3671":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:9456:33019":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:42878:28083":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:8493:3639":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"17:8979:16661":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:14270:20856":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"6:6136:31671":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"16:4497:16154":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"5:3602:3126":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:10321:111":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"17:9986:16700":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:1956:8926":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"6:1546:10998":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:5431:3651":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:40671:3156":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:3482:3406":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"6:1514:10994":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:7723:2499":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:12599:20054":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:3280:3501":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:14174:20854":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:9329:2962":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"16:7534:16571":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:4440:9088":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"1:10538:3500":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"16:8294:134":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"5:3733:3205":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:10673:16844":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"11:1160:3342":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:21167:28602":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"5:2469:29614":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:11662:16638":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"16:2406:15598":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:10241:2964":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:8896:16658":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"16:4417:16122":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"6:6114:14363":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"16:6879:16556":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"16:2766:15613":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"16:5419:2939":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:4625:3545":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:482:2845":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:42461:97":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"16:5905:16529":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:8714:16653":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:5051:23780":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:30562:3142":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"6:4977:13667":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"6:4529:13620":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:3994:3545":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:4180:3574":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"16:5712:3033":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"16:2472:15601":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:7923:3494":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"16:2548:15604":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"11:2469:2795":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"1:2370:3440":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:23262:3536":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:32332:16592":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:30574:28038":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"16:6171:212":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:11605:23783":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"2:6225:9303":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:11262:16885":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"17:12699:20060":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"16:6083:15566":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:6430:3674":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"6:5969:14351":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:40491:3452":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"2:2907:9333":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:14435:20868":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"16:0:2346":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:7855:3204":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"10:44:3097":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"6:6047:14356":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"11:811:2795":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"17:14537:20876":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:12577:20053":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:4311:3576":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:43872:8986":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:13260:20097":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"18:681:20906":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:9753:16668":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"16:7677:216":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"18:624:33063":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"6:4480:13614":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:922:3334":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:13740:20817":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:12485:16850":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"5:1481:3128":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"5:785:2756":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:10981:2943":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:2954:9341":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:1909:701":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"6:4647:13633":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:10792:3204":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"17:14101:20846":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:4637:26933":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:43511:28780":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"5:6008:9697":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:2937:9337":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"6:4628:13632":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:1556:3344":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:12063:19545":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:12374:20044":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"16:6361:16538":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"16:5743:16525":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:13759:2994":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:48132:8896":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:4064:107":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"6:483:10096":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"16:6531:16546":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"5:1531:3357":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"6:4566:13625":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"16:3888:15689":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:12226:19557":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:41771:28835":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:4700:3607":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:1550:3343":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"16:8097:16585":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"6:5140:13685":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"16:7582:3079":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"14:0:2344":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:47483:3771":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:40587:9292":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"15:288:15545":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"16:6268:32373":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:10576:16792":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"1:3160:27391":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:42921:134":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:40648:9285":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:13245:20096":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:22594:27951":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"6:6868:14782":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:4449:13611":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:47017:3742":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:4129:23235":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:9618:33033":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:6146:2843":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:42342:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:13724:20816":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"5:6998:2808":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"16:4527:16160":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:10950:16804":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:40307:3318":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:13152:113":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"17:14002:20836":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:12544:20051":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:13102:20086":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:3441:16811":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:10247:2833":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:2368:3439":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:45778:3732":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"16:5612:16519":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:42074:2541":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"17:14379:20865":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:9781:16669":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"11:1728:152":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:11307:3199":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:41074:3673":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"6:5829:14279":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:7639:13851":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:8292:3569":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:11640:16678":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"6:5982:14353":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:10457:16762":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"5:3191:29605":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"6:6913:14785":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:41067:9276":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:10140:16726":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"18:574:33043":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"16:5963:16530":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"16:6600:16549":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"6:569:10107":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:44491:9483":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:11548:16676":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:48021:3789":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:10986:3192":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"16:3655:15629":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:14283:20857":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:9812:8937":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:48211:8901":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:3199:3502":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:2946:134":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"16:7503:16568":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"6:6691:14774":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:12037:1498":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"6:5891:14346":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:44032:9011":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:22245:3850":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"17:11245:16677":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"17:13216:20094":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:47983:3755":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:2856:2496":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"17:14069:20842":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:2944:232":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"1:9109:158":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"6:6658:10146":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:10037:16705":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:11453:2885":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:44519:3165":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:9274:3390":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:40398:28860":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:12052:1635":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:41807:3522":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:43786:8982":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"6:7633:13850":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:43580:8974":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:3670:3525":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:48234:8902":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:7861:175":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:21773:3729":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"18:80:20889":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:40568:3153":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:533:2846":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:41988:3624":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"16:2788:15614":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:22131:3859":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"1:1072:3342":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:8828:3656":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"5:1511:3130":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"18:671:20905":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:2883:9328":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:43562:8971":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:11352:16898":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"16:4774:16239":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:44787:8912":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:22145:9357":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"17:12877:20071":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:42015:232":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:43754:2962":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:43663:8978":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:14057:20841":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:2948:9340":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:10228:16739":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:42147:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:4924:850":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:9808:8940":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"18:481:20910":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"14:7:15521":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:45802:3768":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:44684:225":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:12646:20056":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:11981:23394":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"2:31108:202":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:10762:8989":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"5:7543:9039":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:12173:19553":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"16:5574:3032":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:44775:8914":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:0:2347":{"crate_id":17,"path":["object"],"kind":"module"},"5:678:256":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:9651:2943":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:12155:19552":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:3500:3456":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:43637:8961":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"16:6318:16537":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:4742:3559":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"16:3065:15624":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"5:3338:2795":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"11:1603:15515":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:13299:20099":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"6:7622:13849":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"11:1910:3344":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:12912:20073":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"6:4745:13640":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:2570:264":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"1:10757:24421":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"6:6711:14776":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:22556:28054":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"13:226:3094":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:7380:23519":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"0:0:2222":{"crate_id":0,"path":["fnv"],"kind":"module"},"10:0:2341":{"crate_id":10,"path":["adler"],"kind":"module"},"2:43682:8979":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"6:4351:13603":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:13086:20085":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:11618:16677":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:8920:3685":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"16:7102:16561":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:5825:2855":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:10727:16846":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:40558:9290":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:12051:1634":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:3347:8925":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:42866:28123":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:2932:9336":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:42007:3306":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:12948:146":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"16:5403:2938":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:10060:16703":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:8535:3640":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"17:8766:16654":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:22199:9357":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"2:2903:3718":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:14461:20870":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:11887:19540":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"16:7708:3084":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:9946:2964":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"16:4889:16258":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:12686:20059":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"16:5634:16520":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:11313:3660":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:45758:3767":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:3295:29209":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:41098:2827":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"5:7341:3136":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:9814:8938":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"5:1019:2754":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:7429:3157":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:7878:136":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"5:6837:2793":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:5415:3650":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:12124:19550":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:21492:3166":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:13189:20092":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:11170:24627":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:10448:3096":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"16:8181:3088":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"6:1650:11007":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:46471:3809":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"15:0:2345":{"crate_id":15,"path":["addr2line"],"kind":"module"},"6:5955:14308":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"11:1107:15511":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"6:6128:14365":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"11:102:31917":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"5:4860:223":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:8169:3457":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:48077:8891":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:44515:9480":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"16:7128:16562":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:13136:20088":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:40720:9287":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:6249:2862":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"3:234:232":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:21481:3458":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:40661:9296":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:1538:2541":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:7931:3205":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"5:4247:3125":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:13817:20820":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:11024:16810":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:47127:3803":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"5:7629:2799":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:2202:3430":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"6:6798:14777":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:10262:2838":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:42500:3179":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"6:4968:13666":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"6:4755:13641":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:3735:3528":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"16:3032:15622":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"16:7067:32281":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:9351:2963":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:41830:3523":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"6:4543:13622":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:14146:20851":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:2522:9125":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:22660:3534":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:11816:16906":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:47813:3749":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"11:1066:15510":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:1758:3374":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:48196:8900":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:12294:19562":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:6466:2866":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:11508:16675":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"5:1110:29503":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"6:7604:13846":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"16:149:2736":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"17:9052:16636":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:10835:8983":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:42605:8932":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:48158:8898":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:8215:29376":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:13982:20834":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"5:207:2752":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:14135:20850":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"16:4862:16255":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"5:2043:3205":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"16:2574:15605":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"11:1903:3343":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:14043:20840":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:21121:28607":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"17:13793:20818":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:47093:3754":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"6:5015:13672":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:44076:3318":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:3930:3541":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:40287:9113":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"6:1558:10999":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"16:5384:16517":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:13275:2973":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:14157:20852":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"16:7054:32325":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:8936:3688":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"11:2124:3339":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:11001:16812":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"5:1450:2541":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:41624:3519":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"6:5052:13676":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:12889:20072":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"16:7660:16576":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"6:7702:15348":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:1576:11001":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:40220:3318":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:41083:9278":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:2200:135":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"17:10699:16824":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"6:1697:11012":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"16:7544:16572":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:47735:3777":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:11816:2888":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:6070:2857":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"6:5941:14307":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:10780:23363":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"6:7343:10056":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:43611:8963":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"16:8167:16589":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:2853:9306":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"17:12984:20078":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:9853:16689":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:12075:19546":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:7136:23222":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:22639:28845":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:21099:3175":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:8232:3526":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:14523:20875":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:8927:16659":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"11:1676:2747":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"16:2670:15609":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:3282:9074":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"11:1887:2541":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"6:1528:10996":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"3:0:475":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"1:4639:26935":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:23200:189":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"6:6934:14787":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"6:4922:13662":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:3201:3503":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:11075:16888":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:8352:3558":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"16:7269:32375":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:9164:23836":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"16:7284:3623":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:14091:20845":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:14449:20869":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"6:580:10109":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"5:4439:2783":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"11:2140:3340":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:9026:3207":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:40247:28086":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:7677:9283":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:4440:13610":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:1648:9262":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"5:5339:2754":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:13891:20826":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"6:6120:14364":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"18:599:33054":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:22092:3856":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"17:9489:33022":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:46781:3776":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:1063:3341":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"5:2251:3134":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:5802:3154":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:13907:20828":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:12374:8995":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"16:8072:16584":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"16:6753:16552":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"11:1007:3339":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"16:6485:3068":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"6:4870:13655":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:13915:20829":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:8190:3149":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:21922:3725":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:13256:3348":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:1836:185":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:12751:20064":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:43918:9012":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:10317:16743":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"5:6954:269":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:7865:3449":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"16:8115:16586":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:12766:20065":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"5:7518:2791":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"17:9712:33035":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:12281:19561":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:14014:20837":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"6:5117:13682":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"2:42598:8931":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"16:2305:15594":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"9:357:15409":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:2521:3458":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"5:7301:2765":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"16:6687:16550":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"6:4603:13629":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:41921:170":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"14:165:15522":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"17:10367:16748":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:40299:9009":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:10013:2943":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:46600:28091":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:6194:3198":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"5:3748:3358":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"11:2403:3126":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"17:14317:20860":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:10398:16786":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:11537:3530":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:1743:655":{"crate_id":1,"path":["std","env"],"kind":"module"},"6:5009:13671":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:12043:690":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"16:3797:15646":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:22274:3851":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"2:1769:9367":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"16:6017:16532":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:48106:8894":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:43590:8972":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:4050:3550":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:12971:20077":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:7848:3448":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:9806:8939":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"6:4824:13649":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:2150:16775":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:10187:16728":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"17:2012:16742":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:43358:27544":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:12030:399":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"5:6866:2807":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"2:7259:9274":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:41089:3509":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"5:1680:2754":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"16:6583:16548":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:14470:20871":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:14421:20867":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:621:3320":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:10098:16697":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:14479:20872":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"16:7884:16582":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:10279:16737":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:2586:2849":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:12431:9021":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:13694:20802":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"16:2321:15595":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:2911:9332":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:9474:3451":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"5:7362:2541":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:9934:16710":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:44060:8998":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:3540:2774":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"11:844:3335":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:12659:20057":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"0:20:1805":{"crate_id":0,"path":["fnv","FnvBuildHasher"],"kind":"type_alias"},"17:12712:20061":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:8796:3655":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:10930:16808":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:12112:19549":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:1796:3384":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:2807:8921":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"6:4932:13663":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:0:1523":{"crate_id":1,"path":["std"],"kind":"module"},"1:8157:3453":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:2868:3715":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"1:9196:24082":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:42894:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"16:6041:16533":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"6:6228:13519":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:4686:13636":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"6:6741:11136":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:10904:16809":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"6:4578:13626":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:7915:23818":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:45954:3780":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"6:1537:10997":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:32292:3657":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:2355:131":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"6:6100:14361":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"16:7613:16573":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:21768:3458":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"5:4207:2780":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}