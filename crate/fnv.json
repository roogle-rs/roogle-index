{"root":"0:0:2426","crate_version":"1.0.7","includes_private":false,"index":{"2:13181:23698":{"id":"2:13181:23698","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:9132","str::rsplitn":"2:13184:23700"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43524:9121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:9128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3133:9451-0:10:1997":{"id":"a:2:3133:9451-0:10:1997","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3133:9451","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1997","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2879-0:10:1997":{"id":"b:2:2879-0:10:1997","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2852:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1997","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2881:817"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2881:817":{"id":"2:2881:817","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2890-0:10:1997":{"id":"b:2:2890-0:10:1997","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2849:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2859:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1997","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2893:136","2:2894:1782"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13166:23692":{"id":"2:13166:23692","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12804:9132","`DoubleEndedIterator`":"2:8196:129","prim@char":"1:12325:458","str::split_whitespace":"2:13144:28635","str::rsplit":"2:13172:23696"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43420:3596","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:9128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2875-0:10:1997":{"id":"b:2:2875-0:10:1997","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2852:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2849:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1997","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2878:2737"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13155:23705":{"id":"2:13155:23705","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:9132"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:9128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:9128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:9129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13199:31139":{"id":"2:13199:31139","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12804:9132","`DoubleEndedIterator`":"2:8196:129","prim@char":"1:12325:458","str::rmatch_indices":"2:13202:31140"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43570:9147","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:9128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13222:23706":{"id":"2:13222:23706","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:9132"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:9128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:9128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:9129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13178:31137":{"id":"2:13178:31137","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12804:9132","str::split":"2:13166:23692","prim@char":"1:12325:458","str::split_terminator":"2:13175:31136"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43488:9151","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:9128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:9128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:9129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41633:3746-0:10:1997":{"id":"a:2:41633:3746-0:10:1997","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41633:3746","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1997","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13148:28638":{"id":"2:13148:28638","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43712:9133","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2893:136":{"id":"2:2893:136","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:31902:3778","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:13115:2744":{"id":"2:13115:2744","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13242:24921":{"id":"2:13242:24921","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:975:37984"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5620:31853":{"id":"5:5620:31853","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:295:2706","`String`":"5:7632:242"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:295:2706","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13196:31138":{"id":"2:13196:31138","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12804:9132","`DoubleEndedIterator`":"2:8196:129","prim@char":"1:12325:458","str::matches":"2:13193:2656"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43642:9150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:9128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:9128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:9129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13130:23661":{"id":"2:13130:23661","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10895:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10895:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:2607:22531":{"id":"2:2607:22531","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13207:31142":{"id":"2:13207:31142","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13216:31147":{"id":"2:13216:31147","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:9132"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:9128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13212:31145":{"id":"2:13212:31145","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13137:23687":{"id":"2:13137:23687","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:13136:23686","str::split_at_mut_checked":"2:13139:23691"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:21:2011":{"id":"0:21:2011","crate_id":0,"name":"FnvHashMap","span":{"filename":"lib.rs","begin":[132,0],"end":[132,58]},"visibility":"public","docs":"A `HashMap` using a default FNV hasher.","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"std::collections::HashMap","id":"1:726:153","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"resolved_path":{"name":"FnvBuildHasher","id":"0:20:2009","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"2:13175:31136":{"id":"2:13175:31136","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12804:9132","str::split":"2:13166:23692","prim@char":"1:12325:458","`DoubleEndedIterator`":"2:8196:129","str::rsplit_terminator":"2:13178:31137"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43470:9152","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:9128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13141:28637":{"id":"2:13141:28637","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12325:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43390:9139","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13219:22757":{"id":"2:13219:22757","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:9132"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:9128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32031:2702-0:10:1997":{"id":"a:2:32031:2702-0:10:1997","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32031:2702","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1997","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13143:2005":{"id":"2:13143:2005","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43406:2895","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13246:3412":{"id":"2:13246:3412","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4894:3412"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43728:3413","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13145:28636":{"id":"2:13145:28636","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13144:28635"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43703:9134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13169:23694":{"id":"2:13169:23694","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:9132"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12620:9123","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:9128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:18:2003":{"id":"0:18:2003","crate_id":0,"name":"finish","span":{"filename":"lib.rs","begin":[110,4],"end":[112,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13190:23703":{"id":"2:13190:23703","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:9128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:9128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:9129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13209:31143":{"id":"2:13209:31143","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13231:31150":{"id":"2:13231:31150","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:9132"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:9128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:9128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:9129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2602-0:10:1997":{"id":"b:2:2602-0:10:1997","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31975:2701","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2596:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1997","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2604:2641"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13241:24920":{"id":"2:13241:24920","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:975:37984"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2885-0:10:1997":{"id":"b:2:2885-0:10:1997","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2859:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2855:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1997","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2888:136","2:2889:1784"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:24:2015":{"id":"0:24:2015","crate_id":0,"name":"FnvHashSet","span":{"filename":"lib.rs","begin":[136,0],"end":[136,52]},"visibility":"public","docs":"A `HashSet` using a default FNV hasher.","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"std::collections::HashSet","id":"1:1449:155","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"FnvBuildHasher","id":"0:20:2009","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"2:13117:31130":{"id":"2:13117:31130","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:17":{"id":"0:17","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[108,0],"end":[125,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["write_u8","write_i128","write_i16","write_u128","write_u16","write_isize","write_i32","write_usize","write_u32","write_str","write_length_prefix","write_i64","write_i8","write_u64"],"trait":{"name":"Hasher","id":"2:10463:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1997","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:18:2003","0:19:2004"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5619:31852":{"id":"5:5619:31852","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2889:1784":{"id":"2:2889:1784","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:41671:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2859:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13139:23691":{"id":"2:13139:23691","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13138:23690"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13122:23604":{"id":"2:13122:23604","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12352:9136"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13228:31149":{"id":"2:13228:31149","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:9132"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:9128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5605:9461":{"id":"5:5605:9461","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:9128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13237:24914":{"id":"2:13237:24914","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39459:2682","Self::is_ascii":"2:13236:24913"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39459:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13138:23690":{"id":"2:13138:23690","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13139:23691"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5604:31849":{"id":"5:5604:31849","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:295:2706","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:295:2706","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13158:2784":{"id":"2:13158:2784","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41540:190","prim@char":"1:12325:458","self::pattern":"2:12804:9132"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:9128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5622:24968":{"id":"5:5622:24968","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13239:24917"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13119:31131":{"id":"2:13119:31131","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:13117:31130"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13134:31133":{"id":"2:13134:31133","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12331:1699","str::slice_mut_unchecked":"2:13135:31134","crate::ops::Index":"2:39104:3473"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13244:31152":{"id":"2:13244:31152","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4893:31152"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43719:9143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13213:31146":{"id":"2:13213:31146","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:9132"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:9128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:9128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12830:9127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13243:24922":{"id":"2:13243:24922","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:975:37984"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:15":{"id":"0:15","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[99,0],"end":[106,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1997","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:16:2001"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:31974:236-0:10:1997":{"id":"a:2:31974:236-0:10:1997","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31974:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1997","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5621:3619":{"id":"5:5621:3619","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2888:136":{"id":"2:2888:136","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2859:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"5:5603":{"id":"5:5603","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5604:31849","5:5605:9461","5:5608:31850","5:5611:31851","5:5619:31852","5:5620:31853","5:5621:3619","5:5622:24968","5:5623:24969"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13193:2656":{"id":"2:13193:2656","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12804:9132","`DoubleEndedIterator`":"2:8196:129","prim@char":"1:12325:458","str::rmatches":"2:13196:31138"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43624:9149","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:9128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13225:31148":{"id":"2:13225:31148","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:9132"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:9128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:9128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:9129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13234:31151":{"id":"2:13234:31151","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12765:135","`FromStr`":"2:12764:3536"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41671:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12764:3536","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12764:3536","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41632:3425-0:10:1997":{"id":"a:2:41632:3425-0:10:1997","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41632:3425","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1997","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13136:23686":{"id":"2:13136:23686","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:13138:23690","str::split_at_mut":"2:13137:23687"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:19:2004":{"id":"0:19:2004","crate_id":0,"name":"write","span":{"filename":"lib.rs","begin":[115,4],"end":[124,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["bytes",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13238:24916":{"id":"2:13238:24916","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13113":{"id":"2:13113","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13114:981","2:13115:2744","2:13116:31129","2:13117:31130","2:13119:31131","2:13122:23604","2:13123:31132","2:13124:334","2:13125:23663","2:13126:21996","2:13128:22001","2:13130:23661","2:13132:23662","2:13134:31133","2:13135:31134","2:13136:23686","2:13137:23687","2:13138:23690","2:13139:23691","2:13141:28637","2:13142:28961","2:13143:2005","2:13144:28635","2:13145:28636","2:13146:25666","2:13147:31135","2:13148:28638","2:13149:22367","2:13152:23704","2:13155:23705","2:13158:2784","2:13162:2743","2:13166:23692","2:13169:23694","2:13172:23696","2:13175:31136","2:13178:31137","2:13181:23698","2:13184:23700","2:13187:23702","2:13190:23703","2:13193:2656","2:13196:31138","2:13199:31139","2:13202:31140","2:13205:31141","2:13207:31142","2:13209:31143","2:13211:31144","2:13212:31145","2:13213:31146","2:13216:31147","2:13219:22757","2:13222:23706","2:13225:31148","2:13228:31149","2:13231:31150","2:13234:31151","2:13236:24913","2:13237:24914","2:13238:24916","2:13239:24917","2:13240:24918","2:13241:24920","2:13242:24921","2:13243:24922","2:13244:31152","2:13246:3412","2:13247:31153"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5608:31850":{"id":"5:5608:31850","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:9128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13135:31134":{"id":"2:13135:31134","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12331:1699","crate::ops::IndexMut":"2:3374:3474","str::slice_unchecked":"2:13134:31133"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13146:25666":{"id":"2:13146:25666","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43674:3594","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2604:2641":{"id":"2:2604:2641","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:10:1997":{"id":"0:10:1997","crate_id":0,"name":"FnvHasher","span":{"filename":"lib.rs","begin":[89,0],"end":[89,26]},"visibility":"public","docs":"An implementation of the Fowler–Noll–Vo hash function.\n\nSee the [crate documentation](index.html) for more details.","links":{},"attrs":["#[allow(missing_copy_implementations)]"],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:15","a:2:41633:3746-0:10:1997","a:2:31974:236-0:10:1997","a:2:41632:3425-0:10:1997","a:2:32031:2702-0:10:1997","a:2:3133:9451-0:10:1997","a:2:3098:246-0:10:1997","b:2:2885-0:10:1997","b:2:2879-0:10:1997","b:2:2890-0:10:1997","b:2:2605-0:10:1997","b:2:2875-0:10:1997","b:2:2602-0:10:1997","b:2:3714-0:10:1997","0:17","0:13"]}}},"2:13132:23662":{"id":"2:13132:23662","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10895:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10895:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13152:23704":{"id":"2:13152:23704","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:9132"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:9128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:13":{"id":"0:13","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[91,0],"end":[97,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2927:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1997","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:14:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13187:23702":{"id":"2:13187:23702","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:9128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:20:2009":{"id":"0:20:2009","crate_id":0,"name":"FnvBuildHasher","span":{"filename":"lib.rs","begin":[128,0],"end":[128,56]},"visibility":"public","docs":"A builder for default FNV hashers.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"std::hash::BuildHasherDefault","id":"2:10503:1992","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"FnvHasher","id":"0:10:1997","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"2:13205:31141":{"id":"2:13205:31141","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2878:2737":{"id":"2:2878:2737","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2852:143"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13247:31153":{"id":"2:13247:31153","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4891:31153"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43737:9144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3098:246-0:10:1997":{"id":"a:2:3098:246-0:10:1997","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3098:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1997","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13240:24918":{"id":"2:13240:24918","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13184:23700":{"id":"2:13184:23700","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12325:458","str::splitn":"2:13181:23698","self::pattern":"2:12804:9132"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43542:9119","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:9128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:9128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:9129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13211:31144":{"id":"2:13211:31144","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3716:1797":{"id":"2:3716:1797","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39273:9201","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13162:2743":{"id":"2:13162:2743","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41540:190","prim@char":"1:12325:458","self::pattern":"2:12804:9132"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:9128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:9128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:9129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:14:60":{"id":"0:14:60","crate_id":0,"name":"default","span":{"filename":"lib.rs","begin":[94,4],"end":[96,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"FnvHasher","id":"0:10:1997","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13172:23696":{"id":"2:13172:23696","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12804:9132","`DoubleEndedIterator`":"2:8196:129","prim@char":"1:12325:458","str::split":"2:13166:23692"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43438:9117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:9128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:9128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:9129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13128:22001":{"id":"2:13128:22001","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41540:190"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10895:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10895:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2605-0:10:1997":{"id":"b:2:2605-0:10:1997","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31975:2701","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2599:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1997","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2607:22531"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3714-0:10:1997":{"id":"b:2:3714-0:10:1997","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31975:2701","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3712:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1997","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3716:1797"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13126:21996":{"id":"2:13126:21996","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41540:190"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10895:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10895:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13124:334":{"id":"2:13124:334","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13125:23663","`u8`":"1:12342:1827"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13147:31135":{"id":"2:13147:31135","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43684:9146","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13239:24917":{"id":"2:13239:24917","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2426":{"id":"0:0:2426","crate_id":0,"name":"fnv","span":{"filename":"lib.rs","begin":[1,0],"end":[367,1]},"visibility":"public","docs":"An implementation of the [Fowler–Noll–Vo hash function][chongo].\n\n## About\n\nThe FNV hash function is a custom `Hasher` implementation that is more\nefficient for smaller hash keys.\n\n[The Rust FAQ states that][faq] while the default `Hasher` implementation,\nSipHash, is good in many cases, it is notably slower than other algorithms\nwith short keys, such as when you have a map of integers to other values.\nIn cases like these, [FNV is demonstrably faster][graphs].\n\nIts disadvantages are that it performs badly on larger inputs, and\nprovides no protection against collision attacks, where a malicious user\ncan craft specific keys designed to slow a hasher down. Thus, it is\nimportant to profile your program to ensure that you are using small hash\nkeys, and be certain that your program could not be exposed to malicious\ninputs (including being a networked server).\n\nThe Rust compiler itself uses FNV, as it is not worried about\ndenial-of-service attacks, and can assume that its inputs are going to be\nsmall—a perfect use case for FNV.\n\n\n## Using FNV in a `HashMap`\n\nThe `FnvHashMap` type alias is the easiest way to use the standard library’s\n`HashMap` with FNV.\n\n```rust\nuse fnv::FnvHashMap;\n\nlet mut map = FnvHashMap::default();\nmap.insert(1, \"one\");\nmap.insert(2, \"two\");\n\nmap = FnvHashMap::with_capacity_and_hasher(10, Default::default());\nmap.insert(1, \"one\");\nmap.insert(2, \"two\");\n```\n\nNote, the standard library’s `HashMap::new` and `HashMap::with_capacity`\nare only implemented for the `RandomState` hasher, so using `Default` to\nget the hasher is the next best option.\n\n## Using FNV in a `HashSet`\n\nSimilarly, `FnvHashSet` is a type alias for the standard library’s `HashSet`\nwith FNV.\n\n```rust\nuse fnv::FnvHashSet;\n\nlet mut set = FnvHashSet::default();\nset.insert(1);\nset.insert(2);\n\nset = FnvHashSet::with_capacity_and_hasher(10, Default::default());\nset.insert(1);\nset.insert(2);\n```\n\n[chongo]: http://www.isthe.com/chongo/tech/comp/fnv/index.html\n[faq]: https://www.rust-lang.org/en-US/faq.html#why-are-rusts-hashmaps-slow\n[graphs]: https://cglab.ca/~abeinges/blah/hash-rs/","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:10:1997","0:20:2009","0:21:2011","0:24:2015"],"is_stripped":false}}},"2:13142:28961":{"id":"2:13142:28961","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12325:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43396:9138","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13144:28635":{"id":"2:13144:28635","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13145:28636"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43694:9135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5623:24969":{"id":"5:5623:24969","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13240:24918"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13114:981":{"id":"2:13114:981","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12325:458"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13236:24913":{"id":"2:13236:24913","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13149:22367":{"id":"2:13149:22367","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:9132"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:9128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13202:31140":{"id":"2:13202:31140","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12804:9132","`DoubleEndedIterator`":"2:8196:129","prim@char":"1:12325:458","str::match_indices":"2:13199:31139"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43588:9148","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:9128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:9128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:9129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5611:31851":{"id":"5:5611:31851","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:16:2001":{"id":"0:16:2001","crate_id":0,"name":"with_key","span":{"filename":"lib.rs","begin":[103,4],"end":[105,5]},"visibility":"public","docs":"Create an FNV hasher starting with a state corresponding\nto the hash `key`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["key",{"primitive":"u64"}]],"output":{"resolved_path":{"name":"FnvHasher","id":"0:10:1997","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13116:31129":{"id":"2:13116:31129","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13123:31132":{"id":"2:13123:31132","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:2894:1782":{"id":"2:2894:1782","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:41671:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2859:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13125:23663":{"id":"2:13125:23663","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12342:1827"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"11:800:3429":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:4:1239":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"16:6079:2951":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:10707:28986":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"6:1686:11158":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:2859:256":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"17:15151:21551":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"16:5995:17177":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"16:6962:3007":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:40402:9434":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:21550:3569":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:22927:28856":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"17:14372:20811":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:12464:17548":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"5:6600:30998":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:42799:3260":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:14986:21542":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"6:6471:14980":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:11887:3302":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:44435:9042":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:3531:9490":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:11132:9123":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"6:8288:14457":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:12326:1849":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:13748:3450":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"16:2838:16265":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:8249:2704":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"6:6417:14975":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:13015:2904":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:11407:3537":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"2:3571:29481":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:9886:17313":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"6:8300:14459":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"5:2526:30914":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"16:2418:16246":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:11214:17349":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:12659:17554":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"6:5225:14242":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"16:6849:17202":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:22682:3120":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"5:7582:9550":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"0:24:2015":{"crate_id":0,"path":["fnv","FnvHashSet"],"kind":"type_alias"},"17:15616:21588":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"5:1568:209":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"16:7473:2959":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:8828:3761":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"1:8788:3760":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:4487:3093":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:9445:3838":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"6:6435:14976":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:22433:3974":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"17:16212:21773":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"6:5423:14266":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:8492:3098":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"1:6219:23574":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:6311:23594":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:21676:3848":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"16:4913:16914":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:9088:3776":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"11:844:3433":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"5:4269:3579":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:8314:3608":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:11651:23043":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"18:538:2855":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:31974:236":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"16:5307:17147":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"5:5217:3082":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:15931:20267":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"6:6478:14981":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"6:1699:11159":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"16:6802:16188":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:8844:3762":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"1:11637:22993":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"18:651:34292":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"6:5665:14291":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:13538:20285":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:45969:3912":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:43305:9096":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:40249:3103":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:506:3386":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:40737:29055":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"17:9984:17316":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"16:5385:2866":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"18:80:21788":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:4712:3725":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:13437:20278":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:2448:3550":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"5:7632:242":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:15992:21761":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"2:22823:3647":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:261:33509":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"16:2936:16269":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:8460:3564":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:5196:28153":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:4142:3670":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:9755:17285":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:4164:3674":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"6:491:10243":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:1942:3509":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"5:926:3447":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:15646:21591":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:15138:21550":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:14260:20803":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:13024:17333":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:43390:9139":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"1:8172:3560":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"6:1485:11137":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:2483:659":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"6:8265:14454":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:4612:3707":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:11715:17444":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"17:10170:2867":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:10897:22801":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"16:7397:33525":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"5:5453:9089":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"3:0:492":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:42113:97":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"18:718:21800":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"6:5329:14255":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"16:4856:16903":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:11171:9112":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"16:5863:17174":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"9:53:3034":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"6:4891:14041":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:14977:21541":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:9147:3813":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:14489:20819":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:10472:23618":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"16:5700:17166":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:12830:9127":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:41360:3257":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"5:1557:3070":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:11075:23576":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:14575:2904":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:15582:21585":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"6:5653:14290":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"3:234:225":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:12340:888":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"1:10902:26017":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"6:6756:15005":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"18:481:21809":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:11730:17445":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"16:2478:16249":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"5:7119:31008":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:12201:17539":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:11227:17348":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:12292:3303":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:15944:20268":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"1:12348:1888":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"17:12530:17557":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"1:3599:27926":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"6:6775:15008":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"16:7098:33175":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:41566:3061":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"17:14131:20796":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"5:280:30998":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"0:21:2011":{"crate_id":0,"path":["fnv","FnvHashMap"],"kind":"type_alias"},"1:8061:3499":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:44006:9171":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"6:545:10249":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:15608:21587":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"15:306:16195":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:8184:138":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"16:4743:16882":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:3949:3642":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:11497:23565":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"2:45760:3932":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:44146:9620":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:11674:17442":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:12808:17294":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:11799:17495":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:12433:2904":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"2:6026:9438":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:2199:128":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"6:7348:15414":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:3022:225":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"6:6447:14978":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:12557:2884":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"16:7799:3020":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:11877:2900":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:40277:29062":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:15206:21556":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:7891:23580":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:39926:9253":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:46705:9031":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:16235:21775":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"15:327:3024":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:43838:9164":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"16:2998:16270":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"18:706:9130":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:5196:3622":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"2:22971:28748":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"7:31:16012":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:42752:2688":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:8509:2895":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"17:16079:21763":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"16:6412:17186":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"17:12089:17456":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"16:2878:16267":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:6446:219":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"14:31:16170":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:42074:90":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:3335:2703":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:7954:3569":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:46421:3928":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:1850:3579":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"5:7452:3084":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:8304:177":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"6:578:10254":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:12804:9132":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"16:8155:17236":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"6:5382:14262":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"6:5400:14264":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:8211:2685":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"0:20:2009":{"crate_id":0,"path":["fnv","FnvBuildHasher"],"kind":"type_alias"},"5:1726:30998":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:6784:3284":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"2:3229:9481":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"16:5415:33464":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:14298:20806":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"6:7546:15423":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"11:700:2748":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:648:3419":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"14:187:16178":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:39024:9212":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:10692:23583":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:21448:30149":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"5:5064:3579":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:43802:9162":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"16:7144:17210":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:40744:9422":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:41711:3061":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:925:3432":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"6:5320:14254":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:31975:2701":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:44446:9040":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"6:7339:15413":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:15010:21543":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"6:5472:14271":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"17:12768:17291":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"9:357:16057":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"5:4074:3429":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"16:8226:17240":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:8155:3559":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"6:8317:14461":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:44389:3987":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:21678:3117":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"6:8006:15796":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:43420:3596":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:40239:9435":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"6:6689:14997":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"5:7372:2748":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:2694:201":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"11:1066:16158":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:11610:3781":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"11:299:33063":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:10818:17323":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"18:659:21803":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:13387:20274":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:8200:127":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:40321:9440":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"16:150:2942":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"16:6782:17200":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:12289:17507":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:46628:9028":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:1503:11140":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:11365:9120":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:41591:3744":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"18:689:21806":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"16:7549:17218":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:14855:21535":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:13738:20773":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"15:0:2548":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:40124:3521":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"6:6379:14909":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"16:860:33529":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"5:3792:3294":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"16:6872:17203":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"16:2808:16264":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:3024:136":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:10954:17339":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:9283:3108":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:40050:9250":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"6:5052:14228":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:21433:30144":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"17:15324:21566":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:11367:2884":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"5:723:249":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:43245:9109":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"6:5515:14276":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"17:11524:17437":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:9105:3272":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"6:4985:14220":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:6120:3804":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:10254:205":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"16:4940:16918":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:41736:195":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:46119:3861":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"11:2403:3064":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"17:11764:17448":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"17:12189:17538":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:45416:3893":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:14235:20801":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:40114:2895":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"17:12949:17331":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:12824:17328":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"5:1480:3064":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:12485:17550":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"6:5643:14289":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:33430:9478":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"16:7321:3744":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"6:8282:14456":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:16093:21764":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"2:46492:3934":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:41300:3631":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:3345:141":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"6:4959:14216":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:5283:14249":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:15778:21600":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"6:5477:14272":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:41838:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:14723:21531":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"16:6456:17188":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:931:3433":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"16:5742:17168":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:1593:3441":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:13844:20778":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:15342:21568":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:9326:23222":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:40259:9436":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"6:570:10253":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:2234:17412":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:11865:17498":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:12343:1809":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"17:10155:2866":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:43292:9095":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:9118:3777":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:13899:20781":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:14079:20793":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"5:3037:31121":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"16:5756:17169":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"6:5407:1226":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"11:774:3066":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:11924:9103":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"17:11443:17394":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:3324:9056":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"17:11634:17414":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"5:6957:9198":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"6:8259:14453":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"16:8301:17242":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:10258:9071":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:4757:3096":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:14449:20816":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"9:330:16096":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:41574:3064":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"1:8236:3294":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"11:1910:3442":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"11:102:33078":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:15473:21582":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:5713:3773":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"17:11583:17413":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:16165:21769":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"1:11831:3642":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:4761:26034":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"2:12878:9156":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:42271:9073":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:42554:3090":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"17:12508:17551":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:12332:1787":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"18:589:29566":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"11:2569:2698":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:1827:3479":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:9391:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"16:7648:17222":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:7444:27761":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:46273:3867":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:45646:3911":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:10769:34253":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:11419:2872":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:39898:28740":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:15814:21602":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"18:598:34298":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:2026:9513":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"5:6947:9197":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:4335:29449":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:40199:3471":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:536:3391":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"5:3305:3444":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"6:5250:14245":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:8502:3595":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:44166:9618":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"9:0:2543":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:12582:9629":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"6:6746:15004":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"17:14545:20823":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:1926:658":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"11:2469:3430":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"17:11115:17351":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:37811:9486":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:3179:9052":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"16:4718:16880":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:14436:20815":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:10042:9062":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"2:40537:9445":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:11341:17391":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:46613:9027":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:8121:9430":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"5:4239:3579":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:41719:3064":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:33116:3842":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"5:7527:2698":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:11574:3032":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:12819:9130":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:43379:9142":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:11042:17344":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"6:8328:14462":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"17:9671:17288":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"16:6494:17190":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"16:6648:17197":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:12929:17330":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:9305:3297":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"11:1603:16163":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"16:5686:2966":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"16:5802:17172":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"16:6263:33475":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:22666:3085":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"17:12353:17543":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"18:726:2862":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:46392:3907":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:4108:3669":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"18:635:34304":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:43011:9098":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"5:3397:3430":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:0:1691":{"crate_id":1,"path":["std"],"kind":"module"},"2:9715:91":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:12647:17555":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"2:13442:28508":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:12339:882":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:42517:29101":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:10313:23617":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"1:5576:3771":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:40551:9446":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:44170:3116":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"6:6821:15010":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:9396:3801":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"2:43823:9163":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"14:40:20269":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"6:5102:14231":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:917:3069":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"9:178:3049":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:2989:23595":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"6:5181:14237":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:3558:9213":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:21465:30146":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:15521:21583":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:2927:123":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"17:10092:17318":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:39871:3413":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"5:1356:3440":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:12043:17458":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:4501:3696":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:40378:9443":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"11:2369:16164":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"2:38445:9488":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"5:943:3061":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:6140:3104":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:41332:3633":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:8162:3293":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:45521:3870":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:12337:894":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:46509:9019":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:15376:21571":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"7:0:1878":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:12297:3424":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"6:8197:15959":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:41316:3632":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:8607:3698":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"2:4323:29322":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:9190:3811":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:13946:20783":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"11:1903:3441":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"16:5817:2967":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"16:5781:17171":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:8702:3757":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"16:6466:17189":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:4964:9240":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:8613:148":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:40221:3099":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:44410:3985":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"14:0:2547":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:4821:17561":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"6:6768:15007":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"1:4863:3680":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:10213:142":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:43703:9134":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:13046:17296":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:15249:21559":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"16:5769:17170":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:6136:219":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:896:3429":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:10931:3293":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"17:14516:20821":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:3171:9050":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"17:12264:17511":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:4609:9220":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:8660:29995":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"18:754:21807":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:8472:3568":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"1:1057:3438":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"16:6026:2945":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"16:2458:16248":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"6:5046:14227":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"11:1107:16159":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:11688:17411":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"17:13424:20277":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"5:4149:3064":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:1963:1338":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"6:6763:15006":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"6:4864:14205":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:15445:21579":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:10720:34272":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"16:6665:17198":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:12175:17527":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:5238:961":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:44334:163":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"16:2684:16258":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:852:3064":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:15222:21558":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"6:5617:14285":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:12900:2910":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:30407:3125":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:40142:3535":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"9:238:3758":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:6727:3798":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:6853:232":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:1829:3480":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:40268:9437":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:3103:3091":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:39955:3413":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"5:1311:3437":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:22916:28759":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"1:11747:22853":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:23478:235":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:16249:21776":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"9:482:16040":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"5:3250:32210":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:4986:17567":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"6:8012:15797":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:45743:3926":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"16:6620:17196":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"17:16138:21767":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"1:9369:186":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"16:6480:3001":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:5781:3804":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:4456:3092":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:45565:3931":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:33949:9482":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"18:581:3126":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"6:7314:11096":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:11906:16202":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"16:7006:17206":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"16:6532:17192":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:6619:3795":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"6:4897:14209":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"6:8029:15798":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"5:3279:3441":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"11:1676:33083":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:10350:2894":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:14066:20792":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:11770:3641":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"16:6560:3002":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:13473:20280":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"6:4876:14207":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"5:7412:3461":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"1:9688:137":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"5:1342:3438":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"18:608:34314":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:11773:17493":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:12213:17540":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:10564:3776":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"9:447:16041":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:44158:9623":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:45690:3865":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:13173:17598":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:10317:2893":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"6:7575:15425":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:11898:17474":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:4759:26032":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"1:8026:3422":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:6838:9433":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"2:7933:3276":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:43327:9116":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:10915:34266":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:12336:9582":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:9394:9128":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"16:542:2949":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:9346:3299":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:6295:3989":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:43337:9114":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:43588:9148":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"11:1142:16160":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:43570:9147":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"16:4830:16900":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"6:5031:14225":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"16:7910:17231":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:10463:156":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"1:2432:3545":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:40760:9424":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"6:1707:11160":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"16:7686:17224":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"6:6491:14937":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:10455:113":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"2:44138:9619":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:8582:3705":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:10877:17324":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"16:6991:33379":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"16:8093:17233":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:3472:3621":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"6:6519:14982":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:10666:3614":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"0:10:1997":{"crate_id":0,"path":["fnv","FnvHasher"],"kind":"struct"},"17:14868:21536":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:43488:9151":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:32823:9474":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"6:6714:15000":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"2:45919:3900":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:1865:3489":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"16:5075:16961":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:13959:20784":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:13363:20272":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:11198:3777":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"6:7584:15426":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"11:742:3070":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:10239:119":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:3159:9473":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:7586:9259":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:44212:3843":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:13922:20782":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"16:4062:16454":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"16:7428:17213":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"11:2542:29574":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"5:830:3445":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"16:8136:17235":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:10960:3564":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"11:1896:3430":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"17:15760:21598":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"11:2554:33080":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:7338:23070":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:4281:3701":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:13797:20775":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"16:5846:17173":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:3091:9049":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:13568:20287":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:12399:17545":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"6:1593:11150":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:1581:2748":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:4389:9216":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"16:6066:17179":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:42257:9065":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:10018:17290":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:12422:17546":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"5:7480:2748":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:12851:2907":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:15799:21601":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:12388:17536":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:45842:28876":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:43694:9135":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:11915:17499":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:22816:29982":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"16:6749:17199":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:4737:9230":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"1:11012:23377":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:42490:29132":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:10661:17321":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"5:4423:264":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"5:6421:3992":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"1:8630:3732":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"5:4468:3579":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:22545:29567":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:11567:17440":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"5:7094:31043":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:41632:3425":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:9205:3809":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"5:7553:3080":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:560:3393":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:44150:9624":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:11293:17378":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"6:7467:15419":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"16:2303:16215":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:11405:17388":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"16:0:2549":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:8448:3296":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:43226:9107":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:11676:26043":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"16:3329:16274":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"2:44223:9640":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:45483:3858":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:13089:17595":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"6:5624:14286":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"1:11252:23000":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"2:22651:3119":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:16187:21771":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"1:11604:3288":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:12543:9630":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"18:113:21790":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:21954:3853":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"1:12111:23564":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"6:586:10255":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:22754:28862":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:13308:2915":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:5052:3728":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:41500:3635":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:10920:22774":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"17:15635:21590":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"5:826:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:1098:17355":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:4265:3699":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:13855:20779":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:15266:21560":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"11:2140:3438":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:13494:9272":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:39963:9143":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:12443:17537":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:22789:28864":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"6:5598:14284":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"14:214:16179":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:40353:3106":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"16:6433:3000":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"16:7497:17214":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:6343:3281":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:942:3434":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:3847:3640":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:3339:3617":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"6:6915:15039":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:16069:21762":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"2:0:550":{"crate_id":2,"path":["core"],"kind":"module"},"2:44397:3988":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"11:2562:33075":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:45948:3906":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"5:3807:3459":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:21421:30144":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"2:39459:2682":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"16:6231:17182":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:906:3430":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"6:8271:14455":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:15368:21570":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:9272:22752":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:9401:3802":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"2:39121:212":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"5:7597:3519":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:6844:29977":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:643:3418":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"6:538:10248":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"18:623:34295":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"11:430:33085":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"5:3872:3430":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"6:532:10247":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:10044:17317":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"5:1577:3458":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:12238:17513":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:921:3070":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:39104:3473":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"6:6609:14988":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"6:4811:14202":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:5122:14233":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"11:0:2545":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:10997:3772":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"18:765:21802":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:4728:9229":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:43166:29051":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"6:7429:11265":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:32031:2702":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:12323:405":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:6849:28980":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"1:4867:3684":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:23004:28746":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"6:5314:14253":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"5:3027:31128":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"16:6300:17183":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"6:1628:11152":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:21570:3117":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:10675:28978":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"6:1565:11147":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:44134:9616":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"16:7168:17211":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:4346:3703":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"16:5107:16970":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"5:7402:3449":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"6:564:10252":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"5:4438:31010":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:46363:3873":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:15116:21548":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:14051:20791":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"5:7609:3520":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"16:5831:2970":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"16:2394:16245":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:45550:3925":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"18:613:34303":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:46318:3901":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:4370:9047":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:640:3417":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:9139:3061":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:21988:30151":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"16:7379:33482":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:1207:17362":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:21666:3569":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:591:3411":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:45469:3910":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:3149:3841":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:8154:144":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"5:4104:30998":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"5:870:3446":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"6:6650:14992":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:5536:14278":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:40071:106":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:14177:20798":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:2680:23583":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"11:673:3061":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"11:123:3029":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:13693:151":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"6:5134:14234":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:10672:3612":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"1:8522:3594":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"11:787:3068":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"2:41877:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:9807:17298":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"11:1160:3440":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:22109:3849":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:12969:17289":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"16:4531:16808":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"11:2548:33073":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"16:6948:3006":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"6:5020:14224":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:42250:9064":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:10187:22676":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"17:12454:17547":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"6:7389:11282":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:732:189":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"1:912:3431":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:2285:3541":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"16:7132:33420":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:2282:3540":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"1:11217:3116":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"6:5457:14269":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"17:3597:17480":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:10252:9073":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:42529:29128":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:11810:3640":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:2460:3556":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"6:6657:14993":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"5:6554:3429":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:14356:20810":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"6:559:10251":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"16:6335:2962":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"5:1191:32181":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:35825:9483":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:22716:28855":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:11185:3272":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:9427:3572":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:2499:9503":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"2:2846:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"16:5006:16938":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"16:6813:17201":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"16:4424:16770":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"16:7888:17230":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"18:96:21789":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:6649:9448":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:11595:2897":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:16151:21768":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"2:45711:3871":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:15126:21549":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"16:7111:33477":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:33234:9475":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"5:2114:3460":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"17:12056:17459":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"6:8351:15996":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:5677:14293":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:10885:3569":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:32061:9048":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"6:5565:14281":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:15434:21578":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"6:7537:15422":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:46518:9020":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:46031:3866":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:22107:3569":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:2203:17387":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:14386:20812":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"6:8253:14452":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"0:0:2426":{"crate_id":0,"path":["fnv"],"kind":"module"},"2:10498:2687":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:2115:188":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:10457:137":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"2:46098:3927":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:39877:9217":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:4747:3669":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:40208:3098":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:2822:3569":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:2434:3546":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:2702:3597":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"5:1546:3069":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"6:7452:15417":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"5:2309:3075":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:1610:3444":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"5:7380:3448":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:14560:20824":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:43624:9149":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:45437:3898":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"5:7392:3429":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:1605:3443":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:15190:21554":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"6:7602:15427":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:30841:3126":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"5:6681:2748":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"10:0:2544":{"crate_id":10,"path":["adler"],"kind":"module"},"2:46575:9025":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"16:7559:17219":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:13469:204":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"1:870:3066":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:9374:3793":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"1:8750:3758":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:14147:20797":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:22388:9502":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"function"},"2:40009:9248":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"17:15400:21574":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:3140:9453":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"5:2103:3459":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:9265:3390":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:8773:3759":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"5:2289:32176":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"17:12792:17293":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"18:531:21812":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:44029:9153":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:21976:3118":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:22738:28667":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:43917:9167":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"11:856:3434":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:4246:3579":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:11354:17390":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:15039:21545":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"5:6763:30998":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:2666:3605":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:3337:3616":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:7650:29054":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:13526:20284":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:403:17308":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:42571:136":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:21949:3569":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"1:359:3408":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"5:3238:3061":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:43728:3413":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:44419:179":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:40343:9441":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"16:5722:17167":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:11016:17342":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:8838:3061":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:31951:29555":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"17:10399:2895":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"5:6060:9841":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:10503:1992":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:13412:20276":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:10218:2890":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:8220:28150":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:16176:21770":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"17:10622:34281":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:9916:17314":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"6:5344:14257":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"18:735:21801":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"5:40:3475":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"6:6542:14985":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"5:671:30547":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:14968:21540":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"16:7306:33531":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:4823:3729":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:13485:20281":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"16:6442:17187":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:9241:3792":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:12225:17514":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:8528:3639":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"16:867:33487":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"5:1830:3430":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"6:1535:11144":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"11:2124:3437":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:13325:2917":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"6:4992:14221":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:2037:17393":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"9:502:16044":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:13832:20777":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:11102:17352":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"16:3778:16285":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"16:7618:3013":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"16:7052:17208":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:5788:3805":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:40793:9428":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:9161:3810":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:13814:20776":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:12478:17549":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"16:6758:16189":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"6:1680:11157":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:15748:21597":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:39216:215":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:45454:3904":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"5:7472:2748":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:10950:127":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"17:12863:17329":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"16:872:33509":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"11:328:33061":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"11:490:153":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:12494:17515":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:14912:21538":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:4604:9219":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:12695:17558":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"16:2660:16257":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:7841:17310":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:21479:30141":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"1:12350:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"11:434:33086":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:4757:26030":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"1:12308:23379":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:365:3409":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"6:7306:10292":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"13:110:33138":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:11063:17361":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"14:160:16170":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"11:1025:3438":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:10534:34260":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:7701:9420":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:11282:9118":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:11682:23611":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"16:7633:33200":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:8601:3639":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"5:3271:3443":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"6:6678:14996":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:3319:3456":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:15197:21555":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:12347:950":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:12328:17508":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"16:7656:17223":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:14311:20807":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:3250:28393":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:11467:17392":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:12076:17455":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:12543:17556":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"16:4352:16721":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:10969:23443":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"17:10887:34267":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:40785:9426":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:31958:9228":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"2:42592:9063":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:31965:9541":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"5:7436:2748":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:37701:9484":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"5:732:118":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:4600:220":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"6:4824:14203":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:13766:17502":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"6:5219:14241":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:44162:9617":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:10714:3396":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"16:6342:33528":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"16:7590:3011":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:3546:145":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:1588:3430":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"6:4924:14212":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"16:7061:17209":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:15624:21589":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:13375:20273":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:40043:9249":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:5227:28153":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:11189:17354":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:15418:21576":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:11510:17385":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:9938:17315":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:11593:23414":{"crate_id":1,"path":["std","sys","thread_local","fast_local","DtorState"],"kind":"enum"},"2:10895:238":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:12566:9627":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"5:3026:2807":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:41582:2748":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:22868:3569":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"17:14847:21534":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"17:12371:17330":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:2929:123":{"crate_id":2,"path":["core","default","Default"],"kind":"proc_derive"},"16:2768:16262":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:40230:3102":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:43981:9169":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"6:6532:14984":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:5929:3274":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:5385:202":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:39273:9201":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1:4826:3707":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"16:4882:16906":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"5:3029:30917":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:3608:3567":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:33776:9480":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"6:5212:14240":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:11547:17438":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:12127:17463":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:10907:3559":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"17:16032:20270":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"17:13972:20785":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:14325:20808":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:13877:20780":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"5:7645:9174":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:45986:3860":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:10195:3511":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"6:6670:14995":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:15168:21552":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:3819:3429":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"1:3380:3612":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"6:5528:14277":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:31944:17241":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"6:1653:11154":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:11029:3273":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"6:5415:14265":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"2:10609:9593":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"16:7604:3012":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:5645:3772":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"6:485:10242":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:12338:876":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"17:15957:21760":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"2:44356:206":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"1:1584:3429":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:33057:3840":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:39913:9251":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:11392:17389":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"16:3475:16275":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:1812:682":{"crate_id":1,"path":["std","env"],"kind":"module"},"16:7813:17227":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:11270:161":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"17:14402:20813":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:45352:3892":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"6:8306:14460":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"6:7485:15420":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:14038:20790":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:12320:9580":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:11244:9117":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"6:6409:14974":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:39236:2692":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"1:4152:3671":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"16:3029:16272":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"6:6738:15003":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"16:3842:16303":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:11313:17379":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"2:41663:3400":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"6:7330:10121":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:46564:9024":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:39970:9247":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:22335:9502":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"function"},"2:41727:2748":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"16:2788:16263":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:21467:30150":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:12516:17566":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"2:11089:3596":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:45608:3899":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:39108:9489":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:3552:9214":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:15822:21603":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"6:1510:11141":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:13399:20275":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:12278:17541":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:12597:17562":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"17:14212:20800":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:11089:17353":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:13235:20269":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"6:8294:14458":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"16:8073:17232":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"6:5191:14238":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:5370:14260":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"16:6976:3008":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:43217:9108":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"6:5146:14235":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:3098:246":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"1:1599:3442":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"16:2355:2934":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:12671:17590":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"17:3264:17457":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:10989:3499":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"11:1887:2748":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:21552:3847":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:726:153":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:11812:17454":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"16:6588:17194":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:13785:17501":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:4530:3094":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:43266:9097":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"6:6664:14994":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:10878:3731":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"11:2443:3429":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"17:11269:17377":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"1:3502:3579":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"16:3614:16276":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:12107:2872":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:31940:22705":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"1:9386:233":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"6:5390:14263":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:2236:9058":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:8439:3107":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:9178:3808":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:39286:9209":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:7910:23568":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:11086:23570":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:45504:3864":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:9259:115":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:4294:3702":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:11493:17399":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:14012:20788":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:42033:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:1577:3061":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:11914:16202":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:11850:9105":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"16:6574:3003":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:14503:20820":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:40330:9432":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:43712:9133":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:8196:129":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"16:6940:2963":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"16:2528:16251":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:9155:2748":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:14189:20799":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"5:5922:3429":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:5591:113":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:839:3061":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:15678:21593":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"6:4952:14215":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:11242:17375":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:42760:3259":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:15:2004":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:2823:9268":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:9700:23593":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"2:42500:3090":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:22938:28752":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"1:2741:3607":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:14284:20805":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:22374:3984":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:41671:225":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"17:11788:17494":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:2849:162":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:43366:9145":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:43470:9152":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"6:4909:14210":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:2049:9512":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:7081:3844":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"12:0:2546":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"18:643:34292":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:3382:3613":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:13774:17500":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:597:17310":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:13753:20774":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:41633:3746":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:15078:17357":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:7266:23591":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"1:12342:1827":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:31976:243":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:42777:156":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"5:6007:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"6:5445:14268":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"16:5897:2972":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:3533:3566":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:12318:17331":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"17:15058:2925":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"6:5236:14243":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:44142:9621":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:3289:3615":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:10524:17319":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:11142:2872":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"5:1465:3061":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"16:8118:17234":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:15655:21592":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"6:1723:11161":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"6:5336:14256":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"17:11841:17496":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:10251:2891":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:45536:3876":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:41622:3745":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:12324:1157":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"6:553:10250":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:15289:21563":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:11128:17350":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:43674:3594":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:45775:3933":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:39158:211":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:11571:28159":{"crate_id":1,"path":["std","sys","thread_local","fast_local","Key"],"kind":"struct"},"16:2508:16250":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:8228:3606":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:2506:2557":{"crate_id":1,"path":["std","io"],"kind":"module"},"11:687:3064":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:42789:3758":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"1:10607:23587":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"11:351:33066":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"2:11064:3064":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:16105:21765":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"16:4802:16895":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:21497:3569":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"16:4771:16887":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"6:6788:32511":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:41538:193":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"16:2612:16255":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:3844:3641":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:21411:3126":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:15720:21595":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:5540:3769":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"6:6721:15001":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"2:43542:9119":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:44154:9622":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"6:5296:14251":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:13064:17295":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:2040:29099":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"6:7446:15416":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:8040:3423":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:11621:2881":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:43944:9168":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:11605:2898":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:31902:3778":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:15092:21546":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"11:875:3435":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"5:2197:3386":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:40527:3595":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"16:7727:3016":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"16:5960:17176":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:10997:17341":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:15023:21544":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:3782:3637":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:44348:226":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:43642:9150":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:6615:3794":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:43869:9166":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:13553:20286":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:8652:3682":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:12345:1821":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"16:3925:16340":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:7998:3396":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"6:1559:11146":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:46549:9023":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:5895:3790":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"16:4641:16826":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:14587:20825":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:8309:3292":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"16:3810:16294":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:45728:3877":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"16:2748:16261":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"6:4837:14204":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"16:8175:17237":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:3586:9053":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"16:8216:17239":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:3306:124":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"5:3245:3442":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"6:4942:14214":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:5949:3579":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"2:3174:9051":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"2:7480:2756":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:40058:9246":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:11040:3061":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"16:2854:16266":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"16:8313:136":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"6:1692:3692":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"6:5200:14239":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"16:5347:17164":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:4921:3685":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"16:6246:205":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:948:3435":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"6:5174:3691":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"6:5002:14222":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"6:5352:14258":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"5:4309:3061":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:14529:20822":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:12341:869":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"16:6927:17205":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:22836:3646":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:15596:21586":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:3288:9054":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"6:1547:11145":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:6505:14938":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:44338:218":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:44188:130":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:45859:28751":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:2598:3604":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"5:1155:32183":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:32451:9472":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:13187:20267":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:4683:9228":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"17:12584:17323":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"1:6398:3804":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:43684:9146":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:3339:139":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:3133:9451":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"6:6900:15038":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:40309:9447":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:10671:34273":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:5974:3275":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:13999:20787":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"16:6098:17180":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"11:2151:3439":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"16:2728:16260":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"6:1517:11142":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"6:5483:14273":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"17:12683:17559":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"17:16050:20271":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"1:5774:219":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"6:6706:14999":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"1:9220:3812":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"6:5014:14223":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:9094:198":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:22321:3983":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"11:1891:3429":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:22245:3979":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"6:6460:14979":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:3952:2748":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"5:1064:30998":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:46590:9026":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:40766:3621":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:13272:20271":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:33175:9476":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"6:4971:14218":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"5:5457:9090":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:12810:9128":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:22960:28745":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"11:1883:3061":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:43995:9170":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"5:7621:9085":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"2:25878:266":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:11899:28164":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"16:5400:2867":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"6:5266:14247":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"6:5112:14232":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:8158:164":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:3468:210":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:4156:3672":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:11051:17367":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:5029:3726":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"16:6317:17184":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"18:548:152":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:11209:9124":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"16:7711:209":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"16:6504:17191":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:689:1993":{"crate_id":1,"path":["std","collections"],"kind":"module"},"6:6629:14990":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"6:5636:14288":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"17:16121:21766":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"1:10669:3616":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"1:417:184":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"16:7528:17216":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:8304:28149":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:41478:3634":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:39176:214":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:12349:1397":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"6:6636:14991":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:30190:3644":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:513:17309":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"16:7741:3018":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"6:6597:14987":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:3712:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"1:12336:740":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:22905:28737":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"17:10419:2896":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:41444:28758":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"15:394:16205":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"11:1582:16162":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:45874:3894":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:42992:9609":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:40775:9425":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:30814:195":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:22982:28749":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"2:2599:103":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"6:5466:14270":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1:9131:3273":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:8539:3630":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:22730:29131":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"18:515:21811":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:12300:17542":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:14463:20817":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:10439:2868":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"11:2304:3437":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"17:9858:17312":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:44016:9172":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"5:1496:2748":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"8:0:2542":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:11497:17386":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"6:1671:11156":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:5083:14230":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:729:3648":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"5:7655:9175":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:21499:3851":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:3429:3601":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"6:6621:14989":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:14994:21530":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:11209:23441":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:22993:28874":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"1:10978:23437":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:12325:458":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:13344:2924":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:11345:3538":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"2:7873:3107":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:22847:3661":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:41654:9565":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:3551:3565":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:11825:17475":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:4050:3664":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:13674:20771":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:2041:197":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"6:7461:15418":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:13636:3989":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:22774:28764":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:2688:194":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"17:12030:17460":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"16:5927:17175":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:37866:9487":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:11853:17497":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"5:6924:9196":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"6:473:10240":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:11324:17405":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:3473:17462":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:9897:29996":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:7689:23406":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"16:6895:17204":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"16:6385:17185":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:11647:17441":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"16:4468:16791":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:0:2550":{"crate_id":17,"path":["object"],"kind":"module"},"2:40179:9095":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"5:7538:2699":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:44458:29565":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"2:4673:9227":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"11:396:33069":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:14414:20814":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:8167:2705":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:12342:17510":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:15410:21575":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:9293:28169":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:45369:3897":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:45401:3863":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"11:1728:155":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:43235:9111":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:46471:3913":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:12344:1815":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"17:14876:21537":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"5:1527:3068":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:41760:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:10294:3489":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"5:5409:30998":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"16:3196:16273":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"16:8259:17241":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"6:1526:11143":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"5:7363:3058":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"5:3033:31124":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:12993:17332":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:12887:2908":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:10244:128":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"16:4587:16818":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"6:5630:14287":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"2:8622:9429":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:4944:3679":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:39196:213":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"6:5489:14274":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"6:5361:14259":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"6:6562:14986":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:4080:3666":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:10256:9070":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"6:4916:14211":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:5137:423":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"6:5376:14261":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:41466:3643":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"6:5588:14283":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:13252:20270":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"11:1087:33090":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"16:2902:16268":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"6:6698:14998":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"6:5260:14246":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"6:6441:14977":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:9781:17311":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:2044:196":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"6:5244:14244":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:43852:9165":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:8150:3562":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:40362:9442":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:12620:9123":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:22598:29542":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:41799:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:437:16217":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:46538:9022":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:12329:333":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"17:12150:17461":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:11743:17446":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"17:15333:21567":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"7:78:16019":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:37756:9485":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"16:2338:16243":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:7955:3410":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:10246:9065":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:15456:21580":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"16:6427:2998":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"5:2236:3072":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:6524:14983":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"11:1051:3439":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:8341:15995":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:43318:9113":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:43438:9117":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"5:3635:181":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:8685:3740":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:11665:22987":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"5:5852:250":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:1933:9408":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:22419:3569":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"6:1490:11138":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:40152:3534":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"6:517:10245":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:1449:155":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:8515:3596":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"14:165:16171":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"17:15214:21557":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:14025:20789":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"18:573:34292":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"6:5436:14267":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:16198:21772":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"5:0:307":{"crate_id":5,"path":["alloc"],"kind":"module"},"11:2231:3032":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"17:14111:20795":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"5:7422:32171":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:6730:3799":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:15426:21577":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"6:5277:14248":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"6:5064:14229":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"16:5037:16946":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:10248:9064":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"6:5039:14226":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"5:6164:3579":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"5:6402:3991":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:7851:25643":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:13509:20283":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"16:7509:17215":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:1888:3495":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:12764:3536":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:10941:138":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"5:295:2706":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"6:1580:11148":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:13723:20772":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"5:4502:31010":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:6798:3803":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"16:3014:16271":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:11661:17415":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"14:202:9173":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:3342:140":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"6:8247:14451":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"6:1496:11139":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:43524:9121":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:2289:3542":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"16:4976:16931":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:11153:17323":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:45384:3857":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:21558:3850":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"6:4979:14219":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"11:710:3069":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:23026:28750":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"5:1536:3431":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:4865:3683":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:8046:3498":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:39887:9252":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:15301:21564":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:4784:3097":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:43737:9144":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:12330:1665":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:46666:9030":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"18:563:2857":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"6:1585:11149":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:22466:3973":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"11:2326:3438":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"5:1428:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"6:7366:3732":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"6:5160:14236":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"5:218:9061":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:10250:9072":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"6:4885:14208":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"5:7714:3430":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"17:256:33487":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"14:7:16170":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:13116:17596":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:12506:9628":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:2497:9502":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"17:13986:20786":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"16:2548:16252":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"5:3741:30998":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:10905:17325":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:12328:1295":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:40087:9550":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:2175:17426":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"11:1917:3443":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:11235:3572":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"1:8575:3634":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:14341:20809":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"16:3899:16337":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"16:5914:2977":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"5:7048:263":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"11:364:33071":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:45337:3856":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:12362:17544":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:22705:3645":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"6:5671:14292":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:11755:17447":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"13:0:2540":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:42152:3258":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:43406:2895":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:39936:9254":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"16:2323:16242":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"17:14271:20804":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"5:3284:32205":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:11557:17439":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"17:15390:21573":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:2450:3551":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:8145:3561":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"17:9737:17287":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"17:13146:17597":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:22307:3569":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"5:5717:9196":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:15769:21599":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:21450:30138":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:13618:115":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"1:3590:3511":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"17:15356:21569":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"6:5581:14282":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:1890:3496":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:42807:3261":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:3618:3589":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:13038:119":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:13497:20282":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"16:2708:16259":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"6:465:10239":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:13292:2911":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:12711:136":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:4427:3704":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:43396:9138":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:5158:29093":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"16:4502:16802":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"17:14475:20818":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:32063:114":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"16:7570:17220":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"18:0:2551":{"crate_id":18,"path":["memchr"],"kind":"module"},"6:6874:15037":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:12621:17560":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"6:5502:14275":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"18:670:21804":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:3247:28395":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"16:6543:17193":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"11:1923:3444":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"16:7085:33430":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:5560:3770":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"16:6047:17178":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"11:1566:16161":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:4102:3668":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"19:0:1274":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"11:1007:3437":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:7978:3399":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:2657:133":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"15:288:16194":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"11:2352:3439":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"17:15383:21572":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"5:1327:3439":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:954:3436":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"16:6160:16214":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"5:7730:9193":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"16:7695:17225":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:46450:3879":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"6:4800:14201":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:12346:1803":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"17:11256:17376":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"2:13656:3986":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"16:2374:16244":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:11026:17343":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"6:1663:11155":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:30439:9192":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:9902:3111":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:1066:3439":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"11:2536:33077":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:4634:3708":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:10185:2888":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:32637:9471":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"16:2592:16254":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:3244:26232":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:45661:3859":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:42264:9072":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"6:4870:14206":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:13211:20268":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"6:4965:14217":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:11300:23416":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:30471:28853":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"1:12331:1699":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:22949:28674":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"17:14752:21532":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:10982:17340":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:15836:21604":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"6:7359:15415":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:13455:20279":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:11702:17443":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:2652:200":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"6:497:10244":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:22201:3978":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"6:7561:15424":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:33603:9479":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:2618:112":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"16:6606:17195":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:6655:3283":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"6:5306:14252":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:5453:128":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:40291:3105":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:1971:3510":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"16:5367:17165":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:13606:20290":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:12724:17327":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"9:424:16043":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"16:8202:3022":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:8534:3638":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:10759:2872":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:9382:3579":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"1:11092:23589":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:8587:3706":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:3144:3839":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:39136:209":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:43719:9143":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:12276:23354":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"5:2089:3294":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:9695:3562":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"6:5557:14280":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:23015:28865":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"2:43255:9110":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"14:220:16180":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:8626:3730":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:10315:28170":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"18:698:2860":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:40751:3794":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"16:4614:16822":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"10:44:3033":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:42768:2689":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:40300:9439":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:46643:9029":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:9254:3277":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:41518:3636":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:883:3068":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:12408:2903":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:39266:9491":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"16:7355:17212":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"6:6880:14115":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"10:36:33060":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:2596:102":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:14246:20802":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"11:2423:2748":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"2:2852:143":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:39060:9055":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"6:1621:11151":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:10284:2892":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:1075:3440":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"13:229:3028":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:3623:9057":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:45821:28858":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"16:8188:17238":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"5:3661:3064":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:9527:3495":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"2:8117:9431":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"5:2757:30919":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"6:6729:15002":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"1:862:2748":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:42545:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:3093:117":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"6:5290:14250":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:10068:17297":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"18:507:34292":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:12251:17512":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:2280:137":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:12352:9136":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"16:7823:17228":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:15313:21565":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:9313:17211":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:11537:17406":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:15102:21547":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:12572:2872":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"2:46060:3872":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:33293:9477":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:16259:20274":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"11:2383:3061":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"6:0:986":{"crate_id":6,"path":["libc"],"kind":"module"},"2:46529:9021":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:7973:3397":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:22333:29503":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"18:521:21808":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"6:6811:15009":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:9409:161":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"18:680:21805":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:30460:3090":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:4094:3667":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"18:491:34306":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:45579:3846":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:15734:21596":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:41994:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:15569:21584":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"6:1639:11153":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"6:7412:11267":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:40392:9444":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:5716:3775":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"16:6398:2996":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:12335:724":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"5:6039:3082":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:9710:84":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"6:523:10246":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"6:5546:14279":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"16:6278:2978":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:11351:9122":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"5:4925:216":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:40076:3516":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:4347:109":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"16:7539:17217":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:1978:770":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"11:837:3432":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"16:3669:16277":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:6509:185":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:43007:29012":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:11166:17356":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"5:1518:3066":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:10381:3780":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"2:32032:3255":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:41955:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:14091:20794":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"11:811:3430":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"16:6353:2993":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"16:7014:17207":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:39947:9144":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:11883:9106":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"9:392:16042":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:43347:9115":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"5:1171:31120":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:4273:3700":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"11:883:3436":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:3374:3474":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"16:7580:17221":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:13581:20288":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:4044:3665":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"16:6634:3004":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:22:802":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"6:4932:14213":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:11075:2884":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"6:479:10241":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"5:3209:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:8206:2686":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"16:2438:16247":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:10573:34261":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:484:23578":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:5853:3579":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"2:44331:149":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"16:4560:16814":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:5273:203":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:40102:3517":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:5038:3727":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"2:3541:253":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:10710:17322":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:8593:3695":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:7585:9258":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"17:12707:17326":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"16:7857:17229":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:14933:21539":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:1043:3437":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:10828:34282":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:13594:20289":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:15176:21553":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:2938:136":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:11323:9121":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:2855:257":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:41278:169":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:10612:17320":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:40172:3563":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"11:832:3431":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:2843:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"17:16223:21774":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"2:22461:3975":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"2:45322:3891":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"5:2207:32173":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:12825:9129":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:41916:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:41557:172":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:11337:9119":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:30445:9399":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:9300:3280":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:46081:3878":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:3287:3614":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"5:3648:3061":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:7295:25642":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:15463:21581":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"6:7516:15421":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"16:2572:16253":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:5108:3736":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"16:6120:17181":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"5:7569:3518":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"6:4787:14200":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:2979:3514":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"16:2636:16256":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:15281:21562":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:45629:3905":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:8855:3763":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:44047:9154":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:10137:17286":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:624:3415":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:8616:3454":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:15273:21561":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"5:7444:209":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:45792:28676":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"16:7769:17226":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"4:0:2541":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:10455:152":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"17:14599:20826":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:5526:3768":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:46196:3895":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:15701:21594":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:14788:21533":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:5902:3791":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"16:7755:3019":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:22283:3980":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"6:7984:10199":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:4243:27757":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:16269:20276":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}