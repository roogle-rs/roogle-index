{"root":"0:0:2809","crate_version":"1.0.7","includes_private":false,"index":{"2:13710:26139":{"id":"2:13710:26139","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42535:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:9525","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13759:24274":{"id":"2:13759:24274","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:10:2381":{"id":"0:10:2381","crate_id":0,"name":"FnvHasher","span":{"filename":"lib.rs","begin":[89,0],"end":[89,26]},"visibility":"public","docs":"An implementation of the Fowler–Noll–Vo hash function.\n\nSee the [crate documentation](index.html) for more details.","links":{},"attrs":["#[allow(missing_copy_implementations)]"],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:15","a:2:32827:3089-0:10:2381","a:2:32768:248-0:10:2381","a:2:3335:9852-0:10:2381","a:2:42628:3818-0:10:2381","a:2:42629:4145-0:10:2381","a:2:3300:260-0:10:2381","b:2:2775-0:10:2381","b:2:2772-0:10:2381","b:2:3092-0:10:2381","b:2:3943-0:10:2381","b:2:3087-0:10:2381","b:2:3081-0:10:2381","b:2:3077-0:10:2381","0:17","0:13"]}}},"2:13689:26129":{"id":"2:13689:26129","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:13326:9529","`DoubleEndedIterator`":"2:8476:133","prim@char":"1:12451:490","str::split_whitespace":"2:13667:29070","str::rsplit":"2:13695:26133"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44405:3992","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:9525","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13662:26128":{"id":"2:13662:26128","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13661:26127"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42535:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3943-0:10:2381":{"id":"b:2:3943-0:10:2381","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3941:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:2381","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3945:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13739:31831":{"id":"2:13739:31831","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12451:490","self::pattern":"2:13326:9529"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:9525","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13704:26135":{"id":"2:13704:26135","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12451:490","self::pattern":"2:13326:9529","str::rsplitn":"2:13707:26137"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44509:9518","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:9525","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42628:3818-0:10:2381":{"id":"a:2:42628:3818-0:10:2381","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42628:3818","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:2381","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13668:29315":{"id":"2:13668:29315","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13667:29070"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44688:9531","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13766:26051":{"id":"2:13766:26051","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1126:37814"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13692:26131":{"id":"2:13692:26131","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12451:490","self::pattern":"2:13326:9529"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:13141:9520","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:9525","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13751:31833":{"id":"2:13751:31833","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12451:490","self::pattern":"2:13326:9529"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:9525","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13660:26124":{"id":"2:13660:26124","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:13659:26123","str::split_at_mut_checked":"2:13662:26128"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13675:26141":{"id":"2:13675:26141","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12451:490","self::pattern":"2:13326:9529"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:9525","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13647:350":{"id":"2:13647:350","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13648:26101","`u8`":"1:12470:1895"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13665:29277":{"id":"2:13665:29277","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12451:490"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44381:9535","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13636":{"id":"2:13636","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13637:1024","2:13638:3133","2:13639:31813","2:13640:31814","2:13642:31815","2:13645:25996","2:13646:31816","2:13647:350","2:13648:26101","2:13649:22429","2:13651:22434","2:13653:26099","2:13655:26100","2:13657:31817","2:13658:31818","2:13659:26123","2:13660:26124","2:13661:26127","2:13662:26128","2:13664:29293","2:13665:29277","2:13666:2389","2:13667:29070","2:13668:29315","2:13669:28405","2:13670:31819","2:13671:29294","2:13672:22800","2:13675:26141","2:13678:26142","2:13681:3173","2:13685:3132","2:13689:26129","2:13692:26131","2:13695:26133","2:13698:31820","2:13701:31821","2:13704:26135","2:13707:26137","2:13710:26139","2:13713:26140","2:13716:3044","2:13719:31822","2:13722:31823","2:13725:31824","2:13728:31825","2:13730:31826","2:13732:31827","2:13734:31828","2:13735:31829","2:13736:31830","2:13739:31831","2:13742:23290","2:13745:26143","2:13748:31832","2:13751:31833","2:13754:31834","2:13757:31835","2:13759:24274","2:13760:26046","2:13761:24278","2:13762:24279","2:13763:24280","2:13764:26049","2:13765:26050","2:13766:26051","2:13767:31836","2:13769:3806","2:13770:31837"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13637:1024":{"id":"2:13637:1024","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12451:490"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3092-0:10:2381":{"id":"b:2:3092-0:10:2381","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:2381","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3095:149","2:3096:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13655:26100":{"id":"2:13655:26100","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11459:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11459:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13666:2389":{"id":"2:13666:2389","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44391:3317","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13730:31826":{"id":"2:13730:31826","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13770:31837":{"id":"2:13770:31837","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:5147:31837"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44722:9541","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13646:31816":{"id":"2:13646:31816","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13742:23290":{"id":"2:13742:23290","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12451:490","self::pattern":"2:13326:9529"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42535:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:9525","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3090:149":{"id":"2:3090:149","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"b:2:3087-0:10:2381":{"id":"b:2:3087-0:10:2381","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3057:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:2381","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3090:149","2:3091:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13658:31818":{"id":"2:13658:31818","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12457:1765","crate::ops::IndexMut":"2:3605:3869","str::slice_unchecked":"2:13657:31817"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13678:26142":{"id":"2:13678:26142","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12451:490","self::pattern":"2:13326:9529"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:9525","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13332:9525","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13347:9526","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13669:28405":{"id":"2:13669:28405","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44659:3990","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13736:31830":{"id":"2:13736:31830","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12451:490","self::pattern":"2:13326:9529"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:9525","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13332:9525","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:13352:9524","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3945:1865":{"id":"2:3945:1865","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:40252:9597","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:20:2393":{"id":"0:20:2393","crate_id":0,"name":"FnvBuildHasher","span":{"filename":"lib.rs","begin":[128,0],"end":[128,56]},"visibility":"public","docs":"A builder for default FNV hashers.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"std::hash::BuildHasherDefault","id":"2:10821:2376","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"FnvHasher","id":"0:10:2381","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"5:5723:32532":{"id":"5:5723:32532","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:297:3095","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:297:3095","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13695:26133":{"id":"2:13695:26133","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:13326:9529","`DoubleEndedIterator`":"2:8476:133","prim@char":"1:12451:490","str::split":"2:13689:26129"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44423:9514","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:9525","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13332:9525","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13347:9526","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13761:24278":{"id":"2:13761:24278","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13651:22434":{"id":"2:13651:22434","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42537:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42535:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11459:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11459:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2777:22962":{"id":"2:2777:22962","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13670:31819":{"id":"2:13670:31819","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44669:9543","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2809":{"id":"0:0:2809","crate_id":0,"name":"fnv","span":{"filename":"lib.rs","begin":[1,0],"end":[367,1]},"visibility":"public","docs":"An implementation of the [Fowler–Noll–Vo hash function][chongo].\n\n## About\n\nThe FNV hash function is a custom `Hasher` implementation that is more\nefficient for smaller hash keys.\n\n[The Rust FAQ states that][faq] while the default `Hasher` implementation,\nSipHash, is good in many cases, it is notably slower than other algorithms\nwith short keys, such as when you have a map of integers to other values.\nIn cases like these, [FNV is demonstrably faster][graphs].\n\nIts disadvantages are that it performs badly on larger inputs, and\nprovides no protection against collision attacks, where a malicious user\ncan craft specific keys designed to slow a hasher down. Thus, it is\nimportant to profile your program to ensure that you are using small hash\nkeys, and be certain that your program could not be exposed to malicious\ninputs (including being a networked server).\n\nThe Rust compiler itself uses FNV, as it is not worried about\ndenial-of-service attacks, and can assume that its inputs are going to be\nsmall—a perfect use case for FNV.\n\n\n## Using FNV in a `HashMap`\n\nThe `FnvHashMap` type alias is the easiest way to use the standard library’s\n`HashMap` with FNV.\n\n```rust\nuse fnv::FnvHashMap;\n\nlet mut map = FnvHashMap::default();\nmap.insert(1, \"one\");\nmap.insert(2, \"two\");\n\nmap = FnvHashMap::with_capacity_and_hasher(10, Default::default());\nmap.insert(1, \"one\");\nmap.insert(2, \"two\");\n```\n\nNote, the standard library’s `HashMap::new` and `HashMap::with_capacity`\nare only implemented for the `RandomState` hasher, so using `Default` to\nget the hasher is the next best option.\n\n## Using FNV in a `HashSet`\n\nSimilarly, `FnvHashSet` is a type alias for the standard library’s `HashSet`\nwith FNV.\n\n```rust\nuse fnv::FnvHashSet;\n\nlet mut set = FnvHashSet::default();\nset.insert(1);\nset.insert(2);\n\nset = FnvHashSet::with_capacity_and_hasher(10, Default::default());\nset.insert(1);\nset.insert(2);\n```\n\n[chongo]: http://www.isthe.com/chongo/tech/comp/fnv/index.html\n[faq]: https://www.rust-lang.org/en-US/faq.html#why-are-rusts-hashmaps-slow\n[graphs]: https://cglab.ca/~abeinges/blah/hash-rs/","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:10:2381","0:20:2393","0:21:2395","0:24:2399"],"is_stripped":false}}},"2:13748:31832":{"id":"2:13748:31832","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12451:490","self::pattern":"2:13326:9529"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:9525","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13332:9525","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13347:9526","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13725:31824":{"id":"2:13725:31824","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:13326:9529","`DoubleEndedIterator`":"2:8476:133","prim@char":"1:12451:490","str::match_indices":"2:13722:31823"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44573:9545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:9525","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13332:9525","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13347:9526","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:17":{"id":"0:17","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[108,0],"end":[125,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["write_isize","write_i32","write_usize","write_u32","write_str","write_length_prefix","write_i64","write_i8","write_u64","write_u8","write_i128","write_i16","write_u128","write_u16"],"trait":{"name":"Hasher","id":"2:10781:168","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:2381","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:18:2387","0:19:2388"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13757:31835":{"id":"2:13757:31835","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:13287:148","`FromStr`":"2:13286:3931"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42667:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:13286:3931","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:13286:3931","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:18:2387":{"id":"0:18:2387","crate_id":0,"name":"finish","span":{"filename":"lib.rs","begin":[110,4],"end":[112,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5741:24276":{"id":"5:5741:24276","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13762:24279"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7802:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3083:857":{"id":"2:3083:857","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13657:31817":{"id":"2:13657:31817","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12457:1765","str::slice_mut_unchecked":"2:13658:31818","crate::ops::Index":"2:40083:3868"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:16:2385":{"id":"0:16:2385","crate_id":0,"name":"with_key","span":{"filename":"lib.rs","begin":[103,4],"end":[105,5]},"visibility":"public","docs":"Create an FNV hasher starting with a state corresponding\nto the hash `key`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["key",{"primitive":"u64"}]],"output":{"resolved_path":{"name":"FnvHasher","id":"0:10:2381","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13719:31822":{"id":"2:13719:31822","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:13326:9529","`DoubleEndedIterator`":"2:8476:133","prim@char":"1:12451:490","str::matches":"2:13716:3044"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44627:9547","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:9525","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13332:9525","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13347:9526","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13653:26099":{"id":"2:13653:26099","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11459:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11459:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:19:2388":{"id":"0:19:2388","crate_id":0,"name":"write","span":{"filename":"lib.rs","begin":[115,4],"end":[124,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["bytes",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42629:4145-0:10:2381":{"id":"a:2:42629:4145-0:10:2381","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42629:4145","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:2381","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13681:3173":{"id":"2:13681:3173","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42537:202","prim@char":"1:12451:490","self::pattern":"2:13326:9529"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:9525","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13701:31821":{"id":"2:13701:31821","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:13326:9529","str::split":"2:13689:26129","prim@char":"1:12451:490","str::split_terminator":"2:13698:31820"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44473:9548","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:9525","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13332:9525","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13347:9526","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:15":{"id":"0:15","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[99,0],"end":[106,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:2381","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:16:2385"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13642:31815":{"id":"2:13642:31815","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:13640:31814"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13760:26046":{"id":"2:13760:26046","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40436:3070","Self::is_ascii":"2:13759:24274"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42535:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40436:3070","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13648:26101":{"id":"2:13648:26101","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12470:1895"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13745:26143":{"id":"2:13745:26143","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12451:490","self::pattern":"2:13326:9529"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42535:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:9525","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13332:9525","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13347:9526","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5740:4016":{"id":"5:5740:4016","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7802:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7802:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13754:31834":{"id":"2:13754:31834","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12451:490","self::pattern":"2:13326:9529"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:9525","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13332:9525","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13347:9526","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13649:22429":{"id":"2:13649:22429","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42537:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42535:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11459:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11459:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5742:24277":{"id":"5:5742:24277","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13763:24280"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7802:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:21:2395":{"id":"0:21:2395","crate_id":0,"name":"FnvHashMap","span":{"filename":"lib.rs","begin":[132,0],"end":[132,58]},"visibility":"public","docs":"A `HashMap` using a default FNV hasher.","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"std::collections::HashMap","id":"1:768:165","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"resolved_path":{"name":"FnvBuildHasher","id":"0:20:2393","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"5:5722":{"id":"5:5722","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5723:32532","5:5724:9861","5:5727:32533","5:5730:32534","5:5738:32535","5:5739:32536","5:5740:4016","5:5741:24276","5:5742:24277"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13764:26049":{"id":"2:13764:26049","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1126:37814"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13735:31829":{"id":"2:13735:31829","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13763:24280":{"id":"2:13763:24280","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13661:26127":{"id":"2:13661:26127","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13662:26128"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42535:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3081-0:10:2381":{"id":"b:2:3081-0:10:2381","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:2381","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3083:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:3096:1850":{"id":"2:3096:1850","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:42667:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13640:31814":{"id":"2:13640:31814","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13672:22800":{"id":"2:13672:22800","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12451:490","self::pattern":"2:13326:9529"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:9525","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13734:31828":{"id":"2:13734:31828","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:13":{"id":"0:13","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[91,0],"end":[97,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:3129:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:2381","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:14:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:3300:260-0:10:2381":{"id":"a:2:3300:260-0:10:2381","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:2381","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13765:26050":{"id":"2:13765:26050","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1126:37814"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2775-0:10:2381":{"id":"b:2:2775-0:10:2381","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2769:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:2381","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2777:22962"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13698:31820":{"id":"2:13698:31820","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:13326:9529","str::split":"2:13689:26129","prim@char":"1:12451:490","`DoubleEndedIterator`":"2:8476:133","str::rsplit_terminator":"2:13701:31821"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44455:9549","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:9525","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13707:26137":{"id":"2:13707:26137","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12451:490","str::splitn":"2:13704:26135","self::pattern":"2:13326:9529"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44527:9516","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:9525","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13332:9525","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13347:9526","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13728:31825":{"id":"2:13728:31825","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5724:9861":{"id":"5:5724:9861","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7802:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7802:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:9525","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5738:32535":{"id":"5:5738:32535","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7802:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7802:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3095:149":{"id":"2:3095:149","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32692:4177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:13767:31836":{"id":"2:13767:31836","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:5149:31836"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44704:9540","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13645:25996":{"id":"2:13645:25996","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12873:9533"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13769:3806":{"id":"2:13769:3806","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:5150:3806"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44713:3807","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3091:1852":{"id":"2:3091:1852","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42667:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5727:32533":{"id":"5:5727:32533","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7802:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7802:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:9525","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:14:60":{"id":"0:14:60","crate_id":0,"name":"default","span":{"filename":"lib.rs","begin":[94,4],"end":[96,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"FnvHasher","id":"0:10:2381","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32827:3089-0:10:2381":{"id":"a:2:32827:3089-0:10:2381","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32827:3089","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:2381","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:3335:9852-0:10:2381":{"id":"a:2:3335:9852-0:10:2381","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3335:9852","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:2381","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:3080:3126":{"id":"2:3080:3126","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:3054:156"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13685:3132":{"id":"2:13685:3132","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42537:202","prim@char":"1:12451:490","self::pattern":"2:13326:9529"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42535:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:9525","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13332:9525","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13347:9526","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2774:3030":{"id":"2:2774:3030","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13659:26123":{"id":"2:13659:26123","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:13661:26127","str::split_at_mut":"2:13660:26124"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13671:29294":{"id":"2:13671:29294","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44697:9530","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13638:3133":{"id":"2:13638:3133","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13716:3044":{"id":"2:13716:3044","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:13326:9529","`DoubleEndedIterator`":"2:8476:133","prim@char":"1:12451:490","str::rmatches":"2:13719:31822"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44609:9546","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:9525","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13667:29070":{"id":"2:13667:29070","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13668:29315"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44679:9532","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13762:24279":{"id":"2:13762:24279","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13732:31827":{"id":"2:13732:31827","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3077-0:10:2381":{"id":"b:2:3077-0:10:2381","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:2381","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3080:3126"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13639:31813":{"id":"2:13639:31813","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13722:31823":{"id":"2:13722:31823","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:13326:9529","`DoubleEndedIterator`":"2:8476:133","prim@char":"1:12451:490","str::rmatch_indices":"2:13725:31824"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44555:9544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:9525","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32768:248-0:10:2381":{"id":"a:2:32768:248-0:10:2381","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32768:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:2381","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2772-0:10:2381":{"id":"b:2:2772-0:10:2381","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32769:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:2381","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2774:3030"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:24:2399":{"id":"0:24:2399","crate_id":0,"name":"FnvHashSet","span":{"filename":"lib.rs","begin":[136,0],"end":[136,52]},"visibility":"public","docs":"A `HashSet` using a default FNV hasher.","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"std::collections::HashSet","id":"1:1491:167","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"FnvBuildHasher","id":"0:20:2393","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"2:13664:29293":{"id":"2:13664:29293","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12451:490"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44375:9536","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5730:32534":{"id":"5:5730:32534","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7802:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7802:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5739:32536":{"id":"5:5739:32536","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:297:3095","`String`":"5:7802:256"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:297:3095","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7802:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13713:26140":{"id":"2:13713:26140","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42535:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13332:9525","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13332:9525","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13347:9526","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"1:1907:3884":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:42535:205":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"16:7969:17628":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:12225:17871":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"1:1085:3832":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"16:2486:16647":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:47688:9424":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"6:5387:14668":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:47063:4271":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:13326:9529":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"17:12851:17970":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:14019:20709":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:42297:4028":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"6:6419:15378":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:2112:9808":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"6:7586:15829":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:44381:9535":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:6710:4194":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:46632:4304":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"5:3343:32717":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:47034:4265":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:12122:17838":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"6:1711:11566":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"6:6672:15398":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:14902:21241":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:4579:29684":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:46664:4258":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:6895:4202":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"17:15010:21248":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:12082:3305":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"6:4875:14612":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:11886:24485":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:15679:21980":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:12992:17942":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:10442:17723":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:8438:176":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"6:1597:11556":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"5:7825:9572":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:8672:4130":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"0:20:2393":{"crate_id":0,"path":["fnv","FnvBuildHasher"],"kind":"type_alias"},"6:485:10645":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"5:6713:3824":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"6:5520:14682":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"2:32734:23233":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"1:12452:1917":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:8390:9832":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:15410:21966":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"17:14140:20718":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:11065:17730":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:11630:3489":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:14114:20716":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"16:4152:16699":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:16036:22014":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"11:1064:16560":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:23008:9903":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"1:1869:3874":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:4997:4082":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:3446:4009":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:14460:21213":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:12475:993":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"1:8223:3955":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"14:165:16573":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:23455:4043":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:40039:9453":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"17:13055:3298":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"17:14612:21223":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:12458:1855":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"17:11457:17763":{"crate_id":17,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"1:11280:3539":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"6:4984:14625":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:9198:4212":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:13332:9525":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:5807:4174":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"17:14917:21242":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"6:532:10650":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:41040:9645":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"6:5230:14648":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:15496:21971":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"6:6534:15387":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:22598:3541":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"11:0:2932":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"16:5113:17292":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:45119:10018":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"17:12860:17971":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:44669:9543":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:45438:9440":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"5:3866:3854":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:14963:21245":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:7335:24345":{"crate_id":1,"path":["std","sys","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"5:1539:3489":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:16159:22018":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:10501:3906":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"6:5482:14678":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:10803:3317":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:630:3805":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"16:5649:17552":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"13:0:2927":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:7825:24355":{"crate_id":1,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"17:12906:3327":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:12306:17922":{"crate_id":17,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"17:11232:17765":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"5:929:3841":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"17:16822:20703":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"1:3913:4038":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"6:4816:14608":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:5007:14628":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"5:7641:3137":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"16:2620:16653":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:44332:9512":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:12135:17865":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"6:8330:14868":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"16:2550:16650":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:44573:9545":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:45155:3539":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:46524:4269":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"5:789:121":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:5413:29973":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"6:1507:11546":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"16:7980:17629":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:8635:4092":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"16:6808:3421":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:16832:20705":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"5:1002:3486":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"5:3800:31562":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:2482:3941":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"6:5057:14634":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:3759:9890":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:2086:208":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"16:7401:33973":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:44202:9505":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"5:5143:3974":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:47662:9422":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:11553:17777":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:47711:9425":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"5:5527:31562":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:948:3825":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:41227:3527":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"16:0:2936":{"crate_id":16,"path":["gimli"],"kind":"module"},"5:5973:264":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:10474:4179":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"16:7919:17624":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:46486:4257":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:10408:28109":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"6:7368:4130":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"16:2660:16655":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:5131:17988":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"17:11777:17803":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"6:570:10656":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:32759:9949":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"17:15286:21963":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"16:6084:17573":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:23487:3964":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"11:2148:3834":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"6:8273:14861":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"6:6823:15413":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:10534:3288":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:13933:20703":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:11848:9515":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:14520:21216":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:38680:9884":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:44704:9540":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:3045:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1:4680:4104":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:12931:3328":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:5128:4125":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"6:7487:15823":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"16:2950:16668":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:1930:3890":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"6:7986:10602":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:12465:936":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"16:6188:17578":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:43543:3515":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:41741:9823":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:6065:3698":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:13871:3342":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:12869:17743":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:22033:3549":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:46714:4270":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:4233:4071":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"5:1595:3826":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:12409:17926":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"6:8353:16399":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:41534:9846":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:4177:4066":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:40252:9597":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1:8546:3991":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:38845:9887":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"5:4529:3974":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"16:7416:17615":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"6:6652:15395":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:5622:14691":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:3293:276":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"18:96:22219":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:7743:23479":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"17:12711:17967":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:42830:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:12687:17965":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:42579:3137":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:45135:10026":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:8276:4003":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:5285:28114":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:11045:3894":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"6:5205:14645":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:10564:9459":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:41068:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:2208:9915":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"1:7951:24475":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:22955:29616":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"17:11617:17732":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:5666:4170":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"17:12524:17885":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:9241:4210":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:1626:3824":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"5:6159:3507":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"16:6738:34036":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"6:7350:15817":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:6449:15381":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:1584:11554":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:3335:9852":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"17:11281:17733":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:8889:3486":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:31181:29067":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"17:13041:17983":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"16:7959:17627":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"9:328:16498":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:10338:9457":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"2:45173:134":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:46325:4290":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:42904:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:884:201":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"6:6493:15343":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"14:220:16582":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:15997:22010":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:1898:9777":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"6:545:10652":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"6:1489:11543":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"11:2228:3457":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"19:0:1323":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:14262:4388":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"14:7:16572":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"16:2860:16664":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"16:8151:3443":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:3573:153":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"5:3330:3838":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:44455:9549":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:11926:17816":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:11592:17774":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"5:2295:3497":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:13181:17986":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"2:44290:9493":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"6:564:10655":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"16:7554:17619":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:507:24478":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"18:623:34853":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"18:680:22234":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"6:5494:14680":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"17:15121:21256":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:322:34067":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:45139:10024":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:6952:244":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:12038:28124":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"2:22905:4379":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"2:10012:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:13006:17978":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:3075:237":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"17:16494:20696":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"16:4983:17231":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:14108:9669":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"11:798:3824":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"16:2880:16665":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"5:2585:31524":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:6706:4193":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:12625:17888":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:14416:21211":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:12457:1765":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1:380:3802":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:5682:116":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:22929:3964":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"2:13968:9671":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"6:5541:14684":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:1339:17786":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"16:5379:17351":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:46845:29266":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"6:1643:11559":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:5993:4190":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:12840:17937":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"16:6502:16616":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:4053:3824":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"16:2748:16659":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:10696:3315":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"11:1023:3833":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:2718:4002":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:38735:9885":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:10816:3075":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"6:5366:14665":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:11291:34654":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:3814:115":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"18:689:22235":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"11:2400:3489":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"16:2435:16645":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"1:4119:4061":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:41548:9847":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"6:5428:14672":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"16:5282:17323":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"11:881:3831":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:32769:250":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:41748:4193":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"6:8284:14862":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"18:735:22230":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"16:6256:3402":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"5:4133:3824":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:15549:21974":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"18:581:3549":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"16:4902:17219":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:44277:9492":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:44555:9544":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"16:4694:17126":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:13890:3349":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:3051:174":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"6:559:10654":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"16:3308:16676":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:3408:9451":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"1:4943:4081":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"16:7990:17630":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"15:0:2935":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:10657:4175":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:8617:4031":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"6:1625:11557":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"6:473:10643":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"16:6588:17588":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"6:553:10653":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:3503:17882":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:40215:3080":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"6:4947:14620":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"16:5172:17305":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:10861:150":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"16:3695:16679":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"17:15315:21964":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"11:488:165":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:42628:3818":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"14:31:16572":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:10774:4013":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"1:7906:24350":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:3774:158":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:13341:9527":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:46457:4303":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"11:2301:3832":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"2:42629:4145":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"16:2684:16656":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:16613:20700":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"2:41763:4018":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:34755:9880":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:43998:9495":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:40944:9541":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"9:500:16446":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"11:2466:3825":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"6:5462:14675":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"17:14652:21226":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:15136:3328":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:3310:24182":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"16:6731:3387":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:10115:17712":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:8629:4103":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:881:4045":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"16:6837:3423":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"6:1703:11565":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:11112:29811":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"18:507:34845":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:15753:21986":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:43091:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:15148:21257":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:45401:29788":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"16:3889:16681":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:3687:3985":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:967:3827":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"16:6028:3391":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:7180:4243":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"16:7938:17625":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:23349:29090":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:9305:3700":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:9573:3532":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:6537:231":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:7749:3145":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:15160:21258":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:11775:9521":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:41327:9833":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:13322:17740":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"18:635:34857":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:22288:3964":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:15064:21252":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:12018:17862":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"2:44527:9516":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"5:282:31562":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"17:16218:22024":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:12293:17879":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"16:6269:17580":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:16761:22203":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"5:7532:3483":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:4171:4065":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:40967:9643":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"6:5325:14660":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:472:17707":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"6:6917:15442":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"7:32:16415":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"5:7778:3915":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:2896:213":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:9447:4200":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"16:6408:17584":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:0:582":{"crate_id":2,"path":["core"],"kind":"module"},"2:46340:4255":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"16:5417:17366":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:45147:10019":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:8578:4035":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:4591:111":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"6:7469:15822":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:13921:20702":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:40083:3868":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"1:12462:763":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"6:5255:14651":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"16:4184:16708":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:22729:3964":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:22101:30979":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"16:5060:17285":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:24097:247":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"16:7212:16590":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:3129:126":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"17:12260:17920":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"2:44991:9568":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"6:6507:15344":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"11:708:3494":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:40436:3070":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"5:7696:3086":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"5:7561:3824":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:7839:24341":{"crate_id":1,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"6:6411:15377":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"18:726:3284":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:9768:130":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"17:14708:21229":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"5:6043:3824":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"16:4404:16859":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:439:196":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"6:5117:14638":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:5493:1004":{"crate_id":2,"path":["core","iter"],"kind":"module"},"18:515:22240":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:3605:3869":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:12216:17870":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"1:984:3829":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"6:5217:14646":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:8267:14860":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"16:6749:3418":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:41350:3530":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:11363:23736":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"11:671:3486":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:3769:267":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"6:5357:14664":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"6:7332:10524":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:5036:14631":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:16362:22033":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:9190:3486":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:13798:20699":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:4778:3519":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"1:4899:4126":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"16:7495:33722":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:9442:246":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:14438:21212":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:10771:4011":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"2:42329:4030":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:42497:4032":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:15844:21994":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:43981:29150":{"crate_id":2,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"5:7802:256":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:4569:4093":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"5:4499:31588":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:22576:4252":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"2:23408:29241":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:41265:9838":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:34582:9879":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:4869:14611":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:13349:3331":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:15439:21969":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:14284:21204":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:4414:4100":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:13347:9526":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:12204:17869":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"2:46355:4291":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:8394:9831":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:12416:9502":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"2:2215:9913":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:2816:9657":{"crate_id":2,"path":["core","clone","InitializingSlice"],"kind":"struct"},"17:14393:21209":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:1630:3825":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"2:31170:3515":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"16:3587:16678":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"6:4842:14610":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:14282:4385":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"5:3268:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:12456:1731":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:12470:1895":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"5:7884:3825":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"5:2266:32729":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:14346:17928":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"6:6731:15405":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"2:43741:3076":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"6:491:10646":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:6287:9839":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"16:8137:3441":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"6:6666:15397":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:5362:215":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:4699:3517":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"11:854:3829":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:12052:16604":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:14627:21224":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"6:5658:14696":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"6:4896:14447":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"16:6822:17595":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"6:5044:14632":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"5:3086:32782":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:7854:9654":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"1:5543:132":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:45123:10021":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:15050:21251":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:12787:17934":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:12478:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"16:6173:3395":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:14239:118":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"6:5682:14699":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:13205:17735":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:47519:4327":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"16:3014:16671":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:22192:3540":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"6:4792:14606":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:46862:29118":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"16:7883:3384":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:10296:17718":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:4567:29685":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:11261:4176":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"16:908:34067":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"1:954:3826":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:42707:3486":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"17:11026:34650":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:11998:17829":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"6:465:10642":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"16:6696:17591":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"16:8612:3447":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"11:1884:3137":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:2668:9904":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"18:531:22241":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"5:889:3840":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:15714:21983":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"6:1657:11560":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:2652:694":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"16:7358:3431":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:3517:9452":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"16:2840:16663":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:3570:152":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:46387:4256":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:44902:9564":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:44980:9567":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:11248:3695":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:10784:34377":{"crate_id":17,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"2:23164:29306":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:10516:17725":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:10332:17719":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:41006:9644":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:43054:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:15418:21967":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"15:288:16596":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:7495:25957":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:996:3831":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:8895:4161":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:43521:29322":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"2:22070:30993":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"16:4810:17196":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:42313:4029":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"9:390:16444":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:47726:9426":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:42475:4031":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:7428:24317":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:31155:9798":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:13119:17987":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"6:4990:14626":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"5:2256:3779":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:11029:23357":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"11:123:3454":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"16:8626:17648":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:3140:149":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"11:698:3137":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:15106:21255":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"11:830:3826":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:12464:758":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"1:5736:4171":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"5:5302:3507":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:11475:17765":{"crate_id":17,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"2:2890:206":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:23612:29314":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"5:1487:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:5316:28114":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"15:394:16607":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"2:4489:3974":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"16:8598:17647":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:1932:3891":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:10993:151":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"17:12983:17977":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:45127:10023":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"16:6914:17600":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:11075:34423":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:44509:9518":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"5:3694:193":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:12026:3725":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:47167:29340":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"1:1108:3834":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:1619:3486":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"11:740:3495":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"16:4766:17175":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"0:24:2399":{"crate_id":0,"path":["fnv","FnvHashSet"],"kind":"type_alias"},"16:6998:17603":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"18:651:34845":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:11473:3932":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"2:2854:212":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:23524:29121":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"8:0:2929":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:3448:4010":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"0:10:2381":{"crate_id":0,"path":["fnv","FnvHasher"],"kind":"struct"},"17:10418:17722":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:12095:17837":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"17:14099:20715":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:2732:10004":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"6:5334:14661":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"17:13537:3328":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"16:6794:17594":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"2:11737:9509":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"11:351:33680":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"17:14547:21218":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"6:6882:14521":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:12463:779":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"5:3085:3196":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"16:8636:17649":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:23546:29086":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"6:8290:14863":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"6:5282:14654":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:13592:17748":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:32738:17650":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"1:3352:4012":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:12941:17964":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:42357:3680":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"16:5742:3289":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"6:8261:14859":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:3300:260":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"17:11653:17778":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:22121:4250":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:6827:4198":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:16179:22020":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:2406:17811":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:47569:4312":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:3659:3906":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:47101:4326":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:43994:29081":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:14483:21214":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:12191:17868":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"16:2772:16660":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:42978:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"6:5593:14689":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:10977:34552":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:13733:20696":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:5616:4167":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"17:11401:17759":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"6:4997:14627":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:8112:3894":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:10938:34711":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:43766:168":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:12237:24463":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"6:6813:15412":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"5:3088:31526":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:9452:4201":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"2:22298:4247":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"5:1616:3495":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:8566:3990":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:16171:22019":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:9581:3890":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"17:12897:17972":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:23335:29083":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:16145:22017":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:14084:20714":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:2802:9447":{"crate_id":2,"path":["core","clone","CloneToUninit"],"kind":"trait"},"2:41149:3929":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:3564:3090":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:47636:9420":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:34063:4241":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"6:7577:15828":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:8668:4127":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"6:6462:15382":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:43128:3681":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:8536:3523":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"6:5670:14697":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:5879:4204":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:12451:490":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:12477:1456":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"16:7030:17605":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:9377:23320":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:3131:126":{"crate_id":2,"path":["core","default","Default"],"kind":"proc_derive"},"6:7448:15819":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:12056:3321":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"6:8031:16201":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:2508:3951":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"17:15905:22000":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:12472:1883":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:6020:3697":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:16026:22013":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:11386:17758":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"16:7471:17618":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:46989:4259":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:6480:15384":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"5:7649:3137":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"5:7766:3914":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:43466:28995":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:46472:4309":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"16:6042:17571":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:46553:4324":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"5:2173:3855":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"2:42619:4132":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:768:165":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:8516:3963":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"16:8096:17633":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:13451:17743":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"11:1158:3835":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"5:6840:3137":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:4941:4080":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:3602:3961":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:4827:24522":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"16:6970:3427":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:9206:3137":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:9364:17620":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"3:234:237":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"6:6638:15394":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:2498:3946":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:3696:222":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"6:8319:14867":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"6:8296:14864":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:16520:22191":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"1:8694:4079":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:44808:9560":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"6:5288:14655":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"16:5255:17319":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:33300:9872":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:8206:3954":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"6:5107:14637":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"11:2137:3833":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"17:16632:22193":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"6:4890:14614":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:1220:17779":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:12467:924":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:42732:207":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:15896:21999":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"16:7372:3432":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"11:1005:3832":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:8143:3531":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:23568:29107":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"6:5179:4088":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:11821:23342":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:22957:9903":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"11:430:33682":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"16:6064:17572":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"16:8565:17645":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:41236:9836":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:31555:3549":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:46951:4305":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"16:8669:17650":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:13266:17737":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"5:3707:3486":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"5:7815:9571":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:11903:9516":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"6:5570:14687":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:16399:22036":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:10564:3310":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:10963:3954":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"2:41524:3991":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"6:4829:14609":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:4914:14616":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"11:835:3827":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:5451:4019":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"16:7765:17621":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:6640:17589":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"6:1569:11553":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:15760:21987":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:11012:3959":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"1:4018:4039":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"18:598:34849":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:15989:22009":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:14640:21225":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:4780:4122":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:23590:29272":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"1:9256:4208":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:12776:17968":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:8358:28137":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:46611:4298":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:22119:3964":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"17:10167:17714":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"16:7282:17612":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:10097:17711":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"5:1627:221":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:12476:1957":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"6:5271:14653":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:4633:9612":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"2:3373:4238":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"11:1601:16565":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:45347:218":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"1:9212:4209":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:42723:3137":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:47294:4294":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:46972:4311":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"5:1605:3494":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"16:3126:16674":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:12108:17864":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:12952:17974":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"14:187:16580":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"18:718:22229":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:16750:22202":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"17:10729:3316":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"18:563:3279":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:3916:4037":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"16:7716:34033":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:15946:22004":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:3458:9881":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:1871:3875":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:10500:237":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"1:11068:23307":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:42756:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:904:3137":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"16:2640:16654":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:2480:3940":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:9460:173":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"6:6758:15408":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"1:9316:3784":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:8649:4095":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"17:13958:20705":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"11:2566:3086":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:8268:24179":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:8624:4102":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"16:6205:17579":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"11:434:33671":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:11449:3964":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:44837:9562":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"5:1415:3835":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:13635:18022":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:14335:17927":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:4702:4105":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:6824:4197":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"6:5311:14658":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:2378:17849":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:15351:21965":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:40195:227":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:43493:29151":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"17:13385:3332":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:11173:34669":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"5:1370:3832":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:2083:209":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"18:659:22232":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"6:5676:14698":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:32752:9624":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"2:45143:10025":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:13757:20697":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:42275:181":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"7:79:16422":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:46582:4245":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:11909:4038":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:13352:9524":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"6:8343:16398":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:40960:9540":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:1641:3837":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:4349:4098":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:9344:28142":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"5:1230:32733":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"16:6713:17592":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:22571:3964":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"6:1530:11549":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:4495:4101":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:6310:24464":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:4978:9625":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:46649:4310":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"18:754:22236":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:16332:22031":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"16:903:34031":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"16:546:3374":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"16:8585:17646":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"6:7341:15816":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:42463:4040":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:42793:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"16:5198:17308":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:4341:4097":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:15431:21968":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:11691:17772":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:15919:22001":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:9536:9965":{"crate_id":2,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"17:317:34031":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:11315:23363":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"2:23270:3542":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"6:8199:16362":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"6:4929:14618":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"5:2162:3854":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"5:1524:3486":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:41084:9958":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:1667:11561":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:41318:9841":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:39424:9888":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"0:0:2809":{"crate_id":0,"path":["fnv"],"kind":"module"},"17:12736:17940":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"6:5295:14656":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"16:7058:17606":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"11:1564:16563":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:11129:24431":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"6:7604:15830":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:15769:21988":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:16241:22025":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:44688:9531":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:12149:17834":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"1:973:3828":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:6489:4203":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:2029:3974":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"1:731:2377":{"crate_id":1,"path":["std","collections"],"kind":"module"},"2:5392:452":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"6:6381:15315":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:44823:9561":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:8572:4036":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:32859:117":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"6:4902:14615":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:10597:3312":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:42515:4033":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"5:6527:10248":{"crate_id":5,"path":["alloc","sync","UniqueArcUninit"],"kind":"struct"},"2:41772:9826":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"17:15931:22002":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:2020:810":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"2:47764:9428":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:12723:17941":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"16:5085:17287":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:11952:3319":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:40100:224":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"5:2368:3500":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"11:1140:16562":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:9323:23281":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:9739:150":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"2:43015:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"9:0:2930":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"16:7521:33773":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:41782:9827":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:2209:3940":{"crate_id":2,"path":["core","ptr","metadata","metadata"],"kind":"function"},"6:5641:14694":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"6:7308:10695":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:8839:4159":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:8529:3093":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:34409:9878":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:4815:4066":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:45208:10042":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:42588:4144":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"5:7790:9481":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"17:13983:20707":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:13095:17989":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"18:521:22237":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:12471:1877":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"16:2570:16651":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:963:3495":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:22172:3964":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"11:2380:3486":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"16:3048:16672":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:11838:25950":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:9292:4191":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"16:6852:17596":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:44713:3807":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:16323:22030":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"5:2348:32766":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"6:5450:14674":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:47084:4277":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:8203:3699":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"11:2559:33688":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:5475:214":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:22089:30984":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"9:176:3474":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:9397:3722":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"6:1514:11547":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:11358:17757":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:40895:28991":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"11:1725:167":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"16:5727:3288":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:10821:2376":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:44151:29475":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:14872:21239":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:42867:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"9:53:3459":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:41399:9835":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:13951:29801":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"17:11971:17809":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"18:608:34873":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:4362:4099":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:11448:17762":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:4333:4096":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"5:5836:9592":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:12371:3324":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:959:3494":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"16:6866:17597":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"16:6337:17582":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:16595:20699":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"1:4311:25954":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:12045:16604":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:16642:22194":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"17:15785:21990":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:15036:21250":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:386:3803":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:8097:3893":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:45388:4387":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:43796:3684":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:8801:4157":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"11:1049:3834":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"16:6904:17599":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"16:2900:16666":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"16:6942:17601":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"18:0:2938":{"crate_id":18,"path":["memchr"],"kind":"module"},"5:7591:32725":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:9169:4176":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:8489:3531":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"17:14821:21235":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"10:0:2931":{"crate_id":10,"path":["adler"],"kind":"module"},"17:14933:21243":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:1652:3839":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:2403:9454":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"16:6421:3376":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:3553:9441":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"17:14796:21233":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"16:7259:17611":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"5:7549:3843":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:14586:21221":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:4221:4068":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:12008:17861":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:14299:21205":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"17:14672:21227":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:9496:4237":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:46404:4262":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:14405:21210":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"11:328:33676":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:3780:9610":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"6:517:10648":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:43226:9459":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:4931:9624":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:8363:3715":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:44211:9504":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:10565:28251":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"16:7907:17623":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:16008:22011":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:40087:9889":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:5305:17994":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"17:12537:17883":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:583:17708":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:47647:9421":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:12474:1871":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"17:11630:17780":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"11:2420:3137":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"16:6368:3370":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:9686:9525":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:31149:9490":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"16:2704:16657":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"11:2366:16566":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"17:3854:17905":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:2331:3936":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:10817:3790":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"2:13400:9553":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:3295:120":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"5:4330:3974":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"11:1900:3836":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:13306:17739":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"16:7350:3388":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:46795:29262":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:34130:9876":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:14738:21230":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:7813:24352":{"crate_id":1,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"},"5:3364:3839":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:13064:10032":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"5:4999:228":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"6:1727:11567":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:4163:4064":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"5:6580:4391":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"17:12673:17954":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:5630:4168":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:4939:4077":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:14312:21206":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"16:3834:16680":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"5:6180:10240":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"11:2349:3834":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"1:10974:23063":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"16:7159:17608":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"6:7361:15818":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"5:7215:278":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"6:7391:11688":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"5:7605:3137":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:1491:167":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:8584:189":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:40245:9891":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:8368:4005":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:2326:150":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:44364:9539":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"6:6902:15441":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:12468:930":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:15689:21981":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:46824:29069":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:41340:9842":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:2766:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"5:297:3095":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:3851:131":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"16:8014:3437":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:4225:4069":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:13028:17984":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"6:6521:15385":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:12044:17836":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:23079:4374":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"10:44:3458":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"18:548:164":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:14599:21222":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:46440:4297":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"6:1684:11563":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"6:1632:11558":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:43476:3515":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"6:6599:15390":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:44391:3317":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:8235:151":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"1:8010:3964":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:12605:3294":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:46568:4330":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"6:6437:15379":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"5:1889:3825":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"6:5349:14663":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"1:7896:17709":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:16786:22205":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"6:5629:14692":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"2:44351:9542":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"16:7016:17604":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:8894:3849":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:45339:238":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"6:5471:14676":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:47122:29196":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"5:1386:3834":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:15586:21976":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:912:3491":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:2245:132":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"2:46763:4331":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:14886:21240":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:12163:17866":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"6:6473:15383":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:5477:14677":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:12466:918":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"6:6623:15392":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:8736:4139":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:12423:3817":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:44627:9547":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:8249:130":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:11655:3992":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:22043:30988":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"6:1589:11555":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:16684:22197":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"2:46746:4325":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:45131:10022":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"6:4881:14613":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"6:5127:14639":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:15963:22006":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:3313:24168":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:1099:3833":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:10246:17716":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"11:102:33687":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:45461:29268":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:11037:4127":{"crate_id":1,"path":["std","sys","pal","unix","linux","pidfd","PidFd"],"kind":"struct"},"2:23084:4372":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"17:13398:3334":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:10007:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:43581:9458":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"5:3338:3836":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"16:2530:16649":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:10570:217":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:40848:3807":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"16:6680:17590":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"5:4562:3974":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"17:14043:20711":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"6:6544:15388":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"11:2551:33692":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:47217:4260":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"6:5405:14670":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:44966:9566":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"11:1105:16561":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"6:5635:14693":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"16:2820:16662":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:4730:3518":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:3025:9665":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"5:1577:3491":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:13991:3529":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"1:3307:28786":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:12455:349":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:3535:127":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:12976:17976":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"17:11539:3298":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:47371:4266":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:2206:9914":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:46922:4299":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:8427:157":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:10368:17720":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:41757:9825":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:32770:257":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:2013:3905":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"16:5689:17569":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:10387:3884":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"17:12234:17918":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"6:5648:14695":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:8553:3317":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"1:5986:4189":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:47416:4300":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"16:6159:3392":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:8583:4027":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"6:5603:14690":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:23466:4058":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:3668:28053":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"17:11465:17764":{"crate_id":17,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"17:16656:22195":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"0:21:2395":{"crate_id":0,"path":["fnv","FnvHashMap"],"kind":"type_alias"},"6:4976:14624":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"16:7305:17613":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:47548:4278":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"6:586:10658":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:11105:29814":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"17:12359:17925":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:42667:237":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"1:881:3486":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"16:2415:16617":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"6:1696:4089":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:3181:3909":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"17:16812:22207":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"17:13970:20706":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"5:3096:32647":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:23634:28986":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"6:7539:15825":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:4848:232":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:12841:9987":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"16:2450:16646":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:8900:9830":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:11717:4157":{"crate_id":1,"path":["std","sys","thread_local","native","eager","State"],"kind":"enum"},"17:12035:3457":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"6:7431:11671":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:14507:21215":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"16:8000:3436":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:12434:23359":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"5:7621:3509":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:8476:133":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:16187:22021":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"5:4484:279":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:3799:29427":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:41055:9642":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"16:2966:16669":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"14:40:20698":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:2227:17817":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:11818:17814":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:11793:23337":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"6:7454:15820":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:41790:9829":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"16:7386:3433":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:5114:4124":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"5:6561:4390":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:14319:163":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:13471:17744":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:14845:21237":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"6:6526:15386":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:15939:22003":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:16739:22201":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"2:46778:4332":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:8201:3957":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"5:4163:31562":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"16:6389:17583":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"16:2467:3359":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"5:7613:221":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:5105:4123":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:10983:3716":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"6:7548:15826":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:9156:3695":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"6:6443:15380":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"9:480:16442":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:15655:21978":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:11851:17813":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:8824:4158":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"6:4964:14622":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:5488:14679":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"16:8528:17643":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:3548:3851":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"5:7288:31599":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:15812:21991":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:41288:3529":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:12550:17884":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:1117:3835":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:44405:3992":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"17:15090:21254":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:7099:9834":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"2:10773:164":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"6:6691:15400":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"5:3304:3837":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:11579:17775":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"11:785:3493":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:9229:4207":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"11:685:3489":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:10566:9467":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:44473:9548":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:14220:21202":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:10958:28266":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"2:42571:3489":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:43233:9460":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:10549:3289":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"11:1880:3486":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:4829:24524":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"16:6890:3426":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"5:2148:3717":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:8026:3791":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:506:16619":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:14832:21236":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:8643:4036":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:11733:17801":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"6:8302:14865":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"16:8066:17632":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:11147:24468":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:13838:3336":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"16:7192:17609":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:10700:24469":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"1:3350:4011":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:11787:4180":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:44787:9559":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:11931:9517":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:15953:22005":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"5:7738:3913":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"16:2590:16652":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"6:8008:16199":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:9145:210":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:44312:9513":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:11832:25956":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"6:6631:15393":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:13818:20700":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:22867:4378":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"2:41734:29328":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"14:214:16581":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"11:2323:3833":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"2:40263:9605":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"16:8711:17651":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"16:8028:3438":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:15077:21253":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"5:3092:32646":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:16668:22196":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"2:41196:3866":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:8879:4160":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"16:7542:34060":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:45001:9569":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:3305:3516":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:4857:9616":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:12749:17939":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"5:3851:3717":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"5:6931:31562":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:23373:29339":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"5:3309:32722":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"11:873:3830":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:13570:17747":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"6:1563:11552":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:23301:3543":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:13719:18025":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:679:3811":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"6:1494:11544":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:45380:4386":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"6:5224:14647":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:43788:3683":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:8498:3719":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"6:5196:14644":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:23623:29172":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"1:5650:4169":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"16:3141:16675":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:11114:17731":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:2105:693":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:14573:21220":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:12319:17900":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:4852:9615":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"6:1690:11564":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:5195:4135":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"1:8284:3717":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"6:5025:14630":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:14533:21217":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"5:7124:9594":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"16:8233:17637":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:43240:9467":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"6:4937:14619":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:10568:9468":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"13:110:33701":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:22180:4249":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:11021:23316":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"16:8546:17644":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:10560:132":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:43247:9468":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"6:479:10644":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"6:5562:14686":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:5020:4076":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:23435:29311":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:3048:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"6:523:10649":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:47590:4333":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"6:5341:14662":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"17:16311:22029":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:41375:9844":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"18:613:34856":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:15731:21984":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:2554:2944":{"crate_id":1,"path":["std","io"],"kind":"module"},"6:7518:15824":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:7414:11673":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"6:6748:15407":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"1:1635:3836":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"6:5441:14673":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"5:7090:9592":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:13070:3294":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"2:5009:3521":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:45197:4242":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:3620:3960":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:13491:17745":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:45325:175":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"6:4805:14607":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:44251:9494":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:44303:9510":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:14947:21244":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:3403:9450":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"11:2539:29969":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"16:6984:3428":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:41246:145":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"5:212:9456":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:8906:4162":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:40155:226":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:990:3830":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:12454:1348":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"11:1914:3838":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:2769:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:6600:197":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"16:4873:17213":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:8753:4156":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:44722:9541":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:2142:1393":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:3042:24466":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"5:6285:3974":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"5:5572:9485":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:10193:30969":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"6:6611:15391":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:7971:9821":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"1:11298:3967":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"1:4149:4063":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:6386:4388":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:8938:30973":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:44230:9506":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:6910:9849":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:12962:17975":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"18:491:34874":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:44929:9565":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:2282:200":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:41111:3317":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"2:3054:156":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"17:13692:18024":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:14031:20710":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:3405:4014":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:16297:22028":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:3851:4034":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"5:1250:32610":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"11:299:33666":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:12028:17863":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"16:5449:17375":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:14072:20713":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:11421:17760":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:40175:225":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:45329:230":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:3341:9854":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"6:578:10657":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:11810:9514":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"5:726:31089":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"5:7722:3505":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"6:1551:11551":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:12280:17921":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:8260:3073":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"16:7044:3429":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:15876:21997":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"16:6440:17585":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:42441:29098":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"16:6781:17593":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:42659:3795":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:6746:3706":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:15829:21992":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"6:6740:15406":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"2:41359:9843":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"5:7751:9958":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:10218:17715":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:43505:29105":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"17:14859:21238":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:32745:29438":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"2:46372:4296":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:3057:271":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"17:16198:22022":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:16132:22016":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:13157:17981":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"2:7920:29476":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"14:160:16572":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"5:780:263":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:46877:4293":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:11917:9519":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"16:8267:17638":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:22994:4383":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"5:1636:3853":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"11:772:3491":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"6:5301:14657":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"16:5348:17343":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:14127:20717":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:11527:17785":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:4825:24520":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"5:985:3842":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"6:5265:14652":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:16377:22034":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"9:422:16445":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"6:5019:14629":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:12570:17880":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:16385:22035":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:23393:29165":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:10777:4009":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"2:23217:29123":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:11515:17791":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"13:229:3453":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:14997:21247":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:15836:21993":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:12886:17963":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"17:12176:17867":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"16:3110:16673":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:8255:3074":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"11:396:33669":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:38790:9886":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:22943:4382":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"18:80:22218":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:10975:29815":{"crate_id":2,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"18:706:9527":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:16084:22015":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:11970:4039":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"16:4956:17227":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:23285:3510":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:40137:223":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:40115:221":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"16:4844:17207":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:11563:24481":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"1:12473:1889":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"6:5412:1275":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:4902:4104":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"11:1893:3825":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"2:15:2388":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:45449:9438":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"16:6144:17577":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"5:1401:3833":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:13222:17736":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:9746:3957":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"1:11949:4037":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:40003:9608":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:44659:3990":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"17:14358:21207":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:40923:9649":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:13515:17746":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:16019:22012":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"16:8179:17635":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"5:7900:9589":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:4186:3137":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"5:1123:31562":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:9356:3720":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"17:13427:17742":{"crate_id":17,"path":["object","read","ObjectMapFile"],"kind":"struct"},"1:1623:3137":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:40952:3807":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"5:7581:3856":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"16:8058:17631":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"6:5088:14636":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"16:6123:17576":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:8077:3815":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:45032:9551":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"6:7316:11499":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"6:5319:14659":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:31528:207":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"16:3441:16677":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"11:1580:16564":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:36804:9883":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:11864:17812":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:16701:22198":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"2:10519:155":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:12461:760":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"11:2121:3832":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:44679:9532":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:31117:3548":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"6:6765:15409":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"1:9139:4175":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:13027:10030":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:13562:122":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:12487:9500":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"2:12857:9989":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:47803:9429":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:6680:15399":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:16507:20697":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"16:7789:34045":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:9271:4211":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:42563:3486":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:10555:122":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"17:11706:17799":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"16:5224:17311":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"6:5165:14642":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:41047:9646":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"2:41121:3916":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"2:43757:3077":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:7855:9655":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:15621:3350":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:15981:22008":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:41256:9837":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:0:2937":{"crate_id":17,"path":["object"],"kind":"module"},"17:13854:3340":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:47607:9417":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:11678:17773":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:12648:17886":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:6434:3704":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"18:481:22238":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"11:1888:3824":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"11:1920:3839":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"17:10274:17717":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"16:155:3367":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"17:10793:17727":{"crate_id":17,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"2:33512:9871":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"16:8043:33892":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"5:5426:9480":{"crate_id":5,"path":["alloc","rc","UniqueRcUninit"],"kind":"struct"},"6:6716:15403":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"17:15641:17781":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:13554:17753":{"crate_id":17,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"1:11807:23326":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:32692:4177":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"9:445:16443":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"6:0:1029":{"crate_id":6,"path":["libc"],"kind":"module"},"6:7563:15827":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:26497:281":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:12699:17966":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:23442:4044":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:45151:10020":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:45412:4384":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"6:6723:15404":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"2:46539:4275":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:22300:3540":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:1984:3904":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:23645:29267":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"2:3378:4240":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:44240:9507":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:2754:3993":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"5:3931:3825":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"2:34928:9882":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:15573:21975":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"14:0:2934":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"16:5757:34050":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"5:7707:3087":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:9433:3974":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"2:10781:168":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"6:1675:11562":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"5:7571:3844":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:11163:3294":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:9437:245":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:2521:3953":{"crate_id":1,"path":["std","fs","exists"],"kind":"function"},"16:7223:17610":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"6:5533:14683":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:4970:14623":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:13909:20701":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:9478:3967":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:2328:3935":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"16:7168:16591":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"16:8503:17642":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"16:6098:17574":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:23357:29197":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"9:355:16459":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:8891:161":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:12450:1204":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:16283:22027":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"16:7508:34047":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"6:5507:14681":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"11:2533:33690":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"18:113:22220":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:7397:24434":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"1:2496:3945":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"17:15475:21970":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"15:327:3449":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:5040:3522":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"12:0:2933":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"11:2440:3824":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"5:6759:31562":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:11889:9518":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"6:5551:14685":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"16:5144:17300":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"6:8308:14866":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:4987:9626":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"5:7541:3137":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:41139:3930":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:22731:4248":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:44375:9536":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"1:11407:3933":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"17:13547:3335":{"crate_id":17,"path":["object","read","RelocationMap"],"kind":"struct"},"1:6402:24474":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:894:3489":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:8011:3804":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:34264:9877":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"16:2990:16670":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:44854:9563":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:575:3785":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:22610:30985":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"11:364:33678":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:11503:17766":{"crate_id":17,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"16:6239:3397":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:7105:29336":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"5:6127:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:10934:4128":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"2:47627:9419":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:15701:21982":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:46419:4292":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"5:39:3870":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"5:3720:3489":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:11222:17732":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:13209:149":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:13662:18023":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:41169:3958":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"5:3297:3486":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:11053:4171":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"6:5139:14640":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:15973:22007":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:14055:20712":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"16:7337:17614":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:40884:9648":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:13169:18017":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"5:885:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:6227:231":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"17:12392:17899":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:23324:4042":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"16:6953:17602":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:5865:231":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:7110:29194":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"1:534:3779":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"16:6876:17598":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"5:0:323":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:4614:9446":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"5:4575:31588":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"18:765:22231":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:45317:29153":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"16:8121:221":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"16:7075:17607":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:682:3812":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:45422:191":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:41099:3912":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:8091:3816":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:10141:17713":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:34197:9875":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:8049:3790":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:22823:4377":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"17:15852:21995":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:15024:21249":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:938:3824":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:11606:3294":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:16714:22199":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"16:8723:149":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:9425:4192":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"1:3539:4018":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"16:8320:17640":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:8559:3992":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:41176:9492":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:12418:3726":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:6401:3528":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:13361:17741":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:14773:21232":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"9:236:4157":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"11:842:3828":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:8213:3716":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:32828:3678":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:22087:30982":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"16:2796:16661":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:9182:3696":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"10:36:33662":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:2793:4004":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:16775:22204":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"16:8298:17639":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:22174:4246":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"5:1586:3493":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:42941:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:10562:9460":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"11:2545:33665":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:12402:23343":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"2:33724:9874":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:42650:9973":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:10953:23078":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"18:538:3277":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:12347:17924":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:13103:10031":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:13945:20704":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"6:5395:14669":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:2666:9903":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"17:11016:17729":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:11249:29807":{"crate_id":2,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"18:643:34845":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"18:589:29074":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:925:3493":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:10823:3318":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"6:6790:33163":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"16:6573:17587":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:10663:3314":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"6:8255:14858":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:2859:146":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"6:1521:11548":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:5872:4203":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:15739:21985":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:15602:21977":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:12066:3322":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:10928:17728":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"11:809:3825":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:40933:9650":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"16:8165:3444":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"5:4370:3486":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:13014:17993":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"2:41389:9845":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"6:8249:14857":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:13087:10029":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"16:8483:17641":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"6:538:10651":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:43560:149":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:11085:3696":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"2:47741:9427":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"5:5576:9486":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"16:8209:3445":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"6:6876:15440":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:23579:29170":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"3:0:524":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"6:5586:14688":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:30887:4041":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:16264:22026":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:43535:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"16:5318:17336":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"6:5069:14635":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:44423:9514":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:23535:29184":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"1:9310:118":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:10548:116":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"2:46693:4264":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:687:3813":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:13610:17749":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"16:2920:16667":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:11805:17815":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"6:6708:15402":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"17:16798:22206":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"17:12798:17969":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"5:7263:31591":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"16:3987:16682":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"2:41297:9840":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"6:5381:14667":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:40910:9647":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:42554:184":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"18:670:22233":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"5:3456:3825":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"16:4241:16742":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"6:5375:14666":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:3569:3974":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"17:11985:17860":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:11781:3711":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:13286:3931":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:8196:3956":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:3941:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"4:0:2928":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"17:10778:17726":{"crate_id":17,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"16:6658:3403":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"6:5249:14650":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:6881:3707":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"5:1214:32616":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"18:573:34845":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:23601:29108":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"17:16728:22200":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"1:3077:149":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"1:2335:3937":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"17:16555:22192":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"2:4921:9623":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"6:6770:15410":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"2:11698:9520":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"6:7463:15821":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:1647:3838":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:15887:21998":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:13082:17732":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"2:10572:9465":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:11878:3294":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:8507:3959":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:40854:9613":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:7801:24343":{"crate_id":1,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"2:44697:9530":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"16:6462:17586":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"6:1539:11550":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:14375:21208":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"16:7731:4144":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:3677:3962":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:47616:9418":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:47461:4272":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:3024:3964":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:12069:24460":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"17:12249:17919":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:2648:4001":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"6:4957:14621":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:9751:24433":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"1:8031:3793":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:41218:3524":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:11902:17818":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:11831:3298":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"14:202:9570":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"6:5151:14641":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:46731:4276":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:14152:20719":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:11272:23368":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:14807:21234":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:10280:23069":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"6:4921:14617":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:46507:4263":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"16:8105:17634":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:41306:9848":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"5:1785:31562":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:12873:9533":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:14056:30870":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:13141:9520":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:4113:4062":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"16:6111:17575":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:15531:21972":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:14560:21219":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:599:3787":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"6:1500:11545":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:3388:9873":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:11000:23728":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"2:4:1288":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:11141:24462":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:12583:17881":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"16:2506:16648":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:22072:30991":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:12449:9503":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"17:14692:21228":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:0:1757":{"crate_id":1,"path":["std"],"kind":"module"},"17:12920:17973":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:15665:21979":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:15540:21973":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:11757:17802":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"6:6777:15411":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"16:7462:17617":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"6:6700:15401":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"17:3720:17887":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"16:6302:17581":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:15557:21962":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"16:7424:17616":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:10406:25949":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"6:6564:15389":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:11720:17800":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"17:12826:17935":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"2:3061:270":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"17:10487:17724":{"crate_id":17,"path":["object","common","RelocationFlags"],"kind":"enum"},"16:896:34083":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"16:7949:17626":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"16:6625:34065":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:11788:17828":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:1854:719":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:5804:4172":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:32768:248":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"17:13290:17738":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:3576:154":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:10630:3313":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:2437:17835":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:3400:9449":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"2:32827:3089":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"17:15864:21996":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:13145:17982":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"2:43778:4157":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"16:5709:17570":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"16:2724:16658":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:11432:17761":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"16:4929:17223":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:23557:29087":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"17:10394:17721":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:14001:20708":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:14269:21203":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"6:5186:14643":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:11606:3486":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:41073:3911":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:47490:4306":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:9420:198":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:16209:22023":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:15777:21989":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"7:0:1947":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:11319:34422":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:8447:3094":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:10031:17710":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"16:4120:16690":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:663:3809":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"6:6659:15396":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"11:1085:33663":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:12469:911":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:47673:9423":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"5:1555:3137":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"16:8223:17636":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:10843:3290":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:44609:9546":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"1:9351:3703":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:42715:3489":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:11333:173":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"2:3786:9609":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:12335:17923":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:44322:9511":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"6:5051:14633":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"16:7578:17620":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:3496:3996":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:41205:3523":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"6:5241:14649":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:5420:14671":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"17:667:17709":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:12449:434":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:32857:9448":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"17:13193:17985":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"2:6210:3974":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"2:2792:114":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"16:6843:3425":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:44220:9508":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"16:6608:217":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:8727:4140":{"crate_id":1,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"2:45322:162":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"6:497:10647":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:4211:4067":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:14750:21231":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:11958:17810":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:22:842":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:22055:30988":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"18:698:3282":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"5:2816:31522":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:43749:3682":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:6211:4203":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:12816:17744":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"5:4208:3489":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"6:8014:16200":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:11124:34519":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:47196:29078":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"2:5220:9636":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:11309:17734":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:14327:17929":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:3403:4013":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"5:7114:9593":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"16:4267:16745":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"16:7807:34091":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:12762:17938":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"11:1674:33683":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:14374:3845":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:33996:4239":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:41274:29325":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:45014:9550":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:23051:4373":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"5:4298:3974":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"17:14975:21246":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"11:1907:3837":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:10574:9466":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:16341:22032":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:11566:17776":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:10198:3534":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:13781:20698":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:11459:251":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:14083:216":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"15:306:16597":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:23037:3964":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"16:7838:17622":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":31}