{"root":"0:0:1986","crate_version":"1.0.7","includes_private":false,"index":{"2:13187:52886":{"id":"2:13187:52886","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12286:3498"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5627:2375":{"id":"1:5627:2375","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5628:52693","1:5629:52695","1:5630:52694","1:5631:52696"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:27":{"id":"0:27","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[108,0],"end":[125,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["write_u8","write_str","write_i128","write_i16","write_u128","write_u16","write_isize","write_i32","write_usize","write_u32","write_length_prefix","write_i64","write_i8","write_u64"],"trait":{"kind":"resolved_path","inner":{"name":"Hasher","id":"2:10322:141","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:20:1553","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:28:631","0:29:1559"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:5649:2374":{"id":"1:5649:2374","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5650:55000","1:5651:50613","1:5652:50597","1:5653:55001","1:5654:2798","1:5655:2799","1:5656:55002","1:5657:1274","1:5658:55003","1:5659:55004","1:5660:55005","1:5661:55006","1:5662:55007","1:5663:55008","1:5664:55009","1:5665:55010"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:20:1553":{"id":"0:20:1553","crate_id":0,"name":"FnvHasher","span":{"filename":"lib.rs","begin":[89,0],"end":[89,26]},"visibility":"public","docs":"An implementation of the Fowler–Noll–Vo hash function.\n\nSee the [crate documentation](index.html) for more details.","links":{},"attrs":["#[allow(missing_copy_implementations)]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:25","a:2:3177:195-0:20:1553","a:2:9118:2665-0:20:1553","a:2:9119:2664-0:20:1553","a:2:3189:204-0:20:1553","a:2:3218:2246-0:20:1553","b:2:3116-0:20:1553","b:2:3106-0:20:1553","b:2:3906-0:20:1553","b:2:3121-0:20:1553","b:2:3110-0:20:1553","b:2:2783-0:20:1553","b:2:2780-0:20:1553","0:23","0:27"]}},"2:13543:145":{"id":"2:13543:145","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13544:166","2:13545:145","2:13546:744"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13188:56841":{"id":"2:13188:56841","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13208:3887":{"id":"2:13208:3887","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:49373:2421","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4539:2389":{"id":"1:4539:2389","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4540:2733","1:4541:54824","1:4543:54825","1:4544:54826","1:4545:2410","1:4546:54827","1:4547:53007","1:4549:54828","1:4550:2308","1:4551:1560","1:4552:2291","1:4554:2303"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13300:50877":{"id":"2:13300:50877","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3245:2515":{"id":"2:3245:2515","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3247:166","2:3248:249"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3297:2868":{"id":"2:3297:2868","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3298:166","2:3299:930"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:2780-0:20:1553":{"id":"b:2:2780-0:20:1553","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2245","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2774:93","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:20:1553","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2782:2183"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13201:51298":{"id":"2:13201:51298","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:15728:2118"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13207:28810":{"id":"2:13207:28810","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"1:15728:2118"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:49402:3355","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13287:56858":{"id":"2:13287:56858","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:12815:2963","prim@char":"1:15722:2113"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:2964","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:2964","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12840:2967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13240:56845":{"id":"2:13240:56845","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12815:2963","str::split_terminator":"1:15728:2118","str::split":"1:15728:2118","prim@char":"1:15722:2113"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:49187:3345","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:2964","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:2964","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12840:2967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3077:73":{"id":"2:3077:73","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3079:2272"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2245","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"5:6046:50879":{"id":"5:6046:50879","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:15728:2118"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8276:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3325:2876":{"id":"2:3325:2876","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3327:166","2:3328:1206"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3552:3429":{"id":"2:3552:3429","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3554:55979","2:3555:55980","2:3556:51315"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2245","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:5697:2380":{"id":"1:5697:2380","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5698:54964"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10429:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6031:57499":{"id":"5:6031:57499","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8276:200"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8276:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12754:2604":{"id":"2:12754:2604","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12755:121","2:12756:54972"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2799:100":{"id":"2:2799:100","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2800:391","2:2801:393"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2834:119":{"id":"2:2834:119","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2829:168","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13264:56850":{"id":"2:13264:56850","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"str::match_indices":"1:15728:2118","self::pattern":"2:12815:2963","`DoubleEndedIterator`":"2:8233:115","prim@char":"1:15722:2113"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:49287:3349","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:2964","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:2964","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12840:2967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2565:122":{"id":"1:2565:122","crate_id":1,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2566:52835","1:2568:2096","1:2569:55096","1:2570:55097"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10098:105","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10105:114","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3012:2924":{"id":"2:3012:2924","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:3011:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3125:1383":{"id":"2:3125:1383","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47288:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3090:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12825:2964":{"id":"2:12825:2964","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12827:2966","2:12828:56549","2:12829:56550","2:12830:56551","2:12831:56553","2:12832:56552","2:12833:56554"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:29:1559":{"id":"0:29:1559","crate_id":0,"name":"write","span":{"filename":"lib.rs","begin":[115,4],"end":[124,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["bytes",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:22628:2503":{"id":"2:22628:2503","crate_id":2,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22618:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8152:3166":{"id":"2:8152:3166","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8154:2332"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:26:1557":{"id":"0:26:1557","crate_id":0,"name":"with_key","span":{"filename":"lib.rs","begin":[103,4],"end":[105,5]},"visibility":"public","docs":"Create an FNV hasher starting with a state corresponding\nto the hash `key`.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["key",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:20:1553","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3621:3430":{"id":"2:3621:3430","crate_id":2,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2245","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RangeBounds","id":"2:3552:3429","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13305:56862":{"id":"2:13305:56862","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:15722:2113"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:49436:3358","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3112:660":{"id":"2:3112:660","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3638:132":{"id":"2:3638:132","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3640:666"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3633:208","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:9118:2665-0:20:1553":{"id":"a:2:9118:2665-0:20:1553","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9118:2665","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:20:1553","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3304:2599":{"id":"2:3304:2599","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3306:166","2:3307:334"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13179:770":{"id":"2:13179:770","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:15722:2113"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13214:50991":{"id":"2:13214:50991","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"2:12815:2963","prim@char":"1:15722:2113"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:2964","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10115:174":{"id":"2:10115:174","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10116:639"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10107:2931":{"id":"2:10107:2931","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10108:639"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10048:2390":{"id":"2:10048:2390","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10049:1497","2:10050:55827","2:10052:50714"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:34:1570":{"id":"0:34:1570","crate_id":0,"name":"FnvHashSet","span":{"filename":"lib.rs","begin":[136,0],"end":[136,52]},"visibility":"public","docs":"A `HashSet` using a default FNV hasher.","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"HashSet","id":"1:2027:140","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"resolved_path","inner":{"name":"FnvBuildHasher","id":"0:30:1564","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"2:13274:56855":{"id":"2:13274:56855","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13528:133":{"id":"2:13528:133","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13529:166","2:13530:991"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3121-0:20:1553":{"id":"b:2:3121-0:20:1553","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3080:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3090:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:20:1553","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3124:122","2:3125:1383"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3218:2246":{"id":"2:3218:2246","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5643:2377":{"id":"1:5643:2377","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5644:50597","1:5645:52855"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8666:3082":{"id":"2:8666:3082","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Step","id":"2:7713:3083","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3120:1384":{"id":"2:3120:1384","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47288:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3090:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3083:130":{"id":"2:3083:130","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3085:660"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3186:201":{"id":"2:3186:201","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3182:2245":{"id":"2:3182:2245","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13203:3375":{"id":"2:13203:3375","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:15722:2113"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49089:3339","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13302:56861":{"id":"2:13302:56861","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:15722:2113"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:49418:3357","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13181:56838":{"id":"2:13181:56838","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3280:2518":{"id":"2:3280:2518","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3282:1326"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13284:51316":{"id":"2:13284:51316","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:15722:2113","self::pattern":"2:12815:2963"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47161:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:2964","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:2964","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12840:2967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10105:114":{"id":"2:10105:114","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10106:639"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:12834:2966":{"id":"2:12834:2966","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:12836:2985","2:12837:899","2:12838:56701","2:12839:56702"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9118:2665":{"id":"2:9118:2665","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:772:206":{"id":"5:772:206","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:773:2340","5:774:2341","5:775:2342"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2829:168":{"id":"2:2829:168","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2831:584","2:2832:884"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2245","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:8185:131":{"id":"2:8185:131","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8187:663"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6769:2358":{"id":"1:6769:2358","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6770:54596"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3155:110":{"id":"2:3155:110","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3156:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3309:2600":{"id":"2:3309:2600","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3311:166","2:3312:336"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2777:3192":{"id":"2:2777:3192","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2779:50591"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2245","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2774:93","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13206:28820":{"id":"2:13206:28820","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"1:15728:2118"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:49393:3354","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10113:2934":{"id":"2:10113:2934","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10114:639"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13299:50880":{"id":"2:13299:50880","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13246:51313":{"id":"2:13246:51313","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"self::pattern":"2:12815:2963","str::splitn":"1:15728:2118","prim@char":"1:15722:2113"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:49241:3318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:2964","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:2964","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12840:2967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3266:3009":{"id":"2:3266:3009","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3268:166","2:3269:1080"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13234:51309":{"id":"2:13234:51309","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12815:2963","str::split":"1:15728:2118","prim@char":"1:15722:2113","`DoubleEndedIterator`":"2:8233:115"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:49137:3314","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:2964","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:2964","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12840:2967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6028:57498":{"id":"5:6028:57498","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8276:200"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8276:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:2964","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:30:1564":{"id":"0:30:1564","crate_id":0,"name":"FnvBuildHasher","span":{"filename":"lib.rs","begin":[128,0],"end":[128,56]},"visibility":"public","docs":"A builder for default FNV hashers.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"BuildHasherDefault","id":"2:10362:1548","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:20:1553","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generics":{"params":[],"where_predicates":[]}}},"1:4614:2413":{"id":"1:4614:2413","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4615:50622","1:4616:36718","1:4617:50624","1:4618:50623"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3908:1397":{"id":"2:3908:1397","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:45706:2493","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13269:56852":{"id":"2:13269:56852","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5683:2378":{"id":"1:5683:2378","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5684:52929","1:5685:52930","1:5686:52931","1:5687:52932"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2774:93":{"id":"2:2774:93","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2776:2183"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2245","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3420:2247":{"id":"2:3420:2247","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3421:558"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5705:2382":{"id":"1:5705:2382","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5706:50597"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8662:3081":{"id":"2:8662:3081","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8384:152","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3335:2881":{"id":"2:3335:2881","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3337:337"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4621:2395":{"id":"1:4621:2395","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4622:52555","1:4623:52556","1:4624:52558","1:4626:2415","1:4627:52557","1:4629:51306","1:4630:3887"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Read","id":"1:4539:2389","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6771:2359":{"id":"1:6771:2359","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6772:55212"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13193:51275":{"id":"2:13193:51275","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:47161:161"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47161:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10716:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10716:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3292:3020":{"id":"2:3292:3020","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3294:1081"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5779:3547":{"id":"5:5779:3547","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5781:166","5:5782:29857"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3080:144":{"id":"2:3080:144","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3082:2273"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3904:68":{"id":"2:3904:68","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3905:1397"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"2:13301:50876":{"id":"2:13301:50876","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13204:2992":{"id":"2:13204:2992","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:15722:2113"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49095:3340","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13220:2319":{"id":"2:13220:2319","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"self::pattern":"2:12815:2963","`None`":"2:47161:161","prim@char":"1:15722:2113"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47161:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:2964","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:9209:2500":{"id":"1:9209:2500","crate_id":1,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9210:55194","1:9211:55195","1:9212:55196","1:9213:55197","1:9214:3386","1:9215:36238","1:9216:55193"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10429:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10357:2223":{"id":"2:10357:2223","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10358:141","2:10359:30074","2:10360:54645"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10098:105":{"id":"2:10098:105","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10099:639"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13191:51274":{"id":"2:13191:51274","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:47161:161"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47161:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10716:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10716:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3423:125":{"id":"2:3423:125","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3425:359"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3426:126","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5693:2379":{"id":"1:5693:2379","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5694:50613"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13190:51278":{"id":"2:13190:51278","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:15739:2127"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3633:208":{"id":"2:3633:208","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3634:166","2:3635:3033","2:3636:665","2:3637:352"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromResidual","id":"2:3638:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3633:208","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:1075:2348":{"id":"1:1075:2348","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:1076:2340","1:1077:3543","1:1078:50879","1:1079:50878","1:1080:50880","1:1081:50877","1:1082:50876"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8148:3164":{"id":"2:8148:3164","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8150:2331"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:12262:3536":{"id":"2:12262:3536","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12263:2284","2:12264:56727"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:7713:3083":{"id":"2:7713:3083","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7714:55717","2:7715:55718","2:7716:55715","2:7717:55713","2:7718:55719","2:7719:55716","2:7720:55714"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2799:100","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2875:169","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13224:2279":{"id":"2:13224:2279","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"prim@char":"1:15722:2113","self::pattern":"2:12815:2963","`None`":"2:47161:161"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47161:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:2964","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:2964","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12840:2967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3074:74":{"id":"2:3074:74","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3076:288"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2245","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:10117:2935":{"id":"2:10117:2935","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10118:639"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13231:28677":{"id":"2:13231:28677","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"self::pattern":"2:12815:2963","prim@char":"1:15722:2113"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:12607:3311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:2964","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3189:204":{"id":"2:3189:204","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3679:2921":{"id":"2:3679:2921","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2245","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13258:56848":{"id":"2:13258:56848","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12815:2963","str::matches":"1:15728:2118","`DoubleEndedIterator`":"2:8233:115","prim@char":"1:15722:2113"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:49341:3352","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:2964","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:2964","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12840:2967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4596:2390":{"id":"1:4596:2390","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4597:1559","1:4598:50710","1:4600:50711","1:4601:3809","1:4602:50712","1:4603:50713","1:4604:50714","1:4613:2308"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13304:2350":{"id":"2:13304:2350","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:15722:2113"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:49427:2351","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3343:2867":{"id":"2:3343:2867","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3345:1204"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3177:195-0:20:1553":{"id":"a:2:3177:195-0:20:1553","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3177:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:20:1553","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:6861:2355":{"id":"1:6861:2355","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6862:54696"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13195:51276":{"id":"2:13195:51276","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10716:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10716:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:4899:2463":{"id":"1:4899:2463","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4900:2525","1:4901:54990"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:31:1566":{"id":"0:31:1566","crate_id":0,"name":"FnvHashMap","span":{"filename":"lib.rs","begin":[132,0],"end":[132,58]},"visibility":"public","docs":"A `HashMap` using a default FNV hasher.","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"HashMap","id":"1:1302:138","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"resolved_path","inner":{"name":"FnvBuildHasher","id":"0:30:1564","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"2:13205:1560":{"id":"2:13205:1560","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49105:2418","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6043:57500":{"id":"5:6043:57500","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8276:200"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8276:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13249:56846":{"id":"2:13249:56846","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47161:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:2964","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13267:56851":{"id":"2:13267:56851","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2865:162":{"id":"2:2865:162","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2866:397","2:2867:2269","2:2868:2270","2:2869:2271"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2834:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2875:169","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:25":{"id":"0:25","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[99,0],"end":[106,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:20:1553","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:26:1557"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:12840:2967":{"id":"2:12840:2967","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:12842:2274","2:12843:55887","2:12844:55888"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Searcher","id":"2:12834:2966","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3319:2873":{"id":"2:3319:2873","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3321:166","2:3322:1203"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6698:2352":{"id":"1:6698:2352","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6699:53025"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10429:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6023":{"id":"5:6023","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5843:1310","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6024:57497","5:6025:2422","5:6028:57498","5:6031:57499","5:6043:57500","5:6044:57501","5:6045:2444","5:6046:50879","5:6047:50878"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13252:56847":{"id":"2:13252:56847","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47161:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:2964","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:2964","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12840:2967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5561:2480":{"id":"1:5561:2480","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5562:4310","1:5563:52886"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10429:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3260:3006":{"id":"2:3260:3006","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3262:166","2:3263:538"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23471:3079":{"id":"2:23471:3079","crate_id":2,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:23472:3092"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23467:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3187:102","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:2:3106-0:20:1553":{"id":"b:2:3106-0:20:1553","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3083:130","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3080:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:20:1553","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3109:2273"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:9119:2664-0:20:1553":{"id":"a:2:9119:2664-0:20:1553","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9119:2664","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:20:1553","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:10109:2932":{"id":"2:10109:2932","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10110:639"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3284:3016":{"id":"2:3284:3016","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3286:870"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3272:3012":{"id":"2:3272:3012","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3273:166","2:3274:890"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8384:152":{"id":"2:8384:152","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8385:2284","2:8386:899","2:8387:2286","2:8388:477","2:8390:2287","2:8393:2288","2:8394:2289","2:8395:2290","2:8396:2291","2:8398:2292","2:8400:2293","2:8401:2294","2:8403:818","2:8406:2295","2:8413:2296","2:8415:2297","2:8418:2298","2:8419:2299","2:8420:2300","2:8422:2301","2:8424:2302","2:8427:1278","2:8428:2303","2:8429:2304","2:8433:1576","2:8436:2305","2:8437:2306","2:8438:2307","2:8440:2308","2:8441:1578","2:8443:2309","2:8446:2310","2:8448:2311","2:8458:2312","2:8473:2313","2:8475:2314","2:8479:2315","2:8488:2316","2:8491:2317","2:8493:2318","2:8496:260","2:8503:277","2:8510:2319","2:8517:2320","2:8526:2321","2:8536:992","2:8543:2322","2:8550:2269","2:8551:2270","2:8552:2323","2:8564:2324","2:8571:2325","2:8583:2326","2:8590:2327","2:8591:2328","2:8596:2329","2:8599:1577","2:8602:2330","2:8603:2331","2:8605:2332","2:8607:397","2:8610:2333","2:8613:975","2:8616:2334","2:8619:584","2:8622:2335","2:8625:884","2:8627:803","2:8629:769","2:8631:692","2:8633:675","2:8635:2336","2:8636:2337","2:8644:2338"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3481:2551":{"id":"2:3481:2551","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3483:166","2:3484:730"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2245","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"a:2:3218:2246-0:20:1553":{"id":"a:2:3218:2246-0:20:1553","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3218:2246","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:20:1553","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2783-0:20:1553":{"id":"b:2:2783-0:20:1553","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2245","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2777:3192","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:20:1553","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2785:50591"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3429:127":{"id":"2:3429:127","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3431:166","2:3432:361"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3116-0:20:1553":{"id":"b:2:3116-0:20:1553","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3090:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3086:212","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:20:1553","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3119:122","2:3120:1384"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:0:1986":{"id":"0:0:1986","crate_id":0,"name":"fnv","span":{"filename":"lib.rs","begin":[1,0],"end":[367,1]},"visibility":"public","docs":"An implementation of the [Fowler–Noll–Vo hash function][chongo].\n\n## About\n\nThe FNV hash function is a custom `Hasher` implementation that is more\nefficient for smaller hash keys.\n\n[The Rust FAQ states that][faq] while the default `Hasher` implementation,\nSipHash, is good in many cases, it is notably slower than other algorithms\nwith short keys, such as when you have a map of integers to other values.\nIn cases like these, [FNV is demonstrably faster][graphs].\n\nIts disadvantages are that it performs badly on larger inputs, and\nprovides no protection against collision attacks, where a malicious user\ncan craft specific keys designed to slow a hasher down. Thus, it is\nimportant to profile your program to ensure that you are using small hash\nkeys, and be certain that your program could not be exposed to malicious\ninputs (including being a networked server).\n\nThe Rust compiler itself uses FNV, as it is not worried about\ndenial-of-service attacks, and can assume that its inputs are going to be\nsmall—a perfect use case for FNV.\n\n\n## Using FNV in a `HashMap`\n\nThe `FnvHashMap` type alias is the easiest way to use the standard library’s\n`HashMap` with FNV.\n\n```rust\nuse fnv::FnvHashMap;\n\nlet mut map = FnvHashMap::default();\nmap.insert(1, \"one\");\nmap.insert(2, \"two\");\n\nmap = FnvHashMap::with_capacity_and_hasher(10, Default::default());\nmap.insert(1, \"one\");\nmap.insert(2, \"two\");\n```\n\nNote, the standard library’s `HashMap::new` and `HashMap::with_capacity`\nare only implemented for the `RandomState` hasher, so using `Default` to\nget the hasher is the next best option.\n\n## Using FNV in a `HashSet`\n\nSimilarly, `FnvHashSet` is a type alias for the standard library’s `HashSet`\nwith FNV.\n\n```rust\nuse fnv::FnvHashSet;\n\nlet mut set = FnvHashSet::default();\nset.insert(1);\nset.insert(2);\n\nset = FnvHashSet::with_capacity_and_hasher(10, Default::default());\nset.insert(1);\nset.insert(2);\n```\n\n[chongo]: http://www.isthe.com/chongo/tech/comp/fnv/index.html\n[faq]: https://www.rust-lang.org/en-US/faq.html#why-are-rusts-hashmaps-slow\n[graphs]: https://cglab.ca/~abeinges/blah/hash-rs/","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:20:1553","0:30:1564","0:31:1566","0:34:1570"]}},"1:6593:2374":{"id":"1:6593:2374","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6594:54768","1:6595:52856","1:6596:52857","1:6597:52859","1:6598:52858","1:6599:52860","1:6600:52861","1:6601:52863","1:6602:52864","1:6603:52867","1:6604:52868","1:6605:52869","1:6606:52870","1:6607:52871","1:6608:52872","1:6609:52865","1:6610:52866"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13261:56849":{"id":"2:13261:56849","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"str::rmatch_indices":"1:15728:2118","self::pattern":"2:12815:2963","`DoubleEndedIterator`":"2:8233:115","prim@char":"1:15722:2113"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:49269:3348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:2964","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13927:136":{"id":"2:13927:136","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13928:261","2:13929:500","2:13930:264","2:13931:1057"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3255:3004":{"id":"2:3255:3004","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3257:166","2:3258:869"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10111:2933":{"id":"2:10111:2933","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10112:639"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3119:122":{"id":"2:3119:122","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3090:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"2:22777:12762":{"id":"2:22777:12762","crate_id":2,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:22778:55712","2:22779:56762","2:22780:56763"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22770:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3276:2516":{"id":"2:3276:2516","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3278:250"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13275:56856":{"id":"2:13275:56856","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:15722:2113","self::pattern":"2:12815:2963"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:2964","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:2964","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedSearcher","id":"2:12845:2962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3426:126":{"id":"2:3426:126","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3428:360"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3429:127","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10312:137":{"id":"2:10312:137","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10313:694","2:10315:52449"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13237:56844":{"id":"2:13237:56844","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"`DoubleEndedIterator`":"2:8233:115","str::rsplit_terminator":"1:15728:2118","self::pattern":"2:12815:2963","prim@char":"1:15722:2113","str::split":"1:15728:2118"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:49169:3344","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:2964","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2785:50591":{"id":"2:2785:50591","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6025:2422":{"id":"5:6025:2422","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8276:200"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8276:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:2964","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6767:2356":{"id":"1:6767:2356","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6768:52767"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10322:141":{"id":"2:10322:141","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10323:631","2:10324:1559","2:10325:2256","2:10326:2257","2:10327:2258","2:10328:2259","2:10329:2260","2:10330:2261","2:10331:2262","2:10332:2263","2:10333:2264","2:10334:2265","2:10335:2266","2:10336:2267","2:10337:2268","2:10338:1497"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13273:56854":{"id":"2:13273:56854","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13178":{"id":"2:13178","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:12275:1310","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:13179:770","2:13180:2280","2:13181:56838","2:13182:56839","2:13184:56840","2:13187:52886","2:13188:56841","2:13189:287","2:13190:51278","2:13191:51274","2:13193:51275","2:13195:51276","2:13197:51277","2:13199:2587","2:13200:56842","2:13201:51298","2:13202:51299","2:13203:3375","2:13204:2992","2:13205:1560","2:13206:28820","2:13207:28810","2:13208:3887","2:13209:56843","2:13210:28805","2:13211:51315","2:13214:50991","2:13217:50993","2:13220:2319","2:13224:2279","2:13228:51306","2:13231:28677","2:13234:51309","2:13237:56844","2:13240:56845","2:13243:51311","2:13246:51313","2:13249:56846","2:13252:56847","2:13255:2197","2:13258:56848","2:13261:56849","2:13264:56850","2:13267:56851","2:13269:56852","2:13271:56853","2:13273:56854","2:13274:56855","2:13275:56856","2:13278:56857","2:13281:11300","2:13284:51316","2:13287:56858","2:13290:56859","2:13293:56860","2:13296:3201","2:13298:3543","2:13299:50880","2:13300:50877","2:13301:50876","2:13302:56861","2:13304:2350","2:13305:56862"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:28:631":{"id":"0:28:631","crate_id":0,"name":"finish","span":{"filename":"lib.rs","begin":[110,4],"end":[112,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3906-0:20:1553":{"id":"b:2:3906-0:20:1553","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2245","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3904:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:20:1553","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3908:1397"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:6044:57501":{"id":"5:6044:57501","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`String`":"5:8276:200","`Box<str>`":"5:421:2250"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:2250","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8035:3551","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8276:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13255:2197":{"id":"2:13255:2197","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12815:2963","prim@char":"1:15722:2113","str::matches":"1:15728:2118","`DoubleEndedIterator`":"2:8233:115"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:49323:3351","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:2964","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6045:2444":{"id":"5:6045:2444","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8276:200"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8276:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13217:50993":{"id":"2:13217:50993","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"2:12815:2963","prim@char":"1:15722:2113"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:2964","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:2964","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12840:2967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13281:11300":{"id":"2:13281:11300","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:15722:2113","self::pattern":"2:12815:2963"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47161:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:2964","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3409:2423":{"id":"2:3409:2423","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3410:525"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"2:3396:111","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3250:2517":{"id":"2:3250:2517","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3252:166","2:3253:1325"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13296:3201":{"id":"2:13296:3201","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"2:12754:2604","FromStr::Err":"2:12754:2604"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47288:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12754:2604","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12754:2604","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3109:2273":{"id":"2:3109:2273","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:3083:130"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13271:56853":{"id":"2:13271:56853","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3110-0:20:1553":{"id":"b:2:3110-0:20:1553","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3083:130","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:20:1553","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3112:660"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13278:56857":{"id":"2:13278:56857","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:12815:2963","prim@char":"1:15722:2113"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:2964","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13197:51277":{"id":"2:13197:51277","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10716:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10716:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:3185:202":{"id":"2:3185:202","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13298:3543":{"id":"2:13298:3543","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5635:2376":{"id":"1:5635:2376","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5636:50597","1:5637:54471","1:5638:54472"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6351:207":{"id":"5:6351:207","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6352:2343"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13209:56843":{"id":"2:13209:56843","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:49383:3353","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6024:57497":{"id":"5:6024:57497","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:2250","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8035:3551","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:2250","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8035:3551","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3187:102":{"id":"2:3187:102","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2799:100","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3314:2601":{"id":"2:3314:2601","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3316:166","2:3317:339"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6047:50878":{"id":"5:6047:50878","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:15728:2118"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8276:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13189:287":{"id":"2:13189:287","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:15728:2118","`u8`":"1:15739:2127"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:9119:2664":{"id":"2:9119:2664","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2875:169":{"id":"2:2875:169","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2877:975","2:2878:803","2:2879:769","2:2880:692","2:2881:675"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2245","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2829:168","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6367:2393":{"id":"1:6367:2393","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6368:54622","1:6369:36866","1:6370:54623","1:6371:54624","1:6372:54625","1:6373:54626"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10429:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8659:2550":{"id":"2:8659:2550","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8384:152","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"a:2:3189:204-0:20:1553":{"id":"a:2:3189:204-0:20:1553","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3189:204","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:20:1553","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:13211:51315":{"id":"2:13211:51315","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:15722:2113","self::pattern":"2:12815:2963"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:2964","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13199:2587":{"id":"2:13199:2587","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"crate::ops::Index":"2:3481:2551","`str`":"1:15728:2118","str::slice_mut_unchecked":"1:15728:2118"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:3339:2883":{"id":"2:3339:2883","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3341:340"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3288:3018":{"id":"2:3288:3018","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3290:539"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3485:3084":{"id":"2:3485:3084","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3487:731"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2245","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"2:3481:2551","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5555:2478":{"id":"1:5555:2478","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5556:52955","1:5557:3638"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10429:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8258:2248":{"id":"2:8258:2248","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8259:770","2:8260:2280"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8384:152","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3124:122":{"id":"2:3124:122","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:38483:2490","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generics":{"params":[],"where_predicates":[]}}},"2:13180:2280":{"id":"2:13180:2280","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:23":{"id":"0:23","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[91,0],"end":[97,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"2:3155:110","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:20:1553","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:24:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:4682:3085":{"id":"2:4682:3085","crate_id":2,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4683:2284","2:4684:55460","2:4685:2286"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13228:51306":{"id":"2:13228:51306","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12815:2963","str::rsplit":"1:15728:2118","prim@char":"1:15722:2113","`DoubleEndedIterator`":"2:8233:115","str::split_whitespace":"1:15728:2118"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49119:2420","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:2964","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13182:56839":{"id":"2:13182:56839","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3463:3190":{"id":"2:3463:3190","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3465:221","2:3466:191","2:3467:56592"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:7685:2651":{"id":"1:7685:2651","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7686:55093"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13184:56840":{"id":"2:13184:56840","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:15728:2118"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3396:111":{"id":"2:3396:111","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3397:205","2:3398:523"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13243:51311":{"id":"2:13243:51311","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:15722:2113","str::rsplitn":"1:15728:2118","self::pattern":"2:12815:2963"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:49223:3317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:2964","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3716:2922":{"id":"2:3716:2922","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13293:56860":{"id":"2:13293:56860","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:12815:2963","prim@char":"1:15722:2113"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:2964","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:2964","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12840:2967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3090:211":{"id":"2:3090:211","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3092:122","2:3093:1383"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:12845:2962":{"id":"2:12845:2962","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12840:2967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:2782:2183":{"id":"2:2782:2183","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13290:56859":{"id":"2:13290:56859","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:15722:2113","self::pattern":"2:12815:2963"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:2964","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13210:28805":{"id":"2:13210:28805","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:49411:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:24:59":{"id":"0:24:59","crate_id":0,"name":"default","span":{"filename":"lib.rs","begin":[94,4],"end":[96,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"FnvHasher","id":"0:20:1553","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8233:115":{"id":"2:8233:115","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8234:2274","2:8235:2275","2:8236:2276","2:8237:2277","2:8241:2278","2:8244:2279"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8384:152","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3331:2879":{"id":"2:3331:2879","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3333:335"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6465:2483":{"id":"1:6465:2483","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6466:54817","1:6467:54818"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10716:198":{"id":"2:10716:198","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:10718:166","2:10719:51274","2:10720:51275","2:10721:51276","2:10722:51277","2:10723:730","2:10724:731"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2245","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:10707:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3644:3033":{"id":"2:3644:3033","crate_id":2,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3646:53676"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8189:146":{"id":"2:8189:146","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8190:2284","2:8191:2285","2:8192:745"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13202:51299":{"id":"2:13202:51299","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:15728:2118"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:22822:3093":{"id":"2:22822:3093","crate_id":2,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdElement","id":"2:23471:3079","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22813:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3177:195":{"id":"2:3177:195","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3348:2887":{"id":"2:3348:2887","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3350:1207"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13999:2510":{"id":"2:13999:2510","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14000:55138","2:14001:55139","2:14002:55140","2:14003:55141","2:14004:55142","2:14005:55143","2:14006:2308"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3086:212":{"id":"2:3086:212","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3088:122","2:3089:1384"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6345:2352":{"id":"1:6345:2352","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6346:2798","1:6347:2799","1:6348:53024","1:6349:55275","1:6351:55279","1:6353:55276","1:6354:55277","1:6356:55278"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10429:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8198:2249":{"id":"2:8198:2249","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8200:2281","2:8202:2282","2:8203:2283"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6695:2354":{"id":"1:6695:2354","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6696:50599","1:6697:52948"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10429:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:5775:3545":{"id":"5:5775:3545","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5777:166","5:5778:414"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2245","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:10119:2925":{"id":"2:10119:2925","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10120:639"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13200:56842":{"id":"2:13200:56842","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:15728:2118","crate::ops::IndexMut":"2:3485:3084","str::slice_unchecked":"1:15728:2118"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"17:12521:48730":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:9368:4601":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:10516:4292":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"16:3522:42221":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"9:0:2085":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"6:5400:40642":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:12568:48733":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:7949:56649":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"5:7549:3584":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:46178:3437":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:23471:3079":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:47925:2931":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:4023:39986":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:12198:5203":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"16:6807:4086":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"6:4459:40033":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:11678:44579":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"11:46:59016":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"17:10558:44058":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"16:4417:42735":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:3420:2247":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:46003:3243":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:46018:3524":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:11452:2619":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"16:6126:4068":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"15:230:3858":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:13760:49892":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:23372:2502":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:11196:2465":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:50019:175":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:22400:56340":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:11059:2473":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"11:0:2087":{"crate_id":11,"path":["adler"],"kind":"module"},"1:14667:4550":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:13205:49381":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"18:636:59899":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:2188:2907":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:8574:2805":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"5:4276:2526":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"5:2758:3671":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"12:1118:2540":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:13739:2645":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"16:7333:4043":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"18:0:2093":{"crate_id":18,"path":["memchr"],"kind":"module"},"5:6612:3620":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"6:6812:41576":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:11628:44575":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:49019:3330":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"6:4358:40020":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:12234:48710":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:49241:3318":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"16:4477:42745":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:9065:43839":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"6:5998:41044":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:13041:49274":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:9943:59878":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:11981:2571":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:3343:2867":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"16:6964:3440":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"6:6858:40163":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:7911:2719":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"17:2484:43947":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:10814:4325":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"14:244:42142":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:4480:2447":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"1:3953:190":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"18:820:4388":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:52786:3112":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:13272:49427":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"6:5292:40635":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"16:3714:42232":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:10801:44030":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:45535:181":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:10656:44044":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:9119:2664":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:49859:3365":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"16:6718:4232":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:8358:187":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:3638:132":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:22770:2362":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"17:11981:44065":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:46236:9182":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"16:5505:3918":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:1149:7554":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"16:2843:4195":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:3205:2892":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:49436:3358":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:696:2686":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:2582:53013":{"crate_id":1,"path":["std","error","from","StringError"],"kind":"struct"},"1:11056:2472":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"17:13221:49382":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:15722:2113":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"16:5407:3910":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"16:7856:4103":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"14:216:42149":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:9404:4602":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:46664:2447":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:11604:44539":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:47424:87":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"16:5029:42897":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:10938:44141":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:52596:3108":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"6:4325:40016":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:14815:2511":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"5:8059:2529":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:10808:2433":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:12262:3536":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"5:1666:179":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:13564:49875":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"5:2311:3668":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:47332:2525":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:5889:2847":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:8173:2719":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"12:1235:3839":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:48243:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"16:6424:4077":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:12028:48579":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:12385:48721":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"5:8035:3551":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:5281:2776":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"5:7382:4494":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:2166:2530":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"2:22421:56339":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"6:4494:40036":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"6:4341:40018":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:1415:2525":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:48997:3328":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:13620:49886":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:55696:3075":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"12:429:3841":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"16:5753:3932":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:3250:2517":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:12286:3498":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:13564:2654":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"1:11148:2778":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:11178:3317":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"5:7753:4506":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:13609:49880":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"6:5469:40648":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:49898:3454":{"crate_id":2,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"2:6309:3052":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:46297:3035":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:53056:18304":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:5563:40677":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:53037:3100":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:14332:2387":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"5:1443:2541":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"6:5185:40626":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:1676:37889":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"6:5282:40634":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:13346:8574":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"1:14024:2437":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"1:10655:2482":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"6:3945:39977":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:1497:2533":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:6603:52867":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:50910:55664":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"16:4350:42718":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:48295:72":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"1:15743:2131":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:49393:3354":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:24937:3230":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:12456:48725":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:9759:43845":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:2027:140":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:47918:2932":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"5:3348:2595":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:3077:73":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"17:13963:49972":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"16:4506:42749":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"16:7360:179":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:3288:3018":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:50973:3105":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"5:8276:200":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:2799:100":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"16:3939:42382":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"0:0:1986":{"crate_id":0,"path":["fnv"],"kind":"module"},"2:24431:3404":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:2202:2910":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:46316:3037":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"5:8111:2285":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:2138:1028":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"5:3809:4494":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"16:6731:4233":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"6:4095:39995":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"16:2816:4214":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"5:6628:3631":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:49418:3357":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:12051:48636":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"16:6269:4074":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:1132:2494":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:12247:48711":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"6:569:36994":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"12:1180:3837":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"6:4013:39985":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:10571:44059":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:5990:2786":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:8724:2667":{"crate_id":2,"path":["core","lazy","OnceCell"],"kind":"struct"},"16:3287:4206":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:13365:50858":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"1:14021:2441":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"16:5790:3934":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:45741:2905":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"2:48182:128":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"2:32040:55600":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"12:1159:3836":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"16:7042:4244":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"16:5314:4594":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"16:6110:4062":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"5:781:104":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:7511:2639":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:50001:186":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:8659:2550":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:13200:2791":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"2:51558:55680":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:10403:4289":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"16:3429:3948":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:3233:2736":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"17:12307:48715":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"16:5717:3928":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:3908:2638":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"9:996:3771":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:45987:3241":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"6:4262:40009":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"12:937:2535":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"6:4501:40037":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:11030:122":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:12195:48707":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:4267:2761":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"18:837:2966":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"6:6176:41051":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"12:877:2530":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"1:11159:2780":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:47262:3442":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"14:11:42140":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:3552:3429":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"16:7549:4032":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:12891:2970":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:12041:2814":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:4173:2449":{"crate_id":1,"path":["std","io","readbuf","ReadBuf"],"kind":"struct"},"17:13180:49378":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"16:3320:4259":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:13865:49938":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"12:2331:2235":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"16:7279:4245":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:14322:50601":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"5:983:3604":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:2318:3086":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:10923:2448":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1:11203:2842":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:51203:3133":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:2177:2596":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:10140:4290":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"16:6554:4080":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:2171:2595":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"6:4364:40021":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"16:6021:4194":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"5:3852:2432":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"6:3881:39973":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"6:6185:41052":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:6085:41045":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:2108:558":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"5:1000:2525":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:10451:2696":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:48920:3322":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"12:2315:59029":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"12:976:2538":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"16:3549:42222":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"6:4347:40019":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:11247:2353":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:15079:2776":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"16:7303:4099":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"12:2025:2595":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:10111:2933":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:10827:4326":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:3650:3032":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:4970:2944":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"17:9280:4595":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"9:686:3703":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"1:15727:2117":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"17:13532:49871":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:3187:102":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"9:900:41847":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:48279:2930":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"16:4230:42648":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:13942:49971":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:1651:2542":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:51401:3098":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:46348:3040":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:15201:52877":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"17:9896:59870":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:2456:5203":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"17:12537:48731":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:11798:2644":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"15:0:2090":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:23909:35911":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"5:772:206":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:46377:3056":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:10983:2418":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"17:11199:4610":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:49728:36201":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"12:747:2525":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"16:4304:42697":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"16:7226:4096":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:3423:125":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:12036:2683":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:4307:2440":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:1619:2539":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:11369:2616":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"16:6644:4083":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:10105:114":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"12:866:2529":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"12:925:2531":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"6:6221:41055":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:2774:93":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:0:2092":{"crate_id":17,"path":["object"],"kind":"module"},"2:4844:3259":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:9120:2701":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:9592:123":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"2:10107:2931":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"16:5561:3921":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:45459:3022":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"5:1458:2540":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:11997:2572":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:10113:2934":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"5:8270:57793":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"1:5561:2480":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:52095:3096":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"12:774:2285":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:10944:2414":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"17:12494:48728":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:5876:2846":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:5284:2777":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"6:5274:40633":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:15725:2115":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:49694:2979":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:11208:2845":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"18:644:4398":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"16:4671:42814":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:46646:2666":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:10149:43847":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"16:5996:4066":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"5:8299:3553":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:22618:2362":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:2155:2525":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"6:616:37000":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:10081:4262":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:47760:88":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"6:605:36998":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:7182:53004":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:9034:43838":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"5:5478:3620":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:11847:44775":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"6:157:36678":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"6:4164:40002":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:49038:3332":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:13780:49928":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:9769:59874":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:49402:3355":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:10098:105":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"9:1056:3765":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"6:3892:39974":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:10502:7552":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:8929:43836":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:15688:4676":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:9597:2771":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:4916:2905":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"6:6106:41048":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:49847:3369":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"16:2912:4197":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:51035:3094":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"6:6124:41049":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"6:1540:37876":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:11220:3320":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"14:47:42140":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"16:7406:4027":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:3195:2372":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:11015:44143":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"16:3195:4202":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:15746:2134":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:11434:44253":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:11392:2617":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:8372:2567":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:48492:2616":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:9729:59889":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"14:250:42148":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:5432:756":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:3260:3006":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:4906:3264":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:4282:2285":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:4305:2439":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"18:620:59911":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"5:8105:2285":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:13045:36200":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"6:6614:36946":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:4008:44033":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"6:4046:39989":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:11337:4274":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"5:2199:3614":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"18:169:50335":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"6:5130:40582":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:537:36991":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:4344:2441":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:22628:2503":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:2458:8581":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:53252:18316":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:10052:43902":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:9085:2662":{"crate_id":1,"path":["std","lazy","SyncOnceCell"],"kind":"struct"},"16:3218:4203":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:46109:3523":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"6:5414:40644":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"6:1596:37882":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"5:5775:3545":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:1501:2534":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:11482:44255":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"11:54:3826":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"1:13812:2644":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"18:829:4389":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"5:8067:3606":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"6:4060:39991":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:8754:2822":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"16:6464:4036":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:12840:2967":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:13578:56700":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:2211:2911":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:45597:183":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:11822:44761":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:22777:12762":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"17:12287:48714":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"6:1658:37887":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:11539:4611":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"18:136:50333":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:51378:3095":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:5555:2478":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:31853:3468":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:12685:48802":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:48948:3325":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:15744:2132":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"5:6415:2529":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"15:269:3863":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:2723:2488":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"16:3800:42268":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"12:0:2088":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"2:2429:3087":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:11111:52766":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"2:50804:3104":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"16:6999:4087":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:13788:49929":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:15704:52759":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"16:7378:4028":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:12408:48722":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:46639:31452":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:12040:48635":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"6:6200:41053":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:542:3956":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:24329:3402":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"2:45487:3191":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"2:51102:3138":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:10989:2420":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:10312:137":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"6:6893:40168":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:3918:39976":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:13912:49968":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:5649:2374":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"6:4478:40035":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:51903:3119":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:46028:3525":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"16:7119:3953":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:9264:4594":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"5:3353:3612":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:10599:44060":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:23565:3394":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"18:739:59912":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:3261:2747":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:3266:3009":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"6:5436:58448":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"5:0:261":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:22381:55975":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"17:11779:44756":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:9118:2665":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"5:3940:4494":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:9186:4278":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:7811:2718":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"2:3463:3190":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"16:6413:3855":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:2834:119":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"13:120:42095":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"5:5829:4504":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"1:1428:2526":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:13370:49498":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:49705:2980":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:11137:3315":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"6:4255:2796":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:13547:49873":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"5:4185:2529":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:4961:3265":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:2395:8563":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:11689:3333":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"2:49522:2968":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:4383:2437":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:10241:53027":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:12825:2964":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:22813:2362":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"12:2039:2597":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:6839:2360":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:3440:2428":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:49187:3345":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:6227:2795":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:11318:2606":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"17:9245:4269":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"16:7185:4092":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:9785:3298":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"18:677:137":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"16:5231:43074":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:8954:4280":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:3429:127":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:3331:2879":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:47194:2284":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"5:3374:2598":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"6:5528:39887":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:45959:2351":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:10200:43914":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:47592:85":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:55789:220":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:7643:3028":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:8737:2666":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"6:6852:40162":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"16:7894:4060":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"6:4419:40028":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:10707:2362":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"5:7778:4512":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"3:300:190":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"6:1617:37884":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"12:1144:2541":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:6100:41047":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"18:744:59895":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"5:1427:2539":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"6:4040:39988":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"13:0:2082":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:12075:2512":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"16:5472:3916":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:11932:2568":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:3409:2423":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:13574:49876":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:32028:2507":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:48176:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"5:3718:155":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:24465:2652":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"5:5815:4501":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"6:3990:39982":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:51820:3134":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:12946:49272":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:13437:2605":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"17:13258:49425":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:12507:48729":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"6:6887:40167":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:11206:3319":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:3012:2924":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:49137:3314":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:2314:4350":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"5:8354:2530":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"2:10048:2390":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:8077:4525":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"1:5627:2375":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"12:1200:3838":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:51353:3113":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:10236:4283":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"16:3064:4257":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:9725:4543":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"1:15732:2120":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"1:1041:2486":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:14535:8576":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:3716:2922":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:10932:2412":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"14:56:44255":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:22353:3148":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:49028:3331":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:15745:2133":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"5:6592:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:49835:3368":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:47932:2933":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:12834:2966":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"9:927:41814":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:12073:48637":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:13582:49877":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:13446:49858":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:12815:2963":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:11804:166":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:51789:3131":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"6:5953:37812":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:3245:2515":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:4574:2402":{"crate_id":2,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"16:3041:4200":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:8879:2674":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:46269:3050":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:13453:49861":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:53065:18305":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:13296:49430":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"6:1729:2790":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:14375:113":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"17:12262:48712":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:23729:3208":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:10128:4370":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"16:4762:42830":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:12582:48734":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"5:3466:2530":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"12:784:2532":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"16:4790:42833":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:8272:2616":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"9:776:3752":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"17:11714:44636":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:48929:3323":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:4157:4329":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"12:853:2528":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"6:3868:39972":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"6:6923:41602":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"6:1533:37875":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:10266:4347":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:9649:43843":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:53122:18310":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"5:8287:3552":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:3339:2883":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:6593:2374":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:11750:44747":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:10322:141":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:11962:44066":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:52849:3132":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:49680:2978":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:12442:48724":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:14845:4669":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"19:117:59913":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"2:45620:182":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:8666:3082":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:12182:48706":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"16:6014:4067":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"12:181:3844":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:46287:3034":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:49863:116":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:55802:220":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:7685:2651":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:47357:163":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:46148:3435":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"16:5707:3926":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"17:13240:49384":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:50064:3378":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"6:4523:40040":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:10660:2731":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:1236:43916":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"6:6068:37816":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:5269:40632":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:10920:2526":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"5:3921:2530":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"2:3481:2551":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"5:4212:4494":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:3319:2873":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:5013:2945":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:11118:43852":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:3108:123":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"5:3340:2597":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:1482:2530":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"17:13986:49979":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:48702:3541":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"6:4470:40034":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"16:2991:4209":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"16:7250:4098":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:12496:3343":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"16:4890:42858":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:15720:2111":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"17:13348:49496":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"9:157:3722":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"16:5456:3913":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:11062:2660":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"2:46655:31454":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:3080:144":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"17:10179:43915":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:13924:49969":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:6236:3038":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:15728:2118":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:51015:55666":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"6:525:36989":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"16:5384:3909":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:2004:2402":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:6430:56581":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"12:1762:4492":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"16:6391:4076":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"16:3338:3943":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:12155:48704":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"16:2968:4198":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:46427:3046":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"16:5330:4595":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"5:3020:56834":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"6:3957:39979":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:15227:3867":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:4614:2413":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"17:12783:48875":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"5:8252:3637":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:13465:49862":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:5213:3516":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"16:7453:4024":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"6:4431:40030":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:670:37031":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"6:6644:41417":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:0:470":{"crate_id":2,"path":["core"],"kind":"module"},"6:1547:37877":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:12275:48713":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:12528:123":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"1:8914:53002":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"2:50055:3377":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:10279:4262":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"18:790:4385":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"12:2005:2525":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"0:34:1570":{"crate_id":0,"path":["fnv","FnvHashSet"],"kind":"typedef"},"17:11616:44540":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"16:2889:4215":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:3183:2890":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:45727:2903":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"1:10803:2636":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:13554:49874":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:24397:3403":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:6345:2352":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:46161:3436":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:11228:2797":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"16:7295:4041":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:51330:3110":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:10474:2698":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:48502:4662":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:8530:2804":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:1157:7557":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:49383:3353":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:9551:4335":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"6:5987:41043":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"5:6892:3557":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:49551:2974":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:3110:2732":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:10420:4344":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:7559:2642":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:1446:2527":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:11817:2646":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:10987:3311":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:13506:49866":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:11378:4272":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:11462:2525":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"7:0:1448":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:8668:53002":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"1:11952:2569":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:4839:3258":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:11300:10900":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:45643:184":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"6:1717:37893":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:8803:2811":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"6:632:37002":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:13830:3088":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"17:12467:48726":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:15747:2135":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"5:1675:3664":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"6:6864:40164":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:52998:3135":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:11328:43855":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:14345:50596":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"17:10529:43961":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:50733:3136":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:10887:44032":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:4682:3085":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:49341:3352":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:510:43832":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:9627:82":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:13331:49495":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:8902:43835":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:15721:2112":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:13192:49380":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"18:152:50334":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:10117:2935":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"6:4306:40014":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:10584:4328":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"16:6252:4073":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:11965:2570":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"5:421:2250":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"16:5433:3912":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:10211:43913":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:3155:110":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:3276:2516":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"6:4241:40008":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:9491:54678":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"5:8238:3636":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:3396:111":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"5:3729:2525":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"6:3972:39827":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:299:59872":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"16:3018:4199":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:21:651":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"9:963:3770":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:13402:49855":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:11231:4338":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"6:1736:37895":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"6:6005:10896":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:5705:2382":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"5:4590:4497":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"5:1184:57832":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:9144:2663":{"crate_id":1,"path":["std","lazy","SyncLazy"],"kind":"struct"},"5:8188:97":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"5:1824:4494":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:5643:2377":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:11915:48525":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:10160:43917":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"5:7311:2285":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:13386:49827":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"6:4227:40007":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"16:7195:4093":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:46143:96":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:8523:2802":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:50078:153":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:23823:35909":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:3325:2876":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:2855:164":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"6:5347:40637":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:8185:131":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:6607:52871":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:53096:18308":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:49616:2976":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:4835:2689":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:13356:49497":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"16:2866:4196":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"16:7971:122":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:14750:2646":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"12:2032:2596":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:6367:2393":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"5:1080:4494":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:2362:580":{"crate_id":1,"path":["std","env"],"kind":"module"},"16:6691:4084":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:681:43834":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"6:5228:40631":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"6:4005:39984":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:24567:3407":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:49855:3364":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:23707:35885":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"2:49077:2920":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"6:4052:39990":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:3235:2737":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:3426:126":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"16:7823:4035":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:49839:3367":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:9088:43840":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"6:3997:39983":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"5:6197:3584":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:5683:2378":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"6:6155:41050":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:9133:43841":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:13885:4549":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:55854:220":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:55815:220":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:14392:54593":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:10101:105":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"16:7158:4090":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"6:6028:37839":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:11222:2778":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:4596:2390":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"6:4410:40027":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"18:694:4401":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"16:6591:4082":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:46368:3041":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:8148:3164":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"6:5210:40629":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:38483:2490":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"16:5855:3936":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"16:3241:4204":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:46448:2417":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:49885:2519":{"crate_id":2,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"2:3292:3020":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:15138:2784":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:4512:2402":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"1:12021:2810":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:15733:2121":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:10435:43958":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:4627:2896":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:7965:2669":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:49169:3344":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"9:41:3755":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"17:13394:49828":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"14:194:42141":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"6:4101:39996":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:10477:4286":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:10117:4369":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:22822:3093":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:38546:2893":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:49105:2418":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:52246:3120":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:57090:55687":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"12:377:3843":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:14552:2648":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"12:112:59023":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:46673:31455":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"6:3862:39971":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:7573:2643":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"0:20:1553":{"crate_id":0,"path":["fnv","FnvHasher"],"kind":"struct"},"16:4535:42753":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:11947:48527":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:11855:52844":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"16:7804:4033":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:1190:7558":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"6:5420:40645":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:10001:43899":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:46684:31457":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:12645:48799":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:3280:2518":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:31993:3428":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:48209:103":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"2:6678:3055":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:12725:48810":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"16:5273:3950":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:48158:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"1:11251:10896":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:3284:3016":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"16:5346:4022":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:10041:43901":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:3182:2245":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:3621:3430":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"12:930:2534":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"9:1075:3773":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:9582:2770":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"2:12754:2604":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:13927:136":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:10712:2754":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"6:5978:41042":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:51149:3126":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:57111:55606":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"1:2397:8564":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"5:1616:2527":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:7525:2640":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"16:7216:4095":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"16:6136:4063":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"16:7843:4102":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:3086:212":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"16:2945:4220":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:6767:2356":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:46307:3036":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"16:5960:3941":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:10071:4373":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:11358:4273":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"5:7571:3585":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:13724:56655":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"1:1633:2540":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:15735:2123":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:45551:179":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"5:5779:3547":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:15693:7559":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:10704:113":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"16:7761:4101":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:12917:49271":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:3177:195":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"1:10686:124":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"1:14908:2581":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"16:3145:4210":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:10896:2525":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:13062:49328":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"16:6780:4085":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:1075:2348":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"6:3978:39981":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:46088:3357":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:13163:49335":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:13540:49872":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"5:8206:3635":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"16:5595:3923":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"18:660:4399":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:10115:174":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"12:160:3840":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:50011:29860":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:13685:49889":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:51742:3127":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:53190:18314":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:49499:2965":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:10623:44062":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"4:0:2083":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"16:5580:3922":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"5:1578:2525":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"16:6101:4019":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:51299:3106":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:4346:2442":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:11877:4674":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"17:13497:49865":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"5:7709:218":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"17:9600:59873":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"16:6238:4026":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"16:6176:4070":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:52959:3115":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:46049:3519":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"1:14952:2589":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:1302:138":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:7013:10899":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:12845:2962":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:9630:4541":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"16:4641:42809":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:48984:3327":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:5191:40627":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"12:469:59020":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:5860:2843":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:11932:48526":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:2690:559":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:12118:48644":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"6:5241:40610":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:9209:2500":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"6:584:36995":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"6:4401:40026":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"6:0:775":{"crate_id":6,"path":["libc"],"kind":"module"},"1:14689:4552":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:10966:2416":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:2777:3192":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"12:396:3842":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"5:3314:2596":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:10377:4349":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"9:603:4640":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:9719:43844":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:11001:44116":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:12537:4548":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"17:13810:49931":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:23815:35891":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:12221:48709":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:15192:4675":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"16:7174:4091":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:55776:220":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:11029:2467":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"2:4639:2897":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:50096:2492":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:4193:40004":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"12:2009:2285":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:11665:44578":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"16:2733:3946":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"16:3118:4211":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:11653:44577":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"6:3966:39980":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:13654:29861":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:11091:4673":{"crate_id":1,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"16:3392:4212":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"16:6491:4078":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:14763:2647":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:13999:2510":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:1493:2532":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:15740:2128":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"16:3264:4205":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:11926:2285":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"16:5522:3919":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:13898:49962":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"5:6704:2402":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"16:6366:3856":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:10716:198":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:49119:2420":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:8258:2248":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"12:2309:55712":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:12480:48727":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:51054:55565":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:24533:3406":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:2159:2285":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:8806:2679":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"18:774:59899":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"6:1522:37873":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"6:6910:40170":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"5:909:92":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:10988:44117":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"6:4073:39993":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:1530:2538":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:32034:3457":{"crate_id":2,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"16:2794:3947":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:9332:4270":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:10058:129":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:12095:2513":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:13840:3379":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:3090:211":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:24227:3400":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:5406:3152":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"16:3172:4201":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:15739:2127":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"1:10540:8569":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:11273:2357":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:10635:4605":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:8384:152":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"5:8050:3605":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:12010:48535":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"6:1584:37881":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:1524:2537":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:15472:4553":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"6:1723:37894":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"16:7884:4031":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:13282:49428":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:10916:2446":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"6:1744:37896":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:32192:55655":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"17:10950:44142":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:3074:74":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"5:3319:3611":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:11026:2466":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"17:10543:44057":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:14939:2583":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:15742:2130":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"1:4605:52963":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:47508:84":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:10672:2388":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"6:4112:39997":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:53085:18307":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:46072:3520":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"12:812:2533":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:1642:2541":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"9:809:2616":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"18:712:3148":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"16:4995:42888":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:15734:2122":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"16:7477:4046":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:9809:59886":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"5:5259:185":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:13891:186":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"1:12535:2731":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"2:2829:168":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"16:7928:2903":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:6695:2354":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:11555:4615":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:13746:49891":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:12095:48643":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"5:912:3603":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:1459:2528":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:22366:55975":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:15736:2124":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"1:6769:2358":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:11026:3312":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"16:6605:4038":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:14776:2512":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"17:12795:48878":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"6:4281:40011":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:14099:2698":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:13528:133":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:3304:2599":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:11100:4340":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:48510:4663":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:10533:2544":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"1:11870:53000":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"17:10331:4290":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:46458:3047":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"16:5975:4065":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:46102:3522":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:2875:169":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:13054:49326":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:9574:4281":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:23762:4655":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"16:7738:4100":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:3970:3161":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"2:47288:190":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"6:6935:41603":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:22419:56337":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:48938:3324":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:2865:162":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"17:12632:48798":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:10061:43918":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"5:69:3579":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:47280:173":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:5697:2380":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:13377:49510":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:12712:48804":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"18:720:55665":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"6:1690:37890":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:1488:2531":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"6:4272:40010":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"16:6032:3952":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:7892:2446":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:3539:4522":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:11192:3318":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"12:2045:2598":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"6:4145:40001":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:13619:172":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"6:5428:40646":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:11277:43825":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:3189:204":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"17:13477:49863":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:37326:3148":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"16:7514:4044":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:9460:4539":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"6:1563:37879":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"6:4377:40023":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"5:7150:2529":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:15726:2116":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:10720:2430":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:12982:49273":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:12431:48723":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"5:7049:4506":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"18:866:4392":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"16:6620:4227":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:9971:59885":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:10229:55963":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"2:53111:18309":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:6605:52869":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:50756:3124":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"9:27:3754":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"6:4133:40000":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:4270:2762":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:3186:201":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:11847:2648":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"6:1622:37885":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:45666:2229":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"6:5386:40641":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:8016:2719":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"2:3272:3012":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:5693:2379":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:11835:44774":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:3249:2741":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"16:5295:42220":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"18:782:59899":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"6:6870:40165":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:10429:2362":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:47228:3440":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"1:4385:2438":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"6:4387:40024":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:10353:4351":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"16:3488:4208":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:53213:18315":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:4120:39998":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"16:3091:4258":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:10028:43900":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:14327:52878":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:46226:4514":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"6:599:36997":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"16:4823:42841":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:7403:114":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"17:11186:4608":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"16:3604:42223":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:11726:44637":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"16:6744:4234":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:52029:3111":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:55828:220":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:47271:36160":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:11479:2622":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"16:5672:3925":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"5:3278:91":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:48191:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"2:49062:3445":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:49851:3370":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"0:31:1566":{"crate_id":0,"path":["fnv","FnvHashMap"],"kind":"typedef"},"12:2013:2529":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"12:354:59017":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:10253:4348":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:45734:2904":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"7:38:41695":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:9933:43848":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"6:5359:40638":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:8365:2566":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"9:1020:3772":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"18:857:4391":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"16:2754:3945":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:13598:49879":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"16:5736:3929":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:5838:2841":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:45974:3240":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:10864:44034":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:14924:2582":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:46417:3045":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"5:8044:2285":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:24295:2722":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"17:13098:49329":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"6:4439:40031":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:5167:40625":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:27748:3169":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:11134:10174":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"6:5221:40630":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"5:3019:2340":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:23863:35901":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:49427:2351":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"12:463:59024":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"16:6636:4040":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:50868:3125":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:47382:80":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:49089:3339":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:48480:141":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:14853:2656":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:13172:49336":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:7628:2645":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:49827:3363":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"2:48463:4661":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:23879:35912":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:11304:43854":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:9622:75":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:13119:49330":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"6:3905:39975":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:10448:4288":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:14358:124":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"2:47219:2285":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"6:1630:37886":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:9296:4599":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"18:849:4390":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:7455:2292":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:3116:2410":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:48958:3326":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"8:0:2084":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"6:5255:40611":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"5:2181:4496":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:49095:3340":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"5:1644:2532":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:14018:2439":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"17:11970:44064":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"5:1204:3666":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:9498:4540":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"18:650:4395":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:50781:3116":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"5:1625:2528":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:9440:4603":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"16:7205:4094":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:48860:3316":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"6:4517:40039":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:12046:2675":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"5:375:3602":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:4273:2763":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"12:1253:2542":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:1472:2529":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:50996:3109":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"12:1688:3851":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:10665:2387":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:53137:18311":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:12552:48732":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:10611:44061":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"12:1651:3849":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:12055:2511":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"16:6577:4081":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"6:519:36988":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"6:6091:41046":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:161:36679":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"16:4448:42741":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:50708:55560":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:23636:3396":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:900:2692":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:24499:3405":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"17:607:43833":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"5:1655:2533":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:12050:2676":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"16:6949:4240":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"6:1708:37892":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:5522:40675":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:10362:1548":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"6:4127:39999":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:7545:2641":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"6:4331:40017":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:1311:4374":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"12:1855:140":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"5:2291:3684":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:2433:8574":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:11064:3313":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:3955:122":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:10502:43960":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:6107:2794":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"6:511:36987":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"5:8089:2285":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:2543:4284":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:9780:3297":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"9:749:3707":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"2:10109:2932":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"16:3772:42265":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"5:1588:2526":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:47466:77":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:12598:48735":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:3335:2881":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:24193:3399":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"2:48221:122":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:24363:2723":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:49843:3371":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:12533:3346":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:46339:3039":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:47161:161":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"16:4852:42845":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"5:3029:56833":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:13819:49934":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"6:5969:36868":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:2773:4221":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"6:1665:37888":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:12168:48705":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:11993:48532":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:3159:110":{"crate_id":2,"path":["core","default","Default"],"kind":"proc_derive"},"17:9961:43849":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:51252:3118":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:3309:2600":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"18:801:4386":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:3011:2362":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:11458:44254":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:15057:2474":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:50837:3137":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:46396:3043":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:9210:43842":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:49287:3349":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"6:4293:40012":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"16:7236:4097":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:10728:2432":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:14958:2590":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"16:5488:3917":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:10230:43834":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:6698:2352":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:49323:3351":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"6:5371:40639":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:10291:4544":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"5:1224:3667":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:49568:2975":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"12:892:3828":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"14:189:42140":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:47340:2526":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:5635:2376":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:5766:2838":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"2:46357:3054":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:10304:4265":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:53160:18312":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:47348:2285":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"1:11832:2647":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:50687:55699":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:11767:44755":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:10119:2925":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"6:88:36612":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"5:1599:2285":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"6:4066:39992":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:47634:79":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"5:3025:56835":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:53076:18306":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"16:7073:4088":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"16:4922:42865":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:4:957":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:8198:2249":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:50891:3129":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:12610:48749":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:9240:2964":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"16:5421:3911":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:10489:4291":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"6:1554:37878":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:47550:78":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:624:37001":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"6:591:36996":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:13040:36199":{"crate_id":2,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"2:51982:3107":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"6:5459:40647":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:23800:3204":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"16:7264:4039":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:10095:4367":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"12:968:2537":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:11859:52755":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"6:578:9802":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:9333:54684":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"6:4395:40025":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:10561:3675":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:3314:2601":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:5406:2784":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:2162:2529":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:11099:3314":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:50108:2491":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"5:7195:4494":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"5:4485:3648":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"16:6518:4079":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:3218:2246":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:9503:54677":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"17:13799:49930":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:2765:2489":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"6:5197:40628":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:10976:2417":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"17:11082:4279":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:46128:3245":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:47718:81":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"12:2323:59026":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"6:6636:41416":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:7713:3083":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"17:12659:48800":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"5:8371:3580":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:10523:2543":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"5:5730:4494":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:52060:3114":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:11032:2471":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"2:22398:56342":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"16:6072:4042":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:45699:3071":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:2188:2598":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:5385:7560":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:51180:3130":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:6771:2359":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:294:59887":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:3644:3033":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"16:7146:4089":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:2565:122":{"crate_id":1,"path":["std","error","Error"],"kind":"trait"},"6:563:36993":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"6:4511:40038":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:10357:2223":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"7:85:41702":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"6:4215:40006":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:3662:3070":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:51582:55583":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:13306:49492":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:22824:3092":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:23931:3421":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"6:610:36999":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:3251:2742":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:52453:3140":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:13318:49494":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"12:1100:2539":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:10106:4368":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:4770:2549":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"5:1634:2531":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:12343:48717":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:7682:2649":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"17:13842:49935":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:10430:2687":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:46256:2416":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"6:1527:37874":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:12607:3311":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:10975:44118":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:11154:2779":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:15216:3867":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"5:8097:179":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:13884:49944":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"16:0:2091":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:13637:49888":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:11588:44538":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:15741:2129":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"17:9689:59888":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"16:7392:4029":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:49010:3329":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:4899:2463":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"1:8264:2719":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"1:6861:2355":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"16:6166:4069":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:13627:49887":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:11214:2789":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:13154:49334":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:6465:2483":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"5:5357:2402":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"5:8075:57777":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:45786:3251":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:10456:2717":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:9799:43846":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:3529:2429":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"16:5815:3935":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:11468:2621":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:23787:3203":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"16:6682:4037":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:9005:43837":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"6:5945:36909":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:49373:2421":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"16:5766:3933":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"18:610:4396":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:48455:2226":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"5:6351:207":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"9:692:3705":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"17:13933:49970":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:10844:4290":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:1507:2535":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:4990:2577":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:13772:49927":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:15117:2777":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:11519:44471":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"5:3307:2525":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:45965:29353":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"6:5159:40624":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:4083:39994":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:13488:49864":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:51426:3099":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:55841:220":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:783:4543":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"5:2534:3672":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:15738:2126":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"9:234:3730":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"17:11254:4336":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:13717:50847":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:9659:59882":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:1152:7556":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"16:5941:174":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:11738:44746":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:8632:157":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:4539:2389":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"6:5312:40636":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:11147:4607":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"9:469:4625":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:3348:2887":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:2183:2597":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"5:4575:219":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:10962:44119":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:10407:4345":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:47203:2525":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:23944:3420":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:51526:55575":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:14:1559":{"crate_id":2,"path":["core","write"],"kind":"macro"},"6:4317:40015":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"12:840:2527":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:48471:2225":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:13733:49890":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:11910:2525":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:47939:2934":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:14539:2481":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"16:6569:4229":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"17:12373:48720":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:894:2691":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"6:6214:41054":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"5:8221:3436":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:2512:4346":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:12756:48812":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"6:1908:38032":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"12:2303:59025":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:10926:44140":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:46437:3051":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:9635:4542":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"5:4413:2525":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"16:547:3930":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"16:6208:4071":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:13520:49868":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:51663:3139":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:11918:2565":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:45706:2493":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1:3563:2424":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"6:4203:40005":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:7337:170":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:8152:3166":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:10441:52843":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"6:4425:40029":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"5:3742:2526":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:10788:44031":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:3083:130":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:49269:3348":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:11640:44576":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:11696:44580":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:49537:2971":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:12208:48708":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:4557:2411":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"19:0:972":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"13:232:4624":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:3255:3004":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:49223:3317":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"14:0:2089":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:7228:171":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"6:4300:40013":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:11809:44760":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"16:4955:42873":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:12741:48811":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"6:4371:40022":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:1018:2719":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"1:15723:2114":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:50942:3117":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"6:5379:40640":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:10944:2420":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"16:3365:3944":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"5:2243:3669":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:11045:43851":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:46325:55667":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:14795:52482":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:3297:2868":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:13701:2643":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"17:13590:49878":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"16:4614:42807":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:10517:7555":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"18:704:59899":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:10673:44063":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:11002:2465":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"17:10317:4268":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:14307:2363":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"17:11026:43850":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:7151:53004":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:6087:4021":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:12699:48803":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"16:7467:4025":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:23467:2362":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:8189:146":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"5:1472:2542":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:49831:3366":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:12671:48801":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:0:1301":{"crate_id":1,"path":["std"],"kind":"module"},"17:9849:59883":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:13429:49857":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:23916:3473":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:46041:3358":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:22622:2501":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:11499:44470":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"6:6239:41056":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:2113:32035":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"14:231:3555":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:15729:2119":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:5868:2844":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"16:4734:42827":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:7859:4525":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"18:766:59900":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"16:6219:4072":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"18:885:4393":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:13543:145":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:12556:3347":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:11794:44759":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"0:30:1564":{"crate_id":0,"path":["fnv","FnvBuildHasher"],"kind":"typedef"},"18:667:4400":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:12327:48716":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:46405:3044":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:47676:86":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:23841:35910":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:3485:3084":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"6:4183:40003":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:10566:2416":{"crate_id":1,"path":["std","error","Chain"],"kind":"struct"},"16:7571:4020":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"12:556:138":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:11409:2618":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"3:0:412":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:45576:180":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:10224:43919":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:52912:3097":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:10798:2635":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:11406:44245":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:3185:202":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"16:4386:42729":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"6:4033:39987":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"6:5548:40676":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"16:7870:4030":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:9528:2418":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:10912:44131":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:10996:2421":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:22681:3092":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:3679:2921":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"6:4449:40032":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:1438:2285":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"16:6152:4023":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"18:729:59905":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:49715:2981":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:48911:3321":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"6:543:36992":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:46278:3053":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:46468:3048":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"12:2018:2530":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"2:12572:3350":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:37302:163":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:52707:3128":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"5:4643:4497":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:9886:43847":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"5:8171:2236":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:10468:4287":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"6:1602:37883":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:46386:3042":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"6:1572:37880":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:47211:2526":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"6:6881:40166":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:5407:40643":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"6:1700:37891":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:48706:3540":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"16:6357:4075":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"10:0:2086":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"16:4704:42822":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:14000:50013":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"15:248:3859":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:14382:2412":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"2:32092:55686":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"17:8849:4334":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"12:761:2526":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:15737:2125":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:49411:3356":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:11159:43853":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"5:1546:90":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"16:7024:4243":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"16:5360:3908":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:2852:165":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:4621:2395":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"18:811:4387":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"16:7786:4034":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:10458:43959":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:3113:2733":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"17:9839:4290":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:3617:2431":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"6:1760:37897":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:3633:208":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"18:754:59898":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:11822:4520":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"2:8762:2668":{"crate_id":2,"path":["core","lazy","Lazy"],"kind":"struct"},"2:7541:3058":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"5:8158:2235":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"5:3864:3659":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"12:949:2536":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:5649:3049":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:8294:3658":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"6:6051:37813":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:9476:4604":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"18:896:4394":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:4651:98":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"16:7342:4057":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:10316:4546":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"12:1667:3850":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:46095:3521":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"17:3743:4322":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"6:3951:39978":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:820:4543":{"crate_id":1,"path":["std","thread","local","os","Key"],"kind":"struct"},"1:1518:2536":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"16:5632:3924":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"16:5927:3939":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:13978:49977":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"5:3021:56832":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:24261:3401":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"17:12771:43855":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:8662:3081":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:46066:2351":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:14683:4551":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:3904:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"16:3506:4207":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:8233:115":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:10557:8576":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:12142:48703":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"16:6768:4236":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:11572:44537":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"6:6899:40169":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:11722:3334":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"16:7420:4045":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"9:722:3706":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"1:7816:50857":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"2:23746:4649":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"6:531:36990":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:51478:55674":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:9162:4337":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:53175:18313":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:49643:2977":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"5:1920:2530":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"}},"external_crates":{"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":15}