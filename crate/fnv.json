{"root":"0:0:2240","crate_version":"1.0.7","includes_private":false,"index":{"2:12897:22427":{"id":"2:12897:22427","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44493:3507","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12994:25605":{"id":"2:12994:25605","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:910:34366"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12865:882":{"id":"2:12865:882","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12055:457"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5574:23326":{"id":"5:5574:23326","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12991:23329"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7571:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12888:25835":{"id":"2:12888:25835","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12887:25834","str::split_at_mut_checked":"2:12890:25839"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2240":{"id":"0:0:2240","crate_id":0,"name":"fnv","span":{"filename":"lib.rs","begin":[1,0],"end":[367,1]},"visibility":"public","docs":"An implementation of the [Fowler–Noll–Vo hash function][chongo].\n\n## About\n\nThe FNV hash function is a custom `Hasher` implementation that is more\nefficient for smaller hash keys.\n\n[The Rust FAQ states that][faq] while the default `Hasher` implementation,\nSipHash, is good in many cases, it is notably slower than other algorithms\nwith short keys, such as when you have a map of integers to other values.\nIn cases like these, [FNV is demonstrably faster][graphs].\n\nIts disadvantages are that it performs badly on larger inputs, and\nprovides no protection against collision attacks, where a malicious user\ncan craft specific keys designed to slow a hasher down. Thus, it is\nimportant to profile your program to ensure that you are using small hash\nkeys, and be certain that your program could not be exposed to malicious\ninputs (including being a networked server).\n\nThe Rust compiler itself uses FNV, as it is not worried about\ndenial-of-service attacks, and can assume that its inputs are going to be\nsmall—a perfect use case for FNV.\n\n\n## Using FNV in a `HashMap`\n\nThe `FnvHashMap` type alias is the easiest way to use the standard library’s\n`HashMap` with FNV.\n\n```rust\nuse fnv::FnvHashMap;\n\nlet mut map = FnvHashMap::default();\nmap.insert(1, \"one\");\nmap.insert(2, \"two\");\n\nmap = FnvHashMap::with_capacity_and_hasher(10, Default::default());\nmap.insert(1, \"one\");\nmap.insert(2, \"two\");\n```\n\nNote, the standard library’s `HashMap::new` and `HashMap::with_capacity`\nare only implemented for the `RandomState` hasher, so using `Default` to\nget the hasher is the next best option.\n\n## Using FNV in a `HashSet`\n\nSimilarly, `FnvHashSet` is a type alias for the standard library’s `HashSet`\nwith FNV.\n\n```rust\nuse fnv::FnvHashSet;\n\nlet mut set = FnvHashSet::default();\nset.insert(1);\nset.insert(2);\n\nset = FnvHashSet::with_capacity_and_hasher(10, Default::default());\nset.insert(1);\nset.insert(2);\n```\n\n[chongo]: http://www.isthe.com/chongo/tech/comp/fnv/index.html\n[faq]: https://www.rust-lang.org/en-US/faq.html#why-are-rusts-hashmaps-slow\n[graphs]: https://cglab.ca/~abeinges/blah/hash-rs/","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:10:1811","0:20:1823","0:21:1825","0:24:1829"],"is_stripped":false}}},"0:16:1815":{"id":"0:16:1815","crate_id":0,"name":"with_key","span":{"filename":"lib.rs","begin":[103,4],"end":[105,5]},"visibility":"public","docs":"Create an FNV hasher starting with a state corresponding\nto the hash `key`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["key",{"primitive":"u64"}]],"output":{"resolved_path":{"name":"FnvHasher","id":"0:10:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32882:2512-0:10:1811":{"id":"a:2:32882:2512-0:10:1811","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32882:2512","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:19:1818":{"id":"0:19:1818","crate_id":0,"name":"write","span":{"filename":"lib.rs","begin":[115,4],"end":[124,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["bytes",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5555:31347":{"id":"5:5555:31347","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:2516","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:281:2516","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12990:23328":{"id":"2:12990:23328","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12898:30641":{"id":"2:12898:30641","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44503:9035","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12892:27944":{"id":"2:12892:27944","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12055:457"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44209:9028","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12864":{"id":"2:12864","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12865:882","2:12866:2554","2:12867:30635","2:12868:30636","2:12870:30637","2:12873:22028","2:12874:30638","2:12875:339","2:12876:25812","2:12877:21378","2:12879:21383","2:12881:25810","2:12883:25811","2:12885:30639","2:12886:30640","2:12887:25834","2:12888:25835","2:12889:25838","2:12890:25839","2:12892:27944","2:12893:27863","2:12894:1819","2:12895:27988","2:12896:27983","2:12897:22427","2:12898:30641","2:12899:27945","2:12900:21744","2:12903:25851","2:12906:25852","2:12909:2594","2:12913:2553","2:12917:22426","2:12920:25841","2:12923:25843","2:12926:30642","2:12929:30643","2:12932:25845","2:12935:25847","2:12938:25849","2:12941:25850","2:12944:2469","2:12947:30644","2:12950:30645","2:12953:30646","2:12956:30647","2:12958:30648","2:12960:30649","2:12962:30650","2:12963:30651","2:12964:30652","2:12967:30653","2:12970:22107","2:12973:25853","2:12976:30654","2:12979:30655","2:12982:30656","2:12985:30657","2:12987:23323","2:12988:25600","2:12989:23327","2:12990:23328","2:12991:23329","2:12992:25603","2:12993:25604","2:12994:25605","2:12995:30658","2:12997:3339","2:12998:30659"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12988:25600":{"id":"2:12988:25600","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40309:25734","Self::is_ascii":"2:12987:23323"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40309:25734","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12938:25849":{"id":"2:12938:25849","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:9017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12964:30652":{"id":"2:12964:30652","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12055:457","self::pattern":"2:12558:9021"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:9017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:9017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12583:9016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12886:30640":{"id":"2:12886:30640","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12061:1548","crate::ops::IndexMut":"2:3220:3394","str::slice_unchecked":"2:12885:30639"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:24:1829":{"id":"0:24:1829","crate_id":0,"name":"FnvHashSet","span":{"filename":"lib.rs","begin":[136,0],"end":[136,52]},"visibility":"public","docs":"A `HashSet` using a default FNV hasher.","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"std::collections::HashSet","id":"1:1446:153","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"FnvBuildHasher","id":"0:20:1823","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"2:12879:21383":{"id":"2:12879:21383","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42354:198"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10651:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10651:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2744-0:10:1811":{"id":"b:2:2744-0:10:1811","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2747:2547"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12877:21378":{"id":"2:12877:21378","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42354:198"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10651:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10651:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2763:1628":{"id":"2:2763:1628","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:42495:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2728:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12900:21744":{"id":"2:12900:21744","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12055:457","self::pattern":"2:12558:9021"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:9017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5570:31350":{"id":"5:5570:31350","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7571:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7571:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12895:27988":{"id":"2:12895:27988","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12896:27983"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44513:9024","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12881:25810":{"id":"2:12881:25810","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10651:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10651:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5556:9348":{"id":"5:5556:9348","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7571:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7571:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:9017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:10:1811":{"id":"0:10:1811","crate_id":0,"name":"FnvHasher","span":{"filename":"lib.rs","begin":[89,0],"end":[89,26]},"visibility":"public","docs":"An implementation of the Fowler–Noll–Vo hash function.\n\nSee the [crate documentation](index.html) for more details.","links":{},"attrs":["#[allow(missing_copy_implementations)]"],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:15","a:2:42477:3649-0:10:1811","a:2:2966:253-0:10:1811","a:2:32825:244-0:10:1811","a:2:32882:2512-0:10:1811","a:2:42476:3352-0:10:1811","b:2:2754-0:10:1811","b:2:2744-0:10:1811","b:2:2748-0:10:1811","b:2:2441-0:10:1811","b:2:2444-0:10:1811","b:2:3558-0:10:1811","b:2:2759-0:10:1811","0:13","0:17"]}}},"2:12890:25839":{"id":"2:12890:25839","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:12889:25838"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12875:339":{"id":"2:12875:339","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12876:25812","`u8`":"1:12072:1652"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12887:25834":{"id":"2:12887:25834","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:12889:25838","str::split_at_mut":"2:12888:25835"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12913:2553":{"id":"2:12913:2553","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42354:198","prim@char":"1:12055:457","self::pattern":"2:12558:9021"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:9017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:9017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:9018","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2762:135":{"id":"2:2762:135","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32755:3681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:12992:25603":{"id":"2:12992:25603","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:910:34366"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12873:22028":{"id":"2:12873:22028","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12106:9025"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12885:30639":{"id":"2:12885:30639","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12061:1548","str::slice_mut_unchecked":"2:12886:30640","crate::ops::Index":"2:39955:3393"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5572:3531":{"id":"5:5572:3531","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7571:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7571:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12995:30658":{"id":"2:12995:30658","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4738:30658"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44538:9032","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42476:3352-0:10:1811":{"id":"a:2:42476:3352-0:10:1811","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42476:3352","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12982:30656":{"id":"2:12982:30656","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12055:457","self::pattern":"2:12558:9021"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:9017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:9017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:9018","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12987:23323":{"id":"2:12987:23323","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12993:25604":{"id":"2:12993:25604","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:910:34366"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12953:30646":{"id":"2:12953:30646","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12558:9021","`DoubleEndedIterator`":"2:7942:128","prim@char":"1:12055:457","str::match_indices":"2:12950:30645"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44407:9037","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:9017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:9017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:9018","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2747:2547":{"id":"2:2747:2547","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2721:142"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:17":{"id":"0:17","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[108,0],"end":[125,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["write_isize","write_i32","write_usize","write_u32","write_length_prefix","write_i64","write_i8","write_u64","write_u8","write_str","write_i128","write_i16","write_u128","write_u16"],"trait":{"name":"Hasher","id":"2:10219:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:18:1817","0:19:1818"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12976:30654":{"id":"2:12976:30654","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12055:457","self::pattern":"2:12558:9021"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:9017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:9017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:9018","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12963:30651":{"id":"2:12963:30651","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12958:30648":{"id":"2:12958:30648","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12889:25838":{"id":"2:12889:25838","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:12890:25839"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12926:30642":{"id":"2:12926:30642","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12558:9021","str::split":"2:12917:22426","prim@char":"1:12055:457","`DoubleEndedIterator`":"2:7942:128","str::rsplit_terminator":"2:12929:30643"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44289:9041","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:9017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2966:253-0:10:1811":{"id":"a:2:2966:253-0:10:1811","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2966:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12941:25850":{"id":"2:12941:25850","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:9017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:9017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:9018","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12876:25812":{"id":"2:12876:25812","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12072:1652"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12947:30644":{"id":"2:12947:30644","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12558:9021","`DoubleEndedIterator`":"2:7942:128","prim@char":"1:12055:457","str::matches":"2:12944:2469"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44461:9039","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:9017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:9017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:9018","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12973:25853":{"id":"2:12973:25853","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12055:457","self::pattern":"2:12558:9021"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:9017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:9017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:9018","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12997:3339":{"id":"2:12997:3339","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4739:3339"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44547:3340","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12866:2554":{"id":"2:12866:2554","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5571:31351":{"id":"5:5571:31351","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:281:2516","`String`":"5:7571:250"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:2516","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7571:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12896:27983":{"id":"2:12896:27983","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12895:27988"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44522:9023","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12920:25841":{"id":"2:12920:25841","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12055:457","self::pattern":"2:12558:9021"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12374:9012","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:9017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12979:30655":{"id":"2:12979:30655","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12055:457","self::pattern":"2:12558:9021"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:9017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12960:30649":{"id":"2:12960:30649","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2443:2454":{"id":"2:2443:2454","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3558-0:10:1811":{"id":"b:2:3558-0:10:1811","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:2511","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3556:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3560:1643"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12991:23329":{"id":"2:12991:23329","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12870:30637":{"id":"2:12870:30637","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12868:30636"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:15":{"id":"0:15","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[99,0],"end":[106,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:16:1815"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2446:21911":{"id":"2:2446:21911","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12944:2469":{"id":"2:12944:2469","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12558:9021","`DoubleEndedIterator`":"2:7942:128","prim@char":"1:12055:457","str::rmatches":"2:12947:30644"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44443:9038","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:9017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42477:3649-0:10:1811":{"id":"a:2:42477:3649-0:10:1811","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42477:3649","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12962:30650":{"id":"2:12962:30650","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2441-0:10:1811":{"id":"b:2:2441-0:10:1811","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:2511","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2435:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2443:2454"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12868:30636":{"id":"2:12868:30636","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12903:25851":{"id":"2:12903:25851","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12055:457","self::pattern":"2:12558:9021"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:9017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5559:31348":{"id":"5:5559:31348","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7571:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7571:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:9017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2757:135":{"id":"2:2757:135","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2728:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"2:12909:2594":{"id":"2:12909:2594","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42354:198","prim@char":"1:12055:457","self::pattern":"2:12558:9021"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:9017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12970:22107":{"id":"2:12970:22107","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12055:457","self::pattern":"2:12558:9021"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:9017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:13":{"id":"0:13","crate_id":0,"name":null,"span":{"filename":"lib.rs","begin":[91,0],"end":[97,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2795:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:14:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2759-0:10:1811":{"id":"b:2:2759-0:10:1811","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2728:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2762:135","2:2763:1628"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12935:25847":{"id":"2:12935:25847","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12055:457","str::splitn":"2:12932:25845","self::pattern":"2:12558:9021"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44361:9008","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:9017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:9017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:9018","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12950:30645":{"id":"2:12950:30645","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12558:9021","`DoubleEndedIterator`":"2:7942:128","prim@char":"1:12055:457","str::rmatch_indices":"2:12953:30646"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44389:9036","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:9017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12894:1819":{"id":"2:12894:1819","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44225:2986","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12893:27863":{"id":"2:12893:27863","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12055:457"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44215:9027","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12883:25811":{"id":"2:12883:25811","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10651:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10651:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:21:1825":{"id":"0:21:1825","crate_id":0,"name":"FnvHashMap","span":{"filename":"lib.rs","begin":[132,0],"end":[132,58]},"visibility":"public","docs":"A `HashMap` using a default FNV hasher.","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"std::collections::HashMap","id":"1:723:151","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"resolved_path":{"name":"FnvBuildHasher","id":"0:20:1823","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"2:12989:23327":{"id":"2:12989:23327","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5573:23325":{"id":"5:5573:23325","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12990:23328"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7571:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:14:60":{"id":"0:14:60","crate_id":0,"name":"default","span":{"filename":"lib.rs","begin":[94,4],"end":[96,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"FnvHasher","id":"0:10:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12967:30653":{"id":"2:12967:30653","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12055:457","self::pattern":"2:12558:9021"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:9017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32825:244-0:10:1811":{"id":"a:2:32825:244-0:10:1811","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32825:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12874:30638":{"id":"2:12874:30638","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:3560:1643":{"id":"2:3560:1643","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:40123:9086","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12929:30643":{"id":"2:12929:30643","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12558:9021","str::split":"2:12917:22426","prim@char":"1:12055:457","str::split_terminator":"2:12926:30642"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44307:9040","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:9017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:9017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:9018","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12867:30635":{"id":"2:12867:30635","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12932:25845":{"id":"2:12932:25845","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12055:457","self::pattern":"2:12558:9021","str::rsplitn":"2:12935:25847"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44343:9010","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:9017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12998:30659":{"id":"2:12998:30659","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4736:30659"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44556:9033","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2754-0:10:1811":{"id":"b:2:2754-0:10:1811","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2728:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2724:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2757:135","2:2758:1630"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12917:22426":{"id":"2:12917:22426","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12558:9021","`DoubleEndedIterator`":"2:7942:128","prim@char":"1:12055:457","str::split_whitespace":"2:12895:27988","str::rsplit":"2:12923:25843"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44239:3509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:9017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5554":{"id":"5:5554","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5555:31347","5:5556:9348","5:5559:31348","5:5562:31349","5:5570:31350","5:5571:31351","5:5572:3531","5:5573:23325","5:5574:23326"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2758:1630":{"id":"2:2758:1630","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42495:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2728:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12985:30657":{"id":"2:12985:30657","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12519:134","`FromStr`":"2:12518:3667"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42495:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12518:3667","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12518:3667","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2750:752":{"id":"2:2750:752","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5562:31349":{"id":"5:5562:31349","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7571:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7571:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:20:1823":{"id":"0:20:1823","crate_id":0,"name":"FnvBuildHasher","span":{"filename":"lib.rs","begin":[128,0],"end":[128,56]},"visibility":"public","docs":"A builder for default FNV hashers.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"std::hash::BuildHasherDefault","id":"2:10259:1806","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"FnvHasher","id":"0:10:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"b:2:2748-0:10:1811":{"id":"b:2:2748-0:10:1811","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2750:752"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12923:25843":{"id":"2:12923:25843","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12558:9021","`DoubleEndedIterator`":"2:7942:128","prim@char":"1:12055:457","str::split":"2:12917:22426"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44257:9006","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:9017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:9017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:9018","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12899:27945":{"id":"2:12899:27945","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44531:9022","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2444-0:10:1811":{"id":"b:2:2444-0:10:1811","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:2511","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2438:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FnvHasher","id":"0:10:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2446:21911"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:18:1817":{"id":"0:18:1817","crate_id":0,"name":"finish","span":{"filename":"lib.rs","begin":[110,4],"end":[112,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12906:25852":{"id":"2:12906:25852","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12055:457","self::pattern":"2:12558:9021"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:9017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:9017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:9018","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12956:30647":{"id":"2:12956:30647","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"2:40727:9102":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:2721:142":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:21339:28649":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:44185:9034":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"6:4449:13646":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:12808:16680":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:16235:21161":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"6:1596:11038":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:7788:3349":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"14:187:15564":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:10365:2850":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"2:47435:3772":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:15616:20974":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"16:2859:15654":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:513:16695":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"6:6059:14392":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:7946:137":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:10012:8961":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:12076:1648":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:4975:3629":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"16:6134:3050":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:10828:32914":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"16:6669:16589":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"6:1734:11050":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:46304:3798":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:7924:3226":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"17:11877:2991":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:15418:20962":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:45250:8936":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"6:4738:3563":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:14529:20208":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:22123:3482":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:10905:16711":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:12584:16709":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"17:14449:20202":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:12072:1652":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:23797:190":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"2:2341:642":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"5:1115:30054":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:33674:9361":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:12508:16937":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:7056:23643":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:44640:9052":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:4300:3599":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"6:5910:14383":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"6:5004:13705":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"17:10769:33334":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:10612:16706":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"5:6549:2771":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:10869:22141":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:48355:3779":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:12278:16927":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:12443:16923":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:4005:3564":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:8463:3660":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"17:15151:20937":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"5:7063:2833":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:12949:16717":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:44307:9040":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"6:533:10137":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:3268:3527":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:9284:3414":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"6:5152:13722":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"16:7914:16620":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:12056:16845":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"6:5992:14389":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:12454:16933":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:3799:2558":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"11:1160:3364":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:5852:9323":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:13252:19656":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"16:5298:16552":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:12127:16849":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:4811:3583":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:10622:33356":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:2418:3458":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"16:4702:16274":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"6:4745:13675":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:48478:8918":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:10419:2987":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:45262:28030":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"6:1639:11041":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"16:5846:16565":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:15734:20982":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:15102:20933":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:21695:3188":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:3264:16843":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"16:5696:3060":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"18:548:150":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:13999:20173":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:10068:16683":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"14:7:15556":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:22668:3190":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"5:6631:2558":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"16:4649:16267":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"16:6201:3084":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"5:5170:2807":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:44547:3340":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"6:1674:11044":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"5:1478:3149":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:10651:246":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:1968:3429":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:31032:3164":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:5151:23264":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:11853:16883":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"6:7622:13884":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:12053:407":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:34281:9365":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:48645:8927":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"11:123:2758":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"19:0:1142":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:22747:27989":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:2032:205":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:43835:8988":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:12070:805":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:42146:3545":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:5569:3676":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"17:11042:16730":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:8221:3477":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:4805:9124":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:8283:3507":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"7:78:15406":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:2652:2869":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:11405:16774":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"6:6898:14819":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"5:1440:3148":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:16187:21157":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"17:15473:20968":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:11702:16829":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"1:4538:3604":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"5:1131:29859":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:4704:22245":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:8981:3712":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"5:4426:2797":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:31100:28000":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:10254:2497":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:2271:2834":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:12054:1044":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"16:5038:16357":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"5:5896:2791":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:9150:9017":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:43831:27967":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"16:5919:16568":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:4772:3604":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"16:2789:15651":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:4236:3597":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:14545:20209":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"5:7584:9063":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:48515:8921":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:3556:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"17:12422:16932":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:3080:9368":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:7912:3475":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:4217:8943":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:3804:3552":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"16:6292:16577":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:9026:3320":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"16:5541:16555":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"5:1151:30052":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:14051:20177":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:40721:3340":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:7653:2892":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:2436:3464":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:3185:138":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:40066:223":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:8413:3582":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:939:3358":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"14:202:9062":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:8066:23262":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"5:4459:2800":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:8849:3679":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:10350:2985":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"6:7645:13887":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:12030:16846":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"16:2459:15636":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:41073:9321":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:47153:3800":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"6:7604:13881":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"5:2196:3153":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:12516:16952":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"2:46150:3756":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:48553:8923":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:11618:3234":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:1795:641":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:12342:16896":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"9:0:2356":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"5:3206:3366":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:13046:16682":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:10006:8963":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:9107:3231":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:2504:208":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"6:5146:13721":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:22722:3557":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"6:6813:14814":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:11743:16832":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"6:4610:13665":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:4529:13655":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:15655:20978":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"6:6764:11156":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:7333:9319":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:9015:3216":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:10251:2982":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"16:7194:32564":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"16:6445:16583":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:11730:16831":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"2:4448:9104":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"18:651:33457":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:11043:3213":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:13272:19657":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:12071:801":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:22975:196":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"2:44987:3187":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"16:6858:16595":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:10820:3148":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"6:6263:14431":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"6:4755:13676":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:21370:28647":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"18:538:2947":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"5:1506:3151":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:4527:9112":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:24025:243":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:14968:20926":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:15078:16743":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"6:6169:14402":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:12583:9016":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:10965:9013":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:41558:9306":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:12328:16894":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:8922:3710":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:403:16694":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:6612:3702":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"6:7616:13883":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:31574:203":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"16:5878:3039":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:15039:20931":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"16:6849:16594":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:43816:9506":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:10718:126":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"16:8109:135":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:13814:20162":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:40008:219":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"5:2157:2788":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:40764:9135":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"6:4628:13667":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:46894:27858":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"5:4267:3147":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:44556:9033":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:15957:21146":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"1:6318:2882":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"9:446:15428":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:44655:9053":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:12076:16841":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:10008:8964":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"6:7651:13888":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"17:12150:16847":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"5:7038:2829":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:15:1818":{"crate_id":2,"path":["core","write"],"kind":"macro"},"11:1896:2812":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"1:11228:23288":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"2:44955:9516":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:15456:20966":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:44967:9521":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:9938:16701":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:14414:20200":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"5:4381:270":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:22806:28076":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:11158:23155":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"11:811:2812":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:8051:176":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:44123:8986":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:3188:139":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:9445:136":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"5:3768:3380":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:363:3336":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"18:735:21187":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:10185:2979":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"6:4388:13641":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"11:1910:3366":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:16212:21159":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"1:7613:23285":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:2718:160":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:21302:3197":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"6:4566:13660":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"6:6248:14430":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:1691:11046":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:40993:8985":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:22833:28038":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:13235:19655":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:3012:3739":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"10:36:32245":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"17:15197:20941":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:8534:3662":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"5:266:2771":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"17:16198:21158":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"14:165:15557":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:32802:28568":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"17:12707:16712":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"16:6895:32486":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"16:6116:16571":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:504:2788":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:12090:9481":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"11:2562:32252":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"5:1024:2771":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:6086:14395":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:14788:20919":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:47199:3806":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:22864:3561":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"16:2749:15649":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:12711:135":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"6:5941:14342":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:22319:3482":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"1:849:3148":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"18:507:33457":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:10211:150":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:41365:9331":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"16:536:3037":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"5:1517:3152":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"5:7571:250":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"5:40:2767":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:5309:210":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"16:6462:16584":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:34800:9369":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:44823:9060":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"11:687:3148":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:15635:20976":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:40833:9132":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:7808:3417":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:41580:3533":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:39955:3393":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:30979:3196":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:14933:20925":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:7907:3474":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"6:555:10140":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"6:574:10143":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:26425:272":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"16:2883:15655":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:10573:33358":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:6665:3704":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"17:14356:20196":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:13325:3008":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"9:177:3135":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"6:5068:13712":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"5:7391:3158":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"6:5044:13710":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:9886:16699":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:5681:2797":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"6:4496:13651":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:3906:3554":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:31205:27942":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:43984:28567":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:15944:19654":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"13:226:3116":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"16:6254:16575":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"16:2375:15632":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"5:3199:3147":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"5:1686:2771":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:14271:20190":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"6:1604:11039":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:4107:3571":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"16:6077:3066":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"11:1107:15546":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:914:3151":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:41599:9309":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:5966:3176":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"18:608:33480":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:5515:112":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"17:14189:20185":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:11510:16771":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:3431:8946":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"6:7365:15193":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:14260:20189":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:16105:21151":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"2:40026:222":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"6:1514:11029":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"16:7324:16602":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:6395:9333":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"6:4473:13648":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:12297:9527":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"0:10:1811":{"crate_id":0,"path":["fnv","FnvHasher"],"kind":"struct"},"16:3856:15727":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:42352:201":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:13538:19671":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:2203:16773":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"16:2573:15641":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:4302:3166":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:43314:28003":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:11102:16738":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"6:6781:11154":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:10665:23160":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"1:2035:204":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:32883:3198":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:4560:3605":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:7998:3227":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:12353:16929":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"11:673:3147":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"11:1903:3365":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:10759:2963":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"6:4814:13683":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"5:6503:2791":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:32809:9112":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"17:13832:20163":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:9074:16597":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"6:1718:11049":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"6:4998:13704":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:4987:28962":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:7679:2876":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"16:6737:3051":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:32827:251":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:15313:20951":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"6:6741:11171":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:6366:227":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:40046:221":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:32914:113":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:2847:3433":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"16:6929:32452":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:48489:8919":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"5:1537:3379":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:21971:3482":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"2:44975:9520":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:16093:21150":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"1:11288:23173":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"6:119:9812":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:22211:3878":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"17:11016:16728":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:9130:184":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:11121:9009":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:11341:3684":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"18:96:21175":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:41035:3172":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:22733:27865":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"6:4989:13703":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:482:2865":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"10:0:2357":{"crate_id":10,"path":["adler"],"kind":"module"},"2:22346:28234":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"16:7452:16609":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"14:31:15556":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"16:3545:15663":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"5:5360:2771":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:6495:3697":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:10927:9001":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:14246:20188":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"16:4462:16195":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:40749:27872":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:4986:16953":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"2:38607:9372":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:15116:20934":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:15190:20940":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:5894:2875":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:10888:9012":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"6:5891:14381":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"5:6713:2771":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"11:434:32265":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:12074:1650":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:8076:3520":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:8201:3179":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"11:1728:153":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"16:7932:16621":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:41574:9308":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:1054:3362":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"16:6331:16579":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:44289:9041":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:11107:9011":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:11242:16761":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:15176:20939":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:11788:16880":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:4452:3594":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:10229:112":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"17:13899:20167":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:44215:9027":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:42495:233":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"14:214:15565":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:5815:3694":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:11067:22057":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"6:6711:14811":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:10982:16726":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"16:6773:3096":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"5:830:2776":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:6590:28048":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"2:42898:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"11:2140:3362":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"17:13568:19673":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:12318:16717":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"5:3596:180":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"11:832:3355":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"16:6803:16592":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:15678:20979":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"16:7595:3108":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:8616:3666":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:11000:9006":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"6:5928:14385":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:44035:8997":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:13292:3002":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:44239:3509":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:48309:3828":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:43095:8964":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:15582:20971":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"5:4881:224":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"5:7492:2802":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"6:1501:11027":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:11269:16763":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"2:7332:9318":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"1:867:3149":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:5025:3534":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"17:14177:20184":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:11661:16801":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"6:4603:13664":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"18:521:21194":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:10887:33400":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"5:3358:2812":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"18:680:21191":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:41351:9330":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:15376:20957":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:44503:9035":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:23609:188":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:12518:3667":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:13972:20171":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"16:7684:16616":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"11:396:2762":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"16:7294:16600":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"16:2617:15643":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:9198:23305":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","Key"],"kind":"struct"},"1:8295:3550":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"6:4878:13691":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:48504:8920":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:13785:16887":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:1809:665":{"crate_id":1,"path":["std","env"],"kind":"module"},"17:14575:2995":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"16:0:2362":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:11639:8995":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"2:43074:8955":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:16032:19656":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"16:6062:32414":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:909:3355":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"6:4824:13684":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:21324:28638":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"5:7375:2558":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"6:4932:13698":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:8951:3711":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"18:491:33458":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:47075:3794":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"16:6555:15575":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:13844:20164":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:4638:3622":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:11773:16879":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:5120:23264":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:11341:16777":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"5:1496:3355":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"16:4761:16287":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:22840:3559":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:533:2866":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"1:2446:3469":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:46995:27959":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:1585:2812":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"1:11382:21926":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"6:4676:13670":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:12056:1668":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"5:7383:217":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:859:2558":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:3233:23775":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"16:4968:16333":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"16:2319:15630":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:15273:20947":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:13485:19667":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:5708:3705":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:12768:16677":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:41091:27875":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"16:5794:16564":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"16:5555:16556":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:46721:3765":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"5:4035:2791":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:4955:13700":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:44833:9061":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:4063:3569":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:8336:3546":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:14855:20921":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:11574:3118":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:10092:16704":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"6:4922:13697":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"6:4666:13669":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:3001:9336":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:6595:2846":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"17:15058:3016":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:7397:28410":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"8:0:2355":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"9:423:15430":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:2438:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:45223:178":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:41551:28044":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"17:1098:16741":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:3739:3549":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:44513:9024":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:1578:2558":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:14147:20183":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:10954:16725":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"11:299:32249":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"5:6870:2810":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:3181:2513":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:34026:9363":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:41167:3178":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:10699:3226":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"17:14560:20210":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:48449:8915":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"16:6099:16570":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"6:5117:13717":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"1:8354:3593":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:32755:3681":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:3386:260":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"16:5346:32461":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"6:6961:14824":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:46242:3763":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:40814:9032":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"5:2167:29969":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:16259:19660":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"2:40923:3440":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"1:3579:3502":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"6:4523:13654":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:44522:9023":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:14235:20187":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:10710:16708":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:918:3152":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:11093:3486":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"16:2419:15634":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:10796:3147":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"6:6819:14815":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:2728:3519":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:46196:3797":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:8270:2986":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"6:1710:11048":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"6:5867:14379":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:44257:9006":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:40895:27868":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:11443:16780":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:10845:3509":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"16:7225:16599":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:12543:16942":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"17:15281:20948":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:13509:19669":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:45202:3885":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:21565:3482":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"18:643:33457":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:44963:9517":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"5:7331:2791":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:12038:22063":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:3397:9099":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:32912:8944":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:22348:9391":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"2:41206:9329":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:41123:9332":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:9654:28580":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"16:5521:16554":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:8916:2558":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:1826:3399":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:22791:27986":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:15836:20990":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:39986:217":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"9:237:3661":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"16:6579:16586":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:14986:20928":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:12824:16714":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:15769:20985":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"6:6079:14394":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:12558:9021":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:7995:2514":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:10950:2902":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:15214:20943":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"6:4870:13690":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"5:2990:29867":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"11:2369:15551":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"17:14012:20174":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"16:5499:16553":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"5:2269:3156":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:3049:9378":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"2:22699:3191":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"5:692:117":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:6263:3220":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:44110:8985":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"14:40:19655":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"16:3010:15659":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:11634:16800":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"5:5408:8980":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:15569:20970":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:6040:2882":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:10075:23279":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"2:41192:9328":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"6:495:10133":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:4198:25169":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:32816:9430":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"6:6700:14810":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:6658:10181":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:40866:9130":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"6:4710:13673":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"6:5123:13718":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"6:4830:13685":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"5:1487:3150":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:30749:3556":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:13774:16886":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"6:4535:13656":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:12055:457":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:11189:16740":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:11595:2988":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:3313:218":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:21976:3753":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"1:8343:3601":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"6:1528:11031":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"6:5052:13711":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:40787:9138":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"5:0:313":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:21567:3747":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:46174:3792":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:12659:16940":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"17:10818:16709":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:7867:9313":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:8900:3147":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"6:7556:15354":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"11:774:3149":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"16:6745:3094":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:21341:28644":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:2509:132":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"17:16069:21148":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"2:4601:3169":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:637:3344":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"16:3773:15690":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:45161:234":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:42476:3352":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:8599:3147":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"16:2593:15642":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:10886:3214":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"2:1832:1199":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:928:3357":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:41341:3508":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"5:4396:2800":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:9145:159":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"17:12851:2998":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"5:4197:2797":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"6:0:887":{"crate_id":6,"path":["libc"],"kind":"module"},"18:589:28023":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"6:6100:14396":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:4841:13686":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:597:16696":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:15368:20956":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:13412:19662":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:8300:3542":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:15646:20977":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"6:4480:13649":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:10457:136":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"1:11335:3221":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:9467:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:14402:20199":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:10671:33167":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:15445:20965":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:23425:197":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"5:1528:217":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"16:7376:16607":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:13855:20165":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"16:6348:3090":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:44361:9008":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:42818:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:6056:227":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"16:7482:16610":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:22771:27852":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:4093:2797":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"16:2336:3025":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"6:6837:14816":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"16:2729:15648":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:14977:20927":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:9220:23167":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","DtorState"],"kind":"enum"},"1:11501:3553":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"16:4937:16325":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:10440:3526":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"17:13424:19663":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:40123:9086":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"17:12371:16716":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"11:0:2358":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"2:2353:9392":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"1:10728:3477":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"17:256:33431":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:11318:2903":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"2:7449:9304":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"16:5006:16348":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:1975:712":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"16:6221:3088":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:8362:3551":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:11799:16881":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"16:2489:15637":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:10877:16710":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"16:2689:15646":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:10284:2983":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:9135:241":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"6:7388:15195":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:16121:21152":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"2:7863:9314":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:13375:19659":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:2688:3510":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:46344:3810":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:22256:3879":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"16:5238:16534":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:23891:187":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"17:13986:20172":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:2351:9391":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"18:481:21195":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:48469:8917":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:7209:25172":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:10431:2852":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"2:2712:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:41144:9315":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"6:475:10130":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:7717:3337":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:12300:16928":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"18:623:33461":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:12022:3235":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:4376:3168":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:11367:2975":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:44407:9037":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:2420:3459":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:4:1125":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"6:6159:14401":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:10259:1806":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"6:4401:13642":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:42426:2558":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"17:11214:16735":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:12175:16913":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:4444:228":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"16:4491:16201":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:34454:9366":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:4543:13657":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:4809:3580":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:11166:16742":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:40309:25734":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"2:13214:212":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:13406:149":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:1602:3367":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:32791:22188":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"5:281:2516":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"6:4506:13652":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:3347:3524":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:2457:111":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"6:1496:11026":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:13344:3015":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"16:7869:16618":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"6:4908:13695":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:6499:3698":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:2266:136":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"11:2443:2791":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"6:6222:14429":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"16:4545:16209":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:14475:20204":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:945:3359":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"6:4488:13650":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:47997:3767":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:41176:9327":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:13399:19661":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:15333:20953":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:8071:3225":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:33302:9359":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:2175:16812":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:10439:2960":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"6:5897:14382":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:10524:16705":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:43369:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"11:856:3358":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"16:7998:3110":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:42280:3555":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"5:1302:3362":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:16151:21154":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"2:47311:3760":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:10933:2900":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:11478:2905":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:2268:3454":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"1:4694:3569":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"5:7361:29964":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:42779:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"16:6408:16582":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"17:15701:20980":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:11110:22134":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"2:10641:3482":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:42410:3147":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:46464:3825":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"6:4789:13680":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"16:7653:16615":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:6713:240":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:7760:2898":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:13461:3370":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:43324:3164":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:21573:3750":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:16050:19657":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"6:4764:13677":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:11293:16764":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"2:48393:3813":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:1914:27971":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:31011:9081":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:46445:3776":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:15720:20981":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:11493:16785":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:23245:195":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:41013:3391":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:40840:9133":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:3512:3478":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:14868:20922":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"6:4860:13689":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"18:689:21192":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:6535:2886":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:7982:23294":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:14463:20203":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:13146:16983":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:13024:16719":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:44531:9022":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:3230:23772":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:7942:128":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:11630:23248":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"6:4776:13678":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"16:6045:213":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"11:800:2791":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"16:7335:16603":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:31601:3197":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"16:6030:16569":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:9995:118":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"1:11128:159":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"17:14066:20178":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:13363:19658":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"11:351:32261":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"2:42535:3147":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"16:7565:16612":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"11:2124:3361":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"5:6893:2822":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:41063:3175":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"16:4518:16205":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:1802:9292":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:4333:3167":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"11:1917:3367":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:12075:1651":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"1:9020:114":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"6:4440:13645":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:2797:123":{"crate_id":2,"path":["core","default","Default"],"kind":"proc_derive"},"16:6422:2756":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"17:4821:16947":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"5:3240:3365":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"16:5616:3055":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"5:7311:2558":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:9984:16702":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"11:1142:15547":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"16:7491:16611":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"6:6120:14399":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:10137:16672":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:41216:9317":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:11128:16736":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:21512:3482":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:46575:3799":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:11407:23181":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:22477:3875":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"1:12027:3351":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:48568:8924":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:46819:3832":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:45210:3886":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"15:394:15591":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"15:306:15581":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"6:5023:13708":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:46375:3758":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"3:0:484":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:7619:3179":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:10010:213":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"16:4871:16305":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:15301:20950":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:11419:2963":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:12238:16899":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:11865:16884":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:4249:3598":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"16:2553:15640":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"16:3993:15841":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"16:6724:16591":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"6:6868:14817":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:6927:14821":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:11562:3554":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:23515:191":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:3008:9338":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"1:903:2812":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:43088:8963":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"6:6943:14823":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"5:3753:3227":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:7917:3472":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:12077:857":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"11:787:3150":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"6:654:10193":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:22683:3159":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"6:588:10145":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:8387:3632":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:39971:220":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"11:2469:2812":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"17:12969:16675":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:42418:3148":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"16:7507:217":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:13187:19653":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:9039:3180":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:15596:20972":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:41135:9325":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:21514:3751":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:11637:15588":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:22334:3883":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"17:12724:16713":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:44538:9032":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:2435:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:14516:20207":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:7823:3418":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"5:7669:2816":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"6:507:10135":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:7962:126":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:23155:194":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"17:10720:33133":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:15748:20983":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:46843:3833":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:44053:9000":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:12374:9012":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:42292:3546":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:4769:3631":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:3392:3514":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"16:5580:16558":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"16:3741:15681":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"11:700:2558":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:4517:2838":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:15356:20955":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:14341:20195":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"16:6546:16585":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"6:4647:13668":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:38717:9374":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:2492:2370":{"crate_id":1,"path":["std","io"],"kind":"module"},"13:110:32315":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"6:4893:13693":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:3044:9377":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"16:5331:2959":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:12066:701":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"16:3709:15672":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"11:1603:15550":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:6609:3701":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"6:563:10141":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:43353:27999":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"17:11567:16826":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"2:40847:9134":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:46220:3757":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:15342:20954":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:15138:20936":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"6:4375:13640":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:47465:3778":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:44225:2986":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"5:6903:2824":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"6:123:9813":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"11:2536:32258":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"16:6811:16593":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:3468:8949":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"11:875:3359":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"16:6152:3081":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"6:5829:14314":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:1558:11034":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"16:6882:32359":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"16:7971:16623":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"6:6718:3634":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"11:2403:3148":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"17:15222:20944":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"11:1891:2791":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:1576:11036":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"6:542:10138":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:22755:28011":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:44389:9036":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:11051:16753":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"5:7411:2558":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"18:573:33457":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:11497:16772":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:33908:3740":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"6:1697:11047":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"3:234:233":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:11396:22123":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:3403:9098":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:42314:3547":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:13165:162":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:47499:3827":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"16:4433:16189":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:9140:242":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:12572:2963":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"2:44136:9002":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:3266:3526":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:9970:141":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:7735:3325":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"1:1574:3147":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:42560:203":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:10486:2898":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"1:1446:153":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:1885:3414":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:22562:27958":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:3416:28285":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:48185:3773":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:6228:13554":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:44343:9010":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:3017:3741":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:11089:16739":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:13797:20161":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:13723:20158":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"6:6071:14393":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"6:4914:13696":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:22125:3749":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:12557:2975":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"2:46605:3805":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:8391:3634":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"5:6032:9732":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"6:1546:11033":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:5450:3672":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1:12062:1633":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:7900:143":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:36676:9370":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"16:8097:16628":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:9033:22122":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:14325:20194":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"11:2326:3362":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"17:14599:20212":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:41114:9324":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:9054:23293":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"6:4854:13688":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:47649:3761":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:4119:3574":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:9087:22133":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:40086:2502":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:42130:3544":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:10534:33210":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:42662:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"16:6188:16572":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"11:1883:3147":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:12578:9018":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:12563:9017":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:12080:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:12073:1649":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1:880:3150":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"6:62:9758":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"1:6215:2863":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:44073:8999":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:39296:9375":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:2977:2872":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"5:5980:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:15434:20964":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:45151:226":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:4035:3566":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:7990:3518":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:2584:3517":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:5377:127":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"6:7657:13889":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"6:6682:10014":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:3039:9376":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"18:754:21193":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:5849:3215":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"6:4434:13644":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:15023:20930":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"5:7560:2808":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"16:7386:3099":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"5:3609:3147":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:42543:3148":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:5640:3678":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"16:6376:16580":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"5:3833:2812":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"17:11227:16734":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:10846:3418":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"17:15249:20945":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:1990:186":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"6:6889:14818":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:44461:9039":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:10246:22312":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"2:2676:9150":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"5:2074:3381":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"2:10002:8956":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:12225:16900":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:7968:2496":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"17:15206:20942":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:10155:3683":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"5:7521:27868":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:4966:425":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"17:12251:16898":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:2037:16779":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:15092:20932":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:11524:16823":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:4228:3596":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:14038:20176":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:14876:20923":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:1040:3361":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:12107:2963":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:42174:3200":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"17:437:15604":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"6:4724:13674":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:645:3346":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:42857:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:4057:3568":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"6:4616:13666":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:2806:135":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:1923:9401":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:33967:3742":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"6:7692:15382":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:44619:9051":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:15521:20969":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:12089:16842":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:9002:3696":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:13015:2995":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:11606:8994":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"18:726:2954":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:11368:21928":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:13877:20166":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"11:1923:3368":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"2:22615:27949":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:2275:3455":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"16:7889:16619":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"11:883:3360":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"11:2352:3363":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"11:102:32257":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:7904:163":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:7099:2890":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:11621:2972":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"18:635:33463":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"5:1316:3364":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:3560:22373":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"5:7319:3369":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:41105:3177":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"16:7537:3106":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:15814:20988":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"5:1425:3147":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:13187:28872":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"11:364:2760":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"11:2423:2558":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"2:3220:3394":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"16:7400:3100":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"6:7343:10091":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:13173:16984":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"5:2987:2617":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:3665:2791":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"11:2548:32256":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:14489:20205":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"6:1664:11043":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:11413:23059":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:11841:2908":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:12494:16901":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:12065:699":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:0:539":{"crate_id":2,"path":["core"],"kind":"module"},"2:46627:3811":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:14994:20916":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"6:4595:13663":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:40956:2840":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:15324:20952":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:9181:3738":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:4380:3600":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"5:7653:2812":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"17:12993:16718":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"18:598:33470":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:13387:19660":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"11:1887:2558":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:686:1807":{"crate_id":1,"path":["std","collections"],"kind":"module"},"1:8210:3228":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:10014:8962":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:12408:2994":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:43601:154":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:13753:20160":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"5:7548:3436":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:9472:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:39911:8948":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"2:13367:2863":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"14:0:2360":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:40821:9131":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"6:5111:13716":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"17:3597:16866":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"16:3830:15724":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"6:4584:13662":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"16:5759:16563":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"16:7609:16613":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:22388:3884":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"16:2355:15631":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:14284:20191":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"5:5669:2810":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"6:1632:11040":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"6:5033:13709":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:12433:2995":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:13089:16981":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:15992:21147":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"2:13356:114":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:9952:3430":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"5:4065:2771":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"6:4549:13658":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"5:2049:3227":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:10446:3524":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"6:5921:14384":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:11915:16885":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:4706:22247":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:44979:9514":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"5:7594:9064":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"5:5404:8979":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:2966:253":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"16:6244:16574":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:43584:3202":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:9755:16671":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"16:7951:16622":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"16:7984:16624":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:42092:168":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"2:44155:9003":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:46482:3831":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"6:548:10139":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"6:7702:15383":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:10463:2858":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:45148:147":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"17:261:33134":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"16:7619:16614":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:12485:16936":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:10018:16676":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:2665:15645":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:43416:8954":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:14091:20180":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:11557:16825":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"17:15168:20938":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:12863:16715":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:11093:9008":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"6:4516:13653":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:5033:3639":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"16:2439:15635":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"16:6362:3091":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:4708:22249":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:40806:3340":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"7:31:15399":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:11354:16776":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:40136:9094":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:11063:16747":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:23065:193":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"16:4674:16269":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:44198:9031":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:13959:20170":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"9:356:15444":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"6:1703:3590":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"5:3622:3148":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:44951:9513":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"2:12572:9019":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:6139:2877":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"6:580:10144":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:5637:3677":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"17:16079:21149":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"2:41044:3174":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:5066:863":{"crate_id":2,"path":["core","iter"],"kind":"module"},"16:6141:32449":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:22482:3873":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"1:5694:227":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:45239:8938":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:15390:20959":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:11056:3680":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:12887:2999":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:47229:3812":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:5701:2882":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"16:8012:16625":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:22001:3189":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"16:7118:3647":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:12058:1162":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:10746:22147":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:12336:9526":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:8908:3713":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"9:481:15427":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:11324:16791":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"16:8022:16626":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:11715:16830":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"1:8233:3481":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"6:7610:13882":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:14752:20918":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:34144:9364":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:22013:28651":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:11764:16834":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"2:42332:3548":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"5:6011:2807":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:951:3360":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:4813:3584":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:48606:8926":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:4808:13682":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:9659:3182":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:39959:9379":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:47389:3766":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"6:5140:13720":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:21358:28650":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:22448:3874":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"6:6691:14809":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:3435:3533":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"6:5859:14378":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:4428:13643":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:8589:3664":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:3170:3377":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"16:6320:16578":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:8363:3375":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:5464:3673":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"16:7270:3047":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"11:430:32264":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:11467:16778":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:46427:3770":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"6:6913:14820":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:15778:20986":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:9858:16698":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"0:24:1829":{"crate_id":0,"path":["fnv","FnvHashSet"],"kind":"type_alias"},"17:13308:3006":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:33488:9358":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"17:13455:19665":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:2546:209":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"6:4578:13661":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"16:2284:15602":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"16:5897:16567":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:6584:9316":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"16:4787:16290":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:8369:9312":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:557:3322":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"16:2835:15653":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"18:613:33467":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:14436:20201":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:14025:20175":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"16:5316:2958":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:2728:263":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1:8966:3709":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:13738:20159":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:8855:206":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"17:16223:21160":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"11:2569:2508":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:7934:3473":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:12264:16897":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"6:501:10134":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:723:151":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:3463:2797":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"17:0:2363":{"crate_id":17,"path":["object"],"kind":"module"},"1:1887:3415":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"17:14079:20179":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:15410:20961":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:44761:9057":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:922:3356":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:43395:135":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"13:0:2353":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:7453:25307":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"17:10915:33394":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:5822:3695":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:15383:20958":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"6:6012:14390":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:42701:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"10:44:3119":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"1:3551:3430":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"17:14111:20181":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:6231:2881":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"16:5601:16559":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:10004:8955":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:8511:3661":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:42401:171":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"16:6908:32433":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:7716:3482":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:45040:9533":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"17:13594:19675":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"16:7551:3107":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:46274:3793":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:11026:16729":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"11:2304:3361":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"17:12621:16946":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"16:5568:16557":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"6:5969:14386":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:3569:3480":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:46405:3764":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"16:5645:16560":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:13553:19672":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:12647:16941":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"1:640:3345":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:11075:3187":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"2:45029:3743":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"18:718:21186":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:10670:23174":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"1:10381:2897":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"17:12530:16943":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"2:41607:9311":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:8407:28583":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:8446:3643":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:12079:1258":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:836:3147":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:15010:20929":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:4890:3579":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:3157:124":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:23985:3560":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:21586:3188":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"16:2304:15629":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"18:515:21197":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"11:1025:3362":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:14386:20198":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"16:6282:16576":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:43341:28056":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"0:20:1823":{"crate_id":0,"path":["fnv","FnvBuildHasher"],"kind":"type_alias"},"17:14212:20186":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:2234:16798":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:40116:9381":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:11647:16827":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:3494:3479":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"6:6804:14813":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:4461:13647":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"16:7523:3104":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:2434:3463":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"17:11075:2975":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"6:483:10131":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"5:7536:3435":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:2110:8950":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"5:903:3147":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"16:7414:3101":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:10737:22129":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"1:8370:3603":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"18:659:21189":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:46941:27946":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:11825:16861":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"16:7706:16617":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:3308:3528":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:13437:19664":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:11841:16882":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"18:581:3197":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:12074:9479":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:13922:20168":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"16:2399:15633":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:2666:2853":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"11:1566:15548":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:9916:16700":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"11:710:3151":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"11:2542:28280":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:1072:3364":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"6:6114:14398":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"5:7302:3144":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:44084:8987":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:42114:3543":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"6:4968:13701":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:7672:2894":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"6:1507:11028":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:13526:19670":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"6:5955:14343":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"6:5015:13707":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"5:1790:2812":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:4867:2873":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"16:2995:15658":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:9737:16673":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"15:288:15580":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:13064:16681":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"6:7679:13891":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"17:11153:16709":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"11:2231:3118":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"5:3702:2771":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:15289:20949":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:23703:189":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"17:10317:2984":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:40738:9136":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:41157:9326":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"16:2709:15647":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"16:6394:16581":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:44165:9004":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"5:1456:2558":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"6:1591:11037":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:43592:2499":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:41053:9320":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"16:3260:15661":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"2:43378:3164":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"17:15931:19653":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"1:4097:3570":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"16:7103:32551":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:3310:3529":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:44669:9054":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"6:7598:13880":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:46675:3759":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"6:6128:14400":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:13606:19676":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"9:501:15431":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:2540:202":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:41565:3697":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"16:3177:15660":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:21356:28642":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:8348:3602":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"6:4351:13638":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"16:5713:3065":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:11898:16860":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:10675:3472":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"17:12213:16926":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:42435:3647":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"17:16269:19662":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"5:1271:3361":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"5:212:2769":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:38662:9373":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:10218:2981":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:3191:140":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"18:706:9019":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:40966:3453":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:32882:2512":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"16:6610:16587":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"6:6047:14391":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:5197:211":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"17:12289:16893":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"16:7366:16606":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"6:6798:14812":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:41589:2848":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:39875:9097":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"9:329:15483":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:1607:3368":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"16:5825:3033":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:4236:9101":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"2:12106:9025":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"11:2554:32255":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:21684:3482":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"6:5130:13719":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"11:1582:15549":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"11:844:3357":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:13766:16888":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"6:4977:13702":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:4194:108":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"11:328:32259":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:43631:3204":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:15760:20984":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"5:7508:3437":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:4220:3595":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:9949:23003":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"17:10155:2958":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:11680:8993":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"17:10044:16703":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:11537:16792":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"16:2917:15656":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:44063:8998":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"16:4572:16213":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"16:3600:15664":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:21693:3748":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"6:4947:13699":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"6:1537:11032":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:14723:20917":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"5:2063:3380":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"16:2529:15639":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:2715:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"17:13674:20157":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:3999:3565":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:12189:16924":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:45169:214":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:11605:2989":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:44734:9056":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:42551:2558":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"16:4399:16178":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"6:4455:13488":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:1581:2791":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:15426:20963":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:415:182":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:12629:9045":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:3391:144":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:4581:9113":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"1:1939:3428":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"0:0:2240":{"crate_id":0,"path":["fnv"],"kind":"module"},"2:44686:9055":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:8879:3680":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"11:742:3152":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:44443:9038":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:44493:3507":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"17:12900:3001":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"5:6994:269":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:7602:16696":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:10997:16727":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"16:8055:16627":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"6:5982:14388":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:6426:183":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:4049:3567":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"16:7306:16601":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"16:4355:16157":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:8549:3663":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:6966:2889":{"crate_id":1,"path":["std","sys","pal","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"1:588:3338":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:1900:9402":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"6:4847:13687":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"5:634:29855":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"18:765:21188":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"6:4556:13659":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"5:2718:29830":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"6:1650:11042":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:11755:16833":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"16:5726:16562":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:4182:28369":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:14587:20211":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"16:6965:16597":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"16:2509:15638":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"11:490:151":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"16:2641:15644":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:15463:20967":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:10661:16707":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:8263:3508":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"17:16138:21153":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"2:5776:2797":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:10854:3676":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"2:44798:9058":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:5500:3675":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:12067:806":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:1596:3366":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:44145:9005":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:10688:22050":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"2:31043:28020":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"5:7341:2782":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"16:5630:3058":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:47855:3795":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:4572:2839":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:13211:19654":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"12:0:2359":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:10000:127":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"5:5826:257":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"16:2819:15652":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"6:7633:13885":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:6934:14822":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:2675:3482":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:621:3342":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:3349:3525":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"6:569:10142":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"6:489:10132":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"6:5974:14387":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:13473:19666":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"5:886:2778":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"11:837:3356":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"16:2769:15650":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:5484:3674":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"5:7466:2508":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:12695:16944":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"17:12043:16844":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:11541:3552":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"6:7639:13886":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:10170:2959":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:38552:9371":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:46326:3804":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:42258:28065":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:13116:16982":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"17:9807:16684":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"16:7345:16604":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:42466:3648":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"15:327:3112":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:7802:3350":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:10054:3408":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"6:4698:13672":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"14:160:15556":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:11313:16765":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"17:16176:21156":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"5:1287:3363":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:48583:8925":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:48458:8916":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:10443:3528":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"18:670:21190":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:23335:192":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"16:4907:16318":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:40910:3438":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"6:5885:14380":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:4686:13671":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"11:1007:3361":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:3801:3553":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"16:6268:3089":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"6:4884:13692":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:11079:9010":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:34085:9362":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"5:4227:2797":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:46773:3777":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:12671:16976":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"17:12478:16935":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:8866:3213":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"5:5020:2797":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"5:3170:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"11:1051:3363":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:10448:2853":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:43081:8956":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:44959:9518":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:2971:3165":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:11812:16840":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:0:1540":{"crate_id":1,"path":["std"],"kind":"module"},"1:9452:3475":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"16:4813:16293":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:48431:3834":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"11:1066:15545":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:8892:3214":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:9799:8953":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"17:12201:16925":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:11256:16762":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"11:1676:2764":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:16165:21155":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"2:44044:8996":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:12683:16945":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"1:7973:2495":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"1:9457:2896":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"5:7477:2509":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"5:2994:29863":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:8253:3171":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:43613:3661":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:11392:16775":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"6:4800:13681":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:32795:16627":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"6:5104:13715":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:14372:20197":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"6:1682:11045":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:4984:3630":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"16:6692:16590":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:42478:9464":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:1063:3363":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"15:0:2361":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:11038:9007":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:12792:16679":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:1862:3408":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:893:2791":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:42477:3649":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"6:4364:13639":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:15126:20935":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:45005:129":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"6:5075:13713":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:12059:338":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"5:4107:3148":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:46972:28005":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:42937:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:44864:9043":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:10073:22316":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"2:40884:3439":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:40879:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:42976:3201":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:3139:8947":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"2:22295:3880":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"1:9061:3219":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:11547:16824":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"6:6136:31797":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"18:563:2949":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:13946:20169":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"4:0:2354":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:7227:2566":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:41022:3171":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:43576:2498":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"6:1913:11214":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:13497:19668":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:22853:3558":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:31017:9283":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"6:4939:1112":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:15608:20973":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"16:5278:16551":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"16:7429:32365":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"6:5085:13714":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"18:0:2364":{"crate_id":18,"path":["memchr"],"kind":"module"},"16:6646:16588":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:12061:1548":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"5:6370:3888":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"11:1087:32269":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"18:531:21198":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"5:2249:29968":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:12068:803":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"5:2998:29860":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:3012:135":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"6:6107:14397":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:9163:3486":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"14:220:15566":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"6:7371:15194":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"6:7668:13890":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:3027:9360":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"16:7444:16608":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:3227:22959":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:10219:154":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:13239:9154":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:8939:3708":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"16:7176:32597":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:10646:3633":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"11:2151:3363":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:4453:9105":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"7:0:1697":{"crate_id":7,"path":["unwind"],"kind":"module"},"16:6431:3092":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:12060:1515":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"5:3211:30004":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:4170:28382":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:12399:16931":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:2961:116":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"6:4783:13679":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:15799:20987":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:9066:3229":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"17:11142:2963":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:13581:19674":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:10944:2901":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:12006:22113":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"17:9781:16697":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"9:391:15429":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"5:1388:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"16:6788:32549":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:357:3335":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"5:3266:3368":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:14131:20182":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:10399:2986":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:22433:3482":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"17:1207:16748":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:2724:264":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:42623:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:10338:3679":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:10709:137":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"16:6215:3086":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"16:5959:15601":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:42487:3328":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"16:4733:16282":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"16:5865:16566":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:11674:16828":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"5:2988:29857":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:40986:3476":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"2:46529:3746":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:22402:9391":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"17:14298:20192":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"6:527:10136":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:14311:20193":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:46130:3791":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:12597:16948":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"2:43623:3203":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:3376:9380":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"16:2979:15657":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:8605:3665":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"1:1590:3365":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"6:6666:10986":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:32825:244":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:48107:3801":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:3010:233":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"1:7740:3327":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:44846:9042":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:12320:9524":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:14912:20924":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:1824:3398":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:44983:9515":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"5:683:256":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:44971:9519":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:4111:3572":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"6:1521:11030":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"16:7152:16598":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:12078:1707":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"17:9671:16674":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:11583:16799":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:12362:16930":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:22:739":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"11:2383:3147":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"1:8289:3551":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:12464:16934":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:46797:3826":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"16:3406:15662":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"5:2487:29832":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:4628:3170":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:40777:9137":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:8276:3509":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:21312:28638":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"17:11115:16737":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:12789:118":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"16:6759:3095":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:44209:9028":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"1:11644:15588":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:15266:20946":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"16:4283:16108":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"16:6230:16573":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:41082:9322":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:2959:8945":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:11688:16797":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"17:15400:20960":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"16:7355:16605":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"5:3245:30012":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"5:790:2773":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:12388:16922":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"6:5009:13706":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:40798:9033":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"9:52:3120":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:42740:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"16:6941:16596":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:1708:2797":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"17:15624:20975":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"0:21:1825":{"crate_id":0,"path":["fnv","FnvHashMap"],"kind":"type_alias"},"17:16249:21162":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"2:48247:3807":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:3473:16848":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:7913:2515":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:12260:9525":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"16:6599:15574":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"16:5662:16561":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:12929:16716":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:44812:9059":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:6880:3744":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"6:4902:13694":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:8360:3371":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:12069:804":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"17:15822:20989":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:32826:2511":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"5:7351:3382":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"2:46751:3771":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:42584:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:48530:8922":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"16:149:2753":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"6:1570:11035":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:14847:20920":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"5:3232:3367":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"18:698:2952":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"6:596:10146":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:34627:9367":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"5:6136:2797":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"18:113:21176":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"18:80:21174":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:6679:2887":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"17:14503:20206":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"16:5485:3054":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:2795:123":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"16:4844:16301":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"5:7419:2558":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"5:786:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}