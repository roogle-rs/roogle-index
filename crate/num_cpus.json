{"root":"0:0:1798","crate_version":"1.15.0","includes_private":false,"index":{"2:12002:34134":{"id":"2:12002:34134","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11618:16536","`DoubleEndedIterator`":"2:7203:121","prim@char":"1:11878:419","str::match_indices":"2:11999:34133"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:43411:9491","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:9188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11623:9188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11638:16534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5399:2272":{"id":"5:5399:2272","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7252:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7252:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11919:34121":{"id":"2:11919:34121","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11999:34133":{"id":"2:11999:34133","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11618:16536","`DoubleEndedIterator`":"2:7203:121","prim@char":"1:11878:419","str::rmatch_indices":"2:12002:34134"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:43393:9490","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:9188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11962:6610":{"id":"2:11962:6610","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41282:179","prim@char":"1:11878:419","self::pattern":"2:11618:16536"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41280:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:9188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11623:9188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11638:16534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11966:1931":{"id":"2:11966:1931","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11618:16536","`DoubleEndedIterator`":"2:7203:121","prim@char":"1:11878:419","str::split_whitespace":"2:11944:31574","str::rsplit":"2:11972:26467"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:43243:2247","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:9188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11955:26475":{"id":"2:11955:26475","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11878:419","self::pattern":"2:11618:16536"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:9188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11623:9188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11638:16534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11927:314":{"id":"2:11927:314","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:11928:1703","`u8`":"1:11895:1493"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11993:2157":{"id":"2:11993:2157","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11618:16536","`DoubleEndedIterator`":"2:7203:121","prim@char":"1:11878:419","str::matches":"2:11993:2157"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:43447:9492","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:9188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11937:34125":{"id":"2:11937:34125","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11884:1395","str::slice_mut_unchecked":"2:11938:34126","crate::ops::Index":"2:2978:11260"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11928:1703":{"id":"2:11928:1703","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11895:1493"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12011:34137":{"id":"2:12011:34137","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11975:34128":{"id":"2:11975:34128","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11618:16536","str::split":"2:11966:1931","prim@char":"1:11878:419","`DoubleEndedIterator`":"2:7203:121","str::rsplit_terminator":"2:11978:34129"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:43293:9488","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:9188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12037:26344":{"id":"2:12037:26344","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39438:26356","Self::is_ascii":"2:12036:26343"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41280:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"AsciiChar","id":"2:39438:26356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12038:26346":{"id":"2:12038:26346","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5383:6558":{"id":"5:5383:6558","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7252:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7252:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:9188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12040:26348":{"id":"2:12040:26348","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11929:1663":{"id":"2:11929:1663","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41282:179"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41280:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9792:222","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9792:222","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11938:34126":{"id":"2:11938:34126","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11884:1395","crate::ops::IndexMut":"2:2982:11261","str::slice_unchecked":"2:11937:34125"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11978:34129":{"id":"2:11978:34129","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11618:16536","str::split":"2:11966:1931","prim@char":"1:11878:419","str::split_terminator":"2:11975:34128"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:43311:9489","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:9188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11623:9188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11638:16534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5398:34799":{"id":"5:5398:34799","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:279:2476","`String`":"5:7252:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:279:2476","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:7001:9103","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7252:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12044:34145":{"id":"2:12044:34145","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4534:34145"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:43560:9406","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11925:26280":{"id":"2:11925:26280","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11185:16537"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12022:26476":{"id":"2:12022:26476","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11878:419","self::pattern":"2:11618:16536"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41280:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:9188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11623:9188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11638:16534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1798":{"id":"0:0:1798","crate_id":0,"name":"num_cpus","span":{"filename":"src/lib.rs","begin":[1,0],"end":[459,1]},"visibility":"public","docs":"A crate with utilities to determine the number of CPUs available on the\ncurrent system.\n\nSometimes the CPU will exaggerate the number of CPUs it contains, because it can use\n[processor tricks] to deliver increased performance when there are more threads. This \ncrate provides methods to get both the logical and physical numbers of cores.\n\nThis information can be used as a guide to how many tasks can be run in parallel.\nThere are many properties of the system architecture that will affect parallelism,\nfor example memory access speeds (for all the caches and RAM) and the physical\narchitecture of the processor, so the number of CPUs should be used as a rough guide\nonly.\n\n\n## Examples\n\nFetch the number of logical CPUs.\n\n```\nlet cpus = num_cpus::get();\n```\n\nSee [`rayon::Threadpool`] for an example of where the number of CPUs could be\nused when setting up parallel jobs (Where the threadpool example uses a fixed\nnumber 8, it could use the number of CPUs).\n\n[processor tricks]: https://en.wikipedia.org/wiki/Simultaneous_multithreading\n[`rayon::ThreadPool`]: https://docs.rs/rayon/1.*/rayon/struct.ThreadPool.html","links":{},"attrs":["#![deny(missing_docs)]","#![allow(non_snake_case)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:72:1663","0:73:1681"],"is_stripped":false}},"2:11984:26471":{"id":"2:11984:26471","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11878:419","str::splitn":"2:11981:26469","self::pattern":"2:11618:16536"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:43365:9201","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:9188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11623:9188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11638:16534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:72:1663":{"id":"0:72:1663","crate_id":0,"name":"get","span":{"filename":"src/lib.rs","begin":[73,0],"end":[75,1]},"visibility":"public","docs":"Returns the number of available CPUs of the current system.\n\nThis function will get the number of logical cores. Sometimes this is different from the number\nof physical cores (See [Simultaneous multithreading on Wikipedia][smt]).\n\nThis will always return at least `1`.\n\n# Examples\n\n```\nlet cpus = num_cpus::get();\nif cpus > 1 {\n    println!(\"We are on a multicore system with {} CPUs\", cpus);\n} else {\n    println!(\"We are on a single core system\");\n}\n```\n\n# Note\n\nThis will check [sched affinity] on Linux, showing a lower number of CPUs if the current\nthread does not have access to all the computer's CPUs.\n\nThis will also check [cgroups], frequently used in containers to constrain CPU usage.\n\n[smt]: https://en.wikipedia.org/wiki/Simultaneous_multithreading\n[sched affinity]: http://www.gnu.org/software/libc/manual/html_node/CPU-Affinity.html\n[cgroups]: https://www.kernel.org/doc/Documentation/cgroup-v1/cgroups.txt","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12009:34136":{"id":"2:12009:34136","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12019:1977":{"id":"2:12019:1977","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11878:419","self::pattern":"2:11618:16536"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41280:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:9188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11933:26432":{"id":"2:11933:26432","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9792:222","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9792:222","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:12034:1790":{"id":"2:12034:1790","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11579:127","`FromStr`":"2:11578:2300"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:41424:210","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:11578:2300","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11578:2300","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11920:34122":{"id":"2:11920:34122","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11935:26433":{"id":"2:11935:26433","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9792:222","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9792:222","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11931:26431":{"id":"2:11931:26431","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41282:179"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41280:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9792:222","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9792:222","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11922:34123":{"id":"2:11922:34123","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11920:34122"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11952:26474":{"id":"2:11952:26474","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11878:419","self::pattern":"2:11618:16536"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:9188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11969:26465":{"id":"2:11969:26465","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11878:419","self::pattern":"2:11618:16536"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:11441:9195","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:9188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11987:34130":{"id":"2:11987:34130","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41280:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:9188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12043:11238":{"id":"2:12043:11238","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4537:11238"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:43551:9140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5401:27632":{"id":"5:5401:27632","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12040:26348"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7252:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11916":{"id":"2:11916","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11917:811","2:11918:2012","2:11919:34121","2:11920:34122","2:11922:34123","2:11925:26280","2:11926:34124","2:11927:314","2:11928:1703","2:11929:1663","2:11931:26431","2:11933:26432","2:11935:26433","2:11937:34125","2:11938:34126","2:11939:26456","2:11940:26457","2:11941:9216","2:11942:9505","2:11943:6601","2:11944:31574","2:11945:31590","2:11946:1928","2:11947:34127","2:11948:31648","2:11949:26473","2:11952:26474","2:11955:26475","2:11958:1996","2:11962:6610","2:11966:1931","2:11969:26465","2:11972:26467","2:11975:34128","2:11978:34129","2:11981:26469","2:11984:26471","2:11987:34130","2:11990:34131","2:11993:2157","2:11996:34132","2:11999:34133","2:12002:34134","2:12005:1935","2:12007:34135","2:12009:34136","2:12011:34137","2:12012:34138","2:12013:34139","2:12016:34140","2:12019:1977","2:12022:26476","2:12025:34141","2:12028:34142","2:12031:34143","2:12034:1790","2:12036:26343","2:12037:26344","2:12038:26346","2:12039:26347","2:12040:26348","2:12041:34144","2:12043:11238","2:12044:34145"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:12005:1935":{"id":"2:12005:1935","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12012:34138":{"id":"2:12012:34138","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5386:34796":{"id":"5:5386:34796","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7252:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7252:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:9188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5389:34797":{"id":"5:5389:34797","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7252:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7252:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5382:34795":{"id":"5:5382:34795","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:279:2476","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:7001:9103","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:279:2476","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:7001:9103","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5400:27631":{"id":"5:5400:27631","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12039:26347"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7252:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12013:34139":{"id":"2:12013:34139","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11878:419","self::pattern":"2:11618:16536"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:9188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11623:9188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11643:16533","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5397:34798":{"id":"5:5397:34798","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7252:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7252:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12028:34142":{"id":"2:12028:34142","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11878:419","self::pattern":"2:11618:16536"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:9188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12007:34135":{"id":"2:12007:34135","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5381":{"id":"5:5381","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5382:34795","5:5383:6558","5:5386:34796","5:5389:34797","5:5397:34798","5:5398:34799","5:5399:2272","5:5400:27631","5:5401:27632"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11958:1996":{"id":"2:11958:1996","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41282:179","prim@char":"1:11878:419","self::pattern":"2:11618:16536"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41280:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:9188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12031:34143":{"id":"2:12031:34143","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11878:419","self::pattern":"2:11618:16536"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:9188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11623:9188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11638:16534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11945:31590":{"id":"2:11945:31590","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11944:31574"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:43526:9496","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11948:31648":{"id":"2:11948:31648","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:43535:9215","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11946:1928":{"id":"2:11946:1928","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:43497:2243","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11944:31574":{"id":"2:11944:31574","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11945:31590"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:43517:9495","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11947:34127":{"id":"2:11947:34127","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:43507:9494","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11918:2012":{"id":"2:11918:2012","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12036:26343":{"id":"2:12036:26343","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11926:34124":{"id":"2:11926:34124","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:12016:34140":{"id":"2:12016:34140","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11878:419","self::pattern":"2:11618:16536"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:9188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11939:26456":{"id":"2:11939:26456","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11940:26457"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11940:26457":{"id":"2:11940:26457","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11939:26456"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11941:9216":{"id":"2:11941:9216","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11878:419"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:43213:9208","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12041:34144":{"id":"2:12041:34144","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4536:34144"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:43542:9407","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11990:34131":{"id":"2:11990:34131","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41280:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:9188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11623:9188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11638:16534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11996:34132":{"id":"2:11996:34132","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11618:16536","`DoubleEndedIterator`":"2:7203:121","prim@char":"1:11878:419","str::matches":"2:11993:2157"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:43465:9493","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:9188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11623:9188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11638:16534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12025:34141":{"id":"2:12025:34141","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11878:419","self::pattern":"2:11618:16536"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:9188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11623:9188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11638:16534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:73:1681":{"id":"0:73:1681","crate_id":0,"name":"get_physical","span":{"filename":"src/lib.rs","begin":[108,0],"end":[110,1]},"visibility":"public","docs":"Returns the number of physical cores of the current system.\n\nThis will always return at least `1`.\n\n# Note\n\nPhysical count is supported only on Linux, mac OS and Windows platforms.\nOn other platforms, or if the physical count fails on supported platforms,\nthis function returns the same as [`get()`], which is the number of logical\nCPUS.\n\n# Examples\n\n```\nlet logical_cpus = num_cpus::get();\nlet physical_cpus = num_cpus::get_physical();\nif logical_cpus > physical_cpus {\n    println!(\"We have simultaneous multithreading with about {:.2} \\\n              logical cores to 1 physical core.\", \n              (logical_cpus as f64) / (physical_cpus as f64));\n} else if logical_cpus == physical_cpus {\n    println!(\"Either we don't have simultaneous multithreading, or our \\\n              system doesn't support getting the number of physical CPUs.\");\n} else {\n    println!(\"We have less logical CPUs than physical CPUs, maybe we only have access to \\\n              some of the CPUs on our system.\");\n}\n```\n\n[`get()`]: fn.get.html","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11949:26473":{"id":"2:11949:26473","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11878:419","self::pattern":"2:11618:16536"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:9188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11917:811":{"id":"2:11917:811","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11878:419"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11972:26467":{"id":"2:11972:26467","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11618:16536","`DoubleEndedIterator`":"2:7203:121","prim@char":"1:11878:419","str::split":"2:11966:1931"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:43261:9198","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:9188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11623:9188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11638:16534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11942:9505":{"id":"2:11942:9505","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11878:419"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:43219:9486","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12039:26347":{"id":"2:12039:26347","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11981:26469":{"id":"2:11981:26469","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11878:419","self::pattern":"2:11618:16536","str::rsplitn":"2:11984:26471"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:43347:9200","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:9188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11943:6601":{"id":"2:11943:6601","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:43229:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"5:1313:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:10689:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"2:2848:16670":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"16:6506:8654":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:11299:7731":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:41797:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:22492:9257":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:43109:9477":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"6:494:2962":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:8945:9810":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:10660:7655":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:1785:9665":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:13015:8151":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"5:6364:6615":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:2840:16668":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:41254:9182":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:8548:19592":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:41597:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:47188:9629":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"9:481:18522":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:13506:8273":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"6:7491:5191":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:10223:9200":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"16:535:8405":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:10823:9081":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:2744:106":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:43507:9494":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:10989:7386":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:7226:2474":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"16:5886:8544":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"6:1576:3726":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"11:991:8745":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:39884:9403":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:844:2296":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"16:6460:8451":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:7558:16649":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:11441:9195":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"6:7275:6546":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"16:7697:8457":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:10705:7660":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:2371:2203":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:2539:2257":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:10691:19704":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"16:6390:8641":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:45652:9561":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:9959:7561":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"16:2298:18642":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"5:3774:7113":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"20:3471:5170":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:39185:2179":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:4323:7168":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"6:7503:10812":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"20:3065:5129":{"crate_id":20,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"3:229:210":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:9108:35052":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:3938:11308":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:13516:8278":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:41112:9179":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"6:4546:10595":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:2343:2192":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"17:9188:35049":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"5:5832:16972":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:20990:11370":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"2:9118:6687":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"16:8170:8911":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:13453:8262":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"6:6116:1722":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:4851:5710":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:22261:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"20:4870:3655":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:20771:11376":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"18:574:7309":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:10354:7620":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"5:1442:9004":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:4577:10432":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"16:8256:8918":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"5:3533:2296":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"18:707:7344":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:39119:202":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:9973:7562":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:12622:7655":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:4573:10428":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"20:3174:5141":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:1924:11291":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"6:562:2970":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:20706:11381":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"1:7674:11280":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:47226:9630":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:11339:7742":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"5:6443:7113":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"6:1546:3723":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"6:4681:5158":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"11:1859:9024":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:638:9658":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"0:0:1798":{"crate_id":0,"path":["num_cpus"],"kind":"module"},"17:11946:7870":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:10032:9195":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"16:7683:8467":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"6:4590:5149":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"5:7001:9103":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:10311:9797":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"16:5346:8507":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:10783:9205":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"17:13433:8256":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:9122:6688":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"16:6336:8634":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:46032:9584":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:11888:642":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"20:3355:5157":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Chdr"],"kind":"struct"},"1:5570:7205":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:43770:9218":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:11641:7807":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:43855:9518":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"6:5051:10709":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:39856:9400":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"11:1688:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"11:816:9021":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"20:3006:5125":{"crate_id":20,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:11556:7779":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"16:7588:8841":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"20:4995:6199":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"16:5367:18640":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"18:736:23446":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:857:9020":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:10283:7616":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"20:138:2649":{"crate_id":20,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:10459:7222":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:41467:2296":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"16:5000:8502":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"5:0:286":{"crate_id":5,"path":["alloc"],"kind":"module"},"16:3300:8474":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"2:40253:9160":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"6:4294:5123":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:8214:9187":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:1982:185":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:41398:6674":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:12634:7993":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:11969:7875":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"5:2915:33496":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:2243:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:43465:9493":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:10015:7568":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"16:5386:7482":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"16:3899:8481":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"6:123:2649":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:39059:200":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:8493:2298":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"18:671:7338":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:9596:7523":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:43535:9215":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:39943:16610":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:11369:9676":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:21345:32882":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:11903:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:7613:7222":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:888:9006":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:9696:7515":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:8319:9188":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:11770:7837":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"20:3389:5161":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"5:1212:9015":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:45029:9533":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"6:587:2974":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:13461:8263":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"9:52:18541":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"20:5455:5190":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"6:1657:3733":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"20:3414:5164":{"crate_id":20,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"16:5693:8520":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:11490:9712":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:9907:7555":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:43982:10923":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"6:4344:5127":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:43293:9488":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:42569:145":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"6:1721:3740":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:8079:2276":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1:11849:11244":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:2830:8765":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:10419:2265":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"20:4910:6194":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:2520:237":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"5:7277:9128":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:10681:7658":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:11902:1124":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:21802:30666":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:10580:7646":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:12372:7949":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"16:4540:8488":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:43542:9407":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:10039:7572":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"16:7335:35041":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:8781:2296":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:22162:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:5926:206":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"20:4101:5700":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:9895:7551":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:41331:6614":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"6:7538:10817":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:7694:9260":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:30368:30675":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:12448:140":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:10649:7653":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:13135:8182":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"6:4521:5145":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:43974:10921":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:5563:7204":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:47018:9626":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"20:521:2965":{"crate_id":20,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:47142:9628":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:3160:16588":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"16:6943:19532":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:9178:7494":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"5:1381:6615":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:5067:191":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"17:11902:7862":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:6880:2274":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:22939:9129":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:41266:9184":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"20:4165:5705":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlmsghdr"],"kind":"struct"},"1:1583:9025":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"16:5797:8533":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"16:3749:8477":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:47302:9634":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"6:4398:5009":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"6:482:2960":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:8490:19590":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"11:359:7102":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:4256:9145":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"6:4875:10642":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:7165:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:4103:11324":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"11:2157:18597":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"2:10109:9197":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:8212:11353":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:10844:25142":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:3154:135":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:10206:9691":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"1:530:7195":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"11:2204:35024":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:47363:9639":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:6538:2330":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"2:40359:9166":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:10465:7631":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"16:8129:8906":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"6:5015:5171":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:11885:1475":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:2310:188":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"20:1416:3728":{"crate_id":20,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:5179:190":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"1:3354:2233":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"18:491:7308":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"5:7206:31647":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"20:3080:1918":{"crate_id":20,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"20:3197:5144":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"20:3380:5160":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:2789:16662":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:11434:7758":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:12419:7956":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"5:4206:2296":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:44212:9523":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"18:614:35059":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:2507:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:40324:9164":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:12503:11253":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"17:9986:7563":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:11878:419":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"6:6691:6194":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:11844:24306":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:13763:8362":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"20:4298:5734":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"20:5033:6202":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","termios2"],"kind":"struct"},"2:40373:9167":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"6:6724:6197":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"16:6442:8645":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"11:119:7098":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"5:2635:10833":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:45408:9553":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:2159:16681":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"17:10478:7632":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"16:7519:8837":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"18:644:7309":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"6:5988:10772":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:4288:5122":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"6:5829:5690":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:30174:6565":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:43021:9469":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:22195:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:2549:7182":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:2814:16665":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:5910:7204":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:42970:9468":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:3986:11311":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"16:6218:8614":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:43311:9489":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:12138:7897":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"20:483:2961":{"crate_id":20,"path":["libc","unix","timeval"],"kind":"struct"},"1:926:9004":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:41146:11299":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:13857:8383":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"20:5473:5193":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"16:5643:8519":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:9080:132":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"6:4790:10615":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"9:0:2052":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"18:660:7332":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:12407:107":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"5:782:7116":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:43393:9490":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"20:469:2959":{"crate_id":20,"path":["libc","unix","group"],"kind":"struct"},"16:5976:8407":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"5:3520:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:2476:1908":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"11:2198:10568":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:20631:11378":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:9453:19607":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:11721:7812":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:40262:9161":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:8389:19587":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:7457:7371":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"5:1227:9014":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"6:6016:10780":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"16:2470:8429":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:43517:9495":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:2468:16615":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:1745:10836":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:4333:6695":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:1844:9667":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:875:9005":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:936:11246":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"5:7147:2185":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"16:7652:198":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:45774:9564":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"16:6558:8658":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:7835:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:39841:9140":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"16:5779:8529":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"5:2911:33497":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"20:1514:3736":{"crate_id":20,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:21854:9251":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:42544:9456":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:22459:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:39908:9405":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:6296:166":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"18:481:7307":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"16:6201:8608":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:46482:9591":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"16:8025:8896":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"6:4619:5151":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:8904:9804":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:9782:2217":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:10670:7657":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"17:10743:7667":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:8138:2246":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"5:2406:10830":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:21689:10838":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"16:7711:8845":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:13121:8179":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"6:4492:5142":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"5:4136:2233":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"17:12576:7984":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:13499:8271":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:3874:11304":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"5:264:7113":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:45107:9536":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:6188:7204":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"11:1852:7104":{"crate_id":11,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"11:2219:2185":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:10712:19705":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:2149:589":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"6:4383:5130":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:13721:8356":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"11:744:9006":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:386:7367":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:13332:8226":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"5:1350:2296":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:13265:8212":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:3248:2266":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:7851:2258":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:39141:201":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:4641:11328":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"6:7443:6202":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:20743:11382":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"2:21705:9232":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:43497:2243":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:39868:30674":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:1467:1686":{"crate_id":2,"path":["core","mem"],"kind":"module"},"2:43966:10919":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:20781:16681":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"5:6094:11461":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"5:5034:2317":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"6:4629:5152":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:8482:2297":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"17:13469:8265":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"6:7532:5195":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:21880:11302":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:13477:8266":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"16:4480:8486":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:44017:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:12318:7942":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:11832:7853":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:10928:7224":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:44159:205":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:3131:25030":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:6133:9698":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"5:7010:6615":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"20:2976:5122":{"crate_id":20,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"6:6047:10789":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:8803:9693":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:47311:9635":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"6:1609:3729":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:13249:8208":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"20:4773:2886":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:10491:7633":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:43059:9474":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:13053:8162":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:5549:9154":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:2516:238":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"5:3116:2296":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:4095:11323":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"16:2642:8436":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:2982:11261":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"20:1436:3730":{"crate_id":20,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:41637:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:43695:9507":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:44220:9525":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:12263:192":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:2240:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"1:1589:9026":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"20:3348:5156":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Chdr"],"kind":"struct"},"1:11901:1547":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:40112:9418":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:8521:19591":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:731:142":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"16:7029:8739":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:1665:1087":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:5502:11354":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:2504:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:42581:2292":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:42289:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"5:6177:7151":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"11:2087:9015":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:21756:9238":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"6:6578:10797":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"6:500:2963":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:9098:7492":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:11883:1365":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"6:4911:10662":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"6:568:2971":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:8632:19572":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:8044:2211":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"9:445:18523":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:8638:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:8922:24789":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:11446:9842":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"17:11821:7850":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"5:5234:16521":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:10649:10936":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:9258:9191":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"1:9372:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"2:30766:2535":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"1:2345:2193":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"5:7071:9120":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:3448:24520":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"17:13698:8343":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:4990:9686":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"20:489:2962":{"crate_id":20,"path":["libc","unix","timespec"],"kind":"struct"},"2:21567:9229":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"20:4943:6197":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:2693:225":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"2:47401:9641":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:45676:9562":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:9325:141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:20466:32878":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"17:9512:7516":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:21333:9226":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:3924:11306":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"6:6057:5712":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:2755:11365":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:10416:7627":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"5:2168:33872":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"17:9469:7508":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"5:5710:7134":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:9228:35045":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:10721:7662":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"20:3086:5009":{"crate_id":20,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:12835:8053":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:7551:2299":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:8753:7359":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"5:4335:7140":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:9875:9445":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"16:4624:8491":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:947:9010":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:3932:11307":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:30204:30687":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"17:11459:7763":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"6:4667:5155":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:45460:9555":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:7281:159":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"6:1682:3735":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"5:1453:198":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:2262:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:4184:6694":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"20:1490:3734":{"crate_id":20,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:47080:9627":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"9:502:9084":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"16:8090:8902":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"6:4952:5167":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:6668:3658":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:20672:16681":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"5:7055:6615":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:43970:10920":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:9577:7522":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:9095:9817":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"1:3982:11310":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:2699:228":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:43243:2247":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:4603:16604":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:2771:16660":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:11165:9841":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"5:1611:7113":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:9566:7496":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:39898:9404":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:11024:1965":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"20:4847:3683":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:9443:7507":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:9523:7517":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:9603:7187":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"17:9498:7515":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:10505:7634":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"16:3063:7393":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:10862:9800":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"1:7568:2217":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"6:4865:10636":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:10626:7651":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:25749:9130":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"16:7103:9814":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"20:5064:6204":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"6:4991:10688":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"16:7042:8742":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:7818:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"6:4743:5165":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:6684:31722":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"9:234:2292":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:40007:9415":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:11060:7655":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:13376:8240":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:8072:2274":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:3972:11309":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:3365:16569":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"2:39251:9270":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"2:42335:71":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:44275:9529":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"6:1594:3728":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:8733:186":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:3207:2269":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:11861:7858":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:43219:9486":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:8598:19594":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:39224:9269":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:11623:9188":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:10857:19597":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:10667:9834":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"1:3464:1907":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"20:4209:5711":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:21741:31655":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:13082:8170":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"16:2862:8445":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"6:4836:5705":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"16:6876:8458":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"16:6327:8633":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"16:8214:8803":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"20:5494:6547":{"crate_id":20,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:5022:5172":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:43551:9140":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:8788:7360":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"20:1504:3735":{"crate_id":20,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"18:507:7309":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:8789:9802":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"16:7411:8561":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"6:526:2965":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:21818:30686":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"6:4719:5162":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:3291:2254":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"16:4757:8494":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"11:757:7134":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:40233:9155":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:20840:11369":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"6:4845:5706":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"16:6904:8718":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:40275:9431":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"11:1839:2296":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:8205:9678":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"16:2404:8426":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:44038:9520":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"11:1873:9026":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:11282:7728":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:40154:9421":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"5:3621:7113":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"5:2115:10825":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:4:1014":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"16:5104:8505":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"5:3752:7104":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"1:8144:2247":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"11:1126:9018":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:11881:1049":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:7690:9723":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:9571:7181":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:10709:2212":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:487:7370":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:21461:2217":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"11:2192:10567":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:8835:11360":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:10377:7621":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"16:2931:18668":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:45177:9539":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"16:7488:8835":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"16:6474:8468":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"6:6002:10775":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:562:7371":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:44233:161":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:44169:211":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"6:4947:10686":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"6:4377:5129":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:5755:5698":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"11:1634:7107":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"11:1071:35023":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"16:3640:7397":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"16:5594:8454":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:2210:2189":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"20:0:816":{"crate_id":20,"path":["libc"],"kind":"module"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:11305:7229":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:9025:167":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:8257:9782":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:11458:10942":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:13233:8205":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:41175:10908":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"18:599:35060":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"5:779:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"5:1431:9003":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"20:55:2572":{"crate_id":20,"path":["libc","unix","DIR"],"kind":"enum"},"2:20892:11373":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:3179:31123":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:11618:16536":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"6:5816:5704":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:20811:11383":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"5:1241:9019":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:13211:8199":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"20:1386:3725":{"crate_id":20,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:12345:7945":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"5:3183:9027":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"6:5995:10774":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:10516:7635":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"5:3974:7134":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"20:1398:3726":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:11900:789":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"16:2337:8418":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:2361:2198":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"17:11532:7777":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"5:2086:9106":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:3377:9139":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"16:2572:8433":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:5764:2328":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:911:7104":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"6:5935:10750":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:45805:9565":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:44963:9530":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:10135:11356":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:45986:9583":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"6:7509:10813":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:8953:7484":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"20:5046:6203":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:9333:145":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:45278:9543":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"20:3160:5139":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:8195:19573":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:361:9652":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"6:6569:2844":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:40594:7176":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:1577:9024":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"6:5974:10761":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:22129:178":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:9933:7558":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:20886:11371":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"11:1091:9017":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"20:4806:6191":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:4111:9143":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:2613:2259":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"11:1866:9025":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"16:2594:8434":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"20:4797:2844":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:8466:2295":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"6:7252:6545":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:4571:5148":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:11391:7753":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"19:0:1031":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:3996:9141":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"11:2060:8745":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"20:3071:5130":{"crate_id":20,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:2777:8759":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:3314:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:20479:33127":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:7788:2206":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"15:0:2057":{"crate_id":15,"path":["addr2line"],"kind":"module"},"16:6990:8735":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:11330:9209":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"6:4898:10652":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"16:2378:8425":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:9792:222":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"6:6545:2886":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"20:4974:6198":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"20:4185:5708":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"3:0:443":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:7554:11249":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"6:1736:3742":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"6:1752:3743":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:2797:16663":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"20:3032:5127":{"crate_id":20,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"6:5785:5701":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:4261:9146":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:31922:10570":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:30134:6563":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:4678:11314":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:43096:9418":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"5:2905:33493":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:20438:2535":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:9038:35053":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:959:9013":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:2831:7201":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:10589:7647":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:45159:9538":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:4783:33374":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"16:4904:8499":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"16:7529:8464":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:11240:10940":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:11897:1491":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"6:4857:10631":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"11:1879:9027":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"2:2853:16671":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:11258:7727":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"13:0:2049":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:8168:11298":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:2161:16682":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"6:4821:10627":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"8:0:2051":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:21847:10841":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:39962:9410":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:6369:1910":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:12126:7896":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:8801:30791":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"18:766:23447":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:2819:16666":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"16:6890:8459":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:10440:7629":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:6409:2329":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"16:5920:8401":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:242:7364":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"16:8109:8905":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"16:6236:8624":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"16:7467:8832":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"14:202:16550":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:12550:7982":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"16:6376:8450":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:4175:9679":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:1947:7378":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"18:690:7341":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:11012:9799":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:635:9656":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"6:4486:5141":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:3128:29213":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:2933:7382":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"15:219:18627":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:9000:10930":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:43411:9491":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"6:7555:10822":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"20:3363:5158":{"crate_id":20,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:10939:7225":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:43141:9480":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:43070:9475":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:10885:7676":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"5:4046:9020":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"6:6755:6198":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:7526:5194":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:9946:7560":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:1565:6615":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"16:6793:8709":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:43151:9481":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:43842:9514":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:10699:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"6:554:2969":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"6:6776:6199":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"16:8156:8469":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:42344:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"20:3433:5166":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:12563:7983":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"5:1365:9020":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:11884:1395":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"17:11653:7810":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"5:2907:10826":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:45438:9554":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:11090:7690":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"6:4707:5161":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:2207:2188":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"5:2904:6662":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:11896:1490":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"17:13419:8254":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"20:4180:5707":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:20906:9228":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:47282:9632":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:9350:35048":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:8965:9814":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"16:6164:8591":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:41757:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"20:4904:6193":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"6:6553:3654":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"16:2879:8446":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:11136:7694":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"20:1410:3727":{"crate_id":20,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"20:4120:5702":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:12158:7900":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:0:816":{"crate_id":6,"path":["libc"],"kind":"module"},"17:10142:19678":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"5:1041:34996":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:12923:8116":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:11372:7748":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:10945:7226":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"5:3123:9025":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"20:4151:5690":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"5:6693:244":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"16:6819:8710":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"5:7266:9127":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"16:154:7094":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"16:8142:8909":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:12059:7887":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:6552:2331":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"6:4751:10599":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:1919:19636":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:9275:35047":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:9218:7495":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:5686:2319":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:12536:7979":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:12201:136":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"5:5190:7113":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:12959:8145":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:8797:6615":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:11032:10927":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"2:21:681":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:2929:2473":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:6621:9699":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"17:13625:8322":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:1433:144":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:3076:11262":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:8151:2243":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"1:676:11241":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"11:703:9004":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"6:1525:10585":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"20:3443:5167":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:3167:2267":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:22426:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"6:6706:6196":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:4641:5153":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:12510:7977":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"11:399:35019":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"16:7767:19536":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:11600:7796":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:8420:19588":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:7667:9720":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"16:5305:8506":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:46298:9589":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:12358:7946":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:5950:9156":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:8283:19584":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"18:521:23448":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"5:7332:7104":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"17:11891:7861":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"6:62:2572":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"17:13194:8194":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:11585:7790":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:14:2160":{"crate_id":2,"path":["core","write"],"kind":"macro"},"16:5677:19525":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:12194:7906":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:10719:25158":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:45584:9558":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"5:6245:7134":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:11877:936":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"16:7557:8838":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:11390:9213":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"5:7033:7125":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"5:7175:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"5:279:2476":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:7778:2208":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"17:8683:7357":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"20:3119:5134":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:11109:7693":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:9488:7513":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:8217:11327":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:47386:9640":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:20884:2217":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"6:488:2961":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"5:688:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:45297:9544":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:12607:7990":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:12282:7937":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"5:1412:9006":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:43990:10925":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"20:4095:5699":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:4882:1001":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"16:6243:35043":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:11319:7741":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:11520:7774":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"6:573:2972":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"5:862:7121":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:12433:7958":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:40242:9430":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:43994:10926":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"5:4004:7113":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"16:2694:8438":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"16:7016:8736":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:2895:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:12483:7975":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:13659:8334":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:11037:19598":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:355:9651":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:2315:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"6:5947:10754":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"16:7366:19534":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"20:3111:5133":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:42599:9466":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"16:6321:8632":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"6:1700:3737":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"18:636:7331":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"16:2830:8444":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"6:1564:3725":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:2960:16504":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"2:47322:9636":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:7859:2260":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:1787:7374":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:43627:16548":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:9069:210":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"17:13159:8184":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"5:35:7109":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"16:7293:8782":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"6:4941:10683":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:3231:16503":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:10735:7665":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:9035:219":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"6:5032:10695":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:45075:9535":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:7015:30545":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:11894:740":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:3382:1909":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"11:1050:18603":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:40612:9175":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:12072:7888":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:3246:2265":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"18:515:7306":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:1731:16692":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"16:4969:8501":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"16:7859:19537":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:11638:16534":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:21764:9239":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"20:5467:5192":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:3614:11300":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:45630:9560":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:1034:7373":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:2793:16661":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"10:36:10573":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:2978:11260":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:32027:2529":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:20451:32878":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:9379:2209":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"1:9384:7220":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"18:590:7319":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:413:165":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:9734:7536":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:1914:9136":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"6:6587:6191":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:12646:8000":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:40163:9422":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"5:1403:9005":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:1071:9015":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"16:55:8887":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"17:9796:7541":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:2205:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:2704:2521":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:11628:7806":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:43678:9506":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"16:2546:8432":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"16:4596:8490":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"7:32:18509":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:42279:10909":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:4378:7169":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"6:5747:5697":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:1594:9027":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"16:6307:8448":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"16:5847:8541":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"5:1077:34994":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:554:9654":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:9670:7532":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:8952:9811":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:21018:9228":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:8163:9774":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:43807:9509":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:4043:16501":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:13667:8335":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:2836:16667":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"5:1715:7104":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"16:5811:8534":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:47348:9638":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"6:4553:10597":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:39163:203":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:901:7134":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:9265:7496":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:45053:9534":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:45315:9545":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:2742:2525":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"1:11328:9675":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:3994:11312":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:40002:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"16:8047:8897":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"11:1540:9022":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"11:828:11246":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"5:1421:9021":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:41218:9448":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"17:12770:8002":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:8443:19589":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"20:568:2972":{"crate_id":20,"path":["libc","unix","itimerval"],"kind":"struct"},"5:7159:2186":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:6907:7214":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"11:60:35022":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"5:7100:6615":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:11844:7855":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:9124:6689":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:2346:182":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"6:4431:5134":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"20:3059:5128":{"crate_id":20,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:10270:7614":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"6:4698:5160":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"16:3047:18670":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:6637:16653":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:2467:2217":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"7:0:1537":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:11573:7787":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:40224:9429":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:21620:9230":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:9979:9666":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"20:527:2966":{"crate_id":20,"path":["libc","unix","hostent"],"kind":"struct"},"17:8971:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"16:4818:8496":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"16:4037:8482":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"5:1462:9102":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"5:4365:2233":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:8957:9812":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:9078:9816":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"15:180:18622":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"16:3585:8476":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"16:6671:8683":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:4762:389":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"20:5461:5191":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"18:719:7348":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:11879:7859":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"14:160:8994":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"6:4459:5137":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:39928:9140":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:2587:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1:6009:7206":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"17:13367:8237":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:0:1387":{"crate_id":1,"path":["std"],"kind":"module"},"17:13426:8255":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:44177:195":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"6:1539:3722":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"6:6830:6203":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:41917:2318":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:2513:133":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"6:541:2967":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"6:4423:5133":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"5:210:7111":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:4008:9142":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"20:4229:5712":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:42591:9465":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:40210:9426":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:11892:743":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"6:595:2975":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:10251:9202":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:2690:2520":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:40285:9432":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:8890:2322":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:8256:19571":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"6:4767:10601":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:11544:7778":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:9653:7529":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:41348:9020":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:40334:9433":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:13041:8157":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:1895:9669":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"11:2076:9014":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:43049:9473":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"6:547:2968":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"6:1555:3724":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"20:536:2967":{"crate_id":20,"path":["libc","unix","iovec"],"kind":"struct"},"1:8157:9772":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:8979:24718":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"16:2502:8430":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:7128:16650":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:30168:6564":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"11:768:7104":{"crate_id":11,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"16:6179:8593":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"16:4510:8487":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:46062:9585":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"5:7016:9119":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:8407:2293":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:9721:7535":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:45007:9532":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"18:727:7351":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"16:6767:8708":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:11891:742":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"16:5032:8503":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"20:3209:5145":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:45606:9559":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"16:8180:19538":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:2689:2468":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"1:4413:11328":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"16:4445:8485":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:10428:7628":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"20:4781:3654":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:40141:2244":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"5:5640:232":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"20:1479:3733":{"crate_id":20,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"16:6520:8656":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:5719:2321":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:13309:8223":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:2760:8758":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"16:5571:8452":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:10452:7630":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"6:506:2964":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:9424:7505":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"20:5447:6546":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"16:2448:8428":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"20:3137:5136":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:40172:9423":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:11220:7712":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"2:41837:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"16:6061:18641":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:12236:7927":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:2682:220":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:2785:11366":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"6:1650:3732":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"11:2212:10571":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"16:2319:8416":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:3679:9676":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:2750:11363":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"6:5798:5702":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:10527:19703":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"20:4272:5733":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:13812:8377":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"16:7572:35039":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:47478:9644":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:4784:10612":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:30262:30677":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:20670:31596":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"1:11882:312":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"17:11502:7773":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:8121:2244":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"1:8476:2296":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"5:962:7113":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"5:6737:7151":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"18:0:2060":{"crate_id":18,"path":["memchr"],"kind":"module"},"5:814:7119":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:11192:9708":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:1821:9666":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"5:679:231":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:9826:7543":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:3139:16672":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:47337:9637":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"6:1908:3796":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:10832:9692":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"16:5963:8557":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:13316:8224":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"16:2720:8439":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:20644:11379":{"crate_id":2,"path":["core","core_simd","cast","SimdCastPtr"],"kind":"trait"},"2:21673:9231":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"6:6110:5733":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:43998:10927":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:43986:10924":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"6:5880:5711":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:13678:8340":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:8858:7362":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:8979:35051":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"17:9876:7434":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"16:5402:7483":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:10654:2206":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"20:4193:5709":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:40192:9149":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"20:5004:6200":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:12033:7884":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:8851:11359":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:6757:11367":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:41356:6615":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"14:187:18616":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:21009:2217":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"16:7669:8466":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:4682:11317":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"20:3370:5159":{"crate_id":20,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:7662:9663":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"17:13024:8155":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"11:867:9013":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"5:3087:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:45238:9541":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:42039:6685":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"20:614:2993":{"crate_id":20,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:43201:9485":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:41195:31649":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"16:3225:8473":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"17:10104:7579":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:13292:8216":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"6:5959:5157":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"6:653:2993":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"1:4563:11308":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:8633:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"20:4203:5710":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlattr"],"kind":"struct"},"17:11234:7713":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"5:7252:224":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:9070:2216":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:8909:107":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"17:9409:19606":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"1:3059:2277":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"1:11159:9704":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"9:388:18524":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:13488:8270":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"16:3030:8470":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:45362:9546":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"20:3166:5140":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:13344:8232":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"16:7437:8823":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:42053:6686":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:1080:9019":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"16:6868:8716":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"14:7:8994":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"6:4439:5135":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:40310:7329":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:1544:2233":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"16:6488:8646":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:9641:7527":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"16:4327:8483":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:4736:7202":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"16:4400:8484":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:39258:6695":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"17:11471:7764":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:9120:194":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"17:975:7372":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:9748:7495":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"6:6008:10778":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:6085:7192":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"20:3104:5132":{"crate_id":20,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"16:4872:8498":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:9030:218":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"20:1444:3731":{"crate_id":20,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"20:3489:5172":{"crate_id":20,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:42046:6684":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:2386:1906":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:40132:9420":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:43365:9201":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:11355:7746":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"16:6293:8630":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:43261:9198":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:42307:110":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:40092:9417":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"5:2076:7128":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"6:7497:5192":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"5:3687:9105":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:10798:19596":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:11051:2223":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:4111:11325":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:2844:16669":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:10936:7680":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"6:5717:5675":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"16:2668:8437":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:1048:8745":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:11222:9711":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:43821:16549":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:47291:9633":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:5439:9692":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"11:1561:9023":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:13411:8251":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:10625:9829":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"5:3275:7104":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"16:2426:8427":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:13257:8210":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:8213:11352":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"18:582:2535":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:11899:1489":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"20:5439:6545":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:3149:234":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"15:198:18623":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:22294:9256":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:41492:183":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"6:1692:3736":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:13777:8364":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:39265:9271":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"6:4509:5144":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:22360:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"5:3672:2260":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"18:624:35061":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:7934:9727":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"6:4449:5136":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:4407:2360":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"6:1519:3721":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"20:3286:5151":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"11:731:9005":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:5370:9690":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"16:7498:8836":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:2824:8764":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"6:532:2966":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:12293:7939":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:10598:7681":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"6:5862:5708":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:12418:7192":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"1:6865:29003":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:9059:2223":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"20:3276:5150":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:41407:6672":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"18:609:7325":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"11:1843:6615":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:11446:7761":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:7587:9713":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:12915:8115":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"11:279:10562":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"20:1361:3722":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:11367:9212":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:9489:7178":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"17:10080:7577":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:9822:7542":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"16:6717:8695":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"16:6400:8642":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:11860:25145":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:2352:189":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"16:7317:35044":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"11:675:9003":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"20:134:2648":{"crate_id":20,"path":["libc","unix","FILE"],"kind":"enum"},"2:45508:9556":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"6:6151:10791":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:9964:9020":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:8909:2246":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:11390:9677":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:8823:7361":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"20:4278:1722":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"11:783:7106":{"crate_id":11,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"6:5779:5700":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"18:531:7313":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"16:7077:19533":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"5:6595:7159":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"5:632:9097":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:11643:16533":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"18:681:7339":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:11069:19599":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:31962:9261":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:9105:112":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:43447:9492":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"16:2786:8442":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:9110:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"20:1543:3740":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"5:6605:7161":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"1:8231:9772":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:12461:7964":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:5385:9691":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:3166:16587":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:12894:8105":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"17:10316:7618":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"6:4757:5166":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"5:7092:6615":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:13033:8156":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:4435:11329":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:11893:744":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:45908:9567":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:41677:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:40294:9162":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:7929:9726":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:45828:9566":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"18:113:23437":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:1572:7104":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"1:5247:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"6:4331:5126":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:7569:9653":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:3400:2213":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"20:582:2974":{"crate_id":20,"path":["libc","unix","servent"],"kind":"struct"},"20:3154:5138":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"16:2905:8447":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:13865:8386":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:45137:9537":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"6:5077:10720":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"6:474:2959":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:12307:7941":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"6:4478:5140":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"6:1715:3739":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:13443:8259":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:3134:25026":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:10052:7574":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:11615:7802":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:2923:2471":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"6:4797:10617":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:22327:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"17:12224:7925":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:585:11237":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"5:7063:198":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"11:393:35018":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:12403:7955":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:11785:7841":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"16:7837:8859":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"20:2982:5123":{"crate_id":20,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:2809:16664":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:7506:7216":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:8424:2294":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"20:1472:3732":{"crate_id":20,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"16:7478:8462":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:40556:9169":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:10679:2210":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"20:3320:5154":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"6:4932:10677":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:40585:2275":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:7805:2207":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:9940:2296":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:480:7194":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"20:4107:5701":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:9138:7493":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:46222:9587":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"6:6700:6195":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:43030:9470":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"16:6351:19529":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:8727:9797":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:43229:2246":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"20:5417:2919":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:1628:588":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:41557:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"20:5019:6201":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:20498:33126":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:4434:6697":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"5:4913:2233":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:7578:6547":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"16:6662:8682":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:13564:8315":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:4527:5146":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:1668:3734":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"6:6785:6200":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"20:1550:3741":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:11678:7233":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"20:3408:5163":{"crate_id":20,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:2739:2469":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:41340:2296":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"1:867:6615":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:10402:7623":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"20:1537:3739":{"crate_id":20,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:1846:9668":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"17:11193:7704":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:12388:7951":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"20:3257:5149":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"16:7757:8847":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"20:3127:5135":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"11:638:2296":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:2692:226":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:13842:8382":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:9478:7510":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"16:7065:8744":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:39075:198":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:12288:9224":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:9588:7182":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:41517:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"16:2616:8435":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"14:215:8999":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:43743:9508":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:46940:9625":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:45727:9563":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:922:9003":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:9866:7546":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"16:4702:8492":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:49284:11387":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"2:41424:210":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"17:12799:8022":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"16:4845:8497":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"9:352:18538":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:10026:7569":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:2736:2523":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"1:3910:11305":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"20:495:2963":{"crate_id":20,"path":["libc","unix","rlimit"],"kind":"struct"},"1:3324:2275":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"16:6132:8586":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:2573:2250":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"18:538:7316":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:6332:9699":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"1:3439:2216":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:4387:6696":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:38997:16505":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"2:21016:11377":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"16:2742:8440":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:618:9655":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"6:4732:5164":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:21868:9252":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"7:79:18516":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:1635:6560":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"1:1768:610":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:3676:9675":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:11155:16738":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"13:110:35025":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"5:4817:204":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"16:4932:8500":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"20:1635:3796":{"crate_id":20,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:41416:193":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"11:0:2054":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"5:1980:2260":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:9380:19605":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:4638:11339":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:10823:7454":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"16:8269:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"16:6431:8644":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:4124:11326":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:5334:9688":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"6:5967:5156":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:12113:7895":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:2926:2472":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"5:3162:34910":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:1062:9014":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"6:4559:5147":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:4813:10623":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:11689:16542":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"6:7230:2919":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:12236:31563":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:9886:7548":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"6:1728:3741":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"6:6136:5734":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"5:4398:7140":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:11207:9709":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:12449:7962":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:11890:745":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"6:4499:5143":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:4255:9680":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:2919:2470":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:12980:8150":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:8334:2291":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:11578:2300":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:30190:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"20:1531:3738":{"crate_id":20,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:4142:9144":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:40345:2245":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:2765:8755":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:40579:9171":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"6:4688:5159":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"18:699:7342":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"9:325:10574":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"16:7509:8463":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"11:840:9010":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:43213:9208":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:40082:7170":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:10071:9196":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:9117:25162":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"1:8212:10928":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:2746:2527":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"17:9068:35050":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"16:6575:19530":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"11:859:9012":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:41475:9020":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:12592:7986":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:9116:6686":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"20:4042:5675":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"16:7803:8855":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:20496:33122":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:3194:16502":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:20824:2217":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"6:4472:5139":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:8745:9798":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"18:564:7318":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:41129:9181":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"20:4138:5704":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:5491:9152":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:501:7128":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"5:7349:7154":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:7656:11243":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:10569:7642":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"6:579:2973":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:11163:7700":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:46268:9588":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:11827:9846":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"6:6848:6204":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"16:7743:8455":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:40604:9173":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"16:8072:8900":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:20662:11375":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"17:9340:7498":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"16:4789:8495":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:45208:9540":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:40019:31647":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"20:1350:3720":{"crate_id":20,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"20:3482:5171":{"crate_id":20,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"20:549:2969":{"crate_id":20,"path":["libc","unix","winsize"],"kind":"struct"},"6:7520:5193":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:12046:7885":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:13066:8167":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:930:9007":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:8239:9780":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"16:5708:8523":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:8100:2215":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"1:8759:9799":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"16:6854:8714":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:10967:7681":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:9853:7545":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:42803:9193":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"16:5724:8525":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"6:1514:3720":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"6:1614:3730":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:42319:8874":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:9114:6685":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:46332:9590":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"11:97:10561":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"6:6821:10801":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:46830:9624":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:10265:9203":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"5:5796:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:39217:9268":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:12331:7944":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:7161:134":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:9534:7519":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:10092:7578":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:10644:10934":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:1783:9664":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:6236:206":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:40570:1910":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"16:5557:8449":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"20:4817:6192":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"11:326:7100":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:3169:2268":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"6:1622:3731":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:11185:16537":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:11410:7754":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:10761:19595":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:7256:24320":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"20:4077:5698":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:40201:9151":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:43978:10922":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:41231:9678":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:42799:10917":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"20:5479:5194":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"20:1368:3723":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"20:5485:5195":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:9368:16619":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:43131:9479":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:11993:7876":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"20:1431:3729":{"crate_id":20,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:44050:16779":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"16:7635:8843":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:1561:2296":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"16:5944:8550":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"16:6696:19531":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"5:5484:7147":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"0:73:1681":{"crate_id":0,"path":["num_cpus","get_physical"],"kind":"function"},"1:8131:2245":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:4575:10430":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"1:2214:1992":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"14:165:18609":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:42552:9458":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:21781:30657":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"6:4773:10604":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"20:3092:5131":{"crate_id":20,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:643:11240":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"5:1057:33503":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"10:44:9030":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"6:6024:10783":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"16:3815:8479":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:11484:7765":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:9628:7526":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"6:4538:10590":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"6:5809:5703":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"5:1196:8745":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:9040:9703":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"14:0:2056":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"6:4609:5150":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:1978:7381":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:2781:11364":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"5:5905:2233":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"6:5900:10729":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"16:7543:8465":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:13744:8357":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:6482:2325":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:11069:10938":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"20:3226:5147":{"crate_id":20,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:38958:16586":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"16:5418:8508":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:11632:7344":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"20:1355:3721":{"crate_id":20,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:12019:7586":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"20:3425:5165":{"crate_id":20,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:9617:7525":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:47439:9643":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:1985:184":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:10000:7564":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:2510:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"20:4069:5697":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:10413:2267":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"17:13399:8248":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:39955:9409":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:39099:199":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"20:3461:5169":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:13324:8225":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"6:5843:10728":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:41365:6673":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"1:11889:643":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"1:11895:1493":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"16:4568:8489":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"5:4166:2233":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:8261:2753":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"6:4392:1918":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:12522:7978":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:30738:183":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"17:8931:7366":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"16:2357:8424":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:10048:9820":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"11:1847:7134":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:10750:9204":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:10334:7495":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:39438:26356":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"2:3932:2233":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"1:4902:11344":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"16:7626:8842":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:39044:9264":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:13689:8341":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"6:6685:6193":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"20:563:2971":{"crate_id":20,"path":["libc","unix","sigval"],"kind":"struct"},"1:5021:9686":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"20:3180:5142":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"9:421:18525":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:39969:16611":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"6:6800:6201":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:4404:5131":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:8088:2212":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:8806:32543":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:43962:10918":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"12:0:2055":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:43187:9482":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:3505:7134":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"18:755:7356":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:39936:9407":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"16:6361:8638":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"6:7485:5190":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:7641:11242":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"5:5816:2317":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:2868:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:9683:7533":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:8573:19593":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:10819:9723":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"17:10840:7674":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"20:557:2970":{"crate_id":20,"path":["libc","unix","linger"],"kind":"struct"},"11:1035:9015":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:20481:33124":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"5:3128:34909":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:11234:10939":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:0:2059":{"crate_id":17,"path":["object"],"kind":"module"},"16:3782:8478":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"6:5058:10712":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"6:4466:5138":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"5:3157:9024":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:6548:6621":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:7525:7218":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:5354:9689":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:8915:9807":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"16:6535:7097":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"5:4320:245":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:13803:8373":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"16:2967:18669":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"5:7192:9121":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:953:9012":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"5:7041:33895":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:29943:11301":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:10555:7637":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:8310:19585":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:9545:7477":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"6:5857:5707":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:8283:9682":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"20:574:2973":{"crate_id":20,"path":["libc","unix","tms"],"kind":"struct"},"14:31:8994":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"20:4131:5703":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:9182:9667":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:21729:9237":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"5:7025:7134":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:2908:2249":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"6:4960:5168":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:4827:10628":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"16:6146:194":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:11876:371":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"17:10747:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:43875:9219":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:8316:11348":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:7174:2475":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"11:821:9007":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"20:477:2960":{"crate_id":20,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:10237:9201":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:43560:9406":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:40182:9425":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"16:5655:8453":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:4680:11316":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:4507:11334":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:11422:7757":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"16:3872:8480":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"20:3296:5152":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:10635:7652":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"20:3215:5146":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"20:3401:5162":{"crate_id":20,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:13356:8233":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"6:4920:10668":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"20:1574:3743":{"crate_id":20,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:43347:9200":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"18:96:23436":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:10615:7650":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"11:652:9020":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"6:4416:5132":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:10303:7617":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:6586:217":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:9112:6684":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"16:5741:19526":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:7795:2210":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"1:7592:9715":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"20:4887:3658":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:3639:6615":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:10182:9199":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:9557:7495":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:42362:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"6:6651:3655":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"10:0:2053":{"crate_id":10,"path":["adler"],"kind":"module"},"16:6935:8721":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:6485:2326":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:42784:9467":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"6:6814:10798":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"6:7258:10804":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"6:1709:3738":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:45260:9542":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"5:6576:7147":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"6:4307:5124":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:9839:7544":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:7783:2209":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:3209:2270":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:6373:2323":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"16:2808:8443":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"6:4890:10647":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"14:221:9001":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:39988:9414":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"20:4925:6196":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:43526:9496":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:13879:8389":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:31958:9260":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:44983:9531":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"16:6254:8627":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"20:3187:5143":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:8667:7483":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:11844:112":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:4809:795":{"crate_id":2,"path":["core","iter"],"kind":"module"},"1:917:9021":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"16:7449:8824":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:4844:11337":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:43664:9503":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"6:5065:10715":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:41089:155":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"2:42060:6687":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"6:4318:5125":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"16:2524:8431":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"6:7568:10823":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:420:7369":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:21463:11372":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:4020:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:9772:7540":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:39244:8803":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"16:0:2058":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:3142:7384":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:39847:9399":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"6:4726:5163":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"5:5238:16522":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"11:452:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:2866:210":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"6:1532:10588":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"20:1522:3737":{"crate_id":20,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:9989:2247":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:2802:8760":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:5320:9687":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1:4073:30548":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:39920:9406":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"6:4803:10620":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:3880:11303":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:4252:207":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:12214:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:11879:1509":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"11:1144:9019":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:10144:9198":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:46688:9623":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"6:4371:5128":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:11142:7227":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"17:13181:8188":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:12259:7936":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:10545:7386":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:7939:2261":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"20:501:2964":{"crate_id":20,"path":["libc","unix","rusage"],"kind":"struct"},"1:10416:2269":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"2:44262:9029":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"1:4759:11313":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:2694:109":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"16:7259:6673":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"18:80:23435":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:8384:2292":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"16:7244:35042":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:43122:9478":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:11898:1492":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:22228:177":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"5:879:2296":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:11406:9214":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:13612:8316":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"6:4999:10690":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:45554:9557":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:41717:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:7124:16651":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:44250:9528":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"20:3334:5155":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"16:6728:8696":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:7468:9843":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:7595:30792":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:1754:9132":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:2601:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"17:247:7365":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:9998:24491":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"20:3451:5168":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"14:40:7728":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:8651:7482":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"5:2188:10829":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:9322:35046":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:13101:8171":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:0:497":{"crate_id":2,"path":["core"],"kind":"module"},"2:43039:9472":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:10897:7677":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"11:665:6615":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"20:2995:5124":{"crate_id":20,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:40035:9416":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:11011:7683":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"6:5773:5699":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:5071:10717":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:47416:9642":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:21239:11384":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"17:11924:7869":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:10923:7678":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"20:3147:5137":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:8867:11361":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"20:4174:5706":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlmsgerr"],"kind":"struct"},"17:13240:8207":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"5:3546:9020":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:13145:8183":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:6940:2312":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:11000:9798":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"16:5630:8514":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:3781:9677":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:7843:9725":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"16:2764:8441":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:5693:2320":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"20:1558:3742":{"crate_id":20,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"13:226:10560":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"18:652:7309":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"20:4919:6195":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:7203:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:22393:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"17:10125:7581":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:10223:24493":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"5:7222:9124":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:21234:11374":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"16:5071:8504":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:8718:7358":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"11:1009:9014":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:9148:35054":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:8822:9803":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:9312:7497":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"6:6628:3683":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:13385:8241":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:40049:1779":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"17:13219:8202":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"5:6291:7113":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:42384:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:41483:6615":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"1:4853:11338":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:13169:8185":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:6101:7210":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"17:12496:7976":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:9028:7491":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:43832:9510":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:10257:7613":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:13821:8379":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"4:0:2050":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:10354:7221":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"17:10068:7576":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"20:3019:5126":{"crate_id":20,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:1588:3727":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"20:3308:5153":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:11088:9703":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"6:4970:5169":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:13791:8371":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"16:3446:8475":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"16:4728:8493":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"16:6919:35040":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:5556:206":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"20:590:2975":{"crate_id":20,"path":["libc","unix","protoent"],"kind":"struct"},"1:8773:9800":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"16:6981:8732":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:2359:2197":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:41877:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:46144:9586":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:12098:7892":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"16:5616:8510":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:40563:9170":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"16:6544:8456":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"20:4824:2753":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:20985:2217":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"2:43649:9498":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:1819:9135":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:12006:7879":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"6:6605:2753":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:12902:8108":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:13639:8328":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"20:3238:5148":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:6598:6192":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:11813:7848":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:9917:7556":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:8360:19586":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:1568:7134":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"6:7544:10818":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"0:72:1663":{"crate_id":0,"path":["num_cpus","get"],"kind":"function"},"16:7596:19535":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"6:4653:5154":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:3457:2214":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"5:1994:9105":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:4327:9681":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:41280:181":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"11:305:10565":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:47264:9631":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:5499:2697":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"5:3149:9026":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"16:6022:19528":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"16:5998:19527":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:9373:9192":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:11800:7846":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"11:1524:18604":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:11171:9206":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"20:542:2968":{"crate_id":20,"path":["libc","unix","pollfd"],"kind":"struct"},"2:6731:16645":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"6:4980:5170":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"20:1377:3724":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:13651:8331":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:12178:7901":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"6:119:2648":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"5:7235:9126":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"5:6762:7164":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:8223:9778":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:12085:7890":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:11483:9712":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"9:174:18589":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:3266:7385":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:42560:9459":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"6:5870:5709":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"}},"external_crates":{"20":{"name":"libc","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":25}