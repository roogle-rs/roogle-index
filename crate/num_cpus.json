{"root":"0:0:1781","crate_version":"1.15.0","includes_private":false,"index":{"2:11894:33109":{"id":"2:11894:33109","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11878:1380","str::slice_mut_unchecked":"2:11895:33110","crate::ops::Index":"2:2995:11069"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11888:24833":{"id":"2:11888:24833","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:40684:176"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40682:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9756:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9756:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11915:1978":{"id":"2:11915:1978","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:40684:176","prim@char":"1:11872:411","self::pattern":"2:11575:16291"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40682:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11580:9118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11950:2139":{"id":"2:11950:2139","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11575:16291","`DoubleEndedIterator`":"2:7169:119","prim@char":"1:11872:411","str::matches":"2:11950:2139"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:42851:9299","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11580:9118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11884:311":{"id":"2:11884:311","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:11885:1686","`u8`":"1:11889:1478"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11982:33125":{"id":"2:11982:33125","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11872:411","self::pattern":"2:11575:16291"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11580:9118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11580:9118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11595:16289","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11993:24756":{"id":"2:11993:24756","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11969:33122":{"id":"2:11969:33122","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11905:30551":{"id":"2:11905:30551","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:42939:9145","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11929:24869":{"id":"2:11929:24869","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11575:16291","`DoubleEndedIterator`":"2:7169:119","prim@char":"1:11872:411","str::split":"2:11923:1913"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:42665:9128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11580:9118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11580:9118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11595:16289","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5374:6540":{"id":"5:5374:6540","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7239:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7239:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11580:9118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5390:2253":{"id":"5:5390:2253","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7239:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7239:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11966:33120":{"id":"2:11966:33120","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11879:33107":{"id":"2:11879:33107","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11877:33106"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11877:33106":{"id":"2:11877:33106","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5391:26039":{"id":"5:5391:26039","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:11995:24758"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7239:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11953:33116":{"id":"2:11953:33116","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11575:16291","`DoubleEndedIterator`":"2:7169:119","prim@char":"1:11872:411","str::matches":"2:11950:2139"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:42869:9300","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11580:9118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11580:9118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11595:16289","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5389:33781":{"id":"5:5389:33781","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:279:2458","`String`":"5:7239:221"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:279:2458","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6988:9033","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7239:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11901:30560":{"id":"2:11901:30560","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11902:30572"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:42921:9302","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11903:1910":{"id":"2:11903:1910","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:42901:2224","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11919:6592":{"id":"2:11919:6592","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:40684:176","prim@char":"1:11872:411","self::pattern":"2:11575:16291"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40682:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11580:9118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11580:9118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11595:16289","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11970:33123":{"id":"2:11970:33123","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11872:411","self::pattern":"2:11575:16291"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11580:9118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11580:9118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11600:16288","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11882:30123":{"id":"2:11882:30123","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11143:16292"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11890:24834":{"id":"2:11890:24834","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9756:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9756:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11947:33115":{"id":"2:11947:33115","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40682:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11580:9118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11580:9118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11595:16289","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11902:30572":{"id":"2:11902:30572","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11901:30560"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:42930:9303","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11898:9146":{"id":"2:11898:9146","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11872:411"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:42617:9138","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11906:24875":{"id":"2:11906:24875","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11872:411","self::pattern":"2:11575:16291"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11580:9118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11938:24871":{"id":"2:11938:24871","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11872:411","self::pattern":"2:11575:16291","str::rsplitn":"2:11941:24873"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:42751:9130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11580:9118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11895:33110":{"id":"2:11895:33110","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11878:1380","crate::ops::IndexMut":"2:2999:11070","str::slice_unchecked":"2:11894:33109"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"5:5380:33779":{"id":"5:5380:33779","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7239:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7239:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11897:24859":{"id":"2:11897:24859","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11896:24858"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11886:1646":{"id":"2:11886:1646","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:40684:176"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40682:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9756:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9756:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11900:6583":{"id":"2:11900:6583","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:42633:2227","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5388:33780":{"id":"5:5388:33780","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7239:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7239:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11996:24759":{"id":"2:11996:24759","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11944:33114":{"id":"2:11944:33114","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40682:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11580:9118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11875:1994":{"id":"2:11875:1994","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11941:24873":{"id":"2:11941:24873","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11872:411","str::splitn":"2:11938:24871","self::pattern":"2:11575:16291"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:42769:9131","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11580:9118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11580:9118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11595:16289","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11932:33112":{"id":"2:11932:33112","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11575:16291","str::split":"2:11923:1913","prim@char":"1:11872:411","`DoubleEndedIterator`":"2:7169:119","str::rsplit_terminator":"2:11935:33113"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:42697:9295","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11580:9118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11979:24876":{"id":"2:11979:24876","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11872:411","self::pattern":"2:11575:16291"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40682:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11580:9118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11580:9118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11595:16289","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11904:33111":{"id":"2:11904:33111","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:42911:9301","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11964:33119":{"id":"2:11964:33119","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11973:33124":{"id":"2:11973:33124","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11872:411","self::pattern":"2:11575:16291"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11580:9118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11874:802":{"id":"2:11874:802","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11872:411"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:72:1646":{"id":"0:72:1646","crate_id":0,"name":"get","span":{"filename":"src/lib.rs","begin":[73,0],"end":[75,1]},"visibility":"public","docs":"Returns the number of available CPUs of the current system.\n\nThis function will get the number of logical cores. Sometimes this is different from the number\nof physical cores (See [Simultaneous multithreading on Wikipedia][smt]).\n\nThis will always return at least `1`.\n\n# Examples\n\n```\nlet cpus = num_cpus::get();\nif cpus > 1 {\n    println!(\"We are on a multicore system with {} CPUs\", cpus);\n} else {\n    println!(\"We are on a single core system\");\n}\n```\n\n# Note\n\nThis will check [sched affinity] on Linux, showing a lower number of CPUs if the current\nthread does not have access to all the computer's CPUs.\n\nThis will also check [cgroups], frequently used in containers to constrain CPU usage.\n\n[smt]: https://en.wikipedia.org/wiki/Simultaneous_multithreading\n[sched affinity]: http://www.gnu.org/software/libc/manual/html_node/CPU-Affinity.html\n[cgroups]: https://www.kernel.org/doc/Documentation/cgroup-v1/cgroups.txt","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11991:1773":{"id":"2:11991:1773","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11537:125","`FromStr`":"2:11536:2281"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40826:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:11536:2281","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11536:2281","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12000:33129":{"id":"2:12000:33129","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4519:33129"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:42964:9208","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5372":{"id":"5:5372","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5373:33777","5:5374:6540","5:5377:33778","5:5380:33779","5:5388:33780","5:5389:33781","5:5390:2253","5:5391:26039","5:5392:26040"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5392:26040":{"id":"5:5392:26040","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:11996:24759"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7239:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11896:24858":{"id":"2:11896:24858","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11897:24859"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:73:1664":{"id":"0:73:1664","crate_id":0,"name":"get_physical","span":{"filename":"src/lib.rs","begin":[108,0],"end":[110,1]},"visibility":"public","docs":"Returns the number of physical cores of the current system.\n\nThis will always return at least `1`.\n\n# Note\n\nPhysical count is supported only on Linux, mac OS and Windows platforms.\nOn other platforms, or if the physical count fails on supported platforms,\nthis function returns the same as [`get()`], which is the number of logical\nCPUS.\n\n# Examples\n\n```\nlet logical_cpus = num_cpus::get();\nlet physical_cpus = num_cpus::get_physical();\nif logical_cpus > physical_cpus {\n    println!(\"We have simultaneous multithreading with about {:.2} \\\n              logical cores to 1 physical core.\", \n              (logical_cpus as f64) / (physical_cpus as f64));\n} else if logical_cpus == physical_cpus {\n    println!(\"Either we don't have simultaneous multithreading, or our \\\n              system doesn't support getting the number of physical CPUs.\");\n} else {\n    println!(\"We have less logical CPUs than physical CPUs, maybe we only have access to \\\n              some of the CPUs on our system.\");\n}\n```\n\n[`get()`]: fn.get.html","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1781":{"id":"0:0:1781","crate_id":0,"name":"num_cpus","span":{"filename":"src/lib.rs","begin":[1,0],"end":[459,1]},"visibility":"public","docs":"A crate with utilities to determine the number of CPUs available on the\ncurrent system.\n\nSometimes the CPU will exaggerate the number of CPUs it contains, because it can use\n[processor tricks] to deliver increased performance when there are more threads. This \ncrate provides methods to get both the logical and physical numbers of cores.\n\nThis information can be used as a guide to how many tasks can be run in parallel.\nThere are many properties of the system architecture that will affect parallelism,\nfor example memory access speeds (for all the caches and RAM) and the physical\narchitecture of the processor, so the number of CPUs should be used as a rough guide\nonly.\n\n\n## Examples\n\nFetch the number of logical CPUs.\n\n```\nlet cpus = num_cpus::get();\n```\n\nSee [`rayon::Threadpool`] for an example of where the number of CPUs could be\nused when setting up parallel jobs (Where the threadpool example uses a fixed\nnumber 8, it could use the number of CPUs).\n\n[processor tricks]: https://en.wikipedia.org/wiki/Simultaneous_multithreading\n[`rayon::ThreadPool`]: https://docs.rs/rayon/1.*/rayon/struct.ThreadPool.html","links":{},"attrs":["#![deny(missing_docs)]","#![allow(non_snake_case)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:72:1646","0:73:1664"],"is_stripped":false}},"2:11968:33121":{"id":"2:11968:33121","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11912:24400":{"id":"2:11912:24400","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11872:411","self::pattern":"2:11575:16291"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11580:9118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11580:9118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11595:16289","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11959:33118":{"id":"2:11959:33118","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11575:16291","`DoubleEndedIterator`":"2:7169:119","prim@char":"1:11872:411","str::match_indices":"2:11956:33117"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:42815:9298","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11580:9118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11580:9118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11595:16289","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11976:1959":{"id":"2:11976:1959","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11872:411","self::pattern":"2:11575:16291"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40682:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11580:9118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11899:9312":{"id":"2:11899:9312","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11872:411"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:42623:9293","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11885:1686":{"id":"2:11885:1686","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11889:1478"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11997:33128":{"id":"2:11997:33128","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4521:33128"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:42946:9215","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11999:11047":{"id":"2:11999:11047","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4522:11047"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:42955:9070","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11985:33126":{"id":"2:11985:33126","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11872:411","self::pattern":"2:11575:16291"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11580:9118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11873":{"id":"2:11873","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11874:802","2:11875:1994","2:11876:33105","2:11877:33106","2:11879:33107","2:11882:30123","2:11883:33108","2:11884:311","2:11885:1686","2:11886:1646","2:11888:24833","2:11890:24834","2:11892:24835","2:11894:33109","2:11895:33110","2:11896:24858","2:11897:24859","2:11898:9146","2:11899:9312","2:11900:6583","2:11901:30560","2:11902:30572","2:11903:1910","2:11904:33111","2:11905:30551","2:11906:24875","2:11909:24398","2:11912:24400","2:11915:1978","2:11919:6592","2:11923:1913","2:11926:24867","2:11929:24869","2:11932:33112","2:11935:33113","2:11938:24871","2:11941:24873","2:11944:33114","2:11947:33115","2:11950:2139","2:11953:33116","2:11956:33117","2:11959:33118","2:11962:1917","2:11964:33119","2:11966:33120","2:11968:33121","2:11969:33122","2:11970:33123","2:11973:33124","2:11976:1959","2:11979:24876","2:11982:33125","2:11985:33126","2:11988:33127","2:11991:1773","2:11993:24756","2:11994:24757","2:11995:24758","2:11996:24759","2:11997:33128","2:11999:11047","2:12000:33129"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11909:24398":{"id":"2:11909:24398","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11872:411","self::pattern":"2:11575:16291"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11580:9118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11962:1917":{"id":"2:11962:1917","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11892:24835":{"id":"2:11892:24835","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9756:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9756:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"5:5373:33777":{"id":"5:5373:33777","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:279:2458","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6988:9033","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:279:2458","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6988:9033","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11923:1913":{"id":"2:11923:1913","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11575:16291","`DoubleEndedIterator`":"2:7169:119","prim@char":"1:11872:411","str::split_whitespace":"2:11901:30560","str::rsplit":"2:11929:24869"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:42647:2228","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11580:9118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11876:33105":{"id":"2:11876:33105","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11988:33127":{"id":"2:11988:33127","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11872:411","self::pattern":"2:11575:16291"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11580:9118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11580:9118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11595:16289","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11883:33108":{"id":"2:11883:33108","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11994:24757":{"id":"2:11994:24757","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5377:33778":{"id":"5:5377:33778","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7239:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7239:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11580:9118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11926:24867":{"id":"2:11926:24867","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11872:411","self::pattern":"2:11575:16291"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:11399:9125","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11580:9118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11935:33113":{"id":"2:11935:33113","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11575:16291","str::split":"2:11923:1913","prim@char":"1:11872:411","str::split_terminator":"2:11932:33112"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:42715:9296","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11580:9118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11580:9118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11595:16289","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11995:24758":{"id":"2:11995:24758","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11956:33117":{"id":"2:11956:33117","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11575:16291","`DoubleEndedIterator`":"2:7169:119","prim@char":"1:11872:411","str::rmatch_indices":"2:11959:33118"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:42797:9297","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11580:9118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"17:11628:7736":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:5249:118":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:46760:9450":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:587:2955":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:2685:222":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"5:5025:2298":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:39003:9197":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:7770:2190":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"17:10936:7610":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"18:644:7239":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"5:7319:7034":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"1:7835:9534":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:8490:19328":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:2861:16426":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"16:6022:19266":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:42697:9295":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:42463:9281":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:39687:9239":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"20:3238:5129":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:6639:3636":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:38744:16341":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"16:7065:8674":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:41159:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:39635:9085":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:13385:8171":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"5:6988:9033":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:21706:30694":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:11813:7778":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"6:1527:10397":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"20:3147:5118":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"9:352:18277":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"18:515:7236":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:20418:32758":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"11:815:8937":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:21751:10650":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:3248:16258":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"20:3286:5132":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:2363:2180":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:41737:70":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:41971:143":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:13024:8085":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"16:2742:8370":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:2500:73":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"6:6139:10600":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:3133:29206":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:9917:7486":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:1655:1075":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"20:1377:3705":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:7017:29045":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"16:4932:8430":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:5023:9495":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"5:3995:7043":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:44289:9338":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"16:4445:8415":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:8287:9118":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:10030:9126":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"5:7253:9057":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:5441:9501":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"17:242:7294":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:42815:9298":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:3266:7315":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"16:6431:8574":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"16:6164:8521":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"6:482:2941":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:8827:11170":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"20:3160:5120":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"16:2879:8376":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"16:5386:7412":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"16:3899:8411":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:8376:2273":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:30122:30693":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:6238:203":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:42769:9131":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:9617:7455":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:45580:9395":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:41954:9265":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"16:7572:34712":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:11113:16495":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:1930:11100":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"16:2967:18407":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:9734:7466":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:10015:7498":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"5:870:2277":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"20:1543:3721":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:42901:2224":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"1:11893:1474":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"17:10080:7507":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"6:4449:5119":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"9:234:2273":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"20:1368:3704":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"5:2896:34186":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:3156:16429":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"6:4881:10461":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"11:1044:18341":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"6:6694:6177":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"16:8269:126":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"16:4540:8418":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"20:4824:2734":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"18:736:23184":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"9:52:18280":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"20:4185:5689":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:9670:7462":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"16:5797:8463":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:41441:6667":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"16:7509:8393":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:9174:9476":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:22264:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"5:5697:7064":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:11063:10747":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:43236:9317":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"16:3047:18408":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:8882:2303":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:39364:9217":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"6:4271:5103":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"16:7669:8396":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:12522:7908":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:9683:7463":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"18:96:23174":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:4105:11134":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:11471:7694":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"16:6876:8388":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"20:4870:3636":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:9082:6668":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:13612:8246":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:5916:9086":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:9339:9122":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"16:7803:8785":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"18:690:7271":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:10670:7587":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:4075:29044":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:8914:24162":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"20:3226:5128":{"crate_id":20,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:1663:3715":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:9275:34717":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:39230:9201":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"5:1453:9032":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"16:2764:8371":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"5:0:283":{"crate_id":5,"path":["alloc"],"kind":"module"},"5:4311:242":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:9138:7423":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:7682:9532":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"16:6943:19270":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:43637:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:1774:601":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:8725:183":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"16:8072:8830":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"6:5996:10587":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:12218:189":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:40531:9111":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:10705:7590":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:2575:2231":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"11:1836:6597":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"20:1550:3722":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:12243:9154":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"11:60:34690":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:39626:9236":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:39655:9090":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"18:755:7286":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"6:4469:5122":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"5:3119:34184":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:9973:7492":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"20:5046:6184":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:44934:9367":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:10661:9643":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"17:13356:8163":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:40959:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:13777:8294":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:30598:180":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"1:7787:2192":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:11595:16289":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:7926:9536":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"1:3681:9485":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"18:564:7248":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:45426:9392":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:13053:8092":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"11:853:8942":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:39281:9206":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:10316:7548":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:49000:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:10283:7546":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:1743:9062":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:10933:7155":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:10402:7553":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:13101:8101":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"5:1187:8675":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"20:4925:6177":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:3394:9069":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"17:11193:7634":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:2255:104":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:22396:9186":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"20:4781:3635":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"6:4510:5127":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"16:6575:19268":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:9078:6666":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"16:5643:8449":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:13443:8189":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:4239:204":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:9478:7440":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:11892:1477":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"1:8896:9613":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"20:3414:5145":{"crate_id":20,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"6:4521:10399":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:11653:7740":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:3382:16324":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"1:7505:7146":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"16:6558:8588":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"14:187:18354":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:13015:8081":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:5766:2309":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:39594:9079":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"20:4120:5683":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"16:5418:8438":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:11109:7623":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"5:7042:6597":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:10635:7582":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"6:5817:5671":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"11:985:8675":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:10742:9135":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:11201:9518":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:12461:7894":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:1988:182":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:50296:9459":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"16:7859:19275":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"12:0:2037":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"14:165:18347":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:3402:2195":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:2541:2238":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"6:5923:10559":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:11872:411":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"6:4963:5151":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:13721:8286":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:9090:6671":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:9076:118":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:12490:11062":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:907:7064":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:6588:214":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"20:3408:5144":{"crate_id":20,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:7467:9652":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:12224:7855":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"18:491:7238":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:8160:11107":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:11299:7661":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:1054:8675":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:6575:6172":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"20:3355:5138":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Chdr"],"kind":"struct"},"1:8136:2228":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"20:3451:5149":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:44836:9363":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"6:5990:10584":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"16:4596:8420":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:965:8943":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:40006:9103":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:8180:11163":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:562:7301":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:10142:19416":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"5:1706:7034":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"5:7079:6597":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:3384:1891":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:8909:2227":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:31822:9190":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"20:1531:3719":{"crate_id":20,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:12510:7907":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"6:5804:5685":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:45190:9373":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:38861:195":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:6298:163":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:20865:9156":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:9895:7481":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:1808:9065":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:9291:139":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"6:4726:5146":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:12293:7869":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:7456:7301":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"16:7767:19274":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"14:7:8924":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"6:123:2630":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"10:0:2035":{"crate_id":10,"path":["adler"],"kind":"module"},"2:46300:9432":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:42623:9293":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:9032:9512":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"6:4873:10456":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"16:6390:8571":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:44542:9348":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:9148:34721":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"16:8047:8827":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"20:3166:5121":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:20650:11189":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"6:1514:3702":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:21784:11111":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"11:1845:7034":{"crate_id":11,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"1:508:7058":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:11871:926":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:3169:2248":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"6:4327:5108":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:40514:9109":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:43563:202":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"20:4165:5686":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlmsghdr"],"kind":"struct"},"11:1872:8957":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"5:2626:10642":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"5:7058:9050":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:6623:9508":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"1:1901:9478":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"17:12046:7815":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"5:2106:10634":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"5:7012:7064":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:20712:11183":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:13667:8265":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:9340:7428":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:10408:2250":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"20:1522:3718":{"crate_id":20,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:8632:19310":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"18:660:7262":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"20:1350:3701":{"crate_id":20,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"5:1304:93":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:10615:7580":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:46573:9439":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:43147:9315":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"20:4180:5688":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"20:3482:5152":{"crate_id":20,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:10967:7611":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"20:3197:5125":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:10569:7572":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"20:3380:5141":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:8485:2279":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"5:3107:2277":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:9748:7425":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:2751:2506":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"1:936:8937":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:11325:9142":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:11339:7672":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"6:5773:5682":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:9035:207":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"17:13082:8100":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"16:8256:8848":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:8149:9581":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"11:2080:8945":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"16:4818:8426":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:3450:29497":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"17:8718:7288":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:975:7302":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:40597:30706":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"16:6376:8380":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:11861:7788":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"16:4480:8416":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:40682:178":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:41993:9272":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:43174:9148":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:4113:11135":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"16:3585:8406":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:10923:7608":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"6:5962:10570":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:39051:9200":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"9:0:2034":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:1625:6542":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:39747:2226":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"13:110:34697":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:46698:9448":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:11770:7767":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"20:4817:6173":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:20624:11188":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:928:8933":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"16:5346:8437":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"5:6592:7091":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"17:10478:7562":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"5:4356:2214":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:42513:9284":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:39565:9229":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:13879:8319":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:20587:11187":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"17:10735:7595":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:4243:9075":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"11:1085:8947":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:2995:11069":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:30034:6547":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:40742:2277":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"11:762:7034":{"crate_id":11,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"17:9534:7449":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"5:3678:9035":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:44441:9344":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:12236:7857":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:13865:8316":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:21645:30721":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:38971:2161":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"5:7239:221":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"16:6179:8523":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:20437:32951":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:44265:9337":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:11838:26235":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"15:0:2039":{"crate_id":15,"path":["addr2line"],"kind":"module"},"16:2808:8373":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:10196:9131":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:20753:9156":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"20:536:2948":{"crate_id":20,"path":["libc","unix","iovec"],"kind":"struct"},"16:6254:8557":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:45344:9391":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"16:5032:8433":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:8859:11171":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"16:6767:8638":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"5:1232:8949":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"5:5803:2298":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:12098:7822":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"11:2178:10376":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:21660:9167":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:2674:217":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"20:1355:3702":{"crate_id":20,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"20:3425:5146":{"crate_id":20,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"18:531:7243":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"20:489:2943":{"crate_id":20,"path":["libc","unix","timespec"],"kind":"struct"},"15:180:18360":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"6:4375:1900":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:13194:8124":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:39696:9092":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:4437:11139":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"16:6146:191":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:3616:11109":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"5:7162:101":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"6:5868:5692":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"5:1068:34348":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"11:646:8950":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"16:6696:19269":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:9796:7471":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:40818:190":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:4584:16359":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:10068:7506":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:2772:11175":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:39328:9070":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:5558:203":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:4329:9490":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:21120:11207":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"2:43573:208":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"20:3180:5123":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:7517:2280":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:7659:9529":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"1:6484:2306":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:10000:7494":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"6:62:2553":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"6:579:2954":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"11:300:10374":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"6:7508:5174":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:11946:7800":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:2767:11173":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"6:4998:5152":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:11186:9517":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:46112:9430":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:10989:7316":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:0:1372":{"crate_id":1,"path":["std"],"kind":"module"},"17:11573:7717":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"6:1687:3717":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"11:0:2036":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"6:7246:10613":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:11399:9125":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:9228:34720":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:45110:9372":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:39224:9070":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:2870:16428":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:43370:10728":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:12367:105":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"1:644:9467":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"20:5473:5174":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:7473:5171":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:11484:7695":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"16:6327:8563":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:10693:117":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"6:1723:3722":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"11:822:11055":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"6:1559:3706":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:11459:7693":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:2345:186":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"16:3225:8403":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"20:2976:5103":{"crate_id":20,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:8769:30989":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:3248:2246":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"6:4982:10499":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"6:4773:10424":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:10885:7606":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:10709:9134":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"9:481:18261":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:9084:6669":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"16:6904:8648":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:9545:7407":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:45314:9390":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:42665:9128":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"20:1436:3711":{"crate_id":20,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:10683:128":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"5:6232:7064":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"6:4381:4990":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:39451:1762":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"1:11877:1350":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"17:10491:7563":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"11:1065:34695":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"11:2198:10380":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"11:274:10371":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"16:5071:8434":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:12419:7886":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:10182:9130":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"16:3030:8400":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:40800:6656":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:43211:9316":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:11502:7703":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:2763:2509":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"1:6487:2307":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:21284:32762":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:9027:216":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:43068:9310":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"16:7259:6655":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"6:7431:6183":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"16:4327:8413":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"20:3006:5106":{"crate_id":20,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:1595:8956":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:10838:24168":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"16:4789:8425":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"20:3296:5133":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:1457:1669":{"crate_id":2,"path":["core","mem"],"kind":"module"},"17:12894:8035":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"6:7263:6527":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"5:7050:195":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"16:5708:8453":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"20:3401:5143":{"crate_id":20,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:12449:7892":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:9409:19344":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"2:41279:91":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:6909:7144":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"6:4690:5142":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:8719:9606":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:39556:9228":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"16:4872:8428":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"6:4636:5135":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:9946:7490":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"18:719:7278":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:12550:7912":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"16:6321:8562":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:3356:2214":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"5:5181:7043":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"20:4887:3639":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:9653:7459":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:624:9464":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"11:1681:142":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:11894:780":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"5:3743:7034":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"17:9557:7425":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:11969:7805":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"6:5845:5688":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:11355:7676":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:31782:10379":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:41448:6666":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"16:7519:8767":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:9017:164":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:4728:6528":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"14:0:2038":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:10545:7316":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"17:12178:7831":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:2925:2230":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:8573:19331":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:2460:11124":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:41691:67":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"17:0:2041":{"crate_id":17,"path":["object"],"kind":"module"},"1:5372:9499":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"5:3965:7064":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:13169:8115":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"5:3140:8956":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:1086:8949":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"0:72:1646":{"crate_id":0,"path":["num_cpus","get"],"kind":"function"},"16:6218:8544":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:43279:9149":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"16:2572:8363":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:11258:7657":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:8036:2193":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"1:11882:633":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"17:9424:7435":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:12563:7913":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"16:7293:8712":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:4310:7098":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:10303:7547":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:9948:2228":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:41746:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"6:595:2956":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:38927:198":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:8468:2277":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"17:9512:7446":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"14:215:8929":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:13033:8086":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"16:154:7024":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"17:9696:7445":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:11384:9486":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:30064:30707":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"6:4442:5118":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"5:3266:7034":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"5:3114:8955":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:13181:8118":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:38830:9193":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:13564:8245":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:6712:6178":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:873:6597":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:9907:7485":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"20:563:2952":{"crate_id":20,"path":["libc","unix","sigval"],"kind":"struct"},"16:6506:8584":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"16:6201:8538":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"5:5819:16728":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:9826:7473":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"6:5005:5153":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"6:6809:10610":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"16:6717:8625":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:43666:8959":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:2853:16424":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:5912:7134":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:13659:8264":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:9971:9475":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"16:6990:8665":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:43386:10732":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:6514:6603":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:10580:7576":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"5:2898:10635":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"11:777:7036":{"crate_id":11,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"17:13744:8287":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:4565:11117":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"6:1520:10394":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:11060:7585":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:13698:8273":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:8858:7292":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:12307:7871":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:8751:9608":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:4684:11127":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"11:632:2277":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:41946:9263":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"20:1574:3724":{"crate_id":20,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"20:5004:6181":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"5:7336:7084":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:11589:7274":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:9443:7437":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"16:5886:8474":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:9523:7447":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:9498:7445":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"20:3370:5140":{"crate_id":20,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:9990:27196":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"5:6430:7043":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:13309:8153":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:9322:34726":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"20:5494:6529":{"crate_id":20,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:12496:7906":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"5:1422:8933":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:8795:9502":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:1068:8944":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"20:557:2951":{"crate_id":20,"path":["libc","unix","linger"],"kind":"struct"},"20:4943:6178":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:11888:731":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"5:279:2458":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"18:548:139":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"20:1558:3723":{"crate_id":20,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:7524:16406":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:11887:735":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:11891:7791":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:39574:9230":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:25641:9060":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"6:4504:5126":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:10125:7511":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"5:6278:7043":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:41681:10718":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"20:3187:5124":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:39664:9091":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:9455:7108":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"20:582:2955":{"crate_id":20,"path":["libc","unix","servent"],"kind":"struct"},"1:1567:2277":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"16:5998:19265":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"6:1645:3713":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:1583:8954":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"6:6616:3664":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"16:7467:8762":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"6:5935:10563":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:9312:7427":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:9746:11124":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:10856:9609":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:2814:16420":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:12194:7836":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:2688:225":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"1:9070:9625":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:9641:7457":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"6:5041:10521":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"16:7478:8392":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:8458:2276":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"14:221:8931":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:40656:9112":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:7524:7148":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"16:7596:19273":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:13803:8303":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"11:669:8933":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:7851:2241":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:3331:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"17:13324:8155":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:10026:7499":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:3459:2196":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"16:7683:8397":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:11879:1460":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"20:4077:5679":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:10857:19335":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:9087:9626":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"2:41079:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"20:614:2974":{"crate_id":20,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:41786:72":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"20:5479:5175":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"6:4650:5136":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:10798:19334":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:21:672":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"17:13499:8201":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:3783:9486":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:39303:9208":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:21772:9181":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:11129:9136":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"17:12331:7874":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:2810:16418":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:12435:138":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:46508:9436":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"16:7588:8771":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"11:1832:2277":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:8937:9619":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:41962:9266":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:11006:9608":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:12770:7932":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"3:0:435":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"6:4930:10495":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:12191:32658":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"16:4702:8422":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"6:526:2946":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:45970:9429":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:3093:11071":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:8443:19327":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:6135:9507":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"16:5000:8432":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:3511:7064":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:2943:2454":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"3:229:207":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"16:4845:8427":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:2841:8694":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:12372:7879":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"16:6520:8586":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"16:5571:8382":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"18:538:7246":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:40750:8950":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"17:12358:7876":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:21471:9158":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:41764:126":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"17:11721:7742":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:6650:31987":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:8953:7414":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:20837:11180":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:7686:9189":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:46683:9447":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:4865:990":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:3171:2249":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:8971:24158":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"20:4806:6172":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"5:7003:9049":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:13791:8301":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:8209:11137":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:9756:219":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:42591:9289":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"6:1604:3710":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"14:31:8924":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"18:766:23185":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:2788:16417":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:22831:9059":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:21378:11124":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:39534:9227":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:11885:733":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"16:535:8335":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"6:4492:5125":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:1827:9475":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"20:3071:5111":{"crate_id":20,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"16:8090:8832":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:10198:9500":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:39010:9198":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1:11884:736":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:12006:7809":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"6:6586:6173":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:2339:179":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"5:623:9027":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:42425:9276":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"8:0:2033":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:11844:7785":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:42715:9296":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:11672:7163":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"15:219:18365":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:11556:7709":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:30050:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:0:488":{"crate_id":2,"path":["core"],"kind":"module"},"2:39404:100":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:12059:7817":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"20:3308:5134":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:4248:9076":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:10691:19442":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:44866:9364":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:9380:19343":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:13678:8270":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:4904:11154":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:11288:9139":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:4749:32869":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:4394:2341":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:10465:7561":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:30228:30696":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"17:11136:7624":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:2802:11176":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"5:3174:8957":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"6:6566:10606":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"20:3471:5151":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:46645:9445":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"16:8180:19276":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"5:7264:9058":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"16:5402:7413":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:8197:9487":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"16:7557:8768":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:29805:11110":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:50275:9458":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"17:13066:8097":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:420:7299":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"9:421:18264":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:3926:11115":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:42930:9303":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:11153:9513":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:9022:215":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"5:6164:7081":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"2:22132:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:44888:9365":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"14:202:16305":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:14:2142":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:40758:6597":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"6:4740:5147":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:43382:10731":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"20:0:807":{"crate_id":20,"path":["libc"],"kind":"module"},"16:7411:8491":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:4177:9488":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:5688:2300":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"20:134:2629":{"crate_id":20,"path":["libc","unix","FILE"],"kind":"enum"},"6:1677:3716":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"6:5831:10537":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"6:4894:10471":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:1947:7308":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"5:7020:7055":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"11:98:10370":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"6:119:2629":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:9224:9121":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"1:6103:7140":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:22099:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"16:8129:8836":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"5:3612:7043":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:4509:11144":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:2999:11070":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:361:9461":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"16:2694:8368":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"7:79:18255":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:959:8942":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:2946:2455":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:6190:7134":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"5:1394:8935":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:12126:7826":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"20:3086:4990":{"crate_id":20,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"6:6593:2734":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"5:6351:6597":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:13249:8138":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"6:1509:3701":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:43374:10729":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:40668:9114":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"5:4157:2214":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"20:521:2946":{"crate_id":20,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"16:6442:8575":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:6697:16402":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"17:13159:8114":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"6:5947:5138":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"6:5955:5137":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:3974:11118":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:12915:8045":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:46619:9443":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:8907:9616":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"17:13453:8192":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:11234:7643":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:44790:9362":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:44597:9351":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:1734:10645":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"17:13812:8307":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"6:6045:5693":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"5:7179:9051":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:2826:16421":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:39390:9221":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:11575:16291":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"11:1003:8944":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:1571:6597":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:5181:187":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"6:5858:5690":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:13426:8185":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:12433:7888":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:3166:231":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:39612:9233":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"6:4612:5133":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:12607:7920":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"5:4037:8950":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"6:4796:10432":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"16:7498:8766":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"20:4151:5671":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:8598:19332":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:8326:2272":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"17:11391:7683":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"6:4804:10436":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:9046:130":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"17:13240:8137":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:3211:2251":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"16:3815:8409":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"20:3389:5142":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"20:5455:5171":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:29994:6545":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:4257:9489":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:9569:7117":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"6:4602:5132":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:12634:7923":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:11363:9485":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:1991:181":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"16:2470:8359":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"6:562:2951":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:11069:19337":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"16:2546:8362":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:11843:11053":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"16:5779:8459":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:2503:147":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:45614:9396":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"20:4910:6175":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:11785:7771":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:40548:11108":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:4575:10237":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:7561:30990":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:8181:11162":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:20856:11124":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:2215:2171":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:3209:2250":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:1850:9476":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:44742:9361":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:8737:9607":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:8548:19330":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"16:5367:18378":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:9577:7452":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"5:5631:229":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:43378:10730":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:10210:9132":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:2233:96":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"16:7711:8775":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:9886:7478":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"6:4943:5149":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:11902:7792":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:44912:9366":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"10:36:10382":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:5387:9500":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:38783:16260":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"17:9178:7424":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"6:6035:10598":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:4007:102":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:7654:9472":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"5:1403:8936":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:8113:2225":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"16:2378:8355":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"6:4536:10406":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:568:2952":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:39965:9100":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:4846:11147":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"5:5475:7077":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:42205:9123":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:11889:1478":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:11536:2281":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:2836:16423":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:44720:9360":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:2615:2240":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:413:162":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"6:547:2949":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:42921:9302":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:13488:8200":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:8957:9623":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"16:3782:8408":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"16:7529:8394":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"18:521:23186":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:41239:84":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:2977:16259":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:1852:9477":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"17:12158:7830":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:3678:9484":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:44958:9368":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:39972:1892":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"5:7028:34175":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"5:6997:6597":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:42535:9286":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:40919:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:2388:1888":{"crate_id":1,"path":["std","io"],"kind":"module"},"17:12138:7827":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:10761:19333":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"16:6535:7027":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"1:6411:2310":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:8788:7290":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:43259:9325":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"20:568:2953":{"crate_id":20,"path":["libc","unix","itimerval"],"kind":"struct"},"1:8843:11169":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:42545:9287":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:591:11046":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:10215:27197":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:11220:7642":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"18:507:7239":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:20706:11181":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:3995:9072":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"16:6890:8389":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:9028:7421":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"18:582:2516":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"16:6236:8554":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"16:2642:8366":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:8683:7287":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:42201:10726":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"16:7077:19271":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:9488:7443":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:13121:8109":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:9109:27797":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"20:527:2947":{"crate_id":20,"path":["libc","unix","hostent"],"kind":"struct"},"1:11234:10749":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"16:4037:8412":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"16:7029:8669":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:2681:2450":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"1:8123:2226":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"17:10334:7425":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:10703:2194":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"16:6671:8613":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"20:4298:5715":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:1618:579":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:11163:7630":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"17:11372:7678":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:2777:8688":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:355:9460":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"16:2502:8360":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:41455:6668":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:12835:7983":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:2936:2452":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"16:2616:8365":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"6:4786:10429":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"11:738:8936":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"11:1518:18342":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:10897:7607":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"9:445:18262":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:487:7300":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:20863:11185":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:12019:7516":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:4992:9495":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:5015:10504":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"5:2159:34323":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:39775:9097":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"6:1589:3709":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:4098:9073":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"5:1341:2277":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:7140:2457":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:917:7034":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"2:44311:9339":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:41709:108":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:7094:16407":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:6533:2867":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:8253:2734":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"5:3511:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"16:6935:8651":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"6:488:2942":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"6:4702:5143":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:12259:7866":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"16:3300:8404":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"0:0:1781":{"crate_id":0,"path":["num_cpus"],"kind":"module"},"11:1534:8952":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:10673:2192":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"16:4510:8417":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"6:6743:6179":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:9628:7456":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:48935:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:10505:7564":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"6:4542:5128":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:10922:7154":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:10516:7565":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"6:4360:5110":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"18:636:7261":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"18:481:7237":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:850:2277":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"5:7193:30697":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:12409:202":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"2:45268:9389":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"16:7449:8754":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"20:501:2945":{"crate_id":20,"path":["libc","unix","rusage"],"kind":"struct"},"7:32:18248":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"5:7209:9054":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:11600:16288":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"16:8142:8839":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:2373:2185":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"6:4314:5107":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:4399:5113":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"20:3461:5150":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:21633:9166":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:2806:16419":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"16:2720:8369":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:2551:7112":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:5322:9496":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:20675:11179":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:2219:1974":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"1:7775:2191":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:10994:9607":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"11:834:8940":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:8992:10739":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:4775:786":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:46604:9442":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:7921:9535":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:12959:8075":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:7827:117":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:44520:9347":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"16:7042:8672":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"6:5761:5680":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:1919:19374":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"11:861:8943":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:2693:2502":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"6:1617:3712":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"20:3059:5109":{"crate_id":20,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:4761:11122":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:11440:9651":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"16:6728:8626":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:3934:11116":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:2831:16422":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"5:1433:8934":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"16:0:2040":{"crate_id":16,"path":["gimli"],"kind":"module"},"6:4953:5150":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"11:810:8951":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:10411:2246":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:22198:9185":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"11:1866:8956":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"16:2862:8375":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:42911:9301":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"16:8214:8733":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"11:2184:10377":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:42797:9297":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:10681:7588":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"16:6868:8646":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"6:1534:3703":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"20:5461:5172":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"5:953:7043":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:44357:9341":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"20:3174:5122":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"20:4773:2867":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:42500:9225":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:9371:2191":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"2:46546:9437":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"14:160:8924":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:7931:2242":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"5:670:228":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"5:7134:2167":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"20:5417:2900":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:13367:8167":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:1439:142":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"20:3348:5137":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Chdr"],"kind":"struct"},"2:2857:16425":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:11890:1475":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"6:4554:5129":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:12536:7909":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:13639:8258":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:20435:32954":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:45764:9397":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:6906:2293":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"11:444:140":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:13376:8170":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:11897:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:8601:78":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"20:1537:3720":{"crate_id":20,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"16:5104:8435":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:1789:9473":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:3211:16257":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"20:3257:5130":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:4640:11149":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"16:7016:8666":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:2833:7131":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"16:4400:8414":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:8416:2275":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"17:10092:7508":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:13689:8271":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:9098:7422":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"5:4808:201":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:46668:9446":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"6:4414:5115":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"16:7488:8765":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"16:6474:8398":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"20:3032:5108":{"crate_id":20,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:39543:2225":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"20:4229:5693":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:21115:11184":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"2:39514:9225":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"6:1571:3707":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"5:2179:10638":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:9866:7476":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"20:3209:5126":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:11870:368":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"16:2830:8374":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:8080:2194":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"16:3446:8405":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"16:4728:8423":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"16:5944:8480":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"16:5594:8384":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:4126:11136":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"20:138:2630":{"crate_id":20,"path":["libc","unix","fpos_t"],"kind":"enum"},"16:7335:34714":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"16:7103:9623":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"6:6773:6181":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"5:1444:195":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:11136:7157":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"2:45056:9370":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"6:4903:10477":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:487:7124":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:21722:30710":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"20:3137:5117":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:2738:2451":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"17:13842:8312":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:38949:200":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:43366:10727":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"1:2347:2175":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:11895:1531":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"17:11434:7688":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:11082:9512":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"1:11216:9520":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"16:2337:8348":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:11615:7732":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"7:0:1521":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:9334:16377":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:8223:9581":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:3466:1889":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"5:2902:34188":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"5:7222:9056":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:8308:11158":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:44245:9336":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"16:5677:19263":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:10649:7583":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:3983:9071":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"6:4277:5104":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"5:2906:34189":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"6:1550:3705":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:2847:8695":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:4320:6677":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"0:73:1664":{"crate_id":0,"path":["num_cpus","get_physical"],"kind":"function"},"17:9772:7470":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:42443:9279":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:9376:7150":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:10303:9606":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:10270:7544":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"20:549:2950":{"crate_id":20,"path":["libc","unix","winsize"],"kind":"struct"},"2:22033:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"2:46470:9435":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"5:6680:241":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"20:542:2949":{"crate_id":20,"path":["libc","unix","pollfd"],"kind":"struct"},"1:2870:126":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"16:2594:8364":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:9566:7426":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:11364:9144":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:9899:2277":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"20:4131:5684":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:7532:10627":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"6:4756:10413":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"5:1203:8945":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"18:727:7281":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:8753:7289":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:42946:9215":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:6371:1892":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:13145:8113":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:44389:9342":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"6:5850:5689":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:12072:7818":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:737:140":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"11:1859:8955":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"10:44:8960":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"16:5847:8471":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"16:55:8817":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"11:1555:8953":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:5565:7134":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:48948:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:13419:8184":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"6:554:2950":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:40014:9105":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:2686:107":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"5:2077:9036":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"16:4568:8419":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:5336:9497":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"4:0:2032":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"17:8310:19323":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"5:35:7039":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:6334:9508":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"18:599:34729":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"5:7087:6597":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"18:699:7272":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"20:4193:5690":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:39311:16365":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"1:11875:1037":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"15:198:18361":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"6:1704:3719":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"5:773:7046":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:2478:1890":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:20403:32758":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"6:1695:3718":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:7127:132":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:11585:7720":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:11322:9484":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"20:1479:3714":{"crate_id":20,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"20:1504:3716":{"crate_id":20,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:43454:16535":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"5:1985:9035":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"2:7131:149":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"16:7837:8789":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:2912:115":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:43394:10734":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:3938:2214":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"5:770:95":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:13344:8162":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:8215:9587":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:39584:9232":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:7247:156":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:8256:19309":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"20:4138:5685":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:39251:30695":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:11886:734":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"20:4278:1705":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"20:4203:5691":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlattr"],"kind":"struct"},"20:4272:5714":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:2513:234":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"20:1416:3709":{"crate_id":20,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:9453:19345":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"5:210:7041":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:10527:19441":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:4030:16256":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:13857:8313":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"6:4734:10408":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:247:7295":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:863:8950":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"16:5920:8331":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:21593:10647":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"6:7543:10631":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"6:506:2945":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"11:1120:8948":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"20:1444:3712":{"crate_id":20,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:7566:6529":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:4858:10451":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:43402:10736":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"16:7652:195":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:48974:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:13821:8309":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"20:4095:5680":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:1583:3708":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"6:6802:10607":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"5:4326:7070":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:1534:2214":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:9991:9125":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:41039:87":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"20:495:2944":{"crate_id":20,"path":["libc","unix","rlimit"],"kind":"struct"},"1:5928:203":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:9086:191":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"1:7579:9522":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:12923:8046":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:11299:7159":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:10068:9127":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"6:5786:5683":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:40633:9487":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"20:5439:6526":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:43031:16303":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"16:6662:8612":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"6:4455:5120":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:2682:2501":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:42939:9145":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"16:6793:8639":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:5356:9498":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:3912:11114":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:3061:2258":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"16:8156:8399":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"11:1029:8945":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:46584:9440":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"20:1431:3710":{"crate_id":20,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:2594:126":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"20:5467:5173":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"16:6919:34711":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:2236:97":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"18:590:7249":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:4365:7099":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:46721:9449":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:42955:9070":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:43082:9313":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:39644:9237":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"18:113:23175":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"17:10598:7611":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:2210:127":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"20:1386:3706":{"crate_id":20,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:44579:9350":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"6:4810:10437":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"20:1398:3707":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:5888:10538":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"20:3276:5131":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:13332:8156":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:8781:9611":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:39761:9096":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"11:1840:7064":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:10817:9011":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"20:1361:3703":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:1720:16450":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:13265:8142":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:42964:9208":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:42617:9138":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:42474:9282":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"16:2448:8358":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:10346:7151":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"16:6132:8516":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:40809:6654":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"20:1514:3717":{"crate_id":20,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:39677:9238":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:39726:9094":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:12403:7885":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:13469:8195":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:12622:7585":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:12085:7820":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"16:6819:8640":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:41119:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:13411:8181":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:7169:119":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:21272:9457":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:13257:8140":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:649:11049":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:1578:7034":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"17:9108:34724":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:8971:127":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"2:38905:199":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"20:4797:2825":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:2684:223":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:6011:7136":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"20:469:2940":{"crate_id":20,"path":["libc","unix","group"],"kind":"struct"},"16:4624:8421":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:8931:7296":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"16:5693:8450":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:13399:8178":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:3876:11113":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:8283:19322":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"20:3111:5114":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:9822:7472":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"20:477:2941":{"crate_id":20,"path":["libc","unix","utimbuf"],"kind":"struct"},"5:805:7049":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:42869:9300":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"6:4422:5116":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"11:2190:34696":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"16:5963:8487":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"6:1609:3711":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"6:5705:5656":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:8823:7291":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:42453:9280":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:9933:7488":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:9088:6670":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"20:4974:6179":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:4924:10492":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"5:3078:94":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:40869:2277":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"5:6081:11218":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"11:353:7032":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:10377:7551":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:42605:9292":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:11090:7620":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:4643:11138":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:3940:11117":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"5:1412:8951":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:39267:9205":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"20:3154:5119":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:39291:9207":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"18:0:2042":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:641:9465":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"16:5305:8436":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:8204:10737":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"5:3663:2241":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:11319:7671":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:20704:11124":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"11:2205:2167":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:39437:9223":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"11:659:6597":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"5:4127:2214":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:10127:11166":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"6:5048:10524":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:9959:7491":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:942:11055":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"16:7244:34716":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"16:5630:8444":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:11018:1947":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:21524:9159":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:881:8935":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:11282:7658":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"20:3320:5135":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:20663:11124":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"17:11800:7776":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"6:4406:5114":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"16:3749:8407":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"20:3065:5110":{"crate_id":20,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:3441:2198":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:20832:11124":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:4097:11133":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"6:1541:3704":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"16:7743:8385":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:12902:8038":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:8389:19325":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"6:4681:5141":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:12282:7867":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"11:1852:8954":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:11879:7789":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:11896:1112":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:4579:10241":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:40877:8950":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"16:6854:8644":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:7810:128":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"17:10039:7502":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"5:7146:2168":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:3250:2247":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:12592:7916":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:43246:9321":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:12799:7952":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:1600:8957":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"20:3127:5116":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"11:1138:8949":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:48922:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:11143:16292":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:13477:8196":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:9036:2198":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:44335:9340":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:5515:9084":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"20:3363:5139":{"crate_id":20,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:45087:9371":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:11878:1380":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"5:2067:7058":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:7843:2239":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"5:5229:16277":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:2580:114":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"20:5019:6182":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:2308:123":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"16:5741:19264":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"6:7497:10622":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:11452:10751":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"6:5034:10518":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:11348:9143":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"16:7366:19272":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"6:1747:3724":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:4:1002":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:4129:9074":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"18:574:7239":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"6:5976:10581":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:7491:10621":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"20:3433:5147":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"5:6563:7077":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:21668:9168":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"14:40:7658":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:5572:7135":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:10712:19443":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"5:6724:7081":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"20:4995:6180":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:39958:9099":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:2137:580":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:8979:34725":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"2:39603:9081":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:6554:2312":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:42526:9285":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:9923:8950":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:1902:9066":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"20:1635:3777":{"crate_id":20,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"18:707:7274":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"6:4366:5111":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:39357:9216":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:3196:30538":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:8092:2197":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"17:11544:7708":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:41199:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:2497:74":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:39044:6677":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"2:22363:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"16:4969:8431":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:2345:2174":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:8773:2277":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"6:0:807":{"crate_id":6,"path":["libc"],"kind":"module"},"1:8901:105":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"20:2982:5104":{"crate_id":20,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:6375:2304":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:13651:8261":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:12318:7872":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:11821:7780":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:6867:27174":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:9596:7453":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:42647:2228":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"6:1710:3720":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"20:1490:3715":{"crate_id":20,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"16:5976:8337":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:682:11050":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"2:46222:9431":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:43053:9305":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:39987:2256":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:39494:9224":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"6:4915:10486":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:31818:9189":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"16:7317:34715":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:9218:7425":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:7605:7152":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:3183:16342":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:42751:9130":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:4680:11123":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:10354:7550":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:12113:7825":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:43390:10733":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"5:1048:34187":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"20:3080:1900":{"crate_id":20,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"18:624:34730":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:5721:2302":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"6:5735:5678":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:48987:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:6540:2311":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"2:43442:9327":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:40733:6596":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:1574:7064":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:9299:143":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:39350:9215":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:20390:2516":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"16:2931:18406":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:42186:9274":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:22066:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"16:6307:8378":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:9364:127":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"17:8521:19329":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:8025:8826":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:43624:9332":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"6:4935:5148":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:4834:5691":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:10638:10743":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:3171:133":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:11646:16297":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"16:6361:8568":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"20:4101:5681":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"5:3524:2277":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"16:2786:8372":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:8275:9491":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:13292:8146":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"16:5811:8464":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:40885:6597":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"17:9876:7364":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"6:4715:5145":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:11873:1494":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"16:7697:8387":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"20:4042:5656":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"11:320:7030":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:1589:8955":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"5:6749:7094":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:5501:2678":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"5:3537:8950":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"5:2397:10639":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:11477:9521":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"5:4904:2214":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:9038:34718":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"6:541:2948":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:3996:11121":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"11:2069:8944":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"6:6679:6175":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:4664:5139":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"6:4848:10445":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:11037:19336":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"6:7520:5176":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:10626:7581":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"6:1652:3714":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"6:6012:10592":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:2506:131":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"5:4197:2277":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:11993:7806":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:40620:9255":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:11026:10736":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"17:386:7297":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"6:6557:2825":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:11410:7684":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:7568:9462":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"5:3153:34174":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"16:8170:8841":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:10451:7152":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:8249:9591":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"6:7240:6526":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:31831:2510":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"11:119:7028":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:10141:9129":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:39484:7100":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"6:6688:6176":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"20:3119:5115":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"16:4904:8429":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"20:4904:6174":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:5069:188":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:48961:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:2895:6644":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"20:3104:5113":{"crate_id":20,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:8130:2227":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"6:4529:10404":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:10052:7504":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:7090:16408":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:41319:2299":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"6:500:2944":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:39736:9240":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:13625:8252":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"6:4461:5121":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:44459:9345":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:12576:7914":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:39030:8733":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"2:21609:9161":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:561:9463":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:42555:9288":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:4855:11148":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:12378:7122":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:43099:9314":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:10813:9532":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"18:652:7239":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"20:574:2954":{"crate_id":20,"path":["libc","unix","tms"],"kind":"struct"},"16:5655:8383":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"11:751:7064":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:9554:7112":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"17:11600:7726":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"16:8109:8835":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:8231:9589":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:6603:16410":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:11821:9655":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"16:6336:8564":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:9853:7475":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:537:7125":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:22330:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:923:8951":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"20:5485:5176":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:42851:9299":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"20:4847:3664":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:12646:7930":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:3293:2235":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:953:8940":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:8182:9117":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:9986:7493":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:1787:7304":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"16:7757:8777":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:11891:1476":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"17:10840:7604":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:7666:11089":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"20:5033:6183":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","termios2"],"kind":"struct"},"1:11228:10748":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:4420:6679":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:43225:16304":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"5:264:7043":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"11:1628:7037":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"5:4389:7070":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:4374:6678":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"6:6836:6185":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:12170:16375":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:11532:7707":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"20:3443:5148":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:3177:16343":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"20:3092:5112":{"crate_id":20,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:8420:19326":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"16:3872:8410":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:2303:185":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:22165:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"2:40491:152":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:10405:2248":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"13:0:2031":{"crate_id":13,"path":["std_detect"],"kind":"module"},"6:6541:3635":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"6:4573:5130":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:44644:9352":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:3136:29204":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:10743:7597":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:1978:7311":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"11:387:34694":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:39037:9199":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"16:6351:19267":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"6:4819:5686":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:40894:180":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"6:7514:5175":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:1034:7303":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:3130:26490":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:13763:8292":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:10643:10745":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:2794:8689":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:12388:7881":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"9:388:18263":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:12980:8080":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"16:2524:8361":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:41721:8804":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:22297:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"5:5892:2214":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:6759:11177":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"18:681:7269":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:2725:2504":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"16:2319:8346":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"6:5743:5679":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:43581:192":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:21577:9160":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"18:609:7255":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:9537:7111":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"2:44419:9343":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:44690:9359":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"5:1032:34347":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:22231:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"6:4624:5134":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:5797:5684":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:6087:7122":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"6:573:2953":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"9:174:18328":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"6:6788:6182":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"5:1971:2241":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"6:6673:6174":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:10257:7543":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:10440:7559":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"6:5060:10529":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:39712:7259":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:30626:2516":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"1:2361:2179":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"17:13211:8129":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"16:2298:18380":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:38885:196":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:12157:134":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"17:8360:19324":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:4171:6676":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:2819:8690":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"6:4780:10426":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:40999:80":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"5:3148:8954":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:11876:309":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:42001:9273":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:11422:7687":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:10224:9133":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"11:393:34691":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:8774:32049":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:11159:9650":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:7567:11124":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:9265:7426":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"6:4475:5123":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"16:3063:7323":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:7797:2189":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"6:4592:5131":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:9071:110":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"1:11484:9521":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"6:4432:5117":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"6:1731:3723":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"5:5225:16276":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"6:7526:10626":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"6:7485:5173":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"18:80:23173":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"6:5983:10583":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:45504:9393":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:8606:85":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:13506:8203":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:21758:9180":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:8814:9612":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:2461:16371":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:39409:9222":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:2212:2170":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"20:1472:3713":{"crate_id":20,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"6:6656:3639":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:5767:5681":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"5:6582:7089":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"6:532:2947":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"20:55:2553":{"crate_id":20,"path":["libc","unix","DIR"],"kind":"enum"},"17:10660:7585":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"2:20458:32949":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:7520:11058":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:9080:6667":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:7584:9524":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:10428:7558":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:45550:9394":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:8064:2255":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"16:7437:8753":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:5695:2301":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:10104:7509":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"20:4069:5678":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:11641:7737":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:11011:7613":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"6:474:2940":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"16:6488:8576":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:2509:235":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"16:4757:8424":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:39996:7106":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"17:10452:7560":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"6:4290:5105":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:7780:2188":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:8071:2257":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:2933:7312":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"20:4107:5682":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:1900:3777":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:11883:634":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"20:3215:5127":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:46424:9434":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:2865:16427":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:13516:8208":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:43616:9330":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:44560:9349":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:932:8934":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"16:5724:8455":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:46593:9441":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"16:2404:8356":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:39371:16367":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:5504:11164":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:46564:9438":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"11:725:8935":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"6:4840:10440":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:42374:9275":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"5:5783:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"9:325:10383":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"16:6981:8662":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"16:6293:8560":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"18:614:34728":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"6:5054:10526":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:11801:110":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"5:1218:8944":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"16:5557:8379":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:8474:2278":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"16:5616:8440":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:48565:11216":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"17:12345:7875":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:11446:7691":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"16:6544:8386":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"6:6104:1705":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"16:2668:8367":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:45009:9369":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:20456:32953":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:10589:7577":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:4415:11138":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"6:7218:2900":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"16:2426:8357":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:11854:24167":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"6:494:2943":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:8667:7413":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:8949:9621":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:4682:11126":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:7633:11051":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:43398:10735":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"16:7635:8773":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"5:853:7051":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:38845:197":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"6:4671:5140":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"16:3640:7327":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"6:4828:5687":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:7258:26256":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:8155:9583":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:11045:2204":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"20:5447:6527":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"6:6098:5714":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"6:4974:10497":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:11580:9118":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:3142:7314":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:9068:34723":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"6:1716:3721":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:40577:10717":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"18:671:7268":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:9839:7474":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:9867:9252":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"17:12483:7905":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:11520:7704":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"20:590:2956":{"crate_id":20,"path":["libc","unix","protoent"],"kind":"struct"},"6:6764:6180":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:10826:9501":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"17:9721:7465":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:9051:2204":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"13:226:10369":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:9469:7438":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:10939:7156":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"6:4750:10410":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"16:7543:8395":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:39239:9202":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"5:679:109":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"6:4387:5112":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:43654:9335":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:5457:9082":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:11832:7783":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:41462:6669":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:3882:11112":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:10555:7567":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"2:42434:9277":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:3984:11119":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"9:502:9014":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"6:4301:5106":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"16:6400:8572":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:10823:7384":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"6:6004:10589":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:10713:24170":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:4738:7132":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:13461:8193":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:8765:9609":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:44490:9346":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:8143:2224":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:9350:34722":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"6:7479:5172":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:7192:2456":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"20:3334:5136":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"19:0:1019":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:8789:6597":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:12033:7814":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"16:2357:8354":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:13433:8186":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:1077:8945":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:8651:7412":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"16:7626:8772":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"6:4767:10421":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"6:4709:5144":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:10619:9638":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:7648:11052":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:39334:16366":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"16:6460:8381":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"20:2995:5105":{"crate_id":20,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"6:6818:6184":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"20:5064:6185":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:43421:120":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:40826:207":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:30028:6546":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:10747:126":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:21380:11182":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:2782:8685":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"11:2053:8675":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:4577:10239":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:40767:6655":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"20:483:2942":{"crate_id":20,"path":["libc","unix","timeval"],"kind":"struct"},"5:3765:7043":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:10416:7557":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:13219:8132":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:3326:2256":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"1:894:8936":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:6846:2255":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:8195:19311":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:13135:8112":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"16:2905:8377":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:2798:11174":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"20:4919:6176":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:41983:2273":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"16:6061:18379":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:39421:30697":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:2868:207":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"1:10648:2188":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"20:4209:5692":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"5:1356:8950":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:8399:2274":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"6:4354:5109":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:10040:9629":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"2:10103:9128":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:13316:8154":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:46630:9444":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:46362:9433":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"16:6243:34713":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:3988:11120":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"6:7556:10632":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:39981:9101":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:1791:9474":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"5:1602:7043":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:2940:2453":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"20:1410:3708":{"crate_id":20,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"20:4174:5687":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlmsgerr"],"kind":"struct"},"11:697:8934":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:9188:34719":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"5:1372:6597":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:13233:8135":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:10721:7592":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:21685:30716":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"20:3019:5107":{"crate_id":20,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:42633:2227":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:3645:6597":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"6:653:2974":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"6:4482:5124":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:11924:7799":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:13041:8087":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:8944:9620":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"6:6124:5715":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"20:3489:5153":{"crate_id":20,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"}},"external_crates":{"20":{"name":"libc","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}