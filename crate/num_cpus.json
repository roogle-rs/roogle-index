{"root":"0:0:1957","crate_version":"1.16.0","includes_private":false,"index":{"2:12973:26647":{"id":"2:12973:26647","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12068:447","self::pattern":"2:12558:17318"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42288:191","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:9641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:9641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:17316","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12995:32522":{"id":"2:12995:32522","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4740:32522"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44474:9732","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12885:32505":{"id":"2:12885:32505","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12074:1538","str::slice_mut_unchecked":"2:12886:32506","crate::ops::Index":"2:39907:12029"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12894:6774":{"id":"2:12894:6774","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44161:2419","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12913:6783":{"id":"2:12913:6783","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42290:188","prim@char":"1:12068:447","self::pattern":"2:12558:17318"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42288:191","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:9641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:9641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:17316","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12893:9831":{"id":"2:12893:9831","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12068:447"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44151:9812","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12944:2324":{"id":"2:12944:2324","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12558:17318","`DoubleEndedIterator`":"2:7942:128","prim@char":"1:12068:447","str::rmatches":"2:12947:32510"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44379:9818","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:9641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12950:32511":{"id":"2:12950:32511","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12558:17318","`DoubleEndedIterator`":"2:7942:128","prim@char":"1:12068:447","str::rmatch_indices":"2:12953:32512"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44325:9816","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:9641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12917:2098":{"id":"2:12917:2098","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12558:17318","`DoubleEndedIterator`":"2:7942:128","prim@char":"1:12068:447","str::split_whitespace":"2:12895:30512","str::rsplit":"2:12923:26638"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44175:2420","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:9641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12976:32519":{"id":"2:12976:32519","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12068:447","self::pattern":"2:12558:17318"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:9641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:9641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:17316","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12979:32520":{"id":"2:12979:32520","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12068:447","self::pattern":"2:12558:17318"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:9641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:72:1817":{"id":"0:72:1817","crate_id":0,"name":"get","span":{"filename":"src/lib.rs","begin":[73,0],"end":[75,1]},"visibility":"public","docs":"Returns the number of available CPUs of the current system.\n\nThis function will get the number of logical cores. Sometimes this is different from the number\nof physical cores (See [Simultaneous multithreading on Wikipedia][smt]).\n\nThis will always return at least `1`.\n\n# Examples\n\n```\nlet cpus = num_cpus::get();\nif cpus > 1 {\n    println!(\"We are on a multicore system with {} CPUs\", cpus);\n} else {\n    println!(\"We are on a single core system\");\n}\n```\n\n# Note\n\nThis will check [sched affinity] on Linux, showing a lower number of CPUs if the current\nthread does not have access to all the computer's CPUs.\n\nThis will also check [cgroups], frequently used in containers to constrain CPU usage.\n\n[smt]: https://en.wikipedia.org/wiki/Simultaneous_multithreading\n[sched affinity]: http://www.gnu.org/software/libc/manual/html_node/CPU-Affinity.html\n[cgroups]: https://www.kernel.org/doc/Documentation/cgroup-v1/cgroups.txt","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12947:32510":{"id":"2:12947:32510","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12558:17318","`DoubleEndedIterator`":"2:7942:128","prim@char":"1:12068:447","str::matches":"2:12944:2324"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44397:9819","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:9641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:9641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:17316","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12985:1950":{"id":"2:12985:1950","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12519:134","`FromStr`":"2:12518:2472"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42431:223","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12518:2472","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12518:2472","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12991:25798":{"id":"2:12991:25798","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12895:30512":{"id":"2:12895:30512","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12896:30497"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44449:9821","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12998:32523":{"id":"2:12998:32523","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4738:32523"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44492:9731","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5559:33211":{"id":"5:5559:33211","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7571:240"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7571:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:9641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12892:9672":{"id":"2:12892:9672","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12068:447"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44145:9664","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12990:25797":{"id":"2:12990:25797","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12992:27815":{"id":"2:12992:27815","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:912:34568"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12864":{"id":"2:12864","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12865:872","2:12866:2179","2:12867:32501","2:12868:32502","2:12870:32503","2:12873:24767","2:12874:32504","2:12875:329","2:12876:1858","2:12877:1817","2:12879:26604","2:12881:26605","2:12883:26606","2:12885:32505","2:12886:32506","2:12887:26629","2:12888:26630","2:12889:26633","2:12890:26634","2:12892:9672","2:12893:9831","2:12894:6774","2:12895:30512","2:12896:30497","2:12897:2095","2:12898:32507","2:12899:30498","2:12900:26646","2:12903:26105","2:12906:26107","2:12909:2163","2:12913:6783","2:12917:2098","2:12920:26636","2:12923:26638","2:12926:32508","2:12929:32509","2:12932:26640","2:12935:26642","2:12938:26644","2:12941:26645","2:12944:2324","2:12947:32510","2:12950:32511","2:12953:32512","2:12956:2102","2:12958:32513","2:12960:32514","2:12962:32515","2:12963:32516","2:12964:32517","2:12967:32518","2:12970:2144","2:12973:26647","2:12976:32519","2:12979:32520","2:12982:32521","2:12985:1950","2:12987:25792","2:12988:27812","2:12989:25796","2:12990:25797","2:12991:25798","2:12992:27815","2:12993:27816","2:12994:27817","2:12995:32522","2:12997:12004","2:12998:32523"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5573:25794":{"id":"5:5573:25794","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12990:25797"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7571:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12866:2179":{"id":"2:12866:2179","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12865:872":{"id":"2:12865:872","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12068:447"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12899:30498":{"id":"2:12899:30498","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44467:9671","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5555:33210":{"id":"5:5555:33210","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:2642","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:281:2642","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12881:26605":{"id":"2:12881:26605","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10651:236","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10651:236","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12982:32521":{"id":"2:12982:32521","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12068:447","self::pattern":"2:12558:17318"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:9641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:9641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:17316","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12903:26105":{"id":"2:12903:26105","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12068:447","self::pattern":"2:12558:17318"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:9641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12906:26107":{"id":"2:12906:26107","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12068:447","self::pattern":"2:12558:17318"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:9641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:9641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:17316","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12926:32508":{"id":"2:12926:32508","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12558:17318","str::split":"2:12917:2098","prim@char":"1:12068:447","`DoubleEndedIterator`":"2:7942:128","str::rsplit_terminator":"2:12929:32509"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44225:9814","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:9641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12964:32517":{"id":"2:12964:32517","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12068:447","self::pattern":"2:12558:17318"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:9641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:9641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12583:17315","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5572:2445":{"id":"5:5572:2445","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7571:240"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7571:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12997:12004":{"id":"2:12997:12004","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4741:12004"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44483:9590","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73:1835":{"id":"0:73:1835","crate_id":0,"name":"get_physical","span":{"filename":"src/lib.rs","begin":[108,0],"end":[110,1]},"visibility":"public","docs":"Returns the number of physical cores of the current system.\n\nThis will always return at least `1`.\n\n# Note\n\nPhysical count is supported only on Linux, mac OS and Windows platforms.\nOn other platforms, or if the physical count fails on supported platforms,\nthis function returns the same as [`get()`], which is the number of logical\nCPUS.\n\n# Examples\n\n```\nlet logical_cpus = num_cpus::get();\nlet physical_cpus = num_cpus::get_physical();\nif logical_cpus > physical_cpus {\n    println!(\"We have simultaneous multithreading with about {:.2} \\\n              logical cores to 1 physical core.\", \n              (logical_cpus as f64) / (physical_cpus as f64));\n} else if logical_cpus == physical_cpus {\n    println!(\"Either we don't have simultaneous multithreading, or our \\\n              system doesn't support getting the number of physical CPUs.\");\n} else {\n    println!(\"We have less logical CPUs than physical CPUs, maybe we only have access to \\\n              some of the CPUs on our system.\");\n}\n```\n\n[`get()`]: fn.get.html","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5562:33212":{"id":"5:5562:33212","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7571:240"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7571:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12958:32513":{"id":"2:12958:32513","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12888:26630":{"id":"2:12888:26630","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12887:26629","str::split_at_mut_checked":"2:12890:26634"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12876:1858":{"id":"2:12876:1858","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12085:1642"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12923:26638":{"id":"2:12923:26638","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12558:17318","`DoubleEndedIterator`":"2:7942:128","prim@char":"1:12068:447","str::split":"2:12917:2098"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44193:9654","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:9641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:9641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:17316","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12989:25796":{"id":"2:12989:25796","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12867:32501":{"id":"2:12867:32501","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12935:26642":{"id":"2:12935:26642","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12068:447","str::splitn":"2:12932:26640","self::pattern":"2:12558:17318"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44297:9657","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:9641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:9641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:17316","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12890:26634":{"id":"2:12890:26634","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:12889:26633"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42288:191","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5556:6731":{"id":"5:5556:6731","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7571:240"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7571:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:9641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1957":{"id":"0:0:1957","crate_id":0,"name":"num_cpus","span":{"filename":"src/lib.rs","begin":[1,0],"end":[485,1]},"visibility":"public","docs":"A crate with utilities to determine the number of CPUs available on the\ncurrent system.\n\nSometimes the CPU will exaggerate the number of CPUs it contains, because it can use\n[processor tricks] to deliver increased performance when there are more threads. This \ncrate provides methods to get both the logical and physical numbers of cores.\n\nThis information can be used as a guide to how many tasks can be run in parallel.\nThere are many properties of the system architecture that will affect parallelism,\nfor example memory access speeds (for all the caches and RAM) and the physical\narchitecture of the processor, so the number of CPUs should be used as a rough guide\nonly.\n\n\n## Examples\n\nFetch the number of logical CPUs.\n\n```\nlet cpus = num_cpus::get();\n```\n\nSee [`rayon::Threadpool`] for an example of where the number of CPUs could be\nused when setting up parallel jobs (Where the threadpool example uses a fixed\nnumber 8, it could use the number of CPUs).\n\n[processor tricks]: https://en.wikipedia.org/wiki/Simultaneous_multithreading\n[`rayon::ThreadPool`]: https://docs.rs/rayon/1.*/rayon/struct.ThreadPool.html","links":{},"attrs":["#![deny(missing_docs)]","#![allow(non_snake_case)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:72:1817","0:73:1835"],"is_stripped":false}}},"2:12920:26636":{"id":"2:12920:26636","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12068:447","self::pattern":"2:12558:17318"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12374:9651","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:9641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12887:26629":{"id":"2:12887:26629","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:12889:26633","str::split_at_mut":"2:12888:26630"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12929:32509":{"id":"2:12929:32509","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12558:17318","str::split":"2:12917:2098","prim@char":"1:12068:447","str::split_terminator":"2:12926:32508"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44243:9815","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:9641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:9641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:17316","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12963:32516":{"id":"2:12963:32516","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5570:33213":{"id":"5:5570:33213","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7571:240"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7571:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12938:26644":{"id":"2:12938:26644","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42288:191","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:9641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12960:32514":{"id":"2:12960:32514","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12870:32503":{"id":"2:12870:32503","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12868:32502"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5574:25795":{"id":"5:5574:25795","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12991:25798"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7571:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12970:2144":{"id":"2:12970:2144","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12068:447","self::pattern":"2:12558:17318"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42288:191","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:9641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12877:1817":{"id":"2:12877:1817","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42290:188"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42288:191","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10651:236","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10651:236","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12897:2095":{"id":"2:12897:2095","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44429:2416","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12889:26633":{"id":"2:12889:26633","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:12890:26634"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42288:191","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12900:26646":{"id":"2:12900:26646","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12068:447","self::pattern":"2:12558:17318"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:9641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12987:25792":{"id":"2:12987:25792","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12994:27817":{"id":"2:12994:27817","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:912:34568"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12967:32518":{"id":"2:12967:32518","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12068:447","self::pattern":"2:12558:17318"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:9641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5571:33214":{"id":"5:5571:33214","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:281:2642","`String`":"5:7571:240"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:2642","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7571:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5554":{"id":"5:5554","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5555:33210","5:5556:6731","5:5559:33211","5:5562:33212","5:5570:33213","5:5571:33214","5:5572:2445","5:5573:25794","5:5574:25795"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12883:26606":{"id":"2:12883:26606","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10651:236","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10651:236","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12941:26645":{"id":"2:12941:26645","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42288:191","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:9641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:9641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:17316","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12909:2163":{"id":"2:12909:2163","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42290:188","prim@char":"1:12068:447","self::pattern":"2:12558:17318"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42288:191","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:9641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12962:32515":{"id":"2:12962:32515","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12868:32502":{"id":"2:12868:32502","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12988:27812":{"id":"2:12988:27812","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40261:27808","Self::is_ascii":"2:12987:25792"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42288:191","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40261:27808","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12886:32506":{"id":"2:12886:32506","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12074:1538","crate::ops::IndexMut":"2:3222:12030","str::slice_unchecked":"2:12885:32505"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12874:32504":{"id":"2:12874:32504","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12993:27816":{"id":"2:12993:27816","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:912:34568"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12896:30497":{"id":"2:12896:30497","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12895:30512"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44458:9822","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12875:329":{"id":"2:12875:329","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12876:1858","`u8`":"1:12085:1642"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12898:32507":{"id":"2:12898:32507","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44439:9820","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12932:26640":{"id":"2:12932:26640","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12068:447","self::pattern":"2:12558:17318","str::rsplitn":"2:12935:26642"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44279:9656","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:9641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12956:2102":{"id":"2:12956:2102","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12879:26604":{"id":"2:12879:26604","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42290:188"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42288:191","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10651:236","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10651:236","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12953:32512":{"id":"2:12953:32512","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12558:17318","`DoubleEndedIterator`":"2:7942:128","prim@char":"1:12068:447","str::match_indices":"2:12950:32511"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44343:9817","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:9641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:9641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:17316","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12873:24767":{"id":"2:12873:24767","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12106:17319"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"6:533:3138":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"14:0:2223":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:14599:8226":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:39911:9717":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:8295:2416":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"1:357:9976":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:41494:9624":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"16:4674:8810":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:728:187":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"9:329:10918":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:11214:7717":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:4464:10004":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"11:2352:9334":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"20:3471:5343":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"5:3211:32215":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"5:3358:7332":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"2:22482:12231":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"6:4647:5322":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"20:1558:3914":{"crate_id":20,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"20:1386:3897":{"crate_id":20,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"20:4974:6371":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:43314:6871":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"17:14977:8381":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:1916:11189":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"17:15445:8492":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"20:3154:5311":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"14:214:9318":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"11:1025:9333":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"20:55:2744":{"crate_id":20,"path":["libc","unix","DIR"],"kind":"enum"},"2:32835:2693":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:11537:7746":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"6:4841:10956":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:11639:9661":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"2:42412:12012":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:22211:12236":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"1:4716:10771":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:46657:9884":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"6:7604:5364":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:640:9983":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:13387:7984":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:41071:9613":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"5:1024:7297":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:42754:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"6:6927:11147":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"11:2443:7314":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"17:12328:7852":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:11825:7789":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:22334:12241":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"2:45159:178":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"20:4806:6364":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"5:2074:9429":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"6:5015:5340":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:47371:9915":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:14177:8151":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"5:2049:2433":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:5681:2402":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"17:14298:8171":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:4902:12095":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"18:598:33679":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"16:6394:8971":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:8561:2466":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:43512:9782":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"11:811:7332":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1:1968:12058":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:10008:6864":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:10651:236":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:3015:223":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"2:33919:12147":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:2714:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:31157:30533":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"17:14111:8126":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"20:3257:5322":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"6:6136:11132":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:43250:11263":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:14386:8184":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"20:4151:5863":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"20:4824:2925":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:2723:142":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"1:11069:10120":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"6:4595:10934":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:12949:7562":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:12929:7906":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:12056:7831":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:1098:7547":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:8407:30738":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"15:306:19509":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:4335:9594":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:4210:29344":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"18:651:7484":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:12318:7562":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"17:13538:8016":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:40836:9740":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"5:4426:2402":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"18:623:33680":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:22864:12084":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"6:7365:6718":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:22346:30321":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"16:7270:8878":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:1975:702":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"1:6378:217":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:11773:7779":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"18:548:150":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"16:5645:8842":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:10957:7413":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:43567:9792":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"13:110:33642":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"6:1734:3915":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:12278:7849":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"5:2988:33575":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:12353:7861":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:2438:2366":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"6:4908:5883":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:15822:8608":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"6:5068:5344":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:6507:2077":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"6:7692:11176":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:6547:2501":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"16:5662:20416":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"6:4932:10986":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:10661:7685":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"6:4480:5306":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"6:4902:5879":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"20:1398:3898":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:6700:6364":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:4718:10773":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"16:3709:8794":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:8366:10099":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:10687:2375":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"16:4491:8805":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"20:5455:5363":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:11426:11298":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"20:3414:5337":{"crate_id":20,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"12:0:2222":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:14131:8127":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"11:2383:2468":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"2:40690:9725":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"11:1903:9343":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"5:3622:9339":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"20:1361:3894":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"7:31:19389":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:12808:7899":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"16:3741:8795":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"16:4844:8816":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:3240:25434":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:2203:7554":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:7985:10045":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"16:7152:9099":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"20:2982:5296":{"crate_id":20,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"20:138:2821":{"crate_id":20,"path":["libc","unix","fpos_t"],"kind":"enum"},"20:4910:6367":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"14:220:9320":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"18:563:7493":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:5581:10014":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"1:10866:10014":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"14:31:9313":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"6:4428:5301":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:10399:2419":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:42496:193":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"16:5568:8836":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:8861:10118":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:40874:1939":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"11:856:9329":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:10498:7410":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"17:13235:7954":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"18:613:33677":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"5:4881:214":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:13723:8063":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:2961:2686":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"6:4764:5334":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"6:6711:6365":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:8425:10005":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:12079:691":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"5:4107:9339":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:15456:8493":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:3273:2440":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"5:7351:9445":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"17:13526:8013":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:3317:2443":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:42194:30525":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"10:0:2220":{"crate_id":10,"path":["adler"],"kind":"module"},"5:1151:33492":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"16:6062:8910":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:10066:9990":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"2:21512:2386":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"20:4138:5877":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:3470:17287":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:21976:12156":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"16:3177:8733":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"13:0:2216":{"crate_id":13,"path":["std_detect"],"kind":"module"},"20:489:3134":{"crate_id":20,"path":["libc","unix","timespec"],"kind":"struct"},"2:44919:11280":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:9984:20485":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:44670:9835":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:7772:7410":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"17:13999:8111":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:2496:2073":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:10820:9339":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:21573:12153":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"5:5360:7297":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"6:4738:5331":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"11:774:9324":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:12695:7890":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"2:2973:2687":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"5:6631:6787":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"16:2995:19557":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"20:4925:6369":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"11:434:33638":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:12075:1623":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"17:10982:20498":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"16:5580:8771":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:10254:12063":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:33860:12145":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:2440:2367":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"16:6215:8950":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"6:6222:5906":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:46511:9880":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"20:4095:5872":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"5:6713:7297":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:4807:17379":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"5:4197:2402":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"5:3266:9346":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:31526:193":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"5:2167:9430":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:8601:2467":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"17:14463:8203":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:34752:9081":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:5163:10009":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"5:5170:2489":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:3019:12146":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"3:0:474":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"17:14414:8190":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:11102:7709":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"16:5278:8824":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:12086:1639":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"17:10350:7537":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:945:9331":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"20:3389:5334":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:11915:20586":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"16:6045:203":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"5:3833:7332":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"2:48121:9953":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:48542:9970":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:10284:7535":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:9073:10132":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"5:7383:207":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:13344:7979":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"6:4914:10975":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"20:3197:5317":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"20:3380:5333":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:6621:2497":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:14260:8167":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:8010:2433":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:15944:7953":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"11:1142:9337":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:13986:8110":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"7:78:19396":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:3082:9077":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:48425:9963":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"11:1566:19484":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"16:6462:20420":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:261:7540":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:4784:12110":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:15778:8601":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:15836:8611":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:43352:6872":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:13497:8004":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:38504:17455":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"16:7951:9222":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:10004:6862":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:3237:25436":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"6:4989:11021":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:3399:17360":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"5:7375:6787":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:5906:2500":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:42228:10001":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"5:2269:11182":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:11567:7750":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"17:10218:7533":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"5:1131:32089":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"5:4381:260":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:9032:114":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"16:2835:8764":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:4240:12106":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:4986:7569":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"17:12584:7688":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"17:13959:8105":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"5:634:9420":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:10965:9653":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:12201:7843":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:46262:9865":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:3187:138":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:9066:10131":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"5:903:2468":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"5:7063:7352":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"6:6228:1877":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:46877:9891":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:39978:212":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:12175:7838":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:7994:10046":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"16:8109:135":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:44576:9824":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:41128:7504":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:8867:196":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"17:12289:7850":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:8475:2463":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"1:6978:7401":{"crate_id":1,"path":["std","sys","pal","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"6:6100:11122":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:2963:116":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"20:3443:5340":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:13214:202":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:22319:2386":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"2:41112:9616":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:44800:9675":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"5:266:7297":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:32779:241":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:14449:8202":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:4650:12116":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:46931:9893":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:11510:7744":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"6:4610:10941":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:42479:9339":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"20:4773:3058":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:42431:223":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"11:1896:7332":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"2:8051:176":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:41059:9755":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"6:6120:11127":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:22256:12237":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"1:7814:12010":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"20:1410:3899":{"crate_id":20,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"6:6913:6374":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:580:3145":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:41093:9756":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:10258:25164":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"1:939:9329":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:7111:7402":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:44101:9807":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:13399:7987":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:33626:17448":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"20:3461:5342":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:44151:9812":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"6:7388:6719":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:45084:147":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"17:15992:8659":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"2:12578:17316":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"16:5499:8770":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:43771:9648":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:41018:9603":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:4781:12121":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"6:7645:5368":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"16:7565:9162":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:13766:8074":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"16:3993:8799":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"20:590:3147":{"crate_id":20,"path":["libc","unix","protoent"],"kind":"struct"},"17:10759:7687":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"6:5941:5863":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:11680:17312":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"2:43767:11271":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"6:6107:11123":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:46156:9861":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"0:72:1817":{"crate_id":0,"path":["num_cpus","get"],"kind":"function"},"2:22123:2386":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:11898:7796":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:14436:8201":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"16:2419:8745":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:16235:8712":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"2:42288:191":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"6:6682:3016":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:14212:8162":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:8403:2925":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:1885:9991":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:8993:12142":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:12711:135":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"5:7038:7349":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:12433:7868":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:10858:10043":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"17:12572:7687":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"17:10534:33667":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:40729:9729":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:11755:7777":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"11:2304:9062":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"2:10211:150":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"17:12251:7847":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"6:4455:5181":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"16:4968:8820":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"18:113:24663":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"5:1271:9062":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"16:2883:19555":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:8312:12069":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"18:491:7483":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:42066:9634":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"6:6889:6372":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"16:4813:8815":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:5834:2492":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"5:7536:9450":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:12074:17524":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:5527:112":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"20:501:3136":{"crate_id":20,"path":["libc","unix","rusage"],"kind":"struct"},"5:830:7303":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:10002:6861":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"20:5473:5366":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:6677:2502":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"20:574:3145":{"crate_id":20,"path":["libc","unix","tms"],"kind":"struct"},"17:15473:8500":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:13753:8072":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"20:4069:5870":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:1607:9346":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"9:0:2219":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"16:6077:8912":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:36628:9082":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:13272:7967":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"16:2593:8753":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:40018:213":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"6:4884:10972":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:9886:20482":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:880:9325":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"16:6599:9012":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"6:4566:5317":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:1925:9456":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:10905:7690":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:4261:12108":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"16:7355:9153":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"11:710:9322":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:3264:7558":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:1902:17481":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"11:2569:2354":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"16:8097:9235":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:4184:9592":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:21693:12151":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"18:581:2703":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:914:9322":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"5:281:2642":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:11674:7768":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:9916:20483":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"6:4724:5328":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:5117:11059":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"5:2063:9428":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:11256:7721":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"2:3418:30729":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"16:6737:9033":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:8963:12141":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:5776:2402":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"5:3609:2468":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:22771:30490":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"6:4893:5878":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:12019:10172":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"17:13089:7920":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"11:2469:7332":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"17:11089:7708":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:12150:7836":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:1072:9338":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:10010:203":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"11:1107:9336":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:14325:8175":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"5:1528:207":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:10393:7409":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"6:7633:5366":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"16:6188:8948":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:9142:184":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"6:5111:11056":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"1:7728:2386":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"6:6086:11111":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"6:7668:11171":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:44145:9664":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"17:15390:8478":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:14752:8248":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:2588:2075":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:47933:9951":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:46541:9881":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:6595:7364":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"6:5992:5884":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"16:7684:9176":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:8951:10124":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:10018:20466":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:6221:8951":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:21586:9683":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"16:7706:20427":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"5:1537:9425":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:11647:7766":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:12508:7878":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:16151:8693":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"2:13239:9680":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:11324:7729":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"16:6908:9059":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:22791:30517":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:46341:9868":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:46066:9857":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:3159:124":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:3014:12144":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"20:4131:5876":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:13972:7801":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"6:1691:3910":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:16269:7989":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"1:10700:10156":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"20:4797:3016":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:2769:8761":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"16:7103:33660":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:12066:397":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"16:6445:8975":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"16:4355:8801":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"20:1537:3911":{"crate_id":20,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:48291:9956":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:41041:9754":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:3222:12030":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"16:4787:8814":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:14723:8228":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:46779:9889":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"20:3174:5314":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:41487:9623":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"5:7548:9452":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:44429:2416":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"6:6798:6366":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:40673:9590":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"16:6965:10135":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"20:4229:5885":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:13509:8005":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:44915:11279":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"20:3348:5329":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Chdr"],"kind":"struct"},"17:10828:33666":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"11:1728:153":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"6:5044:11032":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"5:1487:9325":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:11331:7415":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"2:43289:9191":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"17:11865:7793":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:10012:6865":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:15799:8604":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:14051:8118":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:30984:6871":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:40038:2348":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"17:15273:8446":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:11661:7767":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"11:2124:9062":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"18:521:24674":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:9039:9640":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:11107:9658":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"16:4761:8813":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"5:7331:7314":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:9296:9991":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"1:3472:2402":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"6:0:877":{"crate_id":6,"path":["libc"],"kind":"module"},"17:14560:8216":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:12068:447":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"6:4745:5332":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"16:7507:207":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:11574:7753":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"16:7971:9223":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"20:4203:5883":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlattr"],"kind":"struct"},"20:4272:5906":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"5:3596:180":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"6:4603:10939":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:44903:11276":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"7:0:1687":{"crate_id":7,"path":["unwind"],"kind":"module"},"20:3451:5341":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"5:6033:17754":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:13606:8036":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:1809:655":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:43260:6871":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"16:4907:8818":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:44059:9803":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:12863:7902":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"20:2995:5297":{"crate_id":20,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:15701:8579":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"16:2304:19554":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"2:41142:9618":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"20:1490:3906":{"crate_id":20,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"6:1496:3892":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"16:6555:9000":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"20:3137:5309":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:13173:7938":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"11:787:9325":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:13187:7939":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"20:134:2820":{"crate_id":20,"path":["libc","unix","FILE"],"kind":"enum"},"17:15138:8410":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:22615:9685":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:6438:183":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:4966:415":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:725:2386":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"11:1087:33636":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"5:5896:7314":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"16:6320:8961":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"11:328:10908":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:12824:20489":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"6:548:3140":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:45175:9855":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:39923:210":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"11:2536:10910":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:12530:7882":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"2:11079:9656":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:16176:8701":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"16:5878:8724":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:46110:9859":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:7980:9996":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"2:44492:9731":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"16:6745:8776":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:41525:7366":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:4572:12111":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:3193:140":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"16:7609:9164":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"6:507:3136":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"5:790:7300":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:12557:7707":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"11:687:9339":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:48367:9958":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"6:1674:3908":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"6:5033:5343":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"16:7444:9158":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:11493:7742":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:8363:12020":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:7863:17438":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"6:4516:5310":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:21341:30902":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:2276:2159":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"14:165:19489":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:4196:108":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:44081:9805":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:43752:9793":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:11841:7791":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"11:700:6787":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:11348:10025":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:45105:204":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:11000:9654":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:1826:9989":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"20:3086:5181":{"crate_id":20,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"16:7619:20426":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"18:0:2227":{"crate_id":18,"path":["memchr"],"kind":"module"},"5:0:303":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:48581:9971":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:40958:2417":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:10463:7376":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"17:12516:7880":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"16:5038:8822":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"5:3753:2433":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"20:1479:3905":{"crate_id":20,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"6:6012:11079":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"20:1504:3907":{"crate_id":20,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:22:729":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"11:1676:7290":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"5:2157:7311":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:13553:8022":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"0:73:1835":{"crate_id":0,"path":["num_cpus","get_physical"],"kind":"function"},"16:5616:8837":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"16:536:8722":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"20:527:3138":{"crate_id":20,"path":["libc","unix","hostent"],"kind":"struct"},"11:800:7314":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"16:5897:20417":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:10524:7683":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"16:7306:9141":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"16:5919:20418":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"5:5408:17304":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:2112:9459":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:47791:9950":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:12069:1658":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:40739:9730":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"20:3238:5321":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"5:3702:7297":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:12073:1505":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"17:15176:8424":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"9:481:19402":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:3442:2448":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"6:4440:5303":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:44591:9829":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:4011:12086":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"6:1528:3895":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:2511:132":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"17:13738:8067":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"6:4878:10971":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:43980:9796":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:11524:7745":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"5:6870:7330":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"18:706:7519":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:10167:12137":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"2:41510:9625":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:48414:9962":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:45097:224":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"20:3147:5310":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:41027:9751":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:8355:11282":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:15400:8481":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"6:6079:5329":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:44895:11274":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:951:9332":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"6:4676:5324":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"5:1425:2468":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"16:7551:8775":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"11:102:10904":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:4879:7390":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:21302:2703":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:11420:11297":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:2271:2358":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:46687:9885":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:15410:8484":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:34233:17452":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:12320:9669":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:10006:6863":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:15814:8605":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:14091:8123":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:12362:7862":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:48245:9955":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:48489:9967":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:5649:2869":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"20:3071:5303":{"crate_id":20,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:40075:9722":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:44697:9674":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:12336:9670":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"6:4578:5318":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:4312:10002":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"16:7595:8773":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"6:4870:10967":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"20:4185:5881":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"16:5794:8861":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"16:2509:8749":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:12792:7637":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:10758:25727":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"20:3019:5299":{"crate_id":20,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:2671:7371":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:2730:253":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"20:5439:6718":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:42834:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:42050:9632":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:1054:9333":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:3354:2438":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:13568:8028":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:6511:2495":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:8348:10001":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:44891:11273":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"6:6114:11124":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:11606:9660":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"2:8360:2471":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:34096:17451":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:4378:6873":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"16:5713:8850":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:43017:6861":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:5140:11065":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"5:2718:11186":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"16:5959:19527":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:40831:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"20:5467:5365":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:15596:8550":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"6:6128:11129":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"11:2151:9334":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:42598:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:40892:7358":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:40847:30495":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:8369:17436":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:4720:10775":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"17:14847:8331":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:42337:171":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:13899:8096":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"20:4278:1877":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:7657:11167":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:15151:8416":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:14079:8122":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:8088:2434":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:22755:9694":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"20:1377:3896":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:7913:2641":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:5066:853":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:15383:8477":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"18:573:7484":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"5:692:117":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:46086:9858":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:14912:8371":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"16:6724:9031":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:3378:17463":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:12213:7844":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"5:7341:7309":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:11575:10000":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"18:754:7531":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"16:7376:9154":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:2032:195":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:10365:7368":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"2:43920:9794":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"16:5541:8827":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:16069:8673":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"1:8282:2419":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:44325:9816":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"20:3226:5320":{"crate_id":20,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:13922:8101":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"16:4399:8802":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:4987:31211":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:21971:2386":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"1:4075:12090":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:8546:2465":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"20:568:3144":{"crate_id":20,"path":["libc","unix","itimerval"],"kind":"struct"},"2:2355:17472":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"1:5496:10012":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:48440:9964":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:15734:8586":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:13844:8087":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:41009:9601":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:40679:9724":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:15301:8454":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"16:7225:20424":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"16:5331:7672":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:40068:9721":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:9858:20481":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"16:5865:8874":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"16:8022:20428":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"6:5829:5848":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"20:1368:3895":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:11141:159":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"16:2689:8757":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"6:5974:5881":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:12189:7842":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:22747:9693":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"5:7466:2354":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:7800:12009":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:922:9326":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:3183:2639":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:11650:10033":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:15616:8556":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"16:5316:7671":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"16:7523:8784":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"20:549:3141":{"crate_id":20,"path":["libc","unix","winsize"],"kind":"struct"},"1:12090:847":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:21695:9683":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:12900:7905":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:12563:9641":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"11:1883:2468":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:4392:10003":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:13774:8076":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:43559:9791":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:11409:10032":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"3:234:223":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"5:2196:11178":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:2424:2362":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:9193:10137":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"15:394:19519":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"20:3080:2085":{"crate_id":20,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:1063:9334":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:11088:11281":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"1:9045:24813":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:10457:136":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"1:3017:135":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:9467:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:12071:1152":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:5045:12126":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:5852:9604":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"5:1790:7332":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"6:569:3143":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:44605:9832":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:41080:9614":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:15092:8404":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:7227:6793":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"20:1514:3908":{"crate_id":20,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:32834:2638":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"6:1682:3909":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:16032:7957":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"10:44:9352":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:42250:9635":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"16:5726:8851":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:22699:9687":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"6:4808:10943":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:10887:33670":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"8:0:2218":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"5:7492:7323":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:15289:8448":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:46132:9860":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:44467:9671":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:15720:8584":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:4996:12120":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"16:6230:8952":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:7820:12048":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"15:0:2224":{"crate_id":15,"path":["addr2line"],"kind":"module"},"16:6268:8768":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"20:4101:5873":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:13455:7999":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:39907:12029":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"16:4518:8806":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:39827:17358":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"18:635:7506":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:44622:9833":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"20:5417:3091":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:12072:328":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:5720:10015":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:11715:7771":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"1:557:9979":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:7919:2377":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:11554:9999":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:16165:8696":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"1:11381:10029":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:12082:794":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"17:14475:8204":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:11514:9998":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:32761:6874":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"2:48329:9957":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:7936:2379":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"17:14066:8121":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:9781:20480":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:44748:17331":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"11:1066:19483":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:7068:27965":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"20:3127:5308":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:7679:11172":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:7995:2640":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"6:1718:3914":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:13024:20491":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"16:2729:8759":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:10877:7689":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:8912:2468":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:43331:135":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:10946:7412":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:11547:7617":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:21358:30901":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:11153:7688":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"16:7482:9159":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"20:5019:6374":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:1514:10932":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:47435:9917":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:14489:8205":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:43999:9799":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:16259:7984":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"2:44907:11277":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"5:4227:2402":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"16:6579:20421":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:1602:9345":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:15039:8392":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:10317:7536":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"20:3355:5330":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Chdr"],"kind":"struct"},"5:7419:6787":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"6:7598:5363":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"5:7584:9453":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"20:3433:5339":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:40773:17385":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:32743:9712":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:7333:17440":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:15333:8462":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:3275:2441":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:1207:7549":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"9:52:19421":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"5:1115:33491":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"11:299:10905":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"16:6811:20422":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"18:689:7516":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:10881:24806":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"18:481:7482":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:41535:9626":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:13406:149":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:11419:7687":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"18:515:7481":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:12088:1641":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:14994:8383":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"20:4180:5880":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:43277:30500":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"16:6116:8933":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:22402:17471":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"20:3119:5307":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:44279:9656":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"20:4904:6366":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:15010:8384":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:2266:136":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:42559:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:44175:2420":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"17:14341:8177":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"6:4488:5307":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:16093:8678":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"6:4776:5335":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"14:187:19496":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"6:4830:10948":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:30701:12072":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:6584:9615":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"17:16079:8674":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"1:11491:7417":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:11166:7714":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:1834:1189":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"6:1501:3893":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"16:3260:8791":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"16:2439:8746":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:46240:9864":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"20:4077:5871":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"16:5006:8821":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"16:2553:8751":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"6:4800:5338":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:40792:9735":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:45138:9850":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:3916:10000":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:15624:8557":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"16:4283:8800":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:30931:6736":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:2678:17390":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"20:4042:5848":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"5:7477:2355":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:15102:8405":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:8611:2468":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"6:4388:5299":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:9469:7408":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"18:765:24673":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:2459:111":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:43031:6864":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:22013:30890":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"16:5521:8772":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"16:3545:8793":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"6:574:3144":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"6:1710:3913":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:11634:7765":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"11:1582:9341":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"20:1531:3910":{"crate_id":20,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:43528:9785":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:11242:7719":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"6:4847:10959":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"6:1521:3894":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:3558:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"5:1456:6787":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:10448:7371":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"17:12264:7848":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"6:654:3165":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:16198:8703":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"2:38614:17457":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"20:1635:3968":{"crate_id":20,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"20:563:3143":{"crate_id":20,"path":["libc","unix","sigval"],"kind":"struct"},"6:5969:5880":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:10350:10118":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:6243:7396":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:40971:9746":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:13581:8032":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:40902:9742":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"6:5867:5871":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:48466:9966":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:46418:9872":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:11051:7702":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"18:96:24662":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"6:6764:3827":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:6892:12148":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"11:1917:9345":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:40088:9723":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"9:356:19418":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:11621:7763":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:3570:24949":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:42676:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:40758:9590":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:2234:7557":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:10710:7686":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"16:0:2225":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:7942:128":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:15521:8537":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:13292:7968":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:15356:8470":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:3433:17284":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:1887:9992":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:32778:2637":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"6:6804:6367":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:4698:5326":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"16:5238:8823":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:8934:10016":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:13946:8102":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:7625:10169":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:9995:118":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"20:1350:3892":{"crate_id":20,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"6:6813:6368":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:39863:17286":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"1:637:9981":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"18:680:7514":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:14284:8170":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"6:7639:5367":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:3522:2382":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:9799:6883":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"6:1639:3905":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:14529:8210":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"6:6837:6370":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:2797:123":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:46611:9883":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"20:4847:3855":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:11657:10033":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:2548:199":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:403:7542":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:42637:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:10622:33672":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"6:1632:3904":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"15:327:19513":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"16:7984:9226":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:12087:1640":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:9038:10128":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:2726:254":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:22733:30524":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:40701:30496":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"14:160:9313":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:15748:8593":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:15116:8406":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:9654:30735":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:7729:9978":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:11354:7733":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:44769:9841":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:32864:2692":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:10431:7370":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"16:2319:8734":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:41501:2077":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:47011:9894":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"11:1160:9338":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:8265:2417":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:13146:7930":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"1:10963:7414":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:21312:30898":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"16:6244:20419":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"20:469:3131":{"crate_id":20,"path":["libc","unix","group"],"kind":"struct"},"2:4304:9593":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:928:12015":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"16:7335:8780":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"16:6895:9056":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"16:5696:8846":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"20:1431:3901":{"crate_id":20,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"16:7414:9155":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"5:6994:259":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:3010:2691":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"2:34579:17454":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:21356:30894":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:2968:243":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"5:212:7295":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:12887:7903":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"6:5052:11034":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"20:5033:6375":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","termios2"],"kind":"struct"},"17:12127:7835":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:8078:10047":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:7958:137":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"17:10439:7673":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:48504:9968":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:22348:17471":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"17:12993:20490":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:15608:8553":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"6:4854:10961":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:6395:9608":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"5:3232:9345":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"11:2554:33632":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:11643:25666":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"5:2249:32020":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"17:15957:8629":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"1:909:9340":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"16:6849:9049":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"11:2231:7753":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"5:4035:7314":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:12091:1697":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"20:1355:3893":{"crate_id":20,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:2343:632":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:2175:20544":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:4630:6876":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"11:364:7286":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:15646:8563":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:4095:2402":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:15214:8432":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:42354:9339":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"6:5897:5874":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:4710:5327":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"6:4922:10980":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:2733:2432":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:22806:30534":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"6:6781:3830":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:12030:7828":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:7614:7546":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:4821:12096":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"6:1570:3899":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:48043:9952":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:44449:9821":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:13325:7974":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"16:2336:8736":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:15931:7939":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"17:16050:7967":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"16:6331:8962":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"16:8055:9120":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"20:521:3137":{"crate_id":20,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:11063:7705":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:4069:12089":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:14147:8132":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:14587:8219":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:13252:7957":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:3561:2385":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"17:11016:7699":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:3811:9998":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:0:1530":{"crate_id":1,"path":["std"],"kind":"module"},"9:237:2464":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:16223:8709":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"6:4496:5308":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:42028:168":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"2:3393:144":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"6:6248:5907":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:32777:234":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"5:6503:7314":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:13367:7381":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:12583:17315":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:1040:9062":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:12085:1642":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"17:10818:7688":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:8275:2418":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:13165:162":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:47585:9918":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"5:1496:9340":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:5827:2491":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"6:1591:3901":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:44297:9657":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:44225:9814":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"18:726:7526":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:9970:141":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"16:6141:33662":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:1446:153":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:44976:17562":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:1804:6733":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"20:4107:5874":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:1507:10929":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:12297:9668":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:2982:7389":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"16:7932:9219":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"6:4473:5305":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:9147:231":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:44193:9654":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:44899:11275":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:22833:11195":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:475:3131":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:10796:2468":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:40980:9747":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"6:6868:6371":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:11605:7761":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:14868:8341":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:11583:7756":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"6:4449:2085":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:6666:3826":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"16:3600:7577":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"5:7319:9444":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:2353:17471":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"2:46400:9871":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:48451:9965":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:2506:198":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:7900:143":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:21684:2386":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:11405:7736":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:7332:17439":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"2:10259:9647":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"20:5461:5364":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:11128:7662":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"20:2976:5295":{"crate_id":20,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:44923:11281":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:11877:7794":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:14968:8377":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"16:3773:8796":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"16:5825:8718":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"11:123:7284":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"6:5152:11070":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:42471:2468":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:9150:9641":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:13308:7972":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"18:698:7517":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:588:12003":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:363:9977":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"5:6549:7297":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"5:7411:6787":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:13437:7991":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"16:2399:8744":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:7867:17437":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:10721:137":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"6:4351:5296":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"6:4666:5323":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"16:6941:20423":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"20:3215:5319":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:437:7544":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"20:4193:5882":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:42487:6787":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:3801:6787":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:2720:160":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"5:5980:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:46709:9886":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"16:2459:8747":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"6:1546:3897":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:15249:8438":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"6:4998:11027":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"20:4887:3830":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"16:7914:9217":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"20:4781:3826":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:10769:33665":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"16:5601:20415":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:15426:8487":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"20:5064:6377":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:9659:31799":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:9938:20484":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"16:6201:8766":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"16:4572:8808":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:42414:6849":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:11293:20517":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"6:7651:11166":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"17:12478:7873":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"16:7452:20425":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"5:4267:2468":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"20:3006:5298":{"crate_id":20,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"20:1472:3904":{"crate_id":20,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"16:4545:8807":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:31553:2703":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"5:1316:9338":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:4529:6874":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:42371:6850":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"16:2529:8750":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"20:542:3140":{"crate_id":20,"path":["libc","unix","pollfd"],"kind":"struct"},"9:391:19404":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"18:80:24661":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"11:1051:9334":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:14271:8168":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:32768:9714":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:42423:9642":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:11631:10166":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"6:4814:5339":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:918:9323":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:513:7545":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"20:3209:5318":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"16:4871:8817":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:11189:7715":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"6:4364:5297":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"6:5146:11067":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"6:4584:5319":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"16:5555:8831":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"20:3166:5313":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:46908:9892":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"18:531:7488":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"11:2423:6787":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"2:12558:17318":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:43537:154":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:4047:12087":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"16:7400:8783":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:9210:10138":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","Key"],"kind":"struct"},"1:4823:12098":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:43549:2464":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"20:5447:6719":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"20:4943:6370":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:47165:9912":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:12768:20467":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:4450:9595":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:5321:200":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"17:14876:8342":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:11301:9404":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"17:13363:7980":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:13461:12016":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"16:7537:8785":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:12464:20611":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:43989:9798":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"20:483:3133":{"crate_id":20,"path":["libc","unix","timeval"],"kind":"struct"},"6:1596:3902":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:14235:8163":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:482:7383":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:8382:10101":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"11:0:2221":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"2:7904:163":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"16:6254:8955":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:11764:7778":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"17:12089:7833":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:5713:7397":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"5:3206:9344":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:12067:1034":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:11702:7770":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"6:542:3139":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:8245:2384":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"6:6169:5885":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:15190:8427":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:12092:1248":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:7752:10036":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"20:0:877":{"crate_id":20,"path":["libc"],"kind":"module"},"1:5209:201":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"17:10997:7697":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:21514:12154":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"16:5298:20414":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:15281:8447":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"5:5404:17303":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:14503:8208":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:22295:12238":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"17:14356:8181":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:5652:12135":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:4603:2525":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"20:614:3165":{"crate_id":20,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"20:3334:5328":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:6263:11140":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:4017:12085":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:9027:10125":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:12671:7888":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"2:726:12073":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"1:10085:10142":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"2:42268:9637":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"17:14189:8153":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:4825:12099":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"6:501:3135":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"20:4209:5884":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"11:1007:9062":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:5132:10009":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"9:501:9407":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:11557:7748":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"16:6348:8769":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:16138:8687":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"11:844:12015":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:12408:7865":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:9472:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"20:4174:5879":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlmsgerr"],"kind":"struct"},"16:6292:8959":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:13116:7926":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"1:9464:2378":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"2:38559:17456":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:9175:2392":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"17:13814:8084":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"6:4401:5300":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:44343:9817":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"20:1416:3900":{"crate_id":20,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"5:5020:2402":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:11395:10030":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:4987:12119":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:43010:6862":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"16:4433:8803":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"20:3276:5323":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:3405:17359":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:39998:211":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:1581:7314":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:9157:159":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"5:7391:9446":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"18:670:7513":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:15582:8544":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:12629:17324":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:13356:114":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"17:15058:8393":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"20:1444:3903":{"crate_id":20,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:533:7384":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"16:7118:6850":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:3504:2076":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:12422:7866":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:15635:8562":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:10251:7534":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"16:5759:8858":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"20:3160:5312":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:10068:20469":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:15760:8595":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"16:7491:9160":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"6:7343:3091":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:44555:17330":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"5:5826:247":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"6:4556:5316":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:14025:8114":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"16:6858:9052":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:46563:9882":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"4:0:2217":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:2717:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"16:6134:8943":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"16:7429:33658":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"6:4947:10991":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"2:3667:7314":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"6:1604:3903":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:8458:12130":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"11:837:9326":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:4550:12110":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:6624:2498":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:10720:33668":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:10137:20463":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:11853:7792":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:11115:7711":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"6:483:3132":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"14:40:7954":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"6:5004:11030":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"20:3489:5345":{"crate_id":20,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:597:7546":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"20:3111:5306":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:3234:29777":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"5:6370:12244":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:15197:8429":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:15206:8430":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:11788:7783":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"6:5928:5877":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"5:3199:2468":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:22840:9706":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"6:489:3133":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:8288:2420":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"20:495:3135":{"crate_id":20,"path":["libc","unix","rlimit"],"kind":"struct"},"17:11799:7784":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:3141:17285":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"1:11241:10164":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"2:32747:9120":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:46733:9887":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"6:5104:11053":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"6:7610:5365":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"16:2979:8788":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:7974:126":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"11:2548:10912":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:12342:7857":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:5861:2493":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:11313:7727":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"16:7294:9140":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:10452:2440":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"16:4649:8809":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:14038:8116":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:14933:8376":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"5:1686:7297":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"6:119:2820":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"16:2641:8755":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:43024:6863":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:45198:9856":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:12084:791":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:12076:7832":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:16105:8680":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"2:13187:30679":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:3315:208":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"20:3286:5324":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:12107:7687":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"20:3320:5327":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:12083:795":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"6:5982:5882":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:13064:7919":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"16:5485:8767":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"20:3059:5301":{"crate_id":20,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"5:2487:11183":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:46311:9867":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"20:3065:5302":{"crate_id":20,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:5910:5875":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"16:2917:19556":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:11367:7707":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:4131:12094":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:10898:10121":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"11:2562:10915":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"6:1650:3906":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:859:6787":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:44134:9811":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:12851:7901":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"20:1543:3912":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"16:6030:8905":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:31052:30480":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"6:4686:5325":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:12597:7884":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"16:6431:8774":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:15418:8485":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:11093:9657":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"16:6669:9026":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"5:40:7293":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"14:7:9313":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:15342:8463":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"11:430:33637":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:13485:8003":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:42793:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"20:5046:6376":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:42082:12070":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"6:7702:6720":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:40261:27808":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"2:46363:9869":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:14855:8334":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:10044:20486":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"11:2498:19479":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"16:2819:8763":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"5:7653:7332":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"9:446:19403":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"11:875:9331":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"20:557:3142":{"crate_id":20,"path":["libc","unix","linger"],"kind":"struct"},"20:3363:5331":{"crate_id":20,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"6:6741:3855":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:8617:2469":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:44072:9804":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:41301:9621":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:15463:8495":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"16:6408:8973":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:47247:9913":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"16:149:7280":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"16:6882:9053":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:4109:12091":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:723:151":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"16:6788:33659":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"6:5859:5870":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:11123:11292":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"20:4870:3827":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:15376:8476":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"16:7386:8782":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"16:2789:8762":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:16212:8707":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"2:44911:11278":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:11443:7740":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"11:673:2468":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:2035:194":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:33440:9072":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"20:4995:6372":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:2422:2361":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:22853:9707":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:9737:20464":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"13:226:10903":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:6151:7392":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:39938:207":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:12572:7519":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:867:9324":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:8878:10119":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"6:5009:5295":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:16249:8713":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"1:10455:2442":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"20:1550:3913":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"6:4523:5311":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:41543:9628":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:42216:9773":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"6:495:3134":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:40922:2380":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"16:2665:8756":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:8222:2449":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:4446:218":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:13015:7868":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"6:1537:3896":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:3172:2422":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"9:423:19405":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"6:5955:11078":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"5:2998:33486":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:8213:2447":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"18:589:7494":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:3315:2442":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:3473:7560":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"5:2994:33487":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:2849:9460":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"2:41516:2448":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:44091:9806":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:44782:9845":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"6:5891:5873":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"6:5075:5345":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"20:3408:5336":{"crate_id":20,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"5:6012:2489":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:40716:9728":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"5:3768:9428":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:42520:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:10658:10151":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"17:4821:7567":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"17:3597:7561":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:4:1115":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:1797:631":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"1:1585:7332":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"18:538:7491":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:6422:7283":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"2:33254:9075":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:6725:230":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:5462:10010":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:7679:2484":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:44474:9732":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:22562:9684":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:30995:30503":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"2:39248:17459":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:9951:223":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"1:6691:2503":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"10:36:10917":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:8904:10121":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:2542:192":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"17:13424:7990":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:44020:9801":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:21339:30896":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:44458:9822":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"16:2749:8760":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"5:1287:9334":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"5:7594:9454":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:13832:8085":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:10419:7541":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"5:1478:9324":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:10730:126":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"17:13785:8079":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:44009:9800":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:44397:9819":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:44243:9815":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"6:123:2821":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"5:7560:7328":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"2:44965:9847":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"6:6961:6377":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"20:4120:5875":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:44439:9820":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:12485:20612":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"16:2375:8743":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:6590:11191":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"5:3245:32214":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:10241:112":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"1:1862:9990":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:32866:113":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"16:6376:8963":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:48405:9961":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:14986:8382":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"16:7366:8781":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:3029:9076":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:15222:8434":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:47325:9914":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:48394:9960":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:46178:9862":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"6:1703:3912":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:15324:8459":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"16:6803:9038":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:43520:9784":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:3190:139":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"16:2573:8752":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"20:582:3146":{"crate_id":20,"path":["libc","unix","servent"],"kind":"struct"},"1:8002:2431":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:11171:11293":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:7946:2376":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"6:1558:3898":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:12081:793":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"17:11026:20499":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"6:4628:5321":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:4860:10964":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"5:3240:9343":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"11:2542:10911":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:10170:7672":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:15769:8599":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:16187:8702":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"6:6159:11138":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:8523:2464":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"5:7669:7336":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"6:1576:3900":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:42362:6787":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"1:2268:2357":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"6:527:3137":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:12518:2472":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:3814:9999":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:15168:8421":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"6:6934:11150":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:4455:9596":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"6:4616:5320":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:5966:9606":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:44161:2419":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:15266:8445":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:40766:9732":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"5:683:246":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"5:2987:6836":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"18:659:7507":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:3579:2383":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"16:4462:8804":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"11:1887:6787":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:1596:9344":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"20:5479:5367":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:10711:2379":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"2:4519:7356":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"6:4461:5304":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"5:5669:7330":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"5:2990:11179":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:46755:9888":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:40989:9748":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"6:5885:5872":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:3046:17461":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"2:4583:6875":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"6:6718:2925":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:10954:20497":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"20:4165:5878":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlmsghdr"],"kind":"struct"},"1:849:9339":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:10915:33669":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"16:6929:9061":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:44483:9590":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:14372:8182":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"11:2369:9349":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"0:0:1957":{"crate_id":0,"path":["num_cpus"],"kind":"module"},"1:9961:9770":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"2:40862:9741":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:12399:7864":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"5:6903:7344":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"20:1522:3909":{"crate_id":20,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"5:1302:9333":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:3749:12071":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"6:4968:11006":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"16:5346:8825":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:4061:12088":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:11497:7743":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:12225:7845":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"18:507:7484":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:47135:9911":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:11106:2392":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"2:21324:30898":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"6:7371:11153":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:10014:6866":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:12969:7908":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:40799:17386":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:42346:2468":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"16:7324:9149":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:42413:12134":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:504:7311":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"17:9755:20462":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"16:7345:9152":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:415:182":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:44046:9743":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:42873:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:3041:17460":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"2:12106:17319":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:12093:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:7924:2378":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"16:2355:8742":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:3589:2074":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"20:3482:5344":{"crate_id":20,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:10671:33673":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:903:7332":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"6:7622:11162":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:40785:9734":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:12080:796":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"16:6759:8777":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"6:4824:10945":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:6068:217":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:4574:7357":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"16:4733:8812":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:41050:9607":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"20:477:3132":{"crate_id":20,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:11392:7735":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:21565:2386":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:11075:7707":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"5:6893:7342":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"6:6047:11100":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"20:3104:5305":{"crate_id":20,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:15:2327":{"crate_id":2,"path":["core","write"],"kind":"macro"},"1:4232:12105":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:22125:12152":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:14246:8165":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"6:6943:6376":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:8301:10093":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:34037:17449":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:30969:6738":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:10092:20487":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"6:6898:6373":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:9086:10135":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:40999:9750":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:13877:8095":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:15569:8538":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"5:1440:9339":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"20:4817:6365":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:10927:9652":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:893:7314":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:9078:10133":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"11:490:151":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"6:4755:5333":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:9457:136":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"11:1910:9344":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"16:6546:8999":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:836:2468":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:8083:10048":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:12683:7889":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"15:288:19508":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"20:5485:5368":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:4706:12090":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"6:5123:11062":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:11354:10165":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:10458:2438":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"17:12454:7871":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"11:1923:9346":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"6:6819:6369":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:46830:9890":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:10087:10141":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"11:2140:9333":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:4219:17283":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:7747:10034":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:44941:129":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:10000:127":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"16:6362:8786":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:2657:2430":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:39960:209":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:13046:7916":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:14545:8212":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:44887:11272":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"1:5706:217":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"11:1603:9342":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"6:7616:11161":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"20:3092:5304":{"crate_id":20,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"14:202:17332":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"16:6099:8927":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:9952:2385":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:22722:9692":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:11812:7787":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:14311:8172":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"16:7869:9213":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:40750:9731":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:46210:9863":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:45087:216":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:8399:10103":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:0:2226":{"crate_id":17,"path":["object"],"kind":"module"},"2:11121:9659":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"6:563:3142":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"20:3425:5338":{"crate_id":20,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:7619:2447":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:8233:2381":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:45146:9852":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:9671:20465":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:4248:12107":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:12371:7906":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:8891:10120":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:5025:2450":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"16:7176:33663":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"16:6773:9035":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:7835:10043":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"18:608:7500":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:14012:8113":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:41287:9620":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:22448:12232":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"17:11467:7741":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"20:3180:5315":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:44379:9818":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"6:5130:5342":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:7929:2375":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"5:3170:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:6052:7397":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:44734:9836":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:48183:9954":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:10682:11290":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"5:7311:6787":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"6:4543:5314":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:7684:7406":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:11042:7700":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:21370:30892":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"2:12374:9651":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:2677:2386":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:30963:6737":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:1574:2468":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"5:7508:9447":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:32707:10914":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:11341:7732":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:3356:2439":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"16:6646:9025":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:10612:7684":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"20:1436:3902":{"crate_id":20,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:0:529":{"crate_id":2,"path":["core"],"kind":"module"},"2:41277:2418":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"20:3032:5300":{"crate_id":20,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:12078:689":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:48385:9959":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:11688:7769":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"11:351:33633":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"6:4529:5312":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:12621:7885":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"2:40929:9743":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:9099:24785":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:45186:9351":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"1:6227:7381":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:13797:8081":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"5:886:7305":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:4123:12093":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:10641:2386":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:2808:135":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:46280:9866":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:42402:6851":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"6:6059:11104":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"5:4396:7321":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"11:2403:9339":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"17:12724:20488":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:8928:6787":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:11269:20516":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"6:5921:5876":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:5023:5341":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:12035:29503":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:23977:233":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:12543:7883":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"2:12090:9662":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:5389:127":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"17:12388:7863":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"17:14516:8209":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"5:7361:32018":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"6:6691:11146":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:12659:7887":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"2:48519:9969":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:10845:2420":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:43305:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:2450:2372":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:1939:9993":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"1:10749:25725":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"2:41152:9758":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"16:6152:8946":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"9:177:19470":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:12260:9665":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:10573:33671":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"19:0:1132":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"11:883:9332":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:13473:8000":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"16:5630:8840":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:42912:2490":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"11:742:9323":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"16:7653:9172":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"6:596:3147":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"20:3296:5325":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"18:735:24672":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:42715:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"18:643:7484":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"6:6071:5330":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"20:3401:5335":{"crate_id":20,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:15434:8488":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"20:5004:6373":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:8307:10095":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:11743:7774":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"17:15678:8578":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"5:7521:30495":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:13855:8088":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"6:4506:5309":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:12089:1638":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"20:3370:5332":{"crate_id":20,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:26377:262":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:15655:8565":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:22433:2386":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"2:46465:9873":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:1992:186":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:21567:12150":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:11056:10119":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:9014:2494":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:13211:7953":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"11:396:7288":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"6:4789:5337":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"6:4977:11012":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"16:7998:8787":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"16:8012:9228":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:47401:9916":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"6:6658:3058":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"6:1913:3968":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:11142:7687":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"6:555:3141":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:11038:9655":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:8360:12109":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"16:2489:8748":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:7397:30629":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:22668:9686":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"5:1517:9323":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:13412:7989":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:10219:154":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"18:718:7523":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:10185:7532":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:10888:9651":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"5:7302:9426":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"16:4702:8811":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:46381:9870":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"20:3187:5316":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:9807:20470":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"16:7194:33661":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:12238:7846":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:22001:9682":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:2693:2423":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:1824:9988":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:11854:7421":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:256:7539":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"6:4783:5336":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:11080:2132":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"6:4955:10996":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"6:1664:3907":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:9232:24794":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","DtorState"],"kind":"enum"},"1:9119:11284":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"6:1697:3911":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"16:2859:8765":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:41103:9757":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:10677:11288":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"2:43971:9795":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"20:4298:5907":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:3051:17462":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"2:22683:11192":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"17:14788:8279":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:11730:7773":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"17:13594:8033":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:1636:1841":{"crate_id":2,"path":["core","mem"],"kind":"module"},"16:3856:8798":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:10155:7671":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:34406:17453":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:12494:7875":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"16:2709:8758":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:44121:9808":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"5:1388:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"16:6610:9013":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:15313:8455":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"16:6692:9027":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"5:4459:7321":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"6:62:2744":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"17:12707:7891":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:12300:20610":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:7465:29505":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"17:16121:8685":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"20:1574:3915":{"crate_id":20,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:22477:12233":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"1:12074:1538":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1:1578:6787":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:8920:10123":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:32754:9713":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"6:588:3146":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:2440:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:621:9980":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:14402:8188":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:12040:12011":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:38669:17458":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:4172:9591":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:15023:8389":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:11227:7718":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:15126:8407":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:7449:17432":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:1710:2402":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"17:13375:7983":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"16:6282:8958":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:3399:2427":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"6:7556:6375":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:42110:11262":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:3003:2689":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"1:10740:2381":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"6:4939:1102":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"11:1891:7314":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:14575:7868":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:2037:7550":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:7221:28051":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:12043:7829":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"16:4937:8819":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:40949:9745":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:12647:7886":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"2:40818:9739":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:12789:118":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:7665:7404":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:4238:17362":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"16:3830:8797":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"11:832:9340":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"6:5085:11039":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:12051:24798":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:44759:9837":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:6275:10021":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"11:2326:9333":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"16:5846:8867":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"20:4919:6368":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"16:3406:8792":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"17:13674:8038":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"16:3010:7572":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:8978:12140":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:4549:5315":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"6:4375:5298":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"5:6137:2402":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"16:2284:19528":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"16:7889:9214":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:8628:2470":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"20:5494:6720":{"crate_id":20,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:15368:8473":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"16:2617:8754":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:33978:17450":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:15078:8401":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:1590:9343":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"5:7571:240":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"6:4535:5313":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:3388:250":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:22388:12242":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"17:12443:7870":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:4119:12092":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:9152:232":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"5:4065:7297":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"20:536:3139":{"crate_id":20,"path":["libc","unix","iovec"],"kind":"struct"},"17:11595:7760":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"6:4434:5302":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:47089:9910":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:6330:7397":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"20:3308:5326":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:8374:10093":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"5:1506:9322":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:5512:10013":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:2437:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"1:645:12006":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:5476:10011":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"5:786:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"}},"external_crates":{"20":{"name":"libc","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}