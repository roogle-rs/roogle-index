{"root":"0:0:2178","crate_version":"1.16.0","includes_private":false,"index":{"2:13255:28138":{"id":"2:13255:28138","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12336:471","self::pattern":"2:12889:17505"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12704:9663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:9652","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13302:33029":{"id":"2:13302:33029","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12336:471","self::pattern":"2:12889:17505"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:9652","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13332:12182":{"id":"2:13332:12182","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4958:12182"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44201:9600","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13223:28132":{"id":"2:13223:28132","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:13222:28131","str::split_at_mut_checked":"2:13225:28136"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13298:33027":{"id":"2:13298:33027","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13308:28151":{"id":"2:13308:28151","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12336:471","self::pattern":"2:12889:17505"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42001:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:9652","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12895:9652","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12910:17503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13323:28009":{"id":"2:13323:28009","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39902:17583","Self::is_ascii":"2:13322:27579"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42001:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39902:17583","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13299:33028":{"id":"2:13299:33028","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12336:471","self::pattern":"2:12889:17505"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:9652","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12895:9652","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12915:17502","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13261:33019":{"id":"2:13261:33019","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12889:17505","str::split":"2:13252:2324","prim@char":"1:12336:471","`DoubleEndedIterator`":"2:8269:129","str::rsplit_terminator":"2:13264:33020"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43943:9853","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:9652","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5636:27582":{"id":"5:5636:27582","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13326:27585"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13279:2552":{"id":"2:13279:2552","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12889:17505","`DoubleEndedIterator`":"2:8269:129","prim@char":"1:12336:471","str::rmatches":"2:13282:33021"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44097:9857","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:9652","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13327:28012":{"id":"2:13327:28012","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:991:37521"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13288:33023":{"id":"2:13288:33023","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12889:17505","`DoubleEndedIterator`":"2:8269:129","prim@char":"1:12336:471","str::match_indices":"2:13285:33022"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44061:9856","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:9652","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12895:9652","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12910:17503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13199":{"id":"2:13199","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13200:997","2:13201:2405","2:13202:33012","2:13203:33013","2:13205:33014","2:13208:28067","2:13209:33015","2:13210:336","2:13211:2079","2:13212:2038","2:13214:28107","2:13216:28108","2:13218:28109","2:13220:33016","2:13221:33017","2:13222:28131","2:13223:28132","2:13224:28135","2:13225:28136","2:13227:9684","2:13228:9870","2:13229:7008","2:13230:31458","2:13231:31488","2:13232:2321","2:13233:33018","2:13234:31523","2:13235:28148","2:13238:28149","2:13241:28150","2:13244:2389","2:13248:7017","2:13252:2324","2:13255:28138","2:13258:28140","2:13261:33019","2:13264:33020","2:13267:28142","2:13270:28144","2:13273:28146","2:13276:28147","2:13279:2552","2:13282:33021","2:13285:33022","2:13288:33023","2:13291:2328","2:13293:33024","2:13295:33025","2:13297:33026","2:13298:33027","2:13299:33028","2:13302:33029","2:13305:2370","2:13308:28151","2:13311:33030","2:13314:33031","2:13317:33032","2:13320:2171","2:13322:27579","2:13323:28009","2:13324:27583","2:13325:27584","2:13326:27585","2:13327:28012","2:13328:28013","2:13329:28014","2:13330:33033","2:13332:12182","2:13333:33034"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13208:28067":{"id":"2:13208:28067","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12436:17506"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13210:336":{"id":"2:13210:336","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13211:2079","`u8`":"1:12355:1851"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13227:9684":{"id":"2:13227:9684","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12336:471"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43863:9676","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73:2056":{"id":"0:73:2056","crate_id":0,"name":"get_physical","span":{"filename":"src/lib.rs","begin":[108,0],"end":[110,1]},"visibility":"public","docs":"Returns the number of physical cores of the current system.\n\nThis will always return at least `1`.\n\n# Note\n\nPhysical count is supported only on Linux, mac OS and Windows platforms.\nOn other platforms, or if the physical count fails on supported platforms,\nthis function returns the same as [`get()`], which is the number of logical\nCPUS.\n\n# Examples\n\n```\nlet logical_cpus = num_cpus::get();\nlet physical_cpus = num_cpus::get_physical();\nif logical_cpus > physical_cpus {\n    println!(\"We have simultaneous multithreading with about {:.2} \\\n              logical cores to 1 physical core.\", \n              (logical_cpus as f64) / (physical_cpus as f64));\n} else if logical_cpus == physical_cpus {\n    println!(\"Either we don't have simultaneous multithreading, or our \\\n              system doesn't support getting the number of physical CPUs.\");\n} else {\n    println!(\"We have less logical CPUs than physical CPUs, maybe we only have access to \\\n              some of the CPUs on our system.\");\n}\n```\n\n[`get()`]: fn.get.html","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13222:28131":{"id":"2:13222:28131","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:13224:28135","str::split_at_mut":"2:13223:28132"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13200:997":{"id":"2:13200:997","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12336:471"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13232:2321":{"id":"2:13232:2321","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44147:2646","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13297:33026":{"id":"2:13297:33026","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13233:33018":{"id":"2:13233:33018","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44157:9859","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13267:28142":{"id":"2:13267:28142","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12336:471","self::pattern":"2:12889:17505","str::rsplitn":"2:13270:28144"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43997:9668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:9652","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13325:27584":{"id":"2:13325:27584","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13214:28107":{"id":"2:13214:28107","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42003:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42001:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10979:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10979:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13258:28140":{"id":"2:13258:28140","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12889:17505","`DoubleEndedIterator`":"2:8269:129","prim@char":"1:12336:471","str::split":"2:13252:2324"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43911:9666","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:9652","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12895:9652","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12910:17503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13326:27585":{"id":"2:13326:27585","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13311:33030":{"id":"2:13311:33030","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12336:471","self::pattern":"2:12889:17505"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:9652","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12895:9652","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12910:17503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5617:33729":{"id":"5:5617:33729","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:304:2877","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:304:2877","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5621:33730":{"id":"5:5621:33730","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7645:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:9652","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13228:9870":{"id":"2:13228:9870","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12336:471"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43869:9851","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5624:33731":{"id":"5:5624:33731","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7645:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5632:33732":{"id":"5:5632:33732","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7645:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:72:2038":{"id":"0:72:2038","crate_id":0,"name":"get","span":{"filename":"src/lib.rs","begin":[73,0],"end":[75,1]},"visibility":"public","docs":"Returns the number of available CPUs of the current system.\n\nThis function will get the number of logical cores. Sometimes this is different from the number\nof physical cores (See [Simultaneous multithreading on Wikipedia][smt]).\n\nThis will always return at least `1`.\n\n# Examples\n\n```\nlet cpus = num_cpus::get();\nif cpus > 1 {\n    println!(\"We are on a multicore system with {} CPUs\", cpus);\n} else {\n    println!(\"We are on a single core system\");\n}\n```\n\n# Note\n\nThis will check [sched affinity] on Linux, showing a lower number of CPUs if the current\nthread does not have access to all the computer's CPUs.\n\nThis will also check [cgroups], frequently used in containers to constrain CPU usage.\n\n[smt]: https://en.wikipedia.org/wiki/Simultaneous_multithreading\n[sched affinity]: http://www.gnu.org/software/libc/manual/html_node/CPU-Affinity.html\n[cgroups]: https://www.kernel.org/doc/Documentation/cgroup-v1/cgroups.txt","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13328:28013":{"id":"2:13328:28013","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:991:37521"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13295:33025":{"id":"2:13295:33025","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13238:28149":{"id":"2:13238:28149","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12336:471","self::pattern":"2:12889:17505"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:9652","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13329:28014":{"id":"2:13329:28014","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:991:37521"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5618:6965":{"id":"5:5618:6965","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7645:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:9652","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5635:27581":{"id":"5:5635:27581","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13325:27584"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13205:33014":{"id":"2:13205:33014","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:13203:33013"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13216:28108":{"id":"2:13216:28108","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10979:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10979:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13225:28136":{"id":"2:13225:28136","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13224:28135"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42001:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13291:2328":{"id":"2:13291:2328","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13293:33024":{"id":"2:13293:33024","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13203:33013":{"id":"2:13203:33013","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13324:27583":{"id":"2:13324:27583","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13252:2324":{"id":"2:13252:2324","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12889:17505","`DoubleEndedIterator`":"2:8269:129","prim@char":"1:12336:471","str::split_whitespace":"2:13230:31458","str::rsplit":"2:13258:28140"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43893:2650","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:9652","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13202:33012":{"id":"2:13202:33012","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13220:33016":{"id":"2:13220:33016","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12342:1721","str::slice_mut_unchecked":"2:13221:33017","crate::ops::Index":"2:39547:12209"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13330:33033":{"id":"2:13330:33033","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4957:33033"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44192:9765","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13209:33015":{"id":"2:13209:33015","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13282:33021":{"id":"2:13282:33021","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12889:17505","`DoubleEndedIterator`":"2:8269:129","prim@char":"1:12336:471","str::matches":"2:13279:2552"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44115:9858","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:9652","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12895:9652","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12910:17503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13221:33017":{"id":"2:13221:33017","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12342:1721","crate::ops::IndexMut":"2:3423:12210","str::slice_unchecked":"2:13220:33016"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13244:2389":{"id":"2:13244:2389","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42003:191","prim@char":"1:12336:471","self::pattern":"2:12889:17505"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42001:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:9652","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13270:28144":{"id":"2:13270:28144","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12336:471","str::splitn":"2:13267:28142","self::pattern":"2:12889:17505"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44015:9669","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:9652","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12895:9652","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12910:17503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13211:2079":{"id":"2:13211:2079","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12355:1851"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13218:28109":{"id":"2:13218:28109","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10979:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10979:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13276:28147":{"id":"2:13276:28147","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42001:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:9652","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12895:9652","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12910:17503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13264:33020":{"id":"2:13264:33020","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12889:17505","str::split":"2:13252:2324","prim@char":"1:12336:471","str::split_terminator":"2:13261:33019"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43961:9854","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:9652","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12895:9652","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12910:17503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13241:28150":{"id":"2:13241:28150","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12336:471","self::pattern":"2:12889:17505"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:9652","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12895:9652","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12910:17503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13314:33031":{"id":"2:13314:33031","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12336:471","self::pattern":"2:12889:17505"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:9652","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5616":{"id":"5:5616","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5617:33729","5:5618:6965","5:5621:33730","5:5624:33731","5:5632:33732","5:5633:33733","5:5634:2676","5:5635:27581","5:5636:27582"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13230:31458":{"id":"2:13230:31458","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13231:31488"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44167:9860","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13305:2370":{"id":"2:13305:2370","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12336:471","self::pattern":"2:12889:17505"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42001:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:9652","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13224:28135":{"id":"2:13224:28135","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13225:28136"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42001:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13235:28148":{"id":"2:13235:28148","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12336:471","self::pattern":"2:12889:17505"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:9652","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13322:27579":{"id":"2:13322:27579","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5633:33733":{"id":"5:5633:33733","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:304:2877","`String`":"5:7645:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:304:2877","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2178":{"id":"0:0:2178","crate_id":0,"name":"num_cpus","span":{"filename":"src/lib.rs","begin":[1,0],"end":[485,1]},"visibility":"public","docs":"A crate with utilities to determine the number of CPUs available on the\ncurrent system.\n\nSometimes the CPU will exaggerate the number of CPUs it contains, because it can use\n[processor tricks] to deliver increased performance when there are more threads. This \ncrate provides methods to get both the logical and physical numbers of cores.\n\nThis information can be used as a guide to how many tasks can be run in parallel.\nThere are many properties of the system architecture that will affect parallelism,\nfor example memory access speeds (for all the caches and RAM) and the physical\narchitecture of the processor, so the number of CPUs should be used as a rough guide\nonly.\n\n\n## Examples\n\nFetch the number of logical CPUs.\n\n```\nlet cpus = num_cpus::get();\n```\n\nSee [`rayon::Threadpool`] for an example of where the number of CPUs could be\nused when setting up parallel jobs (Where the threadpool example uses a fixed\nnumber 8, it could use the number of CPUs).\n\n[processor tricks]: https://en.wikipedia.org/wiki/Simultaneous_multithreading\n[`rayon::ThreadPool`]: https://docs.rs/rayon/1.*/rayon/struct.ThreadPool.html","links":{},"attrs":["#![deny(missing_docs)]","#![allow(non_snake_case)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:72:2038","0:73:2056"],"is_stripped":false}}},"2:13231:31488":{"id":"2:13231:31488","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13230:31458"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44176:9861","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13285:33022":{"id":"2:13285:33022","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12889:17505","`DoubleEndedIterator`":"2:8269:129","prim@char":"1:12336:471","str::rmatch_indices":"2:13288:33023"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44043:9855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:9652","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5634:2676":{"id":"5:5634:2676","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7645:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13234:31523":{"id":"2:13234:31523","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44185:9683","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13317:33032":{"id":"2:13317:33032","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12336:471","self::pattern":"2:12889:17505"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:9652","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12895:9652","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12910:17503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13212:2038":{"id":"2:13212:2038","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42003:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42001:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10979:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10979:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13201:2405":{"id":"2:13201:2405","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13229:7008":{"id":"2:13229:7008","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43879:2649","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13273:28146":{"id":"2:13273:28146","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42001:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:9652","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13320:2171":{"id":"2:13320:2171","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12850:136","`FromStr`":"2:12849:2702"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42134:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12849:2702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12849:2702","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13248:7017":{"id":"2:13248:7017","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42003:191","prim@char":"1:12336:471","self::pattern":"2:12889:17505"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42001:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:9652","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12895:9652","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12910:17503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13333:33034":{"id":"2:13333:33034","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4955:33034"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44210:9764","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"5:7622:9456":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"16:7656:21109":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"6:5314:11070":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:11311:11445":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:47135:10018":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:13272:7937":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:5080:12300":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:14012:8083":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:23126:9736":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"5:5729:17534":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:3331:2671":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:12399:7834":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:40642:9780":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:10917:11442":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"17:15608:8523":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"20:4974:6606":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:15197:8399":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:46312:9941":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:43482:11425":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"0:73:2056":{"crate_id":0,"path":["num_cpus","get_physical"],"kind":"function"},"11:1051:9314":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"11:687:9319":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:14271:8138":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:12308:12189":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"6:7366:3160":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:40865:9794":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"20:3308:5561":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:3550:2631":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"1:10222:9808":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"17:9938:21168":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:11392:7704":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:12353:903":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"6:7516:6606":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:43227:9821":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"6:1621:4139":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"6:5352:11077":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"1:8863:2700":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"6:5344:11076":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"2:42117:7084":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"20:5467:5600":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:2735:195":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"17:11419:7656":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:11622:10258":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"20:3286:5559":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:8236:10136":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"2:2870:17582":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"6:6714:11264":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"20:1416:4135":{"crate_id":20,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"9:357:20100":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"16:6620:8950":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:22459:12419":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"2:42301:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:14311:8142":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"20:3065:5537":{"crate_id":20,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:6698:11258":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"6:7602:6612":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:43264:2695":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"16:7168:10227":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"18:531:7453":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"20:3276:5558":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:9137:10212":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:32322:2927":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:2529:672":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:4763:12299":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"16:5817:8814":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"16:5037:8796":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:5249:10092":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:8253:5599":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:11853:7761":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:43282:9831":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:12328:7822":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:15635:8532":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:9405:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"6:5266:11047":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"16:7085:9030":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"6:8029:6954":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"6:4891:5416":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"16:4976:8794":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:10612:7653":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"16:6066:8851":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:11354:7702":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"16:7823:21110":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:15383:8447":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:9388:187":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:11103:30205":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"6:6441:6108":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"20:3226:5555":{"crate_id":20,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"9:424:20087":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"6:5643:5577":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:13252:7927":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"18:613:34612":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:3056:226":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"16:6940:9010":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"17:12647:7856":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"2:2890:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:2543:17662":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"2:10320:119":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"16:3925:8774":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:6364:30170":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"17:256:7506":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:5260:2681":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"20:1444:4138":{"crate_id":20,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:15116:8376":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:40855:9628":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:12318:7529":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:22609:12413":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"1:3832:12251":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"5:6414:12425":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"11:837:9306":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"16:5006:8795":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:43739:9840":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:12358:1845":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"5:7107:34152":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:5698:10097":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"1:1631:9326":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"6:5014:5553":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:4552:10084":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"5:1540:9305":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:45907:9907":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:669:10061":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:14977:8351":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:15313:8425":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"5:3039:7070":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:43718:9838":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"20:3006:5533":{"crate_id":20,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:6821:6120":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"16:6231:8882":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"11:710:9302":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:45945:9913":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"20:1398:4133":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:9415:2732":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"6:545:3376":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:7920:30208":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"16:6665:21104":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"16:7321:7085":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:4586:7108":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:21726:2615":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:44937:9332":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"6:5483:11138":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"5:6934:17534":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:888:7021":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:5841:10099":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"16:7098:9034":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:3897:10079":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:46655:9970":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"17:10092:21171":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"6:5557:11145":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:1083:9313":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"15:0:2450":{"crate_id":15,"path":["addr2line"],"kind":"module"},"17:13485:7973":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:2463:2591":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:2037:7517":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"6:4885:2311":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:11051:7671":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"5:2539:11334":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:12949:7529":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"6:5489:11140":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"17:13855:8058":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:10952:139":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"20:1368:4130":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:8792:2696":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:11899:10259":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"16:7061:9029":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:43021:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:39729:9756":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"6:1565:4135":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"8:0:2444":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"20:549:3376":{"crate_id":20,"path":["libc","unix","winsize"],"kind":"struct"},"2:44889:32324":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"17:11115:7679":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:13959:8075":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:41795:12250":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:11341:7701":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"18:491:7448":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"16:6543:8939":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"20:1361:4129":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:15390:8448":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"6:5146:5562":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"6:538:3375":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"20:3414:5572":{"crate_id":20,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"11:430:34569":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"11:1160:9318":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"16:7686:9138":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"6:5415:11097":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"17:11102:7677":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"5:2210:12167":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:674:12184":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:44631:11432":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:11898:7765":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:4914:12278":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"6:5112:5559":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"16:7014:21106":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"11:1676:34563":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:3291:27503":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:22637:12414":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"2:2902:258":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:42096:12315":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:13753:8042":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"11:2562:11014":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:40793:9624":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"11:2352:9314":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"2:34219:17646":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:14855:8304":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:23170:9740":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"6:5630:11172":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"2:44061:9856":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:14723:8198":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"0:0:2178":{"crate_id":0,"path":["num_cpus"],"kind":"module"},"16:4502:8779":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"6:1585:4137":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"6:5361:6113":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:44868:9889":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:41779:9644":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:21609:32112":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"17:14449:8172":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"5:219:9402":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:5370:6114":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"11:1025:9313":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"16:3329:8767":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"2:40350:9758":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:46477:9964":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"5:2116:9418":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:8807:2697":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:7939:30195":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"16:7528:9128":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"20:3355:5565":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Chdr"],"kind":"struct"},"2:33594:17642":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"18:659:7473":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:22550:12423":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"11:123:11003":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"5:7465:9450":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"16:6991:34589":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"6:0:1002":{"crate_id":6,"path":["libc"],"kind":"module"},"2:46522:9965":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"5:6176:2631":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"16:6574:8762":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"7:79:20078":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:22285:12333":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:13922:8071":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:4808:10868":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"1:8769:2695":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:46181:9934":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:12659:7857":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"1:1069:9040":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:15092:8374":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"6:1663:4143":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:46070:9921":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"16:8301:9214":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:9107:10210":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:10155:7639":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"16:5769:8813":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:39709:9754":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:23137:9737":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"5:3050:32946":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:5506:128":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"20:4904:6601":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:46551:9966":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:23082:9732":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"6:4959:5546":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:4870:5537":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"16:5995:8838":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:13363:7950":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:909:9305":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:8244:10137":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"6:5400:11092":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:34046:17645":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:15473:8470":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:12336:471":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:32199:9745":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"1:11228:11435":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"2:23192:9742":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"6:1692:4147":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"6:5436:11112":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:10584:9658":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"6:473:3367":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:13375:7953":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:11865:7762":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"5:6072:17956":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:13606:8006":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"6:1510:4129":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"20:0:1002":{"crate_id":20,"path":["libc"],"kind":"module"},"16:8118:9196":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:43943:9853":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:13738:8037":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:15410:8454":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"11:2569:2583":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"11:1910:9325":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:9224:12321":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:10954:21181":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:22421:12418":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"20:3197:5552":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"11:742:9303":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:12464:21295":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:8733:32811":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:15266:8415":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"20:5485:5603":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"5:956:2699":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"11:1923:9327":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"6:5546:5578":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:2312:2587":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"17:10828:34606":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:8067:12188":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:42615:2721":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:8721:2694":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:40399:9763":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:40539:9771":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"6:6763:11277":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"2:7767:17626":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:45974:9915":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:45875:9905":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"5:3318:9327":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:9113:199":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"17:14575:7838":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:4810:10870":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"1:2477:2595":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"20:4180:6115":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"5:4282:2631":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:5629:10096":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:2893:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"17:12371:7876":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"5:1570:9303":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:32324:114":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"17:14463:8173":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:12666:9682":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:12289:7820":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:4660:9605":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"5:2127:9419":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"17:3597:7528":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:11764:7747":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"16:6466:8932":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:41941:10081":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"16:7539:8756":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:9166:10215":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"20:4095:6107":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:10350:10237":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"1:3429:2670":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"20:3166:5548":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:32235:244":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:41223:9635":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:15058:8363":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"5:3297:32901":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:9209:12322":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:42496:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:10251:7501":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:2276:9468":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"16:3014:20240":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"18:563:7458":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:8560:12249":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:46266:9939":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:11743:7743":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"2:43046:137":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"17:10710:7655":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:9150:10213":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:3388:140":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"16:5075:8797":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"6:5382:11081":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"16:6456:21103":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"16:5914:8827":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:40605:9773":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:11256:7690":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"1:8620:10185":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:12494:7845":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:3366:2652":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:4848:7111":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"16:2748:8735":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:5438:203":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"6:570:3380":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"14:7:9292":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:11510:7713":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:13064:7889":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:3668:2300":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:21734:12334":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:13146:7900":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:46350:9943":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:44468:17518":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:13766:8044":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:2461:2590":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"17:14560:8186":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:8606:12292":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"6:4787:5531":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:47095:10014":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"5:1324:9040":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:3386:2674":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"20:4817:6600":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:12361:1912":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:21641:32114":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"6:7429:4065":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:3427:2669":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:10933:10230":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"11:0:2447":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"6:4932:5543":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:11759:27076":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:11825:7758":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:12076:7802":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"16:4587:8782":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:3384:2673":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"18:113:25347":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:1761:7223":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"6:6417:6106":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"6:5336:11075":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"17:10439:7641":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:46904:10007":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:5376:6118":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:2203:7521":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:44910:180":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"11:2231:7722":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"6:6706:11261":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"2:21643:32108":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"16:7306:34596":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:42418:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:9410:235":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:13187:7909":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:14235:8133":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"20:5033:6610":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","termios2"],"kind":"struct"},"6:523:3373":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:14372:8152":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:10573:34609":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:21587:2938":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"5:4252:2631":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"20:3092:5539":{"crate_id":20,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"16:4468:8778":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:42134:226":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:4817:2759":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"16:6749:8976":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"20:527:3373":{"crate_id":20,"path":["libc","unix","hostent"],"kind":"struct"},"2:44623:11430":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:9332:10227":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:11148:9319":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"5:3820:9418":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:15769:8569":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:12287:10265":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"17:16269:7959":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"16:6782:21105":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:42182:9319":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"11:1142:9317":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:9180:10100":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:11421:9669":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:12863:7872":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:2699:201":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:974:9311":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:39503:17472":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"1:5769:12316":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"16:6353:8702":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:10887:34603":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:15176:8394":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:10276:2614":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:3382:2874":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"12:0:2448":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:947:9303":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:2896:163":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"1:4316:12288":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"16:5897:8823":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"6:6721:11265":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"2:46251:9938":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:41229:2679":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:4296:2631":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"16:4940:8793":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"16:5960:8835":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:11822:10079":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:23093:9733":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"16:5347:8800":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"16:5385:7639":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"20:1514:4143":{"crate_id":20,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:11000:10134":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"17:14284:8140":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:43791:9843":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:14414:8160":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:12597:7854":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"17:12043:7799":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:46365:9944":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:43800:9844":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"7:32:20071":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"18:670:7479":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:33527:12328":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:10922:2604":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"9:53:20103":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:16259:7954":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"2:41200:9633":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1:8260:2664":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:33188:17640":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:43810:9845":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:12362:1419":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:16176:8671":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"2:22931:31485":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"5:7727:9413":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"16:2936:20239":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:1607:7021":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"5:7485:7021":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:7984:10056":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:9793:91":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"6:497:3371":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"20:1377:4131":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:4332:12290":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:8344:2665":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:38309:17650":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"5:2220:9420":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"16:3196:8709":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"6:8317:11322":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"6:6478:6112":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:0:2452":{"crate_id":17,"path":["object"],"kind":"module"},"17:11189:7683":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:44275:17517":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:13674:8008":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:30622:6972":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:32217:7109":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"2:43778:9842":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"6:5588:5580":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:22722:9705":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:22595:2615":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"6:4965:5547":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"20:1386:4132":{"crate_id":20,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:9984:21169":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:11934:9672":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"2:42980:11424":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:3145:247":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:30637:7106":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:10329:10068":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"18:698:7483":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:373:10054":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:40506:9768":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"5:3263:32902":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:2665:112":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:21624:32121":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"6:7330:3251":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"5:1168:32943":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:4995:12277":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"16:8226:21112":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:15368:8443":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:46152:9933":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:13437:7961":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"11:328:11007":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:44115:9858":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"5:4087:9321":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"5:40:12211":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:44619:11429":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"16:6588:8940":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:2309:2586":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:40314:9600":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:42576:97":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"5:1493:9319":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:11075:7675":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:8536:2650":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:10959:10236":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"17:12584:7657":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"2:44311:9868":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:5028:17570":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"6:6788:11286":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:42963:7106":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"6:1680:4145":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:13774:8046":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:1964:671":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"18:765:25357":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"16:2528:8725":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:41929:9811":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"17:12478:7843":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:8073:12229":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"5:289:34136":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"14:220:9300":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:10325:128":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:47176:10021":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"20:3348:5564":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Chdr"],"kind":"struct"},"2:12650:9681":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:42727:7098":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:12351:891":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:10275:226":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"2:3226:17469":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"1:10713:2671":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"11:2140:9313":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:3477:2656":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"17:15463:8465":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:2974:123":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"20:5064:6612":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:11661:7736":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"16:872:7507":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"1:4397:10082":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:6272:30210":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:40376:9761":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:15206:8400":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:3394:142":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:16235:8682":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"17:12238:7816":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"6:5665:11185":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"3:0:505":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"1:12354:884":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:8269:129":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:1888:2631":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"1:9174:7021":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"16:5846:8819":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"20:4278:2098":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"20:4919:6603":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:4924:5542":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"11:1887:7021":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:9464:10229":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:1614:9413":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"17:13455:7969":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:9738:127":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"2:749:190":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"2:3206:9054":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:44520:9687":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"16:7570:8757":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:22483:2615":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"1:8601:11437":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:39902:17583":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"6:5565:11147":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"6:517:3372":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:12516:7850":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"16:7559:9132":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"6:8012:11304":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"20:3137:5544":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:14868:8311":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:38144:17647":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:10490:113":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"20:138:3056":{"crate_id":20,"path":["libc","unix","fpos_t"],"kind":"enum"},"6:7584:6611":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"16:2355:8712":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:7325:30203":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"2:32233:237":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"14:202:17519":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:11366:9667":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:14079:8092":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:13538:7986":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:12543:7853":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"2:46859:10006":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"6:1653:4142":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"20:3086:5416":{"crate_id":20,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:40410:9764":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:15010:8354":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:4100:12267":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"11:856:9309":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"20:1490:4141":{"crate_id":20,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:40740:9787":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:30584:6970":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:11293:21201":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"17:14986:8352":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:43820:9846":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:11605:25415":{"crate_id":1,"path":["std","sys","thread_local","fast_local","DtorState"],"kind":"enum"},"17:11621:7732":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:12225:7815":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"6:5200:5569":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"5:883:12194":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"17:14545:8182":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:13325:7944":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:40825:9626":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:21597:32112":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"2:30616:6971":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:9716:2607":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"16:6427:8927":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"6:4837:5535":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:10997:7666":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:9671:21149":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:7397:29739":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:30367:12252":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"6:5671:11187":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:7140:12329":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"16:5107:8798":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"11:787:9305":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:12150:7806":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:43765:9780":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"16:7509:9119":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:2004:785":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"2:38254:17649":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:21655:32116":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"11:351:34560":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"16:2478:8723":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:10622:34601":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:4739:7109":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"5:7376:9416":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"20:4165:6113":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlmsghdr"],"kind":"struct"},"16:2878:8741":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"6:5225:5572":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:46439:9962":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"5:1559:9302":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:11173:2650":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:44607:11426":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"17:11269:21200":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"11:2403:9319":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"17:14111:8096":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:5390:11086":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:13613:32651":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:14516:8179":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:46041:9919":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:9788:84":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"20:4203:6118":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlattr"],"kind":"struct"},"6:5134:5561":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:11063:7674":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:42379:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:12929:7876":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"6:7461:6603":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:8211:139":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"1:9324:10225":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"17:11715:7740":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"6:5445:11118":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"17:14402:8158":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:16223:8679":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"2:43997:9668":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"16:0:2451":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:13046:7886":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"20:5494:6955":{"crate_id":20,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:11026:21183":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:15624:8527":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:12683:7859":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"6:6746:11269":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"17:13526:7983":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:12300:21294":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"6:7446:6601":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"20:3160:5547":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:5326:204":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"1:11843:10080":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"6:7359:6600":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:12175:7808":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"16:6317:8910":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:9737:21148":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"17:15078:8371":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"6:4916:5541":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"6:6562:11199":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:6913:11343":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"17:10170:7640":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:12346:735":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"2:44342:9872":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:9420:2733":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"1:5644:113":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"5:839:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:46684:9971":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"6:4952:5545":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:2629:2301":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"5:3674:9319":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:3601:2611":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:11255:9664":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"5:4451:34143":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:11281:162":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"20:582:3381":{"crate_id":20,"path":["libc","unix","servent"],"kind":"struct"},"5:7645:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:22564:17662":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"1:11418:9386":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"2:21854:9704":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"6:6524:6116":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:10507:27762":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"2:47214:10029":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:43863:9676":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"16:6976:9012":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:40784:9623":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"20:1522:4144":{"crate_id":20,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:4420:17466":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"18:581:2938":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"16:3778:8770":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:3640:2614":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:4877:12293":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:13473:7970":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:5982:2724":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:15596:8520":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:2066:17672":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"6:7467:6604":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"16:7052:9026":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:3371:17461":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"20:4185:6116":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:3138:2921":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"6:6532:6117":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:11324:7698":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:12362:7832":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:8649:3160":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:43243:9824":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"9:482:20084":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"6:8259:5600":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:22915:9715":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:39547:12209":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"20:1410:4134":{"crate_id":20,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:15814:8575":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"20:521:3372":{"crate_id":20,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:9401:2631":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"5:7493:7021":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"16:6634:8750":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"5:6775:34136":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"6:8265:11312":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:4324:12289":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:12334:417":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"17:14847:8301":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"16:2458:8722":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"6:4811:5533":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:4916:12280":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:2704:134":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"1:9124:10211":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"16:6606:8948":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:3590:254":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:44827:227":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:15342:8433":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"5:5230:2720":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:43708:9837":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"16:6246:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"5:3251:2699":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"20:134:3055":{"crate_id":20,"path":["libc","unix","FILE"],"kind":"enum"},"2:6908:11344":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"2:46949:10008":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:6609:11224":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:22993:11348":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"16:6342:34599":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"6:1580:4136":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:10068:21153":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"16:2708:8733":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"16:8073:9192":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:2080:11340":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:33873:17644":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:15126:8377":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:1914:10069":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:4158:12272":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"14:165:20172":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"17:12251:7817":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"15:327:20196":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:513:7512":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:12557:7675":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"1:3649:27764":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:10544:157":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"1:8007:10127":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"16:6412:21102":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"17:12443:7840":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:8172:2606":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"20:5046:6611":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"6:5191:5568":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:23159:9739":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"2:13511:9691":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"6:5502:11143":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"17:15138:8380":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"6:485:3369":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:10759:7769":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"20:3127:5543":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:45828:9900":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"20:4995:6607":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"16:4830:8789":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:14752:8218":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:11773:7748":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:2535:2299":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:13795:115":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"20:3363:5566":{"crate_id":20,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:11799:7753":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"16:2684:8732":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:14177:8121":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:16187:8672":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"1:11220:2358":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:32203:9098":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:43029:7106":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:6713:9618":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:44696:17765":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:4385:9602":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:41823:11415":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"11:2469:9413":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"6:6519:6115":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:4094:12268":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:3026:9469":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"6:4971:5548":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"20:614:3400":{"crate_id":20,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"1:9260:2725":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:12030:7798":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:44479:9876":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:47057:10012":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:12915:17502":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:2489:2601":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"18:623:34614":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:15569:8508":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:22152:9703":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:39639:214":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"5:7449:7021":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"5:2249:11329":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:8247:5598":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:8857:2699":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"17:16032:7927":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"2:44810:150":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:11023:25394":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:4538:9604":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:12454:7841":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"16:7813:9143":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:22130:12337":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"1:10893:10247":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"17:12213:7814":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:2234:7524":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:1971:6967":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:16069:8643":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"11:2326:9313":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"16:2612:8729":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"11:875:9311":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:8053:12187":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"20:3080:2311":{"crate_id":20,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:7652:17580":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:46056:9920":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"5:5466:17489":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:5917:2631":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"11:2383:2699":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"1:980:9312":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:3187:2926":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"2:22775:9706":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"6:6505:11198":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"16:2998:8764":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:10720:34608":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:494:30201":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:1891:10068":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:5613:10095":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"6:5677:11190":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"20:4910:6602":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:7561:6609":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"18:680:7480":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:9755:21146":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:41256:9638":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"6:532:3374":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"6:491:3370":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:7718:30051":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"17:15301:8424":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"18:521:25358":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"20:5019:6609":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:12887:7873":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:41907:31515":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:4972:10088":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"16:2394:8719":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:32210:9746":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"2:2869:2615":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"6:6379:6083":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:11647:7735":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"20:5417:3326":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"6:7306:3293":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"6:1707:4149":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:44805:11436":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"17:13211:7923":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:15616:8526":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"18:598:34613":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:4918:12281":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:40615:9779":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"17:15289:8418":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:650:10058":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:3620:32716":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:13875:152":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"18:735:25356":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:3058:137":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:15039:8362":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:11166:7682":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:2735:2653":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:3894:10078":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:42992:9170":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:2068:17673":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"2:44627:11431":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:8549:10185":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"6:5536:5576":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:22509:32620":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"2:44097:9857":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"20:4925:6604":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:14436:8171":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:3658:2612":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"17:12485:21296":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:7999:2715":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:13528:9694":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"20:3433:5574":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:43690:9834":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"20:1436:4137":{"crate_id":20,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:15720:8554":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"6:5466:11133":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:3635:17470":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:46410:9961":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"6:5174:5566":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"5:7415:9448":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"20:501:3371":{"crate_id":20,"path":["libc","unix","rusage"],"kind":"struct"},"2:44835:207":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"1:12356:1833":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"20:4824:3160":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:44685:9886":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:11214:7685":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:12530:7852":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"16:6442:8929":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:11085:30165":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:11574:7722":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"20:1537:4146":{"crate_id":20,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"5:4322:2699":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:9975:32812":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"6:6811:11292":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"18:651:7449":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"16:7888:9155":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:44015:9669":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:15249:8408":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:40635:2609":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"2:41741:170":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"2:4002:7021":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:13899:8066":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"18:96:25346":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"16:2808:8738":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"20:3119:5542":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"20:4298:6142":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"16:7428:21108":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:14260:8137":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"6:1593:4138":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"16:7799:8749":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"20:55:2979":{"crate_id":20,"path":["libc","unix","DIR"],"kind":"enum"},"2:44611:11427":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:22642:12412":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"17:13785:8049":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:8182:2604":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:9980:32797":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:9319:10224":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:11595:7729":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"16:7132:9039":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:5955:2723":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"18:0:2453":{"crate_id":18,"path":["memchr"],"kind":"module"},"5:1581:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:943:9302":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:3264:7525":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"16:6927:9008":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"20:4101:6108":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:44147:2646":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"20:4773:3293":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:45843:9901":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:46283:9940":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"6:5290:11060":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"20:5479:5602":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:45960:9914":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:22511:17662":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"20:489:3369":{"crate_id":20,"path":["libc","unix","timespec"],"kind":"struct"},"9:238:2695":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:40693:9784":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:3762:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"16:5367:21097":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"6:479:3368":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"16:7473:8855":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:6027:2734":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:30648:31509":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"6:4979:5549":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:32224:9747":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"1:752:154":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"9:447:20085":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:15992:8629":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"2:42713:7097":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:43486:9660":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:11293:9665":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:4729:11342":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"11:1603:9323":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:8543:2646":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"20:3443:5575":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:12695:7860":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"2:47007:10010":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:11688:11452":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:42190:7021":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:45892:9906":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:22859:9708":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"5:3258:9325":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:9393:2726":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"16:3842:8772":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:8183:17632":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"6:1526:4131":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"6:1496:11028":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"6:6915:11294":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:33460:12326":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:1619:9324":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:8671:10085":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:9858:21165":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:8025:7769":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"17:15356:8440":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"16:3669:7544":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:40433:17576":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"11:811:9413":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"6:5528:5575":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:2899:144":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"16:6263:8887":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"6:5160:5563":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:9428:162":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:12420:9674":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"5:1843:9413":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"17:14038:8086":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:4345:12291":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"6:5283:11058":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"5:7610:9454":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:6348:9701":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:586:10057":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"16:4913:8792":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:12408:7835":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"16:5927:8828":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"6:5083:5557":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:10524:7652":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"20:1574:4150":{"crate_id":20,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:15748:8563":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:41000:9630":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:10218:7500":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"6:1547:4133":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:6451:10098":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"11:2369:9330":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"2:44167:9860":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:10759:32150":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:1855:10067":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"16:7355:9077":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"20:1531:4145":{"crate_id":20,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:10331:7098":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:1997:12239":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"20:3482:5579":{"crate_id":20,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:40712:133":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:8626:10193":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"16:6494:8935":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"4:0:2443":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"16:2838:8739":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:15944:7923":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"2:2545:17663":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"17:16093:8648":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"20:3380:5568":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"16:3614:8769":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:4821:7534":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"2:33728:17643":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:5593:10094":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:44926:9895":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:4130:12269":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"16:8093:9193":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:14189:8123":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"16:4531:8780":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:15168:8391":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"6:8328:11323":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"17:9781:21164":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"6:6900:6142":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:40389:9762":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"5:6958:17535":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"5:1531:9304":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:11915:21270":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:47115:10016":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:6173:10098":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:11663:10121":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"6:6435:6107":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"16:2338:8710":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"5:1077:34136":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:11328:9666":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:23203:9743":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"1:4152:12271":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:31022:2938":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:3196:12327":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"6:6409:6105":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"16:4062:8775":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:2001:1358":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:5280:10092":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:14212:8132":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"18:507:7449":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:9345:25421":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"6:7537:6607":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:40806:9792":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:7870:7513":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:21852:12332":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:3672:17473":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:43961:9854":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:41238:9798":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:21626:32118":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:40513:9769":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"20:5473:5601":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:5250:5574":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:40731:9613":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:43235:9823":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:40671:2647":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"9:0:2445":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"18:515:7446":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:1636:9327":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"6:4942:5544":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"16:7111:9037":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:16138:8657":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"20:3059:5536":{"crate_id":20,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"6:7984:3326":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"6:5515:11144":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"17:10982:21182":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"16:860:8704":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"16:2548:8726":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:12433:7838":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:865:2699":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:12107:7656":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"6:7412:4062":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:41014:9631":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:10137:21147":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"6:6542:6119":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"6:8341:11327":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:8252:2662":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:22377:12417":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"1:2774:2663":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:21746:9704":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"6:5031:11033":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:2699:2661":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"11:832:9320":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"11:102:11002":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:8334:10139":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:6843:2736":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"16:7695:9139":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"6:7485:6605":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:7716:31053":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:44210:9764":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"16:6300:8904":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"5:1369:9318":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:6090:9614":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:6562:186":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:12008:17498":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"17:16079:8644":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"5:7743:9461":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:42734:7099":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:5089:12301":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"1:12340:335":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"17:11128:7630":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:2906:257":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"6:4876:5538":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:521:12167":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"16:6962:8753":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:44489:9880":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:746:12253":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"6:5457:11127":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"16:7741:8761":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:39659:216":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:23000:9727":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"16:2768:8736":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"16:7711:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:46572:9967":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:46782:10005":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"6:1699:4148":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:40577:2649":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"20:574:3380":{"crate_id":20,"path":["libc","unix","tms"],"kind":"struct"},"5:1355:9313":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"11:2548:11011":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"5:5470:17490":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:14051:8088":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"20:1543:4147":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"6:6629:5564":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"16:7590:8758":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"20:3032:5535":{"crate_id":20,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"20:1558:4149":{"crate_id":20,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"16:6648:8952":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"20:3209:5553":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:11443:7709":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:44643:11435":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:23045:2615":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"16:5415:8801":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"16:7549:9131":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:42457:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"5:7540:2583":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:44639:11434":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:13844:8057":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:14325:8145":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:42095:12190":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"20:4069:6105":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:11755:7746":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"1:8474:2680":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:41763:9642":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"5:3661:2699":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:32764:9053":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:44502:9884":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"17:15931:7909":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"2:1787:2062":{"crate_id":2,"path":["core","mem"],"kind":"module"},"11:1728:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"11:490:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:9467:9652":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"6:7389:4090":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:11196:10211":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"19:0:1291":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:11467:7710":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"6:5102:5558":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:11926:10124":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:13173:7908":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"20:4107:6109":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:41248:9636":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:9356:9651":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:10599:10210":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"16:2572:8727":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:7473:27078":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:44417:9686":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:11242:7688":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:3276:9055":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"17:12508:7848":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:14298:8141":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:1475:156":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"20:1355:4128":{"crate_id":20,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:666:10059":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:12904:7485":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"6:5296:11063":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"6:7339:11300":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:22893:31532":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:12808:7869":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:957:12193":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"6:5472:11136":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:46120:9931":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:11435:9670":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"6:5064:5556":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"5:1340:9314":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"5:4162:9319":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:10044:21170":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:44176:9861":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:11567:7719":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"17:12768:21151":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:11407:9668":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"20:3215:5554":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:46610:9969":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"2:6204:9616":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:10979:239":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"20:4229:6120":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:15418:8455":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:44813:164":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"5:7435:32855":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:11702:7739":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"5:2302:32888":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"20:3370:5567":{"crate_id":20,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:47124:10017":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:13024:21175":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"20:4797:3251":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:40754:9790":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:47150:10019":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"5:4938:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:5834:10098":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"6:578:3381":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"16:7727:8760":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"6:1671:4144":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"5:1549:9320":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"6:4824:5534":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:46234:9937":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"5:0:309":{"crate_id":5,"path":["alloc"],"kind":"module"},"20:4943:6605":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:42223:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:12969:7878":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"5:6433:12426":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"5:2322:11333":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:9721:27763":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"2:2985:137":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"17:13972:7771":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:8231:10074":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"2:43252:157":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:47291:10047":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:13838:9702":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"6:6664:11244":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:14356:8151":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:14968:8347":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:47104:10015":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:10969:2615":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:42340:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"16:5400:7640":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:8465:2678":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:22907:9714":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:13568:7998":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:10818:7657":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"6:8197:6610":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"6:5306:11066":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:15701:8549":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"16:7910:21111":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:44296:9863":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:42199:196":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:16050:7937":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"2:22:817":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"20:5447:6954":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"9:392:20086":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"20:4887:4065":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:3520:2679":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"11:1107:9316":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"16:5781:8747":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"5:4436:265":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:2316:2385":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"18:643:7449":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:46027:9918":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"11:299:11004":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"9:178:20152":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"11:774:9304":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:11730:7742":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"17:11142:7656":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:12347:738":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:46978:10009":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:15214:8402":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:1098:7514":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:11911:25585":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"17:11089:7676":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"16:6433:8928":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"5:6019:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"5:4117:34136":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:12303:30037":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:15376:8446":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"5:939:12195":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"6:5636:11175":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"2:12627:9680":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:30995:196":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"11:434:34565":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:10348:10238":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"17:13344:7949":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"5:1739:34136":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"6:6471:6111":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:5002:5552":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:44615:11428":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"5:3805:2664":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:11227:7686":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:14876:8312":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"11:883:9312":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:922:9321":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"20:4042:6083":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:43911:9666":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:41207:9634":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:13594:8003":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:15655:8535":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"18:718:7489":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:8377:178":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:11449:9671":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"20:1550:4148":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"20:3238:5556":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:2479:2596":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"16:5863:21099":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"6:7348:6599":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:14475:8174":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:3869:9321":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"18:481:7447":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"20:4151:6098":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"20:4138:6112":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:14131:8097":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:1916:10070":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"20:5439:6953":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:5122:5560":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"11:2443:9321":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"17:15102:8375":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"20:563:3378":{"crate_id":20,"path":["libc","unix","sigval"],"kind":"struct"},"17:11788:7752":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"6:6880:2098":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:3583:2302":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:42262:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:5766:3104":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:43699:9835":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"20:4209:6119":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:12352:897":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"17:11841:7760":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"11:844:12193":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:39551:9750":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"16:3475:8768":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"20:3147:5545":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:40702:9785":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:11497:7712":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:44876:9891":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:951:9306":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"5:1441:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:12404:17722":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:12122:28008":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:15190:8397":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:8088:10134":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:15:2555":{"crate_id":2,"path":["core","write"],"kind":"macro"},"6:5212:5570":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:47229:10030":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:43067:7107":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:13818:9701":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"16:4856:8790":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:33661:17641":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:4665:9606":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"15:288:20191":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:0:563":{"crate_id":2,"path":["core"],"kind":"module"},"17:13832:8055":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:40816:9793":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:10905:7659":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:3180:2924":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:6013:2631":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"6:6491:6098":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"18:538:7456":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"20:1350:4127":{"crate_id":20,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"5:1478:2699":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:34392:9059":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:2155:189":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"5:7582:9451":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:12572:7656":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"2:10337:7100":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:46099:9930":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:13424:7960":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:14788:8249":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:13308:7942":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"20:3019:5534":{"crate_id":20,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:1686:4146":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"20:483:3368":{"crate_id":20,"path":["libc","unix","timeval"],"kind":"struct"},"14:40:7924":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:10989:29796":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"16:7648:9137":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:9284:10220":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:3333:2672":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"16:150:8688":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"6:465:3366":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:4439:17552":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"20:3489:5580":{"crate_id":20,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:12707:7861":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"5:1204:32944":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"16:2902:20238":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"16:542:8695":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"20:3111:5541":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:10716:2673":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"17:12264:7818":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"16:4424:8777":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:11537:7715":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:22882:9713":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:22951:31508":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:11124:2699":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"14:160:9292":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:22125:2615":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"16:7857:9151":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:21673:2615":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"17:13509:7975":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:14025:8084":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:14933:8346":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:36268:9060":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"20:3154:5546":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:22283:2615":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:46705:9972":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:15521:8507":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"5:843:9407":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"6:1485:4127":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:6672:2727":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:45928:9912":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:42537:90":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:42720:7096":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:6597:11220":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:42126:9653":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"20:590:3382":{"crate_id":20,"path":["libc","unix","protoent"],"kind":"struct"},"20:4847:4090":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"16:2728:8734":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:7546:7027":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:40550:17709":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"11:2536:11009":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:4478:10083":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:3353:124":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:40472:9767":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"16:6335:8920":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:22497:12422":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"5:4515:34143":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:44949:9896":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"16:2788:8737":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:12792:7604":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:40662:9782":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"20:495:3370":{"crate_id":20,"path":["libc","unix","rlimit"],"kind":"struct"},"1:6912:233":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"11:2542:11010":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:47078:10013":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:14529:8180":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:12900:7875":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"6:5277:11055":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"20:3320:5562":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:42953:11416":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:47199:10028":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:8220:145":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:4812:10872":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"20:4806:6599":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"16:6098:21100":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:11677:10123":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:11674:7737":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:11524:7714":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:5827:220":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"16:8136:9198":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:12849:2702":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:12056:7801":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"6:586:3382":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:40772:9791":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"5:3292:9324":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"11:1066:20165":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:44201:9600":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"5:5422:34136":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:4986:7536":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"2:43852:9850":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:10416:12318":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"5:2770:11337":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:261:7507":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"16:8188:9205":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:12895:9652":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:13999:8081":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:8322:2875":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:22164:32106":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"16:6813:8990":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:10333:7099":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"20:3071:5538":{"crate_id":20,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:8645:10195":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"20:542:3375":{"crate_id":20,"path":["libc","unix","pollfd"],"kind":"struct"},"17:12824:21173":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:12342:7827":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"6:6636:11231":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"20:3257:5557":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:6708:2735":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:1092:9314":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:14912:8341":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"6:5320:11071":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:44390:9874":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:403:7509":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:43467:9832":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"16:3029:7539":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"11:1883:2699":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"11:2498:20161":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"5:3046:32947":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:43639:9833":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"20:477:3367":{"crate_id":20,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:10776:30198":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"17:14599:8196":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"6:5219:5571":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"10:0:2446":{"crate_id":10,"path":["adler"],"kind":"module"},"17:10661:7654":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:10912:11440":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"1:2070:197":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:11097:30197":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:12127:7805":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"16:6160:20210":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:11246:2621":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"5:3042:11330":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"5:7634:9457":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"6:7546:6608":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"18:635:7472":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"11:2554:34558":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"5:3754:34136":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"16:4641:8784":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"16:4718:8785":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:15151:8386":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:44661:130":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:4:1256":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:3023:10076":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"16:2438:8721":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:40684:9783":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:10915:34605":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"18:726:7492":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:3517:211":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:12704:9663":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:44043:9855":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"11:1582:9322":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"5:3885:9413":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"20:3471:5578":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:40361:31498":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:13986:8080":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:39579:210":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"16:2636:8730":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:10759:7656":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:2307:138":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"17:11877:7763":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"6:4897:5539":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"20:4870:4062":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:32976:9050":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"11:396:34556":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"16:5831:8817":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:39716:9755":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:23115:9735":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"2:12590:9677":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:40426:9765":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:8594:10081":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:11616:10116":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"6:6650:11242":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"18:706:7485":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:13723:8033":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:2226:128":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"6:5052:5555":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"20:2982:5531":{"crate_id":20,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"20:536:3374":{"crate_id":20,"path":["libc","unix","iovec"],"kind":"struct"},"16:7144:21107":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"11:1087:34570":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"11:1917:9326":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:4397:109":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"16:2660:8731":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:14147:8102":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"5:304:2877":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"5:1509:7021":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"5:3284:9326":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:47252:10031":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:39601:212":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"5:7059:264":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"11:1891:9321":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:5329:11074":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"2:40418:9600":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:22843:11345":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"18:573:7449":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:16121:8655":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"16:6120:21101":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:42020:173":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:42037:9319":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:47161:10020":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"20:3408:5571":{"crate_id":20,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:8189:2608":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"5:5077:2631":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:562:12172":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:13930:12196":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:10719:2669":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"5:743:118":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:11405:7705":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:12350:909":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"6:5407:1243":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:2067:198":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:10693:17732":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"6:6738:11268":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"6:6460:6110":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:16105:8650":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"16:3899:8773":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:13665:9696":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:3150:2922":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:32234:2872":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:43869:9851":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"6:4985:5550":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"16:2323:20237":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"2:45813:9897":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"5:6612:34136":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:9197:10216":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"6:6689:11252":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"6:6657:11243":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:13015:7838":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"6:6621:5565":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:12353:7831":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"5:6693:7021":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"16:5686:8743":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:11216:9663":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:11042:7669":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"6:1559:4134":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"6:1628:4140":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:46137:9932":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"6:5617:11166":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:10018:21150":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"6:8294:5603":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"14:187:20179":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:15222:8404":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:2741:202":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"6:7575:11301":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:42001:194":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"16:7755:8751":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:44325:9871":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"6:8288:5602":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:43893:2650":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:42174:2699":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"16:6385:8923":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"6:5653:11178":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"20:4781:4061":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:39679:2577":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"1:11782:10078":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"16:2418:8720":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:11008:10097":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"17:11153:7657":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:1838:696":{"crate_id":1,"path":["std","env"],"kind":"module"},"18:608:7465":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:3580:17652":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"6:6768:11278":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"2:41214:2303":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"16:2303:20211":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"20:3389:5569":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:11040:10213":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"6:6729:11266":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"2:3607:17549":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"20:5455:5598":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:8483:2610":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"6:4800:5532":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"6:5181:5567":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:10457:138":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:4192:12273":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"6:8282:5601":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:16165:8666":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"20:568:3379":{"crate_id":20,"path":["libc","unix","itimerval"],"kind":"struct"},"1:1610:9321":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"5:7457:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:11605:7730":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"16:7618:9134":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"16:4560:8781":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"18:589:7459":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:10294:143":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"20:1472:4139":{"crate_id":20,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:41963:9645":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:10671:34604":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:11557:7717":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"17:15582:8514":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"16:8259:9098":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:13089:7890":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:9278:115":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:12363:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"13:0:2442":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:4373:9601":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:6902:9625":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1:8225:127":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"16:6047:8844":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:12851:7871":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:3423:12210":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"16:6079:8697":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:13292:7938":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"16:8155:9201":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"5:7425:9449":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"1:7354:30987":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"6:7452:6602":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:5039:11038":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:13125:119":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:3335:17471":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"1:8704:12311":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:15434:8458":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:40565:9772":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:3218:17467":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"16:5802:21098":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:8686:149":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:21675:12335":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:14091:8093":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:12671:7858":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"16:6895:9004":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:1853:10066":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:5302:977":{"crate_id":2,"path":["core","iter"],"kind":"module"},"16:6532:8938":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:44900:9894":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"1:6396:10106":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:896:9304":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:14246:8135":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:21728:12331":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"6:5581:5579":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:11694:11453":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"20:4174:6114":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlmsgerr"],"kind":"struct"},"1:4214:12276":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:14066:8091":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:16212:8677":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"17:15281:8417":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:10120:7118":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"6:4992:5551":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:8199:2605":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:5948:2722":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"5:7393:9447":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"20:4077:6106":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:9158:2699":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"5:7566:9443":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:14994:8353":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:12388:7833":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:13640:205":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"17:13399:7957":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"16:5742:8803":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"16:6026:8691":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"6:1517:4130":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"5:5864:251":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"16:6480:8744":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:15678:8548":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:12343:1811":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"14:31:9292":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"16:6758:8977":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"16:4614:8783":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:8847:2698":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"10:36:11016":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:5579:10093":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"17:13553:7992":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"20:4120:6110":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"20:3425:5573":{"crate_id":20,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:9807:21154":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:1603:2699":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:13497:7974":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:8240:2876":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:40990:2648":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:23024:12266":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:9312:10223":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:10327:7096":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:15760:8565":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:12337:1873":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"5:3040:34529":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"16:3810:8771":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:10642:30163":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"6:6874:6141":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"20:3461:5577":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:4786:17560":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"16:4743:8786":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:2175:21228":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:11583:10256":{"crate_id":1,"path":["std","sys","thread_local","fast_local","Key"],"kind":"struct"},"1:12357:1839":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"11:1903:9324":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"6:5020:5554":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:7314:4061":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:15778:8571":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:15400:8451":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"20:1479:4140":{"crate_id":20,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"20:1504:4142":{"crate_id":20,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:10980:29798":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"1:4798:12272":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"20:3104:5540":{"crate_id":20,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"6:5244:11042":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"13:110:34572":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"6:564:3379":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:10335:206":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:40521:9770":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:1207:7516":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"16:7497:9118":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:12360:966":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"16:6398:8742":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:2646:103":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:10317:7503":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:23148:9738":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"16:6802:8989":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"11:2304:9040":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"1:3999:10080":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"5:7132:34156":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:5103:12302":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:9446:2621":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:4144:12270":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:13581:8002":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"20:1431:4136":{"crate_id":20,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:32292:2873":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"17:10350:7504":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"5:3222:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"16:6849:9002":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:8187:17631":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:5046:11040":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:1490:4128":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"16:8313:137":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"5:3410:9413":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"2:42029:2699":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"9:502:9389":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:23013:9728":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:11812:7756":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"6:5423:11102":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:16249:8683":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"1:6189:220":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:8002:10125":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:46012:9917":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:10399:2649":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:8689:12200":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"20:469:3366":{"crate_id":20,"path":["libc","unix","group"],"kind":"struct"},"5:6968:17536":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"2:32293:2928":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:0:1713":{"crate_id":1,"path":["std"],"kind":"module"},"5:7668:9459":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:38888:17651":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"11:1566:20166":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:15836:8581":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:14386:8154":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:44157:9859":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:13877:8065":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"20:557:3377":{"crate_id":20,"path":["libc","unix","linger"],"kind":"struct"},"6:8351:6955":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:5598:11152":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:6857:2737":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"16:8216:9207":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"5:6051:2720":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"6:553:3377":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:11547:7584":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:15445:8462":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:23181:9741":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"1:11918:10124":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"6:5236:5573":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:10185:7498":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:46589:9968":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:43008:31496":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"6:4909:5540":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:12189:7812":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:12889:17505":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"6:6678:11249":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:40320:9757":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:14503:8178":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"6:5260:11044":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:11209:10212":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"6:1723:4150":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:12335:1174":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:9709:138":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"10:44:9334":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:13551:9790":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"15:306:20192":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:2089:9465":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:8695:17630":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"3:234:226":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:5201:435":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"9:330:11017":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:6789:2730":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"15:394:20202":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"1:878:9319":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:23655:236":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"6:1503:11031":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"20:3180:5550":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:10339:7101":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:13387:7954":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"5:1590:9412":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:10536:153":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:40534:106":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"20:4131:6111":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:44635:11433":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"16:7379:34598":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:426:185":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:7651:17579":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"2:41981:9648":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"6:8306:11318":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:40587:2160":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"2:39619:215":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:13946:8072":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"16:6560:8745":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:367:10052":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"16:4352:8776":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:45995:9916":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"6:8300:11317":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:45860:9904":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:8513:2647":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"1:11263:11444":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"5:7595:17709":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:13235:7924":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:8339:10140":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:10329:7097":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"5:7405:9321":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:3601:17550":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:6499:220":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:42045:7021":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"17:15646:8533":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:12711:137":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"20:5461:5599":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"5:5934:9321":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"5:2102:2664":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"20:2976:5530":{"crate_id":20,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"6:5477:5530":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"11:2423:7021":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"18:689:7482":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:46460:9963":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:8555:10187":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"20:3174:5549":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:15273:8416":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:15822:8578":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:44192:9765":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:12348:754":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:3391:141":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"6:6447:6109":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:9365:11439":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"18:80:25345":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"11:673:2699":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:13116:7896":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"17:10419:7508":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:12724:21172":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:437:7511":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:4656:221":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:11688:7738":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"2:3595:146":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:40722:9611":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"6:559:3378":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:22828:9707":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"5:3648:182":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:8612:10191":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:968:9309":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"14:214:9298":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:6786:2729":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:12278:7819":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"16:8202:8763":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"11:2124:9040":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:11967:9673":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"17:15456:8463":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:43879:2649":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"16:5700:8746":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:12436:17506":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"18:754:7497":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:10942:2608":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"1:10971:2610":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"1:5159:12307":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"1:12355:1851":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:43839:9847":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"16:4771:8787":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:11583:7725":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:32157:11013":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:44185:9683":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:10877:7658":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:26055:267":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"11:2151:9314":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"11:364:34554":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:44454:9875":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:15957:8599":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"20:3296:5560":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:3288:30652":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"20:3334:5563":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:1639:4141":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:12342:1721":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"16:2374:8718":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:6668:2303":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:12993:21174":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"20:3401:5570":{"crate_id":20,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"5:734:250":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"16:8175:9202":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:10534:34607":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:10284:7502":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"20:3451:5576":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:11016:7668":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:8493:2613":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"16:6948:8752":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:12910:17503":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:7880:10262":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:39564:213":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:14341:8147":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"20:2995:5532":{"crate_id":20,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:8231:165":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:12422:7836":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:932:9413":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"16:7633:34591":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"5:1184:32984":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:46333:9942":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:38199:17648":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:12359:1827":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"17:11313:7696":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"1:12341:1687":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:21842:2615":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:15023:8359":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"5:7385:7021":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"5:680:9404":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"16:2854:8740":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"20:4193:6117":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:11634:7734":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:9291:25423":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"16:6278:8889":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:11355:10255":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"17:16198:8673":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"17:15734:8556":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:12621:7855":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"20:3187:5551":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"7:0:1902":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:4685:12294":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:10579:12243":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"16:7006:9015":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:7983:2615":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"16:4882:8791":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:9916:21167":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"16:2508:8724":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:47036:10011":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:1625:9325":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:4795:7110":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"1:11508:30167":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"6:6756:11276":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"1:12349:733":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"6:4864:5536":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"16:7580:9133":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:3191:12325":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"1:9239:12323":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:8874:2701":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:1968:10071":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"17:15799:8574":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:13814:8054":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"6:6775:11279":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"11:700:7021":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:7939:2678":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"16:6872:9003":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"16:867:7506":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"17:10769:34602":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"20:5004:6608":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:1535:4132":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"13:229:11001":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:4202:12274":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"16:7604:8759":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"16:7769:9141":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"6:6670:11247":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:15426:8457":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"16:6504:8936":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:14489:8175":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"11:1007:9040":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:2713:30198":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:3294:27504":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"6:8006:6953":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"20:1635:4203":{"crate_id":20,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:13797:8051":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:617:12181":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:4206:12275":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:42085:7086":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:13412:7959":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:44817:219":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:2643:102":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:16151:8663":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"2:10791:31581":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"14:0:2449":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"5:6566:9321":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:23104:9734":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"1:12319:25414":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:11649:10120":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:42054:7085":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"17:11493:7711":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:11367:7675":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:938:9320":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"16:5722:8748":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"6:8271:11313":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:22966:31505":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:14587:8189":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:12339:1314":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"17:597:7513":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"16:5756:8808":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"17:15324:8429":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:9546:10069":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"17:9886:21166":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:8523:2648":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"0:72:2038":{"crate_id":0,"path":["num_cpus","get"],"kind":"function"},"17:12201:7813":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:3140:117":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:15333:8432":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"16:5307:8799":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:12963:17511":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:12089:7803":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:4294:27081":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"11:1896:9413":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"1:8177:2607":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:1101:9318":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:43728:9839":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:46202:9935":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"16:4802:8788":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"5:7551:2584":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"16:2592:8728":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"16:7397:34597":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"11:800:9321":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:43274:9830":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"5:7658:9458":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:4663:12293":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:9273:10217":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:5222:32308":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:3473:7527":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:46219:9936":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:8530:2649":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"1:4874:12303":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:3221:17468":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"6:5624:11169":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"2:4507:9603":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:39467:17548":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:40841:7470":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"20:4272:6141":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"5:4481:2631":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:40763:9617":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"}},"external_crates":{"20":{"name":"libc","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":29}