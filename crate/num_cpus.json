{"root":"0:0:1915","crate_version":"1.16.0","includes_private":false,"index":{"2:12386:30461":{"id":"2:12386:30461","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43717:9492","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12482:31687":{"id":"2:12482:31687","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4557:31687"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43742:9554","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12443:2062":{"id":"2:12443:2062","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12365:338":{"id":"2:12365:338","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12366:337","`u8`":"1:12068:1601"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12375:31667":{"id":"2:12375:31667","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12057:1495","str::slice_mut_unchecked":"2:12376:31668","crate::ops::Index":"2:3072:11450"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12454:31682":{"id":"2:12454:31682","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12051:446","self::pattern":"2:12056:16724"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12061:9465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12460:24587":{"id":"2:12460:24587","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12051:446","self::pattern":"2:12056:16724"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41463:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12061:9465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12061:9465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12076:16722","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12379:9493":{"id":"2:12379:9493","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12051:446"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43395:9485","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12400:6738":{"id":"2:12400:6738","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41465:194","prim@char":"1:12051:446","self::pattern":"2:12056:16724"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41463:196","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12061:9465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12061:9465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12076:16722","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12475:25705":{"id":"2:12475:25705","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39497:24523","Self::is_ascii":"2:12474:25704"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41463:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39497:24523","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12476:25707":{"id":"2:12476:25707","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12366:337":{"id":"2:12366:337","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12068:1601"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12378:24568":{"id":"2:12378:24568","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12377:24567"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12390:24585":{"id":"2:12390:24585","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12051:446","self::pattern":"2:12056:16724"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12061:9465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12371:24543":{"id":"2:12371:24543","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10150:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10150:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12354":{"id":"2:12354","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12355:864","2:12356:2139","2:12357:31663","2:12358:31664","2:12360:31665","2:12363:24524","2:12364:31666","2:12365:338","2:12366:337","2:12367:1776","2:12369:24542","2:12371:24543","2:12373:24544","2:12375:31667","2:12376:31668","2:12377:24567","2:12378:24568","2:12379:9493","2:12380:9654","2:12381:6729","2:12382:30462","2:12383:30463","2:12384:2055","2:12385:31669","2:12386:30461","2:12387:24584","2:12390:24585","2:12393:24586","2:12396:2123","2:12400:6738","2:12404:2058","2:12407:24576","2:12410:24578","2:12413:31670","2:12416:31671","2:12419:24580","2:12422:24582","2:12425:31672","2:12428:31673","2:12431:2282","2:12434:31674","2:12437:31675","2:12440:31676","2:12443:2062","2:12445:31677","2:12447:31678","2:12449:31679","2:12450:31680","2:12451:31681","2:12454:31682","2:12457:2104","2:12460:24587","2:12463:31683","2:12466:31684","2:12469:31685","2:12472:1908","2:12474:25704","2:12475:25705","2:12476:25707","2:12477:25708","2:12478:25709","2:12479:31686","2:12481:11427","2:12482:31687"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5524:32345":{"id":"5:5524:32345","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7475:245"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7475:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12363:24524":{"id":"2:12363:24524","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11616:16725"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12387:24584":{"id":"2:12387:24584","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12051:446","self::pattern":"2:12056:16724"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12061:9465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12463:31683":{"id":"2:12463:31683","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12051:446","self::pattern":"2:12056:16724"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12061:9465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12061:9465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12076:16722","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12419:24580":{"id":"2:12419:24580","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12051:446","self::pattern":"2:12056:16724","str::rsplitn":"2:12422:24582"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43529:9477","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12061:9465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5532:32346":{"id":"5:5532:32346","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7475:245"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7475:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12425:31672":{"id":"2:12425:31672","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41463:196","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12061:9465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12357:31663":{"id":"2:12357:31663","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12377:24567":{"id":"2:12377:24567","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12378:24568"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5536:25841":{"id":"5:5536:25841","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12478:25709"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7475:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73:1794":{"id":"0:73:1794","crate_id":0,"name":"get_physical","span":{"filename":"src/lib.rs","begin":[108,0],"end":[110,1]},"visibility":"public","docs":"Returns the number of physical cores of the current system.\n\nThis will always return at least `1`.\n\n# Note\n\nPhysical count is supported only on Linux, mac OS and Windows platforms.\nOn other platforms, or if the physical count fails on supported platforms,\nthis function returns the same as [`get()`], which is the number of logical\nCPUS.\n\n# Examples\n\n```\nlet logical_cpus = num_cpus::get();\nlet physical_cpus = num_cpus::get_physical();\nif logical_cpus > physical_cpus {\n    println!(\"We have simultaneous multithreading with about {:.2} \\\n              logical cores to 1 physical core.\", \n              (logical_cpus as f64) / (physical_cpus as f64));\n} else if logical_cpus == physical_cpus {\n    println!(\"Either we don't have simultaneous multithreading, or our \\\n              system doesn't support getting the number of physical CPUs.\");\n} else {\n    println!(\"We have less logical CPUs than physical CPUs, maybe we only have access to \\\n              some of the CPUs on our system.\");\n}\n```\n\n[`get()`]: fn.get.html","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12445:31677":{"id":"2:12445:31677","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12364:31666":{"id":"2:12364:31666","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12383:30463":{"id":"2:12383:30463","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12382:30462"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43708:9645","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12410:24578":{"id":"2:12410:24578","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12056:16724","`DoubleEndedIterator`":"2:7476:125","prim@char":"1:12051:446","str::split":"2:12404:2058"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43443:9475","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12061:9465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12061:9465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12076:16722","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12437:31675":{"id":"2:12437:31675","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12056:16724","`DoubleEndedIterator`":"2:7476:125","prim@char":"1:12051:446","str::rmatch_indices":"2:12440:31676"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43575:9639","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12061:9465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12440:31676":{"id":"2:12440:31676","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12056:16724","`DoubleEndedIterator`":"2:7476:125","prim@char":"1:12051:446","str::match_indices":"2:12437:31675"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43593:9640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12061:9465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12061:9465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12076:16722","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12355:864":{"id":"2:12355:864","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12051:446"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1915":{"id":"0:0:1915","crate_id":0,"name":"num_cpus","span":{"filename":"src/lib.rs","begin":[1,0],"end":[485,1]},"visibility":"public","docs":"A crate with utilities to determine the number of CPUs available on the\ncurrent system.\n\nSometimes the CPU will exaggerate the number of CPUs it contains, because it can use\n[processor tricks] to deliver increased performance when there are more threads. This \ncrate provides methods to get both the logical and physical numbers of cores.\n\nThis information can be used as a guide to how many tasks can be run in parallel.\nThere are many properties of the system architecture that will affect parallelism,\nfor example memory access speeds (for all the caches and RAM) and the physical\narchitecture of the processor, so the number of CPUs should be used as a rough guide\nonly.\n\n\n## Examples\n\nFetch the number of logical CPUs.\n\n```\nlet cpus = num_cpus::get();\n```\n\nSee [`rayon::Threadpool`] for an example of where the number of CPUs could be\nused when setting up parallel jobs (Where the threadpool example uses a fixed\nnumber 8, it could use the number of CPUs).\n\n[processor tricks]: https://en.wikipedia.org/wiki/Simultaneous_multithreading\n[`rayon::ThreadPool`]: https://docs.rs/rayon/1.*/rayon/struct.ThreadPool.html","links":{},"attrs":["#![deny(missing_docs)]","#![allow(non_snake_case)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:72:1776","0:73:1794"],"is_stripped":false}}},"2:12393:24586":{"id":"2:12393:24586","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12051:446","self::pattern":"2:12056:16724"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12061:9465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12061:9465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12076:16722","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12447:31678":{"id":"2:12447:31678","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12472:1908":{"id":"2:12472:1908","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12017:131","`FromStr`":"2:12016:2425"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41608:229","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12016:2425","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12016:2425","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12385:31669":{"id":"2:12385:31669","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43689:9643","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5521:32344":{"id":"5:5521:32344","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7475:245"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7475:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12061:9465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5533:32347":{"id":"5:5533:32347","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2597","`String`":"5:7475:245"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2597","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7208:9254","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7475:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5516":{"id":"5:5516","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5517:32343","5:5518:6686","5:5521:32344","5:5524:32345","5:5532:32346","5:5533:32347","5:5534:2398","5:5535:25840","5:5536:25841"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12382:30462":{"id":"2:12382:30462","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12383:30463"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43699:9644","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12434:31674":{"id":"2:12434:31674","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12056:16724","`DoubleEndedIterator`":"2:7476:125","prim@char":"1:12051:446","str::matches":"2:12431:2282"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43647:9642","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12061:9465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12061:9465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12076:16722","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12376:31668":{"id":"2:12376:31668","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12057:1495","crate::ops::IndexMut":"2:3076:11451","str::slice_unchecked":"2:12375:31667"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12477:25708":{"id":"2:12477:25708","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12466:31684":{"id":"2:12466:31684","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12051:446","self::pattern":"2:12056:16724"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12061:9465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12373:24544":{"id":"2:12373:24544","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10150:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10150:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12428:31673":{"id":"2:12428:31673","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41463:196","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12061:9465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12061:9465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12076:16722","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12413:31670":{"id":"2:12413:31670","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12056:16724","str::split":"2:12404:2058","prim@char":"1:12051:446","`DoubleEndedIterator`":"2:7476:125","str::rsplit_terminator":"2:12416:31671"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43475:9637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12061:9465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12356:2139":{"id":"2:12356:2139","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12449:31679":{"id":"2:12449:31679","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5518:6686":{"id":"5:5518:6686","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7475:245"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7475:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12061:9465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5535:25840":{"id":"5:5535:25840","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12477:25708"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7475:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12431:2282":{"id":"2:12431:2282","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12056:16724","`DoubleEndedIterator`":"2:7476:125","prim@char":"1:12051:446","str::rmatches":"2:12434:31674"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43629:9641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12061:9465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12407:24576":{"id":"2:12407:24576","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12051:446","self::pattern":"2:12056:16724"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11872:9472","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12061:9465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12396:2123":{"id":"2:12396:2123","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41465:194","prim@char":"1:12051:446","self::pattern":"2:12056:16724"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41463:196","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12061:9465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12451:31681":{"id":"2:12451:31681","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12051:446","self::pattern":"2:12056:16724"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12061:9465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12061:9465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12081:16721","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12367:1776":{"id":"2:12367:1776","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41465:194"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41463:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10150:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10150:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12422:24582":{"id":"2:12422:24582","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12051:446","str::splitn":"2:12419:24580","self::pattern":"2:12056:16724"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43547:9478","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12061:9465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12061:9465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12076:16722","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12369:24542":{"id":"2:12369:24542","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41465:194"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41463:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10150:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10150:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12469:31685":{"id":"2:12469:31685","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12051:446","self::pattern":"2:12056:16724"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12061:9465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12061:9465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12076:16722","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12380:9654":{"id":"2:12380:9654","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12051:446"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43401:9635","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12474:25704":{"id":"2:12474:25704","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12381:6729":{"id":"2:12381:6729","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43411:2372","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12457:2104":{"id":"2:12457:2104","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12051:446","self::pattern":"2:12056:16724"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41463:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12061:9465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12450:31680":{"id":"2:12450:31680","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12478:25709":{"id":"2:12478:25709","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12479:31686":{"id":"2:12479:31686","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4559:31686"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43724:9555","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12358:31664":{"id":"2:12358:31664","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12404:2058":{"id":"2:12404:2058","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12056:16724","`DoubleEndedIterator`":"2:7476:125","prim@char":"1:12051:446","str::split_whitespace":"2:12382:30462","str::rsplit":"2:12410:24578"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43425:2373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12061:9465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12416:31671":{"id":"2:12416:31671","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12056:16724","str::split":"2:12404:2058","prim@char":"1:12051:446","str::split_terminator":"2:12413:31670"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43493:9638","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12061:9465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12061:9465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12076:16722","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12481:11427":{"id":"2:12481:11427","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4560:11427"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43733:9416","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5534:2398":{"id":"5:5534:2398","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7475:245"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7475:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:72:1776":{"id":"0:72:1776","crate_id":0,"name":"get","span":{"filename":"src/lib.rs","begin":[73,0],"end":[75,1]},"visibility":"public","docs":"Returns the number of available CPUs of the current system.\n\nThis function will get the number of logical cores. Sometimes this is different from the number\nof physical cores (See [Simultaneous multithreading on Wikipedia][smt]).\n\nThis will always return at least `1`.\n\n# Examples\n\n```\nlet cpus = num_cpus::get();\nif cpus > 1 {\n    println!(\"We are on a multicore system with {} CPUs\", cpus);\n} else {\n    println!(\"We are on a single core system\");\n}\n```\n\n# Note\n\nThis will check [sched affinity] on Linux, showing a lower number of CPUs if the current\nthread does not have access to all the computer's CPUs.\n\nThis will also check [cgroups], frequently used in containers to constrain CPU usage.\n\n[smt]: https://en.wikipedia.org/wiki/Simultaneous_multithreading\n[sched affinity]: http://www.gnu.org/software/libc/manual/html_node/CPU-Affinity.html\n[cgroups]: https://www.kernel.org/doc/Documentation/cgroup-v1/cgroups.txt","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12360:31665":{"id":"2:12360:31665","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12358:31664"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12384:2055":{"id":"2:12384:2055","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43679:2369","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5517:32343":{"id":"5:5517:32343","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2597","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7208:9254","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2597","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7208:9254","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"1:3997:11498":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"20:3160:5267":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:45563:9686":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:12674:30579":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"6:62:2699":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:11616:16725":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:40258:9427":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"6:541:3094":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"5:7575:7285":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"18:707:7465":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:12857:7327":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"17:10616:7711":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"1:8878:6743":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:11407:19813":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:4787:415":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"20:4185:5836":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"5:1302:9169":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"16:7041:8884":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:9455:32994":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:1579:9175":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:3679:11491":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:11632:9860":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:3020:2593":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"16:6569:8605":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"5:3669:7247":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:4545:10765":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:10059:7652":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:30308:30140":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"20:3489:5300":{"crate_id":20,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:11625:26956":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"1:3989:11497":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:43369:9631":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"20:614:3120":{"crate_id":20,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:42465:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:2797:2642":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"5:3594:9170":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"5:4164:2359":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"17:13298:8152":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"20:1431:3856":{"crate_id":20,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"6:6657:3810":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:3565:7507":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"6:4812:10793":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:3243:255":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:11661:7834":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"11:2194:10741":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:10322:9170":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:10126:7658":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"20:1386:3852":{"crate_id":20,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"16:8294:132":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:8364:9832":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"6:6037:10947":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"5:4194:2359":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:11639:9860":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:2942:16851":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:45694:9691":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"6:7538:10982":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:8342:2880":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:7920:9873":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"20:3308:5281":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"16:6226:8758":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:1067:9165":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"5:2690:11006":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"6:6634:2880":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"5:676:252":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"6:4680:5286":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:44148:11093":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:12554:8014":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:46230:9714":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"16:6929:8866":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:5575:2824":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"16:6968:19750":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:2546:259":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:21038:2343":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:5407:2359":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"2:40351:9439":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"16:7568:8614":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:21279:2343":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"16:5760:19744":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"20:1514:3863":{"crate_id":20,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:32022:6827":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"5:4426:7271":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:1641:6688":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:44168:11098":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:9531:32988":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"18:80:23767":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"6:5891:5836":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:41818:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"16:6753:8844":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"16:7523:8984":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:42745:151":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"11:836:9162":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:12069:1598":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"20:4806:6319":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"5:2959:6791":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"20:3065:5257":{"crate_id":20,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"18:481:7428":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:9460:136":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:40769:7311":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"10:44:9180":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:3013:2591":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:11886:7865":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:4634:11499":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"20:3080:2045":{"crate_id":20,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:4994:10860":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:10084:7654":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"7:32:18717":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:3419:2359":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"5:7408:9273":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:23399:239":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"11:447:148":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:45463:9682":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"20:1543:3867":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"5:2131:7261":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:4749:11505":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"16:5743:8673":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:40000:16790":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"6:4687:5287":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"6:5909:5839":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"20:590:3102":{"crate_id":20,"path":["libc","unix","protoent"],"kind":"struct"},"6:123:2776":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"20:5046:6331":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:13286:8145":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:8244:9922":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:10628:7714":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"2:0:527":{"crate_id":2,"path":["core"],"kind":"module"},"16:6485:8600":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:11008:9948":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"16:5798:8677":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:11573:7829":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:47842:9790":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"20:3363:5286":{"crate_id":20,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:7137:29006":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:8848:19807":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"16:5612:8603":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:12065:789":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"18:96:23768":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"6:6180:10960":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:43333:9630":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"5:5135:2442":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"6:7573:10987":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:13611:8297":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"16:4806:8643":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:43411:2372":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:11719:19817":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:14173:8426":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:2366:204":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:12056:16724":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:3465:2339":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:12422:7989":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:47793:9787":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:10383:7681":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"6:6574:3013":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"11:1858:9177":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"6:4330:5254":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:12282:115":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"16:6915:8608":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:400:7488":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"0:0:1915":{"crate_id":0,"path":["num_cpus"],"kind":"module"},"16:7660:8991":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:43493:9638":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:20904:30191":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:3248:139":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"18:590:7440":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:42483:113":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"18:614:32998":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"9:330:10744":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:3002:2375":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:41378:30944":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"18:636:7452":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:2638:2385":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:11137:7785":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:40249:9425":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:7581:7350":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:44363:210":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"6:5858:5818":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:1663:3862":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:8826:9946":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:12737:8042":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:21798:29762":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:4834:846":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:9607:7623":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:21464:2343":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:14042:8389":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:11124:7784":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:12671:7738":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"20:5019:6329":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:5832:2453":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:11086:7781":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:10545:2393":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"1:7645:9803":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:44003:16737":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:853:9170":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:6932:31196":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"6:1733:3870":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:14024:8385":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:2394:2329":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:43383:9634":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:9288:9817":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:7447:2596":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:1671:1146":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"6:5046:10879":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"16:4774:8642":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:4268:224":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"1:4646:10599":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"20:4165:5833":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlmsghdr"],"kind":"struct"},"16:5121:8653":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"9:0:2178":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"6:579:3100":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:6077:7338":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:46132:9712":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:12252:7948":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:43708:9645":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:43724:9555":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:10197:7666":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"5:3217:32830":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"16:6901:8607":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"16:7102:19751":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"18:624:33000":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:14308:8479":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:41974:92":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:3017:2592":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"5:822:7253":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"20:4180:5835":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:7882:2333":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:11173:19936":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"20:3401:5290":{"crate_id":20,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"20:4925:6324":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:4376:5257":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:4666:5283":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:39249:219":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"16:3232:8564":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"17:10139:19842":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"2:43831:9647":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:9948:7317":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"20:4120:5830":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"6:1911:3923":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:10623:9480":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"6:6720:6322":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"3:0:471":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:22278:30138":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:14068:8399":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:9744:16799":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"20:4101:5828":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"5:7271:6743":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"6:6616:6319":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:1536:3851":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:8659:19789":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"20:1550:3868":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"20:4077:5826":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:13914:8358":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:926:9157":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"20:3086:5136":{"crate_id":20,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"5:207:7245":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:12172:7926":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:21347:11563":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:11244:7832":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"6:4783:10782":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:30220:6693":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:11062:7779":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:10591:7356":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"16:2321:8565":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:2160:626":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"14:160:9144":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:11023:7773":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"5:6453:7264":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:39955:9552":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:13259:8142":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:22224:9516":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:3224:2393":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:2360:197":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"1:11389:9859":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:40239:9573":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:10661:7720":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:46062:9709":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:13215:8135":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:9701:7625":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"16:6583:8806":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:3233:16853":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:10760:9979":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:11761:9486":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:12050:990":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:10802:9984":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"20:5479:5322":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:14499:8530":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"20:5485:5323":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:46108:9711":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:40779:9450":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"16:3600:8624":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:11910:7879":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:4176:11516":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:43593:9640":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:41449:9461":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"16:2766:8590":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"5:895:2421":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:2832:2590":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:6304:223":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:46938:9741":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"16:3764:8625":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:32116:2649":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:3115:2403":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"11:2033:8893":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:13758:8319":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"16:7862:9007":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:8978:19811":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:44419:173":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"11:1663:150":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:30250:30149":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"16:7128:9962":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:1895:9819":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"1:9984:9593":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"2:4341:7301":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"6:7561:5323":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:7739:9813":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"17:9945:7644":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:1986:199":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:41667:6743":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"16:3915:8629":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"16:7054:8887":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"6:4897:10822":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"20:1350:3847":{"crate_id":20,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"16:2504:8579":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:12075:1206":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"6:1631:3859":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"6:4477:5268":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:11951:7883":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"5:3142:97":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:22307:11015":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"5:6320:11650":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:9500:209":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"20:3166:5268":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"6:4756:5294":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:12452:7998":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"17:11048:7775":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"16:5816:8681":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:9081:11104":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:13989:8374":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:11151:7786":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:10698:7726":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:4277:9422":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"18:0:2186":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:12070:1599":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"6:1590:3856":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:1840:9817":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:47857:9791":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"20:3482:5299":{"crate_id":20,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"6:5838:5831":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:1585:9176":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"16:5866:8689":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:9003:24363":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"6:6031:10944":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:9172:30947":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"5:7559:7281":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"20:3380:5288":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"14:40:7880":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"11:2130:18806":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"6:6697:3785":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:43221:9621":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"16:2472:8578":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:11306:7805":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:622:9805":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:9852:19824":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:10430:7685":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"16:4613:8638":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:41779:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:8990:88":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"6:5814:5829":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"16:2574:8582":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"20:4817:6320":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:13949:8364":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"16:3830:8627":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"15:394:18847":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"17:10370:7680":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"16:8115:9050":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"9:450:18731":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:922:9154":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:3652:6743":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:6433:2037":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:44156:11095":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:11837:9491":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"16:8205:19756":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"5:3720:2386":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:20902:30186":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:10949:7769":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"16:0:2184":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:12911:8088":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"18:599:32997":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:10595:9478":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:8953:19810":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:47396:9775":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"20:5473:5321":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:7259:3046":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"16:2339:8567":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:13667:8303":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"16:4527:8635":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"16:7768:8604":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"16:2744:8589":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:2223:2119":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:43952:9495":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:8884:9843":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:14145:8418":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"20:3092:5259":{"crate_id":20,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"20:549:3096":{"crate_id":20,"path":["libc","unix","winsize"],"kind":"struct"},"17:13876:8350":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"5:7237:7264":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"20:3286:5279":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"20:521:3092":{"crate_id":20,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:8488:2418":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:7664:9861":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:11934:7880":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:10351:27047":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"2:41463:196":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"6:1500:3848":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"20:3059:5256":{"crate_id":20,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:22328:9529":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:13890:8353":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:7744:9868":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"16:5712:8668":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:2903:16845":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"20:3276:5278":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:6473:2454":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:2785:247":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:43733:9416":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:12496:8007":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:3846:9827":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:42767:9614":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:43679:2369":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"16:4889:8646":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:12598:8022":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"16:6041:19746":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:3023:2594":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:2576:7317":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:7153:2400":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"5:4985:2359":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:8562:9464":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:13966:8371":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"11:695:9154":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:10410:7683":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:9442:2342":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"0:72:1776":{"crate_id":0,"path":["num_cpus","get"],"kind":"function"},"5:2170:10998":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:14420:8510":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:2214:133":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:8840:9947":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"6:7472:6330":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:4808:31180":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"9:393:18732":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"16:7722:8606":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:42015:87":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"5:5369:16709":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:3975:11496":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:2499:2035":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:9176:9965":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"5:1514:213":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:11788:7846":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:7855:2334":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:22189:9514":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"16:5727:8671":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:2562:2383":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:4158:9420":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"16:7503:8611":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:2534:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:43860:9655":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"6:5808:5828":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:30236:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:42775:9615":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:10588:7708":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2:43212:9619":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"6:4430:5262":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:0:1487":{"crate_id":1,"path":["std"],"kind":"module"},"1:8304:9926":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:14156:8419":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"20:4107:5829":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:7541:9996":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"16:6893:8864":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"20:1436:3857":{"crate_id":20,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:1764:649":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:2498:16795":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"20:3032:5255":{"crate_id":20,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:11991:7894":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:41608:229":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:40045:9562":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"20:3209:5273":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:21786:9503":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:11182:16718":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"1:12000:9999":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"16:6696:8831":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"20:1355:3848":{"crate_id":20,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"6:4465:5266":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:1590:9177":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:45633:9689":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:7381:24435":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:3260:16765":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:9177:30260":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"6:6076:10958":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"20:5461:5319":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:5787:2446":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:40106:1897":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"2:9504:6821":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:43291:9626":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:47598:9778":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:2913:16847":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:14324:8483":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:21341:11561":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:2384:2324":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"6:1681:3864":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:9277:7483":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:11710:7805":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:21090:16862":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"20:4229:5840":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"20:4193:5837":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:45753:9694":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:9060:26332":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:2934:16849":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"16:6386:8786":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"13:110:32966":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:13693:8309":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:13451:8174":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"5:4234:2421":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:2257:100":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:44164:11097":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:21361:9505":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:10853:26342":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"16:4417:8632":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"11:311:10734":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:12293:7959":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:12049:397":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"1:11163:9946":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:3185:27262":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"5:6086:2359":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:10447:7690":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"11:644:9170":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"20:4278:1835":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:12959:8093":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"5:3735:9256":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:9972:7646":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"6:4403:5259":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:43647:9642":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:3303:2391":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"5:2960:32837":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:0:2185":{"crate_id":17,"path":["object"],"kind":"module"},"6:4508:5272":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:22919:182":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"20:134:2775":{"crate_id":20,"path":["libc","unix","FILE"],"kind":"enum"},"17:14090:8404":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:8225:2373":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"20:3370:5287":{"crate_id":20,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:11557:9827":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:40754:9448":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:43231:9622":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:534:7330":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"1:12054:1107":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"19:0:1087":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:11197:11101":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"6:4874:10812":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:13826:8333":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:6817:11557":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"5:7316:6743":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:4:1070":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:5249:205":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"20:4943:6325":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:12127:16730":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"6:1690:3865":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:9207:7481":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"16:2881:8595":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"5:1672:7247":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"11:1012:9165":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"5:7422:30946":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"20:4272:5861":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:14134:8414":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:6256:7343":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:10036:7651":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:9445:7620":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:40059:103":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:2849:11555":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"20:4919:6323":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:11272:7801":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"16:6560:7233":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"17:504:7491":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:11253:155":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"17:13676:8307":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:9498:6819":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:4035:105":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"6:1513:10758":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"18:491:7429":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:10966:9232":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"5:4002:7264":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:41358:11082":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"16:2450:8577":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"11:285:10731":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:47895:9793":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:434:7490":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:11234:11116":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"17:12043:7905":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"16:2864:8594":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:4924:11529":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:8219:2372":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"20:5447:6674":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:21445:11560":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"20:3137:5264":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:8808:9945":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"6:4725:5291":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:9865:7313":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"16:536:8553":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:21694:11574":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"17:11098:7782":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:11821:9490":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:10429:9473":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:12055:335":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"17:10916:7766":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:4425:2478":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:43313:9628":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:41295:9456":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:12225:7939":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:39145:216":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"16:6171:209":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"16:7597:32982":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:9159:9964":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:8794:19805":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"5:4363:7271":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:10738:7730":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"6:4608:5278":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:43323:9629":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"6:1649:3861":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:10456:7693":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"16:6545:8804":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"17:9617:32996":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:10227:7670":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:12154:7925":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"5:778:98":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:11074:7780":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"5:6651:7247":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:2924:8913":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"8:0:2177":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:10603:7710":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"2:39044:16764":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"6:6877:6332":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:7529:2595":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:8932:11549":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:44355:230":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:2875:11554":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"20:5439:6673":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"16:7782:8995":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:10581:9477":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"6:5060:5297":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:22149:11012":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:10109:9968":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"16:6513:8794":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"20:1479:3860":{"crate_id":20,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"20:1504:3862":{"crate_id":20,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"20:483:3088":{"crate_id":20,"path":["libc","unix","timeval"],"kind":"struct"},"16:2696:8587":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:42736:9608":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:21339:2343":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"11:723:9155":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:43401:9635":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"5:4846:220":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"5:7489:9279":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"6:1527:3850":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:12305:7962":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"6:554:3096":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:12437:7993":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:42093:2443":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"16:5384:19742":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:40026:16791":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:7213:2437":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:10507:7702":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"5:7375:2312":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:21088:30591":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"2:10467:9474":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:8574:2423":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:5639:7343":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"16:4557:8636":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:13632:8302":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:5509:9841":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"17:9003:19812":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:2409:2033":{"crate_id":1,"path":["std","io"],"kind":"module"},"6:4526:5274":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"5:261:7247":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:43395:9485":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:43925:9658":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:41651:2421":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"20:5494:6675":{"crate_id":20,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:13685:8308":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:2497:2343":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:2888:7335":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:9790:32989":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:39977:9554":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:44057:9496":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"6:5017:5300":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:3254:16766":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:40391:9581":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:5390:9837":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"16:6960:8869":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:40332:9579":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:10788:19912":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:43529:9477":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:10088:9816":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"17:11586:7831":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:21473:9505":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"20:489:3089":{"crate_id":20,"path":["libc","unix","timespec"],"kind":"struct"},"11:1121:9169":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:13148:8128":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:5027:10865":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"5:3800:7281":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"6:4802:10790":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:10561:7706":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"1:8465:2417":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:10366:7679":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:12062:7906":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"6:4520:5273":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:2837:109":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"5:878:7255":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"16:4835:8644":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"16:7534:8612":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:12068:1601":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:42720:9605":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"20:3111:5261":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:40745:2037":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:13135:8127":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:40738:9447":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"2:42560:74":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"6:6582:3781":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:11316:7807":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:4830:11504":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"20:1558:3869":{"crate_id":20,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:4753:11508":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"16:3049:18885":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:12067:786":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"20:3154:5266":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"20:1398:3853":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:42495:9022":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"16:7736:8993":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"5:6944:7294":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"5:7363:2311":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"16:5982:8705":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:8870:9950":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:14469:8525":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"11:736:9156":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:13778:8327":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:11235:7799":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:1568:7281":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"17:9488:32995":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"11:844:9163":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:13010:8098":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:261:7486":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:45894:9704":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"16:7582:8986":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"6:4485:5269":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:41701:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:12267:7954":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:13973:8372":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:6192:9438":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1:5455:108":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"6:653:3120":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:44152:11094":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"16:5905:8692":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"20:3320:5282":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:5440:9840":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"17:12621:8027":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:4189:11517":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"6:7584:10991":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:8713:19803":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:2891:16844":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:47934:9794":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:11507:19815":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"6:4589:5277":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:22165:9509":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:8926:19809":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:2871:8907":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:13024:8101":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"16:7067:8890":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"16:6318:8779":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:3945:11494":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:9886:7636":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"0:73:1794":{"crate_id":0,"path":["num_cpus","get_physical"],"kind":"function"},"2:30414:30156":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:4127:9419":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:21076:11567":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"1:10167:9970":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"17:10575:7707":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"18:652:7430":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"6:4491:5270":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:39497:24523":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"2:41581:6806":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:8238:9920":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:14001:8380":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"11:817:9160":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:9372:7612":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"20:3257:5277":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:11617:7832":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:2908:16846":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"20:3127:5263":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"20:469:3086":{"crate_id":20,"path":["libc","unix","group"],"kind":"struct"},"20:4995:6327":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:8948:11551":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"14:165:18817":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:8560:11435":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:21295:11559":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"6:1702:3867":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"16:5017:8650":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:4709:11530":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:9493:7354":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"6:1595:3857":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:4751:11507":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:41523:2421":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"20:55:2699":{"crate_id":20,"path":["libc","unix","DIR"],"kind":"enum"},"17:10494:7700":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"16:2618:8584":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"6:532:3093":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:22241:30155":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:8338:9930":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"6:4498:5271":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"6:573:3099":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"6:7555:5322":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"14:31:9144":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:45864:9703":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:12058:1582":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"18:515:7427":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"16:2380:8574":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:4500:11520":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:46724:9738":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"6:4628:5280":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:9660:32991":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"16:7318:8930":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:2644:8585":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:22262:30150":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:41312:9458":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:3076:11451":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"14:221:9151":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"20:3471:5298":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:22589:192":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"14:0:2182":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"16:7677:213":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"16:6467:8793":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:11547:7828":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:11687:19816":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:9931:7316":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:4320:9830":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"16:7284:6805":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:45734:9693":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:9985:7648":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"6:4986:10858":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:11490:7825":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:21910:11562":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:2382:2323":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"20:5417:3046":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"5:3581:2421":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"15:288:18836":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:45531:9685":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:2840:2648":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"16:8134:9053":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:5994:223":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"20:2982:5251":{"crate_id":20,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"20:4910:6322":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:47872:9792":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:20887:30188":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"16:3315:8622":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"5:1776:7281":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"6:1495:3847":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"11:1818:2421":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:11761:7845":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:7530:7492":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:9490:124":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:40342:9580":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:43152:9617":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"16:5696:19743":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:11798:9489":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"6:4864:10806":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"16:3065:7515":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"16:4949:8648":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:7397:16832":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:5760:2445":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:12997:8097":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"6:6627:6320":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:8286:9828":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:11381:7815":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"16:5419:7611":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"5:7308:6743":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:12970:8094":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:2150:19870":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:10478:7698":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:3391:2401":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"6:4558:5275":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:47720:9781":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:45664:9690":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:8181:2341":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"16:7015:8883":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:14221:8463":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:13101:8114":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:10980:7624":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:12111:7915":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:2923:132":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:13906:8356":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"6:6735:6324":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:42054:94":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:10334:108":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:3409:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"5:629:9248":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"18:113:23769":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"20:4138:5832":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:3226:2394":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:40019:9558":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"5:3212:9174":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:2254:99":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"1:6549:2451":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"5:1464:9155":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:41548:6805":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"11:968:8893":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:8557:2421":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"6:4965:5296":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"5:1273:9165":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:2537:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"6:0:869":{"crate_id":6,"path":["libc"],"kind":"module"},"18:766:23779":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"16:2526:8580":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"5:4032:7247":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:4037:11500":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:5646:9842":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:10750:7731":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:6987:26374":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:11815:7852":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"7:79:18724":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"16:8181:8618":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"20:4773:3013":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:10779:11112":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"16:8050:9044":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"17:11367:7812":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"5:7208:9254":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:41401:9596":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"16:6401:8599":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:2178:7500":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"20:3433:5294":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:47738:9782":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:9038:9960":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:8854:9948":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:12062:684":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:7401:16831":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:8011:9875":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"20:1490:3861":{"crate_id":20,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:39161:213":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:1573:9174":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:7718:11432":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:4973:11535":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"20:3389:5289":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"6:6829:6329":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:14514:8531":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:10990:26346":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:7644:2343":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"5:2223:32872":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"11:399:32965":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:10316:7677":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"6:1506:10755":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"20:3119:5262":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:12876:8077":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:4272:9421":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:7912:123":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:39083:16693":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"18:755:7477":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:41676:198":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:4168:11515":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"6:7514:5318":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"5:7475:245":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:7890:2424":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:22754:193":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:2896:8908":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"5:1473:9156":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"16:6376:19747":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:20857:29758":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"6:4438:5263":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"16:6792:8856":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:12790:8049":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"18:736:23778":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:29965:11492":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"11:1517:9172":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"6:6086:5840":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:5555:9428":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:43717:9492":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:10347:2373":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"1:11835:7367":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:3191:29252":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"5:7257:32822":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:6198:11011":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"5:1482:9171":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"5:1411:2421":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:11358:19938":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:10150:242":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:14434:8512":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"16:7436:8709":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"6:4742:5293":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"16:6879:8862":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:11495:9825":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"15:0:2183":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:8971:2447":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:42538:132":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:5753:2444":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:12066:790":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"16:5648:8662":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:9709:151":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"1:949:9162":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:6201:9848":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"17:14401:8505":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"6:5996:5284":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:39130:9540":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"16:6346:8781":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"2:22820:183":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"6:4856:10801":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:32015:9536":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"2:12076:16722":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:2170:16862":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"2:40267:9574":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"5:1492:9153":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"10:0:2179":{"crate_id":10,"path":["adler"],"kind":"module"},"16:7090:8892":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:40731:9446":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"6:5827:5830":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"6:4796:10787":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:7733:11433":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:8985:9952":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:45593:9687":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"20:3443:5295":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"16:3461:8623":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:8212:2371":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"5:2035:2386":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"20:138:2776":{"crate_id":20,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:11177:9947":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:9350:7487":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:5613:9430":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:11216:2349":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"17:11201:7789":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"2:12846:110":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:8985:81":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"14:202:16738":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:9242:7482":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"5:7464:7277":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"1:9140:2349":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:1076:9169":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"6:1520:3849":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"6:5976:10924":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"16:7391:19752":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"11:667:9153":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"14:7:9144":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:6153:7327":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:41437:9459":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"16:4921:8647":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"11:1501:18812":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"5:1138:32882":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"6:474:3086":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:47682:9780":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:40290:9431":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:11473:7578":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"16:2832:8593":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:12685:8036":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"20:3461:5297":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:2628:132":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"9:357:18746":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"6:4835:5833":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"16:7474:8972":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"16:3888:8628":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"6:4931:10847":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"6:568:3098":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:11162:7787":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"5:5325:7247":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:2921:229":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"17:13838:8336":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:46678:9737":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"16:5661:8667":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:897:7264":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"18:690:7462":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"16:6156:8736":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"16:5574:8598":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"16:2548:8581":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"5:4348:266":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"20:3104:5260":{"crate_id":20,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:1044:8893":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:43547:9478":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"5:6900:265":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"14:215:9149":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:44345:222":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:12888:8079":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"6:5070:10885":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:14378:8504":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:6169:7342":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"17:12645:8028":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"16:7342:32985":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:43629:9641":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"1:9026:9958":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:3288:16690":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:41935:85":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"16:6204:8743":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:14110:8410":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"6:5845:5832":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:8202:2370":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"16:5363:8655":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:9033:9959":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"6:1545:3852":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"16:2969:18884":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:7897:16830":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"6:4850:5838":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:11281:7802":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:14316:8482":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:21440:2343":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"17:9564:7622":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"16:7613:8989":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:9198:27620":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"2:47758:9784":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:4915:11528":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"16:2596:8583":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"16:7462:8971":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:45818:9696":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:8594:19791":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:44160:11096":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"16:7269:32983":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:46364:9717":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:8149:2400":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:46488:9734":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"5:3330:7281":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:12056:1463":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:11066:7359":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:2782:2589":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"1:6616:2456":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:40064:9563":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:7872:2336":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"6:5784:5826":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"16:4862:8645":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:40211:9569":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"6:4640:5281":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"16:7792:19754":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:10292:7624":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:11215:7794":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"6:587:3101":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:12074:1657":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:9494:6817":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"17:10534:7704":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:47747:9783":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"16:8154:9054":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:44172:11099":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:12639:142":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:22688:191":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:8312:9920":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:6014:9432":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:2786:246":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"2:42455:11083":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"6:119:2775":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"16:6279:8777":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:2844:11553":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"11:332:7236":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:8397:11539":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"6:4889:10817":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:11189:2092":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"5:3171:2421":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:14118:8411":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"6:5082:10890":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:6795:6749":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:7767:9871":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"6:6607:10966":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"20:4797:2971":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:2324:203":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:47536:9777":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"6:4750:10769":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"7:0:1647":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:10646:7716":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:6650:236":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"16:5634:8658":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:10548:2395":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:3188:29242":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"6:7532:10981":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"17:12484:8005":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:46086:9710":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:2368:2319":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"14:187:18824":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:12726:9501":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:10107:9969":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"2:43475:9637":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:9492:6816":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"11:749:7264":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:43241:9623":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:11845:7856":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:13546:8257":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:8293:11102":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:907:7281":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"1:505:7261":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:1751:11009":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"20:557:3097":{"crate_id":20,"path":["libc","unix","linger"],"kind":"struct"},"1:8016:2387":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"5:1523:9253":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:12846:8058":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:45509:9684":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:918:9153":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:863:6743":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"16:149:7230":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"17:9998:7601":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:11226:7798":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:13816:8332":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:21223:16862":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"17:13739:8318":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"4:0:2176":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:6203:7309":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"17:11872:7864":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"20:574:3100":{"crate_id":20,"path":["libc","unix","tms"],"kind":"struct"},"2:2540:156":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"16:6687:8830":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:11602:9483":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:42511:72":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"5:685:114":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"20:4131:5831":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:46788:9740":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:2219:2315":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:10862:26345":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"16:6844:8858":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:7029:7348":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:8916:11550":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"11:1103:9168":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:40521:2371":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:12698:8037":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:9752:7626":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:2792:249":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:30214:6692":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:41414:9828":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:11535:7827":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"16:7651:8990":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:21908:2343":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"20:1537:3866":{"crate_id":20,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:4396:7302":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"11:2174:10737":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"6:4957:5295":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:6003:10931":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:5317:124":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"20:3174:5269":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:7771:9535":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:3325:16691":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:44461:9679":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:558:9804":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:8298:11518":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:46754:9739":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:4023:9418":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:10397:7682":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"16:6818:8857":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:41857:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:12064:788":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:3529:2034":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:22133:9508":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:13802:8331":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:41539:6743":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"17:10112:7656":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:13162:8129":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"16:4745:8641":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:3264:2395":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:13922:8360":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"16:2810:8592":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:9912:7637":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"5:0:309":{"crate_id":5,"path":["alloc"],"kind":"module"},"6:4940:10853":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"5:1426:9170":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:256:7485":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:12983:8096":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:943:9160":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:2329:129":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"17:10929:7768":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:41740:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:46040:9708":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"20:3334:5283":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"5:7451:9278":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"5:35:7243":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"16:2722:8588":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"16:6742:8843":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:11191:7508":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"9:52:18749":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"5:2243:11002":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:39205:218":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"6:7567:10986":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"17:12830:8053":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"20:3451:5296":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:21132:11572":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"2:5495:2359":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"17:9137:7479":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"20:2995:5252":{"crate_id":20,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"6:4537:10760":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"16:5830:8682":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:9650:7624":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:43846:9652":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"16:7492:8980":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"16:4585:8637":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:39310:9545":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"6:6859:6331":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:41329:11490":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:13040:8103":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"16:5963:8698":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:41659:9170":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:2887:16842":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:12007:7898":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:10186:7664":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"16:2933:18883":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:4058:16689":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:7585:171":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"16:4344:8631":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:4160:11514":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:40139:7303":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:22853:184":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"20:3187:5271":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:5978:7343":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:2543:137":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:46010:9707":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:14478:8527":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:9780:7627":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"18:609:7446":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:13085:8110":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:46183:9713":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:12765:8047":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:47286:9774":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"6:4718:5290":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:43809:16736":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"18:548:147":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:8862:2421":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:8670:9465":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:13554:8260":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"16:5435:8656":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:47767:9785":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:10265:7672":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:41600:208":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"18:699:7463":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"16:6944:32981":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"16:7621:19753":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"6:6598:2971":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:7476:125":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:8547:2420":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"17:9390:133":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"1:12076:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:45615:9688":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:13710:8310":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:40319:9437":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"11:798:9157":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:11971:7893":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:10420:7558":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:39324:9546":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:5091:9836":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:11055:7358":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:1922:9285":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"20:1574:3870":{"crate_id":20,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"20:5004:6328":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:39898:9416":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:4351:6827":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"6:1673:3863":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:12208:7931":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:3504:2342":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"5:6969:7297":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"6:4946:10856":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"20:4209:5839":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"6:4772:10774":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:11111:7783":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"6:6714:6321":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:9711:32992":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"20:4174:5834":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlmsgerr"],"kind":"struct"},"6:562:3097":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"6:4415:5260":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:13188:8131":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:1564:7264":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"20:495:3090":{"crate_id":20,"path":["libc","unix","rlimit"],"kind":"struct"},"6:4697:5288":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:871:9155":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:7751:11469":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"6:6784:6326":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"20:3238:5276":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:8169:2338":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:8006:9874":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:40076:30946":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:6814:6328":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:7287:10973":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:12136:7917":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:4807:7336":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:1781:9815":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:2209:7503":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:14522:8534":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:43304:9627":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"6:4471:5267":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:1817:9816":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:9116:238":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"6:4789:10785":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"20:3147:5265":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:4200:6826":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:1471:1800":{"crate_id":2,"path":["core","mem"],"kind":"module"},"20:1410:3854":{"crate_id":20,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:12072:1597":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:9701:147":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1:12061:682":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"17:12810:8052":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:12750:8044":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"17:10962:7770":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:9051:19790":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:11108:9481":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"6:5929:10899":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"11:119:7234":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"5:2962:10999":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:12071:1600":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:10771:7733":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:10975:9841":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"11:630:2421":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"16:8239:8951":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"16:7828:9003":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:12465:8000":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"5:6499:7247":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:21471:11569":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"5:7225:9271":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:4405:6828":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:4626:16784":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:8320:9928":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:44236:16961":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"17:9823:19823":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:32029:9537":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:44024:9664":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:1842:9818":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"17:9328:2372":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"6:7281:6673":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:10824:134":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"16:7544:8985":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"20:4974:6326":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:21176:11573":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:5424:9839":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:44037:9668":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:44199:126":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"20:3019:5254":{"crate_id":20,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:641:9808":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:11401:11117":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:13274:7805":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"9:177:18798":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:10486:7355":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:43203:9618":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"16:6721:19749":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:4003:11499":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:42979:9469":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:41591:6804":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:11332:9992":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"3:234:229":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:22787:186":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:9111:237":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:3072:11450":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:20885:30190":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:14013:8381":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"16:6243:8764":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"11:1822:6743":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:8415:2416":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"6:4391:2045":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:7895:134":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"20:5467:5320":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:22655:190":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:46442:9733":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"16:6268:32986":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"6:5076:10887":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"18:719:7469":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:13981:8373":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"6:7304:6674":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:40381:9441":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"16:8167:9057":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"20:1377:3851":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:40299:9578":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:21262:11564":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"16:2907:8596":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:11536:9826":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:1058:9164":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"5:7279:213":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"20:1444:3858":{"crate_id":20,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:4618:5279":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:9921:7639":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"16:4462:8633":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:955:9163":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:41272:164":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"6:1696:3866":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:12070:7465":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:10023:7625":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:22:723":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:4478:11519":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:9896:19825":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"6:4382:5258":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:9502:6820":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"16:2359:8573":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"6:4951:5250":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"20:3226:5275":{"crate_id":20,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:4881:1056":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:3447:2036":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:10784:11114":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:7893:11441":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:10298:2421":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:10520:7703":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:2918:8912":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"5:1011:7247":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:46284:9716":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"5:1118:32838":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:11393:132":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"18:574:7430":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:41531:9170":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:20844:2658":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:9102:7478":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:11389:7817":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"5:6802:7291":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"18:582:2658":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:40012:9557":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:2550:258":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:22721:188":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"16:7006:8880":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"11:1538:9173":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"20:477:3087":{"crate_id":20,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:12061:9465":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"11:805:11437":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"18:521:23780":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"20:1368:3850":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:10551:2391":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"20:3071:5258":{"crate_id":20,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:12513:8010":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:9749:9468":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"5:1442:6743":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"5:5373:16710":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"11:2201:2311":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:12473:8002":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"6:6045:10949":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"6:4919:10838":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"20:4824:2880":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:1737:16872":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:10814:2336":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"5:2966:32836":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:1557:2421":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:884:9156":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:14282:8470":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"11:2180:10738":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:11309:7361":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"17:8686:19802":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:8561:11543":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:42728:9607":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:10547:7705":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:43252:9624":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"16:6083:18855":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"20:501:3091":{"crate_id":20,"path":["libc","unix","rusage"],"kind":"struct"},"1:9481:133":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"1:3741:9825":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:2172:16863":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"2:44436:9678":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:8990:110":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:22027:9506":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:21209:11568":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:42229:6818":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:9106:179":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:8825:19806":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"6:5776:5825":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:9496:6818":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:7669:9863":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:1075:7493":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:42757:2417":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"1:8996:9955":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"6:488:3088":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:12051:446":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"6:7595:10992":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"17:10340:7678":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:4392:9831":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:12373:7964":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:1779:9814":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"17:14126:8413":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"20:3414:5292":{"crate_id":20,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:46600:9736":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"5:1257:8893":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"5:3238:9177":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"6:7549:5321":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:358:9801":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"11:2060:9165":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:4059:11503":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"6:4458:5265":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"11:657:6743":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:13567:8267":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:11261:7800":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"17:10214:7669":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"20:4042:5803":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"5:1102:32881":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:13897:8355":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:13228:8136":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"16:5995:8555":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"11:2049:9164":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:9441:229":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"5:1503:9154":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:3170:214":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:12074:7909":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"5:7500:9280":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:2879:11556":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:40281:9577":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:646:11429":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"20:4151:5818":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"20:568:3099":{"crate_id":20,"path":["libc","unix","itimerval"],"kind":"struct"},"18:531:7434":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:39185:215":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"16:6531:8802":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:1825:181":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:40220:9570":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:6364:178":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"16:7554:8613":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:1548:2359":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"20:1635:3923":{"crate_id":20,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"6:4731:5292":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:40531:9443":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:21040:11565":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"2:2947:16852":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:39904:9547":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"20:3296:5280":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"11:365:7238":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:2366:2318":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:11472:7363":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"16:6456:8792":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"20:3408:5291":{"crate_id":20,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:13071:8108":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"20:3215:5274":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:14083:8403":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"5:4074:9170":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:4047:11501":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"20:3355:5285":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Chdr"],"kind":"struct"},"6:4706:5289":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"20:4095:5827":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:1575:3855":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"16:4053:8630":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:10540:9476":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"6:5886:5835":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:22886:185":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:7600:7352":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:2859:8903":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"1:12052:1617":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"5:5619:7279":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"12:0:2181":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:1561:6743":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:7860:2335":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:44406:9675":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"16:6361:8783":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"16:5588:8601":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"20:5455:5318":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:14296:8476":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:2669:9286":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"1:4240:9829":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:12057:1495":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"5:6812:7293":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"17:9574:32993":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:14076:8402":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:10789:2332":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"2:43425:2373":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"6:1569:3854":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"10:36:10743":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"16:4641:8639":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:364:9802":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"20:4904:6321":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:12196:7930":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:12280:7958":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"6:6805:6327":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:13851:8342":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:9488:2335":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"6:5964:10920":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"6:6139:5861":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:10685:7724":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"6:6165:5862":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"20:4781:3781":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:7928:2384":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:47804:9788":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:14163:8421":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"20:4298:5862":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:5137:206":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"17:14448:8519":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"5:5961:2442":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:40760:2401":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"16:5939:8549":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:4452:6829":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:2989:121":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:13575:8268":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"16:2284:18856":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:10844:2338":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:5632:223":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:47778:9786":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"20:3197:5272":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"5:3204:9176":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:20872:29758":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"11:1831:7281":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"1:11072:7360":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"18:660:7453":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"16:2305:18882":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"2:42215:6817":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:9086:7611":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:10390:9472":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:11742:7842":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:7690:7356":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:40367:7450":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"6:7608:10996":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:45964:9706":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:45716:9692":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:2835:2646":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"6:5802:5827":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:6680:3782":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"20:1531:3865":{"crate_id":20,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:40545:9444":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"16:6352:8782":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:13723:8315":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"20:542:3095":{"crate_id":20,"path":["libc","unix","pollfd"],"kind":"struct"},"13:0:2175":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:6983:16826":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"6:4820:10797":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:12945:8091":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"16:6415:8789":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:11000:7772":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:12017:24416":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:14033:8388":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:39985:9416":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"6:6729:6323":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:4766:10771":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:11639:7508":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:39227:217":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"16:3655:7520":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:11374:9857":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"16:6261:8774":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:4578:11525":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:41896:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:39993:9555":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"20:527:3093":{"crate_id":20,"path":["libc","unix","hostent"],"kind":"struct"},"17:13868:8347":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:9959:7645":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:3273:31342":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:12184:7929":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"16:5673:8602":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:2775:240":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:25801:268":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:39925:30151":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:43443:9475":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:8249:11489":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:43689:9643":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:4011:9417":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:8895:19808":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"11:97:10730":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:40229:9571":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"6:494:3089":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"16:2406:8575":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"16:7694:8615":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:8765:19804":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"18:564:7439":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"6:6145:1835":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:11351:7810":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"9:507:9235":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"16:8072:9045":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:12576:8021":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"20:536:3094":{"crate_id":20,"path":["libc","unix","iovec"],"kind":"struct"},"20:1522:3864":{"crate_id":20,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:10440:7687":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"16:8097:9048":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:4648:10601":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"6:4397:5136":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"5:5930:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"16:4497:8634":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"11:403:32960":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:45916:9705":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"16:7708:8616":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:12543:8013":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:7934:30948":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:42222:6816":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:9070:7610":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"20:4847:3810":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:727:148":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:30784:198":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"17:13244:8138":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:2829:2644":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"17:12086:7910":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:40198:2370":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"20:3425:5293":{"crate_id":20,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:14536:8537":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"16:7513:8983":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:12098:7913":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:11327:7808":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:8121:2337":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"5:2970:32834":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:14346:8489":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:43575:9639":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"5:276:2597":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:42975:11091":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"16:2428:8576":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:12063:791":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:10834:123":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"11:1826:7264":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:12081:16721":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"6:5053:10882":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"2:12652:158":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:10726:7729":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:2783:2641":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:10672:7721":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"11:1838:9174":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"6:1717:3869":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"6:4910:10832":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:47819:9789":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:11613:9993":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"16:6600:19748":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:12024:7900":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"16:4986:8649":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:15:2285":{"crate_id":2,"path":["core","write"],"kind":"macro"},"6:526:3092":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:13792:8330":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"6:5988:5285":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:3939:11495":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"6:4826:10798":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"20:4069:5825":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:40149:9565":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"20:5033:6330":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","termios2"],"kind":"struct"},"2:44144:11092":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"5:7247:7259":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"18:538:7437":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"5:782:7250":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"5:5846:7264":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:13055:8107":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"6:4306:5252":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:44180:11101":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"5:5982:17154":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"16:5322:8654":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"6:6850:10970":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"16:7884:19755":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:8814:201":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"5:2461:11003":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:8158:2402":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:2854:8906":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"6:4343:5255":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:42236:6819":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:10962:9871":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"5:7438:9276":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:3522:2340":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:12894:146":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:22216:9515":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"6:547:3095":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"6:7520:5319":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"5:4393:2359":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"6:6053:10952":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"5:7287:9272":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:7434:138":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:416:177":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"16:3032:8619":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:8232:2369":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"6:4448:5264":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:22201:30943":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:932:11437":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"17:13113:8116":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:11586:16922":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:43278:9566":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:47474:9776":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:10468:7697":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:11407:11118":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:3348:2380":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"11:0:2180":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:2216:2314":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:582:7492":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"16:6017:19745":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:40787:9452":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:39271:2305":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"17:13422:8154":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:12022:11434":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:42520:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"17:9867:7634":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"16:6332:8597":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"6:506:3091":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"11:1852:9176":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"11:793:9171":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:12934:8089":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"6:5746:5803":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:483:7329":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"16:8195:9059":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:41514:6742":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:7865:2332":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"16:2788:8591":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:12123:7916":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:40092:9564":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"16:2670:8586":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"6:500:3090":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:3939:2359":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:9521:7621":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"20:3006:5253":{"crate_id":20,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:12778:8048":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:40169:9566":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"6:1557:3853":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:2883:16843":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"6:4652:5282":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"18:671:7459":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:12073:840":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:12658:8031":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:43742:9554":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"16:5403:7610":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:45485:9683":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:2865:16841":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:22952:187":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:46261:9715":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:4712:11519":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"20:3180:5270":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:8563:2422":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:30812:2658":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"20:1361:3849":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:9963:7322":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:43699:9644":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"6:4844:5834":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"9:426:18733":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"20:582:3101":{"crate_id":20,"path":["libc","unix","servent"],"kind":"struct"},"6:5872:10898":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:39965:9553":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:12531:8011":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:14335:8488":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:5060:9836":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:5578:11544":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"17:14460:8521":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"16:6189:8741":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:45419:9680":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:39913:9548":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"5:3178:9175":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:4051:11502":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:9762:32990":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:11359:9856":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:913:9171":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:43989:9659":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"6:482:3087":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"6:6843:10967":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"16:5088:8652":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:6437:2448":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:638:9806":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:12949:11438":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"15:327:18841":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:30180:6691":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:44176:11100":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:13174:8130":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:40189:9568":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:43877:9656":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"11:760:7281":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"17:13487:8205":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:32008:8951":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:10609:9479":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"20:4870:3782":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"6:5010:5299":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"5:3568:175":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:9172:7480":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:1983:200":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:3266:2396":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:2787:112":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"20:2976:5250":{"crate_id":20,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"6:7618:6675":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:4644:10597":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:8505:2419":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:2617:120":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:6884:16834":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:10714:7728":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"16:7360:32984":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"16:6425:8790":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:12016:2425":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:11141:9482":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:7936:2386":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"5:7217:6743":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:9485:115":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:7438:159":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"9:486:18730":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:44448:9179":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"17:14355:8491":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"11:1027:18811":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:4138:29009":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"20:3348:5284":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Chdr"],"kind":"struct"},"2:31968:10740":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"1:1931:695":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"2:21689:11566":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"17:10240:7644":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:3518:7264":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"1:6902:7347":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"17:10165:19843":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"20:5064:6332":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"18:727:7472":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"11:2186:32958":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"11:2168:10736":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"6:7526:5320":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"18:507:7430":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"9:237:2417":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:10278:7673":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:1924:11480":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"20:1472:3859":{"crate_id":20,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:3232:7504":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:589:11426":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:3441:7506":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"6:4552:10767":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:45439:9681":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:11295:7803":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"13:226:10729":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:11448:19814":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:1634:625":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"5:2141:9257":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:22622:189":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:10443:9945":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"11:1845:9175":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:40310:9436":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"5:6572:6743":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:2598:2376":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:44224:9670":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:1429:150":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"20:4887:3785":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"5:7391:104":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"6:4370:5256":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:1184:7495":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:9121:155":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:10502:9475":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:39941:9551":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"5:2049:9256":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:9208:11108":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:12701:207":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"18:681:7460":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:11326:9852":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:14269:8464":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:3744:9826":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:22314:9528":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"6:4293:5251":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"11:1048:32959":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"16:6499:8617":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:32004:9535":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"17:14056:8396":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"6:1638:3860":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:44398:9673":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:12711:8039":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"18:644:7430":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:12724:8040":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:9046:9962":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"16:4719:8640":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:2938:16850":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"11:1068:9167":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:12237:7942":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:42960:9616":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:5404:9838":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:12033:26354":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"20:563:3098":{"crate_id":20,"path":["libc","unix","sigval"],"kind":"struct"},"2:22080:9507":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:49740:11576":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"2:47644:9779":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"15:306:18837":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"20:0:869":{"crate_id":20,"path":["libc"],"kind":"module"},"17:10637:7715":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"2:44014:9660":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"11:1611:7240":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:840:2421":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:2930:16848":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:10903:7765":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:8903:9951":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"6:1709:3868":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"6:5899:5837":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:11872:9472":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:6602:2455":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"1:3513:27674":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"20:4203:5838":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlattr"],"kind":"struct"},"6:6753:6325":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:11337:19937":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"5:6783:7279":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:13202:8134":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:10259:11546":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:22340:11493":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"16:8281:9066":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:14100:8407":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"5:1288:9164":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:3305:2392":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"6:4317:5253":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:6546:2450":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:10012:7624":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"5:3183:32827":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:39303:9544":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:1760:9282":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:2276:107":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"11:986:9164":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"6:4570:5276":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:10097:7655":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"5:5776:253":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:2012:7496":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:46518:9735":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"16:5049:8651":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:9933:7642":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"6:6017:10942":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:10140:2343":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"6:1603:3858":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"20:1416:3855":{"crate_id":20,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:47144:9773":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"6:4422:5261":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"6:6024:10943":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"6:595:3102":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"6:4975:5298":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:3054:16692":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"16:3797:8626":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"5:1374:96":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:45771:9695":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"}},"external_crates":{"20":{"name":"libc","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}