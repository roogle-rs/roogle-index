{"root":"0:0:1950","crate_version":"1.16.0","includes_private":false,"index":{"2:12663":{"id":"2:12663","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12664:869","2:12665:2174","2:12666:32066","2:12667:32067","2:12669:32068","2:12672:27457","2:12673:32069","2:12674:339","2:12675:1851","2:12676:1810","2:12678:27474","2:12680:27475","2:12682:27476","2:12684:32070","2:12685:32071","2:12686:27498","2:12687:27499","2:12688:9966","2:12689:10126","2:12690:6766","2:12691:29939","2:12692:29931","2:12693:2090","2:12694:32072","2:12695:29930","2:12696:27517","2:12699:27518","2:12702:27519","2:12705:2158","2:12709:6775","2:12713:2093","2:12716:27507","2:12719:27509","2:12722:32073","2:12725:32074","2:12728:27511","2:12731:27513","2:12734:27515","2:12737:27516","2:12740:2319","2:12743:32075","2:12746:32076","2:12749:32077","2:12752:2097","2:12754:32078","2:12756:32079","2:12758:32080","2:12759:32081","2:12760:32082","2:12763:32083","2:12766:2139","2:12769:27520","2:12772:32084","2:12775:32085","2:12778:32086","2:12781:1943","2:12783:26972","2:12784:27398","2:12785:26976","2:12786:26977","2:12787:26978","2:12788:32087","2:12790:11902","2:12791:32088"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12754:32078":{"id":"2:12754:32078","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5535:32747":{"id":"5:5535:32747","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7529:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:9937","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1950":{"id":"0:0:1950","crate_id":0,"name":"num_cpus","span":{"filename":"src/lib.rs","begin":[1,0],"end":[485,1]},"visibility":"public","docs":"A crate with utilities to determine the number of CPUs available on the\ncurrent system.\n\nSometimes the CPU will exaggerate the number of CPUs it contains, because it can use\n[processor tricks] to deliver increased performance when there are more threads. This \ncrate provides methods to get both the logical and physical numbers of cores.\n\nThis information can be used as a guide to how many tasks can be run in parallel.\nThere are many properties of the system architecture that will affect parallelism,\nfor example memory access speeds (for all the caches and RAM) and the physical\narchitecture of the processor, so the number of CPUs should be used as a rough guide\nonly.\n\n\n## Examples\n\nFetch the number of logical CPUs.\n\n```\nlet cpus = num_cpus::get();\n```\n\nSee [`rayon::Threadpool`] for an example of where the number of CPUs could be\nused when setting up parallel jobs (Where the threadpool example uses a fixed\nnumber 8, it could use the number of CPUs).\n\n[processor tricks]: https://en.wikipedia.org/wiki/Simultaneous_multithreading\n[`rayon::ThreadPool`]: https://docs.rs/rayon/1.*/rayon/struct.ThreadPool.html","links":{},"attrs":["#![deny(missing_docs)]","#![allow(non_snake_case)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:72:1810","0:73:1828"],"is_stripped":false}}},"2:12758:32080":{"id":"2:12758:32080","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5547:32750":{"id":"5:5547:32750","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2635","`String`":"5:7529:249"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2635","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5550:26975":{"id":"5:5550:26975","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12787:26978"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12678:27474":{"id":"2:12678:27474","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41872:197"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41870:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10449:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10449:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12687:27499":{"id":"2:12687:27499","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12686:27498"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12783:26972":{"id":"2:12783:26972","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5549:26974":{"id":"5:5549:26974","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12786:26977"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5538:32748":{"id":"5:5538:32748","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7529:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5531:32746":{"id":"5:5531:32746","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2635","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2635","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12695:29930":{"id":"2:12695:29930","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44060:9965","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12725:32074":{"id":"2:12725:32074","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12360:17205","str::split":"2:12713:2093","prim@char":"1:12032:448","str::split_terminator":"2:12722:32073"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43836:10110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:9937","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12365:9937","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12380:17203","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73:1828":{"id":"0:73:1828","crate_id":0,"name":"get_physical","span":{"filename":"src/lib.rs","begin":[108,0],"end":[110,1]},"visibility":"public","docs":"Returns the number of physical cores of the current system.\n\nThis will always return at least `1`.\n\n# Note\n\nPhysical count is supported only on Linux, mac OS and Windows platforms.\nOn other platforms, or if the physical count fails on supported platforms,\nthis function returns the same as [`get()`], which is the number of logical\nCPUS.\n\n# Examples\n\n```\nlet logical_cpus = num_cpus::get();\nlet physical_cpus = num_cpus::get_physical();\nif logical_cpus > physical_cpus {\n    println!(\"We have simultaneous multithreading with about {:.2} \\\n              logical cores to 1 physical core.\", \n              (logical_cpus as f64) / (physical_cpus as f64));\n} else if logical_cpus == physical_cpus {\n    println!(\"Either we don't have simultaneous multithreading, or our \\\n              system doesn't support getting the number of physical CPUs.\");\n} else {\n    println!(\"We have less logical CPUs than physical CPUs, maybe we only have access to \\\n              some of the CPUs on our system.\");\n}\n```\n\n[`get()`]: fn.get.html","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12691:29939":{"id":"2:12691:29939","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12692:29931"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44042:10116","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12673:32069":{"id":"2:12673:32069","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12743:32075":{"id":"2:12743:32075","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12360:17205","`DoubleEndedIterator`":"2:7752:127","prim@char":"1:12032:448","str::matches":"2:12740:2319"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43990:10114","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:9937","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12365:9937","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12380:17203","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:72:1810":{"id":"0:72:1810","crate_id":0,"name":"get","span":{"filename":"src/lib.rs","begin":[73,0],"end":[75,1]},"visibility":"public","docs":"Returns the number of available CPUs of the current system.\n\nThis function will get the number of logical cores. Sometimes this is different from the number\nof physical cores (See [Simultaneous multithreading on Wikipedia][smt]).\n\nThis will always return at least `1`.\n\n# Examples\n\n```\nlet cpus = num_cpus::get();\nif cpus > 1 {\n    println!(\"We are on a multicore system with {} CPUs\", cpus);\n} else {\n    println!(\"We are on a single core system\");\n}\n```\n\n# Note\n\nThis will check [sched affinity] on Linux, showing a lower number of CPUs if the current\nthread does not have access to all the computer's CPUs.\n\nThis will also check [cgroups], frequently used in containers to constrain CPU usage.\n\n[smt]: https://en.wikipedia.org/wiki/Simultaneous_multithreading\n[sched affinity]: http://www.gnu.org/software/libc/manual/html_node/CPU-Affinity.html\n[cgroups]: https://www.kernel.org/doc/Documentation/cgroup-v1/cgroups.txt","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12696:27517":{"id":"2:12696:27517","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12032:448","self::pattern":"2:12360:17205"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:9937","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12746:32076":{"id":"2:12746:32076","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12360:17205","`DoubleEndedIterator`":"2:7752:127","prim@char":"1:12032:448","str::rmatch_indices":"2:12749:32077"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43918:10111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:9937","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12676:1810":{"id":"2:12676:1810","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41872:197"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41870:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10449:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10449:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12734:27515":{"id":"2:12734:27515","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41870:200","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:9937","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5546:32749":{"id":"5:5546:32749","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7529:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12667:32067":{"id":"2:12667:32067","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12693:2090":{"id":"2:12693:2090","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44022:2410","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12666:32066":{"id":"2:12666:32066","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12688:9966":{"id":"2:12688:9966","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12032:448"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43738:9958","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12781:1943":{"id":"2:12781:1943","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12321:133","`FromStr`":"2:12320:2466"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42015:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12320:2466","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12320:2466","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12756:32079":{"id":"2:12756:32079","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12769:27520":{"id":"2:12769:27520","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12032:448","self::pattern":"2:12360:17205"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41870:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:9937","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12365:9937","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12380:17203","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12680:27475":{"id":"2:12680:27475","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10449:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10449:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12682:27476":{"id":"2:12682:27476","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10449:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10449:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12692:29931":{"id":"2:12692:29931","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12691:29939"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44051:10117","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12713:2093":{"id":"2:12713:2093","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12360:17205","`DoubleEndedIterator`":"2:7752:127","prim@char":"1:12032:448","str::split_whitespace":"2:12691:29939","str::rsplit":"2:12719:27509"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43768:2414","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:9937","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12786:26977":{"id":"2:12786:26977","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12787:26978":{"id":"2:12787:26978","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12728:27511":{"id":"2:12728:27511","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12032:448","self::pattern":"2:12360:17205","str::rsplitn":"2:12731:27513"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43872:9950","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:9937","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5530":{"id":"5:5530","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5531:32746","5:5532:6723","5:5535:32747","5:5538:32748","5:5546:32749","5:5547:32750","5:5548:2439","5:5549:26974","5:5550:26975"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12790:11902":{"id":"2:12790:11902","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4597:11902"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44076:9887","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12709:6775":{"id":"2:12709:6775","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41872:197","prim@char":"1:12032:448","self::pattern":"2:12360:17205"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:9937","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12365:9937","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12380:17203","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12675:1851":{"id":"2:12675:1851","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12049:1636"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12672:27457":{"id":"2:12672:27457","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11915:17206"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12699:27518":{"id":"2:12699:27518","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12032:448","self::pattern":"2:12360:17205"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:9937","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12716:27507":{"id":"2:12716:27507","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12032:448","self::pattern":"2:12360:17205"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12176:9945","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:9937","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12791:32088":{"id":"2:12791:32088","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4594:32088"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44085:10026","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12694:32072":{"id":"2:12694:32072","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44032:10115","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5532:6723":{"id":"5:5532:6723","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7529:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:9937","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12669:32068":{"id":"2:12669:32068","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12667:32067"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12784:27398":{"id":"2:12784:27398","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39819:27405","Self::is_ascii":"2:12783:26972"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41870:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39819:27405","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12775:32085":{"id":"2:12775:32085","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12032:448","self::pattern":"2:12360:17205"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:9937","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12674:339":{"id":"2:12674:339","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12675:1851","`u8`":"1:12049:1636"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12759:32081":{"id":"2:12759:32081","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12702:27519":{"id":"2:12702:27519","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12032:448","self::pattern":"2:12360:17205"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:9937","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12365:9937","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12380:17203","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12705:2158":{"id":"2:12705:2158","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41872:197","prim@char":"1:12032:448","self::pattern":"2:12360:17205"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:9937","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12772:32084":{"id":"2:12772:32084","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12032:448","self::pattern":"2:12360:17205"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:9937","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12365:9937","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12380:17203","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12685:32071":{"id":"2:12685:32071","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12038:1531","crate::ops::IndexMut":"2:3099:11928","str::slice_unchecked":"2:12684:32070"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12719:27509":{"id":"2:12719:27509","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12360:17205","`DoubleEndedIterator`":"2:7752:127","prim@char":"1:12032:448","str::split":"2:12713:2093"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43786:9948","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:9937","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12365:9937","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12380:17203","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12760:32082":{"id":"2:12760:32082","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12032:448","self::pattern":"2:12360:17205"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:9937","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12365:9937","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12385:17202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12778:32086":{"id":"2:12778:32086","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12032:448","self::pattern":"2:12360:17205"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:9937","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12365:9937","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12380:17203","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12788:32087":{"id":"2:12788:32087","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4596:32087"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44067:10027","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12664:869":{"id":"2:12664:869","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12032:448"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12686:27498":{"id":"2:12686:27498","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12687:27499"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12690:6766":{"id":"2:12690:6766","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43754:2413","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12763:32083":{"id":"2:12763:32083","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12032:448","self::pattern":"2:12360:17205"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:9937","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12684:32070":{"id":"2:12684:32070","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12038:1531","str::slice_mut_unchecked":"2:12685:32071","crate::ops::Index":"2:3095:11927"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12731:27513":{"id":"2:12731:27513","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12032:448","str::splitn":"2:12728:27511","self::pattern":"2:12360:17205"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43890:9951","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:9937","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12365:9937","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12380:17203","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12740:2319":{"id":"2:12740:2319","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12360:17205","`DoubleEndedIterator`":"2:7752:127","prim@char":"1:12032:448","str::rmatches":"2:12743:32075"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43972:10113","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:9937","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12722:32073":{"id":"2:12722:32073","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12360:17205","str::split":"2:12713:2093","prim@char":"1:12032:448","`DoubleEndedIterator`":"2:7752:127","str::rsplit_terminator":"2:12725:32074"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43818:10109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:9937","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5548:2439":{"id":"5:5548:2439","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7529:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12737:27516":{"id":"2:12737:27516","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41870:200","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:9937","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12365:9937","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12380:17203","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12665:2174":{"id":"2:12665:2174","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12766:2139":{"id":"2:12766:2139","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12032:448","self::pattern":"2:12360:17205"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41870:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:9937","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12752:2097":{"id":"2:12752:2097","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12785:26976":{"id":"2:12785:26976","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12749:32077":{"id":"2:12749:32077","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12360:17205","`DoubleEndedIterator`":"2:7752:127","prim@char":"1:12032:448","str::match_indices":"2:12746:32076"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43936:10112","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:9937","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12365:9937","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12380:17203","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12689:10126":{"id":"2:12689:10126","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12032:448"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43744:10107","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"1:8493:2460":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:32440:2686":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:42058:2462":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:2558:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"7:31:19277":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:40540:10041":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"6:6059:11400":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:12281:8428":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:2567:141":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:44376:10140":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"20:3320:5319":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"6:4578:5310":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:2652:134":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:2799:243":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"20:1398:3890":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:41955:6842":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"20:3032:5292":{"crate_id":20,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:10411:8153":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:1821:10287":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"11:800:7734":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"20:1377:3888":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:43571:10091":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:7738:11946":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:40322:17271":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"20:1543:3904":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"6:5130:5334":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:5992:5876":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:43990:10114":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:14317:8952":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:22521:9986":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:4487:6868":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:41658:11968":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"16:6261:9244":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"20:2976:5287":{"crate_id":20,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:41116:9924":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:3032:123":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:4824:417":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:32328:10007":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"17:9934:8112":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:22465:9980":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"5:2043:2427":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"11:299:11201":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:8936:12029":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:22481:11488":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"16:6346:9251":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"11:673:2462":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:8171:11918":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:9770:140":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:46939:10208":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:11355:10325":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:1550:9644":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:8595:20351":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:4569:12003":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:4311:10298":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"16:2696:9057":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:12057:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:3443:2377":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"5:1511:9624":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:11170:2127":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:8220:2410":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"20:55:2736":{"crate_id":20,"path":["libc","unix","DIR"],"kind":"enum"},"16:2406:9045":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:7143:17322":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:9467:135":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"1:10822:2376":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"20:3355:5322":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Chdr"],"kind":"struct"},"17:14402:8975":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:22:728":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:21311:12041":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:10037:8121":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"6:563:3134":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:11453:7834":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:5500:10309":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"20:4995:6364":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:9599:6875":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"1:7643:2381":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:10473:7826":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:41849:9933":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"6:4666:5315":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:45954:10160":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"16:4921:9117":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:2350:207":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"16:6792:9326":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:14537:9007":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"16:3830:9097":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"6:569:3135":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:10772:8203":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:42186:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"18:690:7932":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:8896:20368":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:5240:209":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"5:3150:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"20:1550:3905":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:21773:12043":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"1:11998:26102":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:10662:8190":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:46092:10166":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:12032:448":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"6:7371:11449":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:10241:8114":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:3295:31332":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"6:6159:11434":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"16:7768:9074":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:5802:9903":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"14:165:19377":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:48086:10255":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:6540:2491":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:10097:10436":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"2:21370:12040":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"11:774:9625":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"11:1087:33207":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"18:624:33248":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"20:4101:5865":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:41641:9930":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:42225:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"16:7782:9465":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:7136:25866":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:6249:7814":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:2426:2068":{"crate_id":1,"path":["std","io"],"kind":"module"},"17:12209:8401":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:12125:9963":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:10449:245":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:39527:221":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"6:6047:11396":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"16:5760:20304":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:12044:8375":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:7723:2634":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:11245:8302":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:43611:10096":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:40518:10040":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:11388:11594":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"16:7613:9459":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:13677:8777":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:11887:8335":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:11711:8275":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:3441:7976":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"11:1883:2462":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:8300:10388":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"5:7333:216":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:43738:9958":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"16:8167:9527":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"18:652:7900":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:14101:8877":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:22983:193":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"6:6682:3008":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:4628:5313":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:12791:8519":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"16:2832:9063":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:46401:10181":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"6:4814:5331":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:23707:242":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:14111:8880":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:44328:10131":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:40334:10029":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"16:7722:9076":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:43637:10038":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:2948:9383":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:14325:8953":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:10789:20472":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:11144:10414":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:13633:8772":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"6:596:3139":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:42500:2484":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:3282:17246":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:46857:10207":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:46569:10186":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:13149:8598":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"5:1296:9634":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"5:1784:7752":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"2:21099:2695":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:41601:167":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:11574:8299":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:21492:9977":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"6:4922:11276":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"6:6741:3847":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:10469:8167":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:7895:125":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:32292:11210":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:46110:10167":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:2303:110":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"6:5111:11352":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"1:2600:7788":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:40381:106":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"20:4904:6358":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:44396:9969":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"11:687:9640":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:48211:10264":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:40648:9910":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"7:78:19284":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:3166:26518":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:11138:8255":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:1769:9753":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:6357:182":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:10780:10452":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:45758:10152":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"20:1410:3891":{"crate_id":20,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:8207:2413":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"11:2443:7734":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"1:5746:2485":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:2574:263":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"17:8660:20349":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:13163:8599":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:42838:11559":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:11605:26367":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"1:4050:11981":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:44148:17217":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"6:501:3127":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"6:654:3157":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:40527:2411":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:21768:2381":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"2:3045:2416":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:44511:11575":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:10279:8143":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:13056:8577":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:21362:2381":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"6:4947:11287":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"16:7128:10430":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"5:7518:7748":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"17:13891:8823":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"6:4388:5291":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:14014:8851":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:2622:2417":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"5:7529:249":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:1063:9635":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"16:7269:33235":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"16:2644:9055":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:11328:8278":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:4307:9892":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"16:2933:19443":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:3994:11977":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:12035:1145":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:41938:9640":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:44575:17450":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:22639:11491":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:44353:10132":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:10812:125":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"5:1522:216":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:48077:10254":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:4028:11978":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:41060:9919":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1:3425:2071":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:9608:8093":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"5:6525:7717":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:21364:12037":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"20:5033:6367":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","termios2"],"kind":"struct"},"11:0:2216":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"16:3065:7985":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"18:671:7929":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:39593:2343":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"17:13568:8737":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"11:364:7707":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:3060:137":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"5:4439:7741":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:9026:10428":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:6297:226":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:12025:8370":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"20:5439:6710":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:4038:11979":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:3394:2396":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"1:11370:10327":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:39407:17173":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"6:4364:5289":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"16:5995:9025":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"11:1910:9645":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:11915:17206":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"18:636:7922":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"5:898:2462":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"20:501:3128":{"crate_id":20,"path":["libc","unix","rusage"],"kind":"struct"},"6:7604:5356":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:8714:20363":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:2810:250":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"2:21810:30767":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:22131:12128":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"16:7503:9081":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:2187:632":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:14043:8859":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"11:742:9624":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"16:6279:9247":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"0:73:1828":{"crate_id":0,"path":["num_cpus","get_physical"],"kind":"function"},"16:5634:9128":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:10060:8122":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:5639:10310":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:849:9640":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"11:2352:9635":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"16:5798:9147":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:41624:9928":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"11:123:7705":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:22952:192":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:4744:11986":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:32346:6866":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"11:1603:9643":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:8403:2457":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"1:9094:183":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:11662:8304":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:7855:2374":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"1:415:181":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:6466:2495":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"16:7015:9353":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:1406:152":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"16:2810:9062":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:357:10271":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"16:0:2220":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:7026:7819":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:22594:30279":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:12766:8517":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:40315:10027":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:12253:8418":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"11:2548:11208":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"9:486:19290":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:14157:8889":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"16:6687:9300":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:2199:17349":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"1:12055:1691":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"5:1472:9625":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"11:875:9632":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:15:2322":{"crate_id":2,"path":["core","write"],"kind":"macro"},"16:5830:9152":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:9186:26632":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"5:3733:2427":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:9810:212":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"16:7651:9460":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:4798:7807":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:8850:2462":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"15:306:19397":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"16:7660:9461":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"11:2231:8160":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"11:2369:9650":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"2:2856:2631":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"6:4523:5303":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:14283:8940":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"16:6844:9328":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:43712:10103":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:11112:8253":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:6225:9905":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"6:4686:5317":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"16:8050:9514":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"6:7668:11467":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:859:6779":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:14174:8896":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:3099:11928":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"6:1718:3906":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:7689:7827":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:22274:12120":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"2:21155:30778":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"6:1596:3894":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"16:6386:9256":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:4460:2519":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:10098:8125":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:2561:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"1:12039:1617":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"17:13827:8803":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:12008:8368":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:14135:8884":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:42007:9938":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:11436:9955":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"2:4303:227":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"1:10076:10285":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"2:23014:194":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"17:10140:20402":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"1:9971:10065":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"16:5435:9126":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"16:6545:9274":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:880:9626":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:12811:8522":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:8959:2488":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:8845:11910":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"7:0:1681":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:12485:8475":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:43972:10113":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"1:12038:1531":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"6:6666:3818":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:12075:8379":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:4167:11994":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"6:7556:6367":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:13163:7798":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"5:4361:270":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:11911:8349":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:11743:8312":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:3510:2069":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:7380:26119":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:6811:12035":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:44538:128":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"5:6681:7717":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:8326:10398":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:11382:11593":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:43511:10089":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"16:5648:9132":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"20:3296:5317":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"5:4045:7717":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"5:6346:12131":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"16:5963:9168":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:44363:10136":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:44515:11576":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"6:5829:5840":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"20:3348:5321":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Chdr"],"kind":"struct"},"1:8562:2464":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"20:483:3125":{"crate_id":20,"path":["libc","unix","timeval"],"kind":"struct"},"6:5068:5336":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:7901:10291":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"2:8168:2465":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"6:495:3126":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:11382:8285":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:10986:10416":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"6:4516:5302":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"10:0:2215":{"crate_id":10,"path":["adler"],"kind":"module"},"5:687:116":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:11099:8252":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:8001:10342":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:7673:17320":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"5:1481:9626":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:41870:200":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"16:8072:9515":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"14:202:17219":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:11262:8270":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"19:0:1125":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:8213:2414":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:5051:10304":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"5:1310:9639":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:22230:2381":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"1:4637:11069":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"1:10757:11588":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"17:10699:8196":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:48117:10258":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"5:4015:7734":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"11:1891:7734":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:9922:8109":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"11:2498:19367":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"1:8006:10343":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"18:564:7909":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:46522:10185":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:8978:113":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"20:4943:6362":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"20:3137:5301":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"6:1639:3897":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:10095:10437":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"9:393:19292":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:9459:30552":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"6:6934:11446":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:10831:27161":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"2:46600:10187":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:12056:1241":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"16:5661:9137":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"5:5956:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"11:1566:19372":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:22199:17348":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"5:276:2635":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:9575:33240":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"18:538:7907":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:14077:8872":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:12591:117":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:10367:8149":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"6:5982:5874":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"16:6243:9234":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:48106:10257":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:1534:2462":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"6:6012:11375":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:22921:195":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"2:44042:10116":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"6:5052:11330":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:2564:159":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"6:1521:3886":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:40498:10038":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"6:5140:11361":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:43590:10094":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:40263:10023":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:1966:204":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:13547:8727":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"18:609:7916":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:1873:10288":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"5:5387:17191":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:12385:17202":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:11152:8256":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:44495:11571":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:22185:12129":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:41830:9931":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:39549:220":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:2942:9382":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:13793:8800":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"5:7429:2350":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:43650:10098":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"20:4209:5876":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:30506:6728":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:3482:2380":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:4915:12007":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"6:6781:3822":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:10371:8150":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:5571:12022":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"20:5064:6369":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:11474:8048":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:12577:8491":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:2971:17340":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:9278:7953":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:3310:17171":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:4151:11992":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:41074:2072":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"6:4610:11237":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:12960:8563":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"20:3443:5332":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:11307:8275":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"14:40:8350":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"16:5712:9138":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:30540:6729":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:11390:8287":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:1648:6725":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"16:7474:9442":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:10751:8201":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"16:4462:9103":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"11:490:150":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:43343:10088":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"18:113:24330":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"20:4272:5898":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:22672:11971":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"6:6764:3819":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:1760:10284":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1:9021:10427":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"6:5867:5863":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:43103:10077":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:6596:2496":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"20:3187:5308":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:8292:10394":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"6:6120:11423":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:6162:7813":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"16:7006:9350":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"6:542:3131":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:5753:2486":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:11789:8316":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"6:5044:11328":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:12045:792":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"17:12137:8387":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:10617:8181":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"17:12438:8463":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"20:5494:6712":{"crate_id":20,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"5:2970:11475":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"20:1490:3898":{"crate_id":20,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:8858:10418":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"6:548:3132":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"6:7639:5359":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:11034:7829":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:7732:11908":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:5446:111":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:3163:26515":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:9069:11580":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"6:5969:5872":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"18:736:24339":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"16:6968:20310":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"20:3482:5336":{"crate_id":20,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:3491:26253":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"17:12423:8459":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:23262:10005":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:4231:10297":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:23076:196":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"17:9489:33239":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:9373:8082":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:8137:2441":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:32353:10009":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"18:515:7897":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:557:10274":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:43918:10111":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"18:599:33247":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:6868:6363":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"16:7102:20311":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"20:3489:5337":{"crate_id":20,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:5987:226":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:6610:2497":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"17:12466:8470":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"16:2339:9037":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:14379:8974":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"16:3315:9092":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"17:11368:8282":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"11:844:11913":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"5:3576:179":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"6:5897:5866":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:4042:11980":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:2883:9373":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"20:1558:3906":{"crate_id":20,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"20:4974:6363":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:21490:12038":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:11816:8322":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"20:3019:5291":{"crate_id":20,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"16:7342:33232":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:14127:8883":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:4845:31320":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:11688:20376":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:2386:201":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"20:1504:3899":{"crate_id":20,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:13256:11914":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:13201:148":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"5:7613:7752":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"2:10890:9951":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:9753:8096":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"18:548:149":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:4469:11997":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"5:1434:9640":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:0:530":{"crate_id":2,"path":["core"],"kind":"module"},"2:4040:9888":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:1538:6779":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"20:4278:1870":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:2907:17331":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"5:7341:9743":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"5:2139:7731":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:44216:10128":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:3270:143":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"18:0:2222":{"crate_id":18,"path":["memchr"],"kind":"module"},"6:1501:3885":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:13877:8820":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"5:7325:6779":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"11:2554:33202":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:12686:8506":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:1541:7734":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:9651:8094":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:4431:7773":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"5:7462:9744":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"6:4529:5304":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:43692:10102":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:13898:8825":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:12672:8208":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"6:4710:5319":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:13229:8606":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"16:2618:9054":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"20:3160:5304":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:2150:20430":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"6:4616:5312":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"16:2722:9058":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:434:7960":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"6:6228:1870":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:4455:5173":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:3565:7977":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:32339:10008":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"17:9824:20383":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"20:4824:2917":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"5:3682:7717":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:7679:11468":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:47735:10247":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"20:3363:5323":{"crate_id":20,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:11282:8272":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"11:1066:19371":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:11158:10415":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"18:644:7900":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:4703:11997":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:10629:8184":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"2:48132:10259":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:12699:8507":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"16:5419:8081":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"11:2562:11211":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:43726:10106":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"20:0:874":{"crate_id":20,"path":["libc"],"kind":"module"},"2:44051:10117":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"20:3071:5295":{"crate_id":20,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:3276:17247":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"6:4745:5324":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:41067:9920":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:46425:10182":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:42264:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"5:35:7713":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:4087:17170":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:4491:11998":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"20:489:3126":{"crate_id":20,"path":["libc","unix","timespec"],"kind":"struct"},"1:10968:25991":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:10439:2381":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:14091:8874":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:8453:2458":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"20:1386:3889":{"crate_id":20,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"6:1507:11225":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:13423:8624":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"6:4955:11292":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:41098:7782":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:48021:10252":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:11762:8315":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:12320:2466":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:11516:10294":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:12831:8523":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:44800:10151":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"16:6583:9276":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"5:5149:2483":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:48181:10262":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"16:7436:9179":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:40491:2375":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"16:3049:19445":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"5:7291:7734":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:909:9641":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:42619:6856":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:40235:10020":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"14:31:9614":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:3014:17172":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"16:6456:9262":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"5:5383:17190":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"20:1514:3900":{"crate_id":20,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:40671:10052":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:504:7961":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"6:4914:11271":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"5:1019:7717":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:44291:9968":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"16:3764:9095":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"6:4351:5288":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"5:7629:7756":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:14461:8991":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"16:6352:9252":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:31136:2695":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"1:10578:7827":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"16:7862:9477":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"5:3602:9640":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:44519:11577":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:11216:8264":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:47093:10211":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"16:2766:9060":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:13869:8817":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:45848:10156":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"6:6222:5898":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"6:1576:3892":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:40710:9914":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:11024:8243":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"16:8281:9536":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:48097:10256":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:10054:11961":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"6:4998:11323":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"6:119:2812":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"1:4180:11995":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"16:6415:9259":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:11075:8250":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:44199:10127":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"20:614:3157":{"crate_id":20,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:43140:2458":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:44775:10150":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:39571:222":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"16:7694:9085":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:13189:8601":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:13488:8675":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:1758:10283":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:7710:142":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"16:4585:9107":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:1075:7963":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"20:5046:6368":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:41089:2442":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:3239:2436":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"16:3915:9099":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:10011:149":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"20:3127:5300":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"5:629:9720":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"6:4755:5325":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:922:9627":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:9128:2387":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:5613:2396":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"17:11846:8326":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:13852:8812":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"5:1450:6779":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"5:0:313":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:9048:25996":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:3980:11975":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"16:3888:9098":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:3095:11927":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:11227:8268":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:9034:10430":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"6:1697:3903":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"16:8097:9518":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:11816:7838":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:10508:8172":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:23231:186":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"6:4724:5320":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"20:4870:3819":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"10:44:9653":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"6:4401:5292":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"5:3186:9645":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:2518:2070":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:43672:10100":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"6:5974:5873":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:12065:9959":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:11619:10328":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"16:6017:20305":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:12374:7935":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"20:3433:5331":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:3066:139":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"20:4120:5867":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:12124:8386":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"20:3006:5290":{"crate_id":20,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"16:3600:9094":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:46349:10179":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:40341:10030":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:30632:30296":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:39625:10016":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"6:4860:11260":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:504:7731":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:22610:30285":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"6:4878:11267":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:40220:9887":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:8177:17318":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"11:837:9627":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:9391:135":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"16:7284:6842":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"20:3414:5329":{"crate_id":20,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:11491:8295":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"5:781:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"6:4939:1095":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"5:1680:7717":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:14523:9004":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:8330:2917":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"16:8239:9421":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:42598:6854":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:11587:8301":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:21920:2381":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"16:7360:33233":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:11273:8271":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:1969:203":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:21138:30777":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:14002:8850":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:7838:2372":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"11:1896:7752":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"1:8190:2411":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"1:8169:2379":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"17:8687:20362":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"16:6879:9332":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"20:5447:6711":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:14479:8997":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:11313:10460":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:4235:6865":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"20:4910:6359":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:12063:8376":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:11408:20373":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:40639:9909":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"16:4527:9105":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"11:1582:9642":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"18:614:33246":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"16:5982:9175":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:45902:10158":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:10293:8094":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"6:4989:11317":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"16:6226:9228":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"16:4986:9119":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:8984:10423":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"17:11001:8242":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:1054:9634":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"5:3191:31704":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"6:6943:6368":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"20:3408:5328":{"crate_id":20,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:48158:10261":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:1184:7965":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"20:4042:5840":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:261:7956":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:43580:10093":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:2178:7970":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:10739:8200":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:21153:30764":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"5:2149:9728":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"5:5802:257":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"11:1917:9646":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:8927:20369":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:42422:90":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:11192:7978":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"16:2284:19416":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"8:0:2213":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"6:1913:3960":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"16:2907:9066":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:3063:138":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:12659:8501":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:10835:9949":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:43890:9951":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:12050:1633":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:40471:10037":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"16:2428:9046":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:43682:10101":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:45932:10159":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"20:1635:3960":{"crate_id":20,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"6:4854:11257":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"6:6913:6366":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"18:590:7910":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"5:3338:7752":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"16:6569:9075":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"18:766:24340":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"6:6169:5877":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:12946:8561":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:10448:8160":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"5:3246:9647":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"9:52:19309":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:7915:10341":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:13974:8842":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:12712:8509":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"6:5033:5335":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:8802:205":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"20:4095:5864":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"5:5339:7717":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"16:2548:9051":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"6:555:3133":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"16:5727:9141":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:43786:9948":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"16:6960:9339":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"6:4434:5294":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:14222:8933":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:30562:6863":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"17:12099:8383":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:8954:20370":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:7429:2441":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:41807:10296":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:11051:7831":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:12042:688":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:7752:127":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:39507:218":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"6:0:874":{"crate_id":6,"path":["libc"],"kind":"module"},"11:2569:2349":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:4639:11071":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"5:2974:31707":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"20:3197:5309":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"20:3119:5299":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"20:3380:5325":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:14057:8866":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"16:5322:9124":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:3674:6779":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"5:1531:9725":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:12961:161":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:2878:9376":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"16:2305:19442":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"16:7568:9084":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:9751:232":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"6:4595:11230":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:42083:202":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"15:327:19401":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"18:719:7939":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:44694:233":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:2012:7966":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:2284:103":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:4376:7772":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"6:574:3136":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:13668:8773":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:44702:213":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"11:2469:7752":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"2:2811:115":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"6:6658:3050":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:44060:9965":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"20:4817:6357":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:5381:10305":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"16:2596:9053":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:7663:10329":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"11:1025:9634":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:12453:8468":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:41108:9922":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"6:4480:5298":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:9196:11584":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:43936:10112":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"5:7370:6779":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:47937:10250":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"16:8134:9523":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"20:5479:5359":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"5:7262:7314":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:3160:29758":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:13711:8780":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"6:4932:11282":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"18:96:24329":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:6543:2492":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:11352:8280":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:21136:30772":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"20:1431:3893":{"crate_id":20,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"6:5955:11374":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:10762:11590":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"17:12374:8434":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:9099:240":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:9800:126":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:11307:10320":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:44085:10026":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:40860:9916":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:13555:8730":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:7644:10273":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"11:883:9633":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:1567:9647":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"16:7523:9454":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"20:542:3132":{"crate_id":20,"path":["libc","unix","pollfd"],"kind":"struct"},"11:102:11200":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:44758:177":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:588:11901":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"20:3154:5303":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:9804:6854":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"17:14069:8869":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:10548:8175":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:11338:20497":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"11:2304:9363":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"2:2281:102":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:2903:12034":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:2853:2681":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"16:6318:9249":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:3936:11972":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:40587:9900":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:4159:11993":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:43158:10087":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:1481:1834":{"crate_id":2,"path":["core","mem"],"kind":"module"},"5:4376:7741":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:11537:10295":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"5:7279:9742":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:21481:2381":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:10727:8199":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:2392:208":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:9104:241":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:9795:117":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:44067:10027":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"16:2788:9061":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:13803:8801":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"14:0:2218":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:4964:12013":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:42303:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:40247:30294":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:2641:122":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"6:6927:11443":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"17:12998:8567":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:4906:12006":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:40850:2412":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:8958:9937":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:40610:10049":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:951:9633":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:13299:8622":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"20:3461:5334":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:507:3128":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"20:536:3131":{"crate_id":20,"path":["libc","unix","iovec"],"kind":"struct"},"16:2881:9065":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"9:177:19358":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"20:590:3139":{"crate_id":20,"path":["libc","unix","protoent"],"kind":"struct"},"17:13136:8597":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:10538:2432":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"1:3201:2435":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:9267:84":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:9973:8116":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:10059:9941":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:2809:251":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:7931:2427":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:10230:7787":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"20:521:3129":{"crate_id":20,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"6:5015:5332":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"20:3180:5307":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"16:2450:9047":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"6:483:3124":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"9:237:2458":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:43754:2413":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:11972:8363":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:14515:9001":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:7848:2370":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:12102:9962":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"16:6361:9253":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"6:4698:5318":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:6420:7780":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"2:11885:17412":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:9351:7957":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:12474:8472":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"5:7311:31706":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:8795:20365":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"5:785:7720":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"18:699:7933":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:13576:8738":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"6:4461:5296":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"5:1419:2462":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:12087:8380":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:47483:10245":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:4663:17265":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"11:1107:9637":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:3280:2433":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"16:4641:9109":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:1796:10285":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"9:426:19293":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"5:1490:9641":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"6:6804:6359":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"11:1903:9644":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"6:1734:3907":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:11935:8350":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:39483:216":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:10155:10438":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"2:40226:10019":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:2911:17330":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:42066:9640":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"16:6425:9260":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"16:4719:9110":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:7906:10340":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"20:582:3138":{"crate_id":20,"path":["libc","unix","servent"],"kind":"struct"},"6:489:3125":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:256:7955":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:10724:9946":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:48196:10263":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"18:727:7942":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:12294:8429":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:2932:17334":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"20:5473:5358":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:12053:1632":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"5:7476:30993":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:4488:5299":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:46255:10177":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:2861:112":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:11340:10324":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:7489:2478":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"14:221:9621":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"16:8205:20316":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:12532:8481":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:2911:7806":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:4161:9890":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"20:563:3135":{"crate_id":20,"path":["libc","unix","sigval"],"kind":"struct"},"17:9532:33238":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:2954:17336":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"16:2969:19444":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:46471:10184":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"16:3655:7990":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:47983:10251":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:13010:211":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:41988:6843":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"20:4229:5877":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:2209:2154":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:12431:17211":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:12935:8559":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"6:6691:11442":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:40578:9898":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:14421:8980":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:48273:10266":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"5:4406:2396":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"18:521:24341":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:1746:17358":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:3431:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"17:10398:8152":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"6:4738:5323":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"18:507:7900":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"16:2526:9050":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"16:2504:9049":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"16:5588:9071":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"11:396:7709":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:30574:30283":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"17:12226:8409":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"5:1110:31616":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"20:3215:5311":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"20:3401:5327":{"crate_id":20,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"5:6599:6779":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:21121:30774":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"1:6426:2072":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:13915:8828":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:8828:10415":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:12155:8395":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"11:2124:9363":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:9274:10286":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:30546:6730":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:12047:794":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"1:3930:11973":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:8232:10390":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:10904:9952":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:45972:10161":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"6:4893:5870":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:6644:239":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"5:2698:11482":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"6:5152:11366":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:4312:9893":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:2937:17335":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:8973:10420":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:5825:2494":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:11202:8259":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"6:1632:3896":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"5:6008:17642":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"6:6711:6357":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:867:9625":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:13072:8578":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:10642:2414":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"17:9661:33241":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"20:4131:5868":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:11063:8249":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"20:3209:5310":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"16:7513:9453":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"5:4177:2396":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:7843:2373":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:9479:7825":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"16:6041:20306":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:9272:91":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"11:2423:6779":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"6:4808:11239":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:11215:11592":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"17:14270:8934":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:3968:2396":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:10930:8238":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:8286:11996":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:723:150":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:5308:126":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"16:6376:20307":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:39646:10018":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:42108:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"20:1574:3907":{"crate_id":20,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"6:1703:3904":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"11:811:7752":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:8215:31496":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"6:4535:5305":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:928:11913":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:12014:25999":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"6:1650:3898":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:10840:27163":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:8796:10413":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:4386:6866":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:43128:153":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"5:4999:2396":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:8847:9936":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:6415:11487":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:12046:793":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:12176:9945":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"18:481:7898":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:40277:10024":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:11548:8298":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:42612:6855":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:13950:8834":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:46055:10164":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:2895:9377":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:6430:2489":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:13011:8568":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:6896:7818":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"20:4203:5875":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlattr"],"kind":"struct"},"6:4506:5301":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:10266:8142":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:11901:9956":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:40696:7920":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"20:5004:6365":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:40568:10045":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"6:4830:11244":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:26109:272":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:8991:25988":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:22556:9988":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"6:7598:5355":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"20:477:3124":{"crate_id":20,"path":["libc","unix","utimbuf"],"kind":"struct"},"20:3370:5324":{"crate_id":20,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:10685:9945":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"16:8154:9524":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:7259:17314":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:40680:9912":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"14:160:9614":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"20:1479:3897":{"crate_id":20,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:9986:8118":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:43362:9942":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"20:4165:5870":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlmsghdr"],"kind":"struct"},"1:3988:11976":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"20:4174:5871":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlmsgerr"],"kind":"struct"},"13:0:2211":{"crate_id":13,"path":["std_detect"],"kind":"module"},"17:11236:8269":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"6:4977:11308":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:42605:6853":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:4440:5295":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"5:7271:6779":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:13245:8608":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"5:207:7715":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"20:1522:3901":{"crate_id":20,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"5:3813:7752":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"2:21383:9977":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:48059:10253":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:14297:8946":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"16:5017:9120":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:10341:8148":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:893:7734":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:9913:8107":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:2958:17337":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:14309:8949":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"6:4824:11241":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"16:149:7701":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"6:6107:11419":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:43836:10110":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"20:4847:3847":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:5128:210":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"1:4383:10299":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"9:450:19291":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:46073:10165":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:8146:2443":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:39368:17245":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"6:4603:11235":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:10792:2374":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"2:4052:9889":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"16:2670:9056":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:8846:12021":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:32332:9421":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:39819:27405":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:4700:12008":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:14347:8959":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"16:2380:9044":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:3056:2632":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"10:36:11213":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:10953:10309":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"1:5415:10307":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"16:6929:9336":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:7207:30935":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:12036:338":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:12033:1652":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"16:4806:9113":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:46203:10175":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:42866:30297":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"6:527:3129":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"16:6467:9263":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"16:5363:9125":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:11394:134":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"16:6560:7704":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"17:11618:8302":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:21922:12039":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"6:1591:3893":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"20:3104:5297":{"crate_id":20,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:12044:795":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:1902:11956":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"1:3323:2421":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:637:10276":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:23169:188":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"6:4764:5326":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:2209:7973":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"16:5403:8080":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"5:3589:2462":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"16:6944:33229":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"20:527:3130":{"crate_id":20,"path":["libc","unix","hostent"],"kind":"struct"},"2:44563:10142":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"5:5987:2483":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:13452:8644":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"6:4841:11252":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:11536:8297":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"16:5743:9143":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:9999:8071":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:12380:17203":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:42848:6863":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:11234:158":{"crate_id":1,"path":["std","sys","unix","time","Instant"],"kind":"struct"},"17:10562:8176":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"5:261:7717":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:12054:844":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"6:1674:3900":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"11:832:9641":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:40720:10053":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"16:6531:9272":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"5:1382:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:12725:8510":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"20:5485:5360":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:44503:11573":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"16:536:9023":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"11:351:33204":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"5:1281:9635":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"5:3220:9644":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:1678:1182":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:22053:12124":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"6:4473:5297":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:12238:8412":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:11197:2387":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"6:5004:11326":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"17:9446:8090":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:3192:217":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"11:2542:11207":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:23107:190":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"17:12847:8528":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"16:7554:9083":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:42381:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:4625:11977":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"5:7505:9749":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"9:330:11214":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:10521:8173":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:12877:8547":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"6:6136:11428":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"11:2151:9635":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:48143:10260":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:10762:9947":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"16:5612:9073":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:12049:1636":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"20:4806:6356":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"20:3059:5293":{"crate_id":20,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:14025:8855":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:10918:9953":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"6:7645:5360":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:11296:8273":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:40628:10050":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:44185:10124":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:4440:6867":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"1:10767:2370":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"20:1444:3895":{"crate_id":20,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:939:9630":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:10430:10413":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"6:4783:5328":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:8535:2461":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:40596:10046":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"5:1126:31736":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:10127:8128":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"16:6401:9069":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:8226:10388":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"16:3232:9034":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"18:491:7899":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:363:10272":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:21309:2381":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:23138:187":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:40874:9917":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:1072:9639":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:2927:17333":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:39467:219":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:8385:12017":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:41946:6779":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"6:1528:3887":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:39454:10012":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"16:5088:9122":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:5625:226":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:10019:153":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"6:6813:6360":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"20:3308:5318":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:46827:10206":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"5:7445:7743":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"6:5146:11363":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:44507:11574":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:12306:8432":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:7865:2371":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:13759:8789":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"6:6819:6361":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:2889:17329":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:13967:8841":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"20:3111:5298":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:3670:11969":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:7754:10338":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:3265:260":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:43663:10099":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:47017:10209":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:3347:17174":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:10421:8028":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:42074:6779":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"17:9052:20350":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"6:7692:11472":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"16:2321:9035":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"20:3471:5335":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:1556:9645":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"20:4107:5866":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:10495:8170":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"6:7388:6711":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"5:6866:7764":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"5:5872:7734":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"16:6818:9327":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:8308:10396":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"5:2057:9727":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"2:41998:6841":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:10802:136":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"2:41930:2462":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"17:10441:8157":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"5:4207:2396":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:23045:191":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:12048:790":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:2962:17338":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"16:6600:20308":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"16:4745:9111":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"20:1361:3886":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:45778:10153":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:43768:2414":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"1:2368:2361":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:1956:9756":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"20:1537:3903":{"crate_id":20,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:2816:253":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"1:2370:2362":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"6:5075:5337":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"6:4884:11268":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"20:3174:5306":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:7714:162":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:8904:12028":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:13175:8600":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"16:7090:9362":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:39632:10017":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1:4821:11982":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"6:1710:3905":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:46033:10163":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"20:3065:5294":{"crate_id":20,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:22548:9987":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:10384:8151":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"16:6742:9313":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"16:8181:9088":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"16:5673:9072":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:10535:8174":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:10950:8239":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"20:5019:6366":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:5104:11349":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"18:755:7947":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:9960:8115":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:12031:1028":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:4635:11067":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"16:5384:20302":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:41771:30985":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"2:2197:17348":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"16:4053:9100":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:10535:2436":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"6:6700:6356":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"11:434:33209":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"6:4549:5307":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"20:469:3123":{"crate_id":20,"path":["libc","unix","group"],"kind":"struct"},"2:4:1108":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:5395:10306":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"6:7651:11462":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:1641:631":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"5:2178:11474":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"16:7492:9450":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"11:430:33208":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"20:134:2812":{"crate_id":20,"path":["libc","unix","FILE"],"kind":"enum"},"17:13990:8844":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:9814:6858":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:43111:10079":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:9164:10433":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"16:7054:9357":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"20:3257:5314":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:10904:8235":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"16:5816:9151":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"20:4151:5855":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"16:7792:20314":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:44483:11568":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"6:5085:11335":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:10321:111":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"17:10604:8180":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"17:10013:8094":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:2915:17332":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:3735:10294":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"20:4180:5872":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:11981:10467":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:11045:7830":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:2522:17276":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"6:7702:6712":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:46379:10180":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"16:5574:9068":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"6:6889:6364":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"16:7828:9473":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"16:8294:134":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:9071:8080":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:1040:9363":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"5:2231:33173":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"20:1472:3896":{"crate_id":20,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"16:6083:19415":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:11593:10461":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"17:8849:20367":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:645:11904":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"16:5866:9159":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:22359:9978":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:7717:11907":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:40367:10034":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:12984:8566":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:14119:8881":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"5:7543:9750":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"11:1051:9635":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:6718:2917":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:42461:97":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"16:6204:9213":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"20:3389:5326":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"20:5455:5355":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:3278:2432":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"16:8115:9520":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"20:4077:5863":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:22660:10001":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"16:6171:212":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:30279:11970":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:22245:12119":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"5:4087:9640":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"20:2982:5288":{"crate_id":20,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:9474:2373":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"17:3232:7974":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:9147:10432":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:2806:2630":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"20:1531:3902":{"crate_id":20,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:9173:7950":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"16:2744:9059":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"5:2968:31738":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:40461:7774":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"16:7462:9441":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:12971:8564":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"16:5049:9121":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"20:568:3136":{"crate_id":20,"path":["libc","unix","itimerval"],"kind":"struct"},"5:4247:2462":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:10247:7788":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"6:6100:11418":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:6146:7798":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"20:3080:2080":{"crate_id":20,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:4902:5871":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"16:7677:216":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:10198:8136":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:46303:10178":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:9103:7948":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:2920:9378":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:41687:11558":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:44745:10147":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"6:4968:11302":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:14449:8989":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"6:6898:6365":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:6248:5899":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:46233:10176":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:903:7752":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"1:1909:701":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"17:11317:8277":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:11476:10293":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"11:1887:6779":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:8872:10311":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:43150:10086":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"6:5859:5862":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:5780:2487":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"6:6798:6358":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:13041:8573":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"18:707:7935":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:40558:10043":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:9522:8091":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"14:187:19384":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:4064:107":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"20:4138:5869":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"16:2472:9048":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"16:7067:9360":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:12112:8385":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"16:4497:9104":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"5:7554:9751":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"11:2326:9634":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"1:6070:7809":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"17:9208:7951":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:11049:8245":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:44491:11570":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:12268:8424":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:4192:9891":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"11:2383:2462":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"1:3732:10293":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:41794:10068":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"17:13724:8785":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"16:7391:20312":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:42921:134":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"6:5023:5333":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:43600:10095":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:10686:8194":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"6:4566:5309":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:44032:10115":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:9763:33242":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:45870:10157":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:42342:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:40287:10025":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:10617:9640":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:9887:8106":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"16:7544:9455":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"18:574:7900":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"5:7023:7768":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:13152:113":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"20:1416:3892":{"crate_id":20,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"16:3032:9089":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"5:825:7723":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:10338:26686":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"1:2662:2426":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:2380:2367":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"11:1728:152":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"11:710:9623":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:3540:7734":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"16:7597:33230":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:9897:20385":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:12497:8477":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:12185:8399":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:22116:2381":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"11:2140:9634":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:10164:7784":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"5:2469:11479":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:11477:17199":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"17:9853:20384":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"2:46703:10189":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:21109:30774":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"20:138:2813":{"crate_id":20,"path":["libc","unix","fpos_t"],"kind":"enum"},"17:13275:8275":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:14500:9000":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:2859:2683":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"0:0:1950":{"crate_id":0,"path":["num_cpus"],"kind":"module"},"6:4676:5316":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:12738:8512":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"5:1265:9363":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:12912:8558":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:3966:11974":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"11:1160:9639":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:2946:134":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"1:12037:1498":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:5568:2861":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:11612:10328":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:9946:8114":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:9702:8095":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"11:1923:9647":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"1:8476:2459":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:2944:232":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"17:11992:8364":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:9109:158":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"16:7582:9456":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:42903:6863":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:40549:10042":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"6:4543:5306":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"20:5467:5357":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"6:6128:11425":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:22145:17348":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"1:12052:1635":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:12646:8498":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:9454:31493":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"16:6485:9070":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"20:4069:5862":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:7633:5358":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:7610:5357":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:3366:2442":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:7861:175":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"6:7616:11457":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"17:10647:8186":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"20:3092:5296":{"crate_id":20,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:8891:10419":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:1760:11485":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"20:1350:3884":{"crate_id":20,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"16:6332:9067":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:43358:11567":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"6:4375:5290":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:22573:30286":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:9243:7952":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"13:110:33213":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:9329:2413":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"6:6086:11407":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"11:1142:9638":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:2899:12032":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"16:4774:9112":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:10431:8155":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"16:5121:9123":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:43872:9950":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"20:3226:5312":{"crate_id":20,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:42015:232":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"18:582:2695":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:8237:11967":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"20:3425:5330":{"crate_id":20,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:22497:9981":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:2202:2352":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:42147:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:4924:850":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:13287:8615":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"6:588:3138":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"18:531:7904":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"6:6071:5322":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:10228:8140":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:44684:225":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:9004:20372":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:31108:202":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"17:14146:8888":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"5:678:256":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:13779:8797":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"6:1514:11228":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"16:6189:9211":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:2821:2679":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"16:4344:9101":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"13:226:11199":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:12360:17205":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:22143:30955":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"16:7621:20313":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:40398:30993":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:10715:8198":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"6:580:3137":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"20:1368:3887":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"6:4647:5314":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:8979:20371":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:42943:6864":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:44499:11572":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:22533:30984":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:10166:20403":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"6:6079:5321":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"16:7884:20315":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:2570:264":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"5:2978:31708":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:7540:10464":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"9:357:19306":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:11873:8334":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"15:394:19407":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"6:1546:3889":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:400:7958":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:2521:2381":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:8814:10414":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"4:0:2212":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"17:11640:7978":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:13216:8605":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:533:7801":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"1:2354:2357":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"6:1496:3884":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"11:787:9626":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:12003:11909":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:7923:2425":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:3199:2434":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:2807:2678":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"5:2251:11478":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:10944:7577":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:12051:1634":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:4883:2444":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"2:46447:10183":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"16:4417:9102":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:11290:7832":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"11:700:6779":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:10085:8124":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:41083:9921":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"20:1355:3885":{"crate_id":20,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:14164:8891":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:8920:12027":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:1664:3899":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:46781:10205":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:7529:7962":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"14:7:9614":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:44022:2410":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:12948:146":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"20:5461:5356":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:1819:10286":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"17:13686:8778":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"5:7492:9747":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:12555:8484":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"12:0:2217":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"16:6901:9077":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:11403:9954":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:14034:8858":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:8545:2462":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"16:6268:33234":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:836:2462":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:11359:20498":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"20:5417:3083":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:14470:8995":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:7878:136":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"6:5123:11358":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:11178:11577":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"2:44264:10130":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:5431:10308":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"20:4887:3822":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"16:3797:9096":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:42878:9492":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"5:881:7725":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:10963:8240":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"5:6479:7734":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:12599:8492":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:13907:8826":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:12173:8396":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"16:3461:9093":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:7677:17319":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:8826:20366":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"9:0:2214":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"16:6499:9087":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:13114:8586":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"5:6112:2396":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:2205:2353":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:43744:10107":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:1545:7752":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"16:2864:9064":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"5:1146:31608":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"5:4860:223":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"6:5891:5865":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:13612:8767":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:1555:2396":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"6:7365:6710":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:4129:25874":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:40428:1932":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"6:475:3123":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:12751:8514":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"3:234:232":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:43818:10109":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:12197:8400":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"20:3451:5333":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:13694:8779":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:40661:10051":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:7599:7823":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"5:7417:2349":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"6:1570:3891":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:47625:10246":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"20:549:3133":{"crate_id":20,"path":["libc","unix","winsize"],"kind":"struct"},"17:0:2221":{"crate_id":17,"path":["object"],"kind":"module"},"2:7805:2633":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:44787:9652":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"1:3241:2437":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"20:574:3137":{"crate_id":20,"path":["libc","unix","tms"],"kind":"struct"},"17:11449:20374":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"18:681:7930":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:9087:8081":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"11:856:9630":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"18:660:7923":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"16:5939:9019":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:12514:8480":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"16:6156:9206":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:7668:10331":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"16:7534:9082":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"6:6263:11436":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:9802:6853":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:44487:11569":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"5:6998:7765":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:13817:8802":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"20:1436:3894":{"crate_id":20,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"20:4925:6361":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:46003:10162":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"6:4496:5300":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:5971:7814":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:22412:9979":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:12983:30354":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"16:4613:9108":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:45802:10154":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"20:4797:3008":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:13102:8584":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"16:4835:9114":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:44076:9887":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"16:2574:9052":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:9456:33237":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:21167:30769":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"2:44342:17218":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:8766:20364":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:2352:2356":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"17:10479:8168":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"16:6513:9264":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:2586:2424":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:12889:8549":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:13203:8604":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"6:4449:2080":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:8011:2428":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:2693:9757":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"6:7622:11458":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"5:5645:7750":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:9808:6856":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"20:4193:5874":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:11720:20377":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:22008:12123":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"17:14435:8982":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:2864:2685":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"20:3086:5173":{"crate_id":20,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:40307:9887":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:10247:12024":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"16:7708:9086":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:8352:10300":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"16:4557:9106":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:2200:135":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"20:4781:3818":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:10187:8134":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"6:5885:5864":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:7343:3083":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:13035:9974":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:40386:10035":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"6:1682:3901":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:47277:10213":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"16:2359:9043":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"11:1676:7711":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"6:1604:3895":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:43562:10090":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:10738:10447":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:5632:7814":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:13923:8830":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:40299:10026":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:48234:10265":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"9:507:9707":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:6194:10316":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:5518:2396":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"20:3334:5320":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"20:3238:5313":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:5928:5869":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"6:6837:6362":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:8842:10416":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:22646:10000":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"16:4889:9116":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:14084:8873":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"6:5117:11355":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"20:495:3127":{"crate_id":20,"path":["libc","unix","rlimit"],"kind":"struct"},"16:6721:20309":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:2868:12031":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"6:5009:5287":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"11:1007:9363":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"11:2536:11206":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"16:7041:9354":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:3500:2378":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"1:918:9624":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:10024:8095":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"20:2995:5289":{"crate_id":20,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"3:0:475":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"5:1500:9623":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"20:3166:5305":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"5:3212:9646":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:45824:10155":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"15:0:2219":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:23200:189":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"16:8195:9529":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:10589:8178":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"20:3147:5302":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:11174:20496":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"11:2403:9640":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"6:4847:11255":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:47127:10212":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:945:9632":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"16:6915:9078":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:14336:8958":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:6983:26019":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:46157:10168":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"20:4919:6360":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"20:557:3134":{"crate_id":20,"path":["libc","unix","linger"],"kind":"struct"},"17:10113:8126":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"20:4773:3050":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"5:6837:7750":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"5:3225:31695":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:10532:2434":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:47063:10210":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:7580:7821":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:13839:8806":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"6:5910:5867":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:14356:8961":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:13086:8580":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:9791:33236":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:9565:8092":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"6:4584:5311":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:22092:12125":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"1:3837:10295":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"20:4298:5899":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:482:7800":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"6:4870:11263":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"6:1691:3902":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"16:7318:9400":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:10797:9948":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:10593:2462":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:9868:8104":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"18:80:24328":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:1562:9646":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"16:6893:9334":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:6409:9911":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"17:12779:8518":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:10576:8177":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"16:7736:9463":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"5:7362:6779":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:10638:8185":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"17:9138:7949":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"20:4185:5873":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"5:7301:7729":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"5:6856:7762":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:8157:2376":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:8551:2463":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"11:328:11204":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:9618:33243":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"15:288:19396":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:10940:10338":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:47875:10249":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:1836:185":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"6:123:2813":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:12141:9964":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:2966:17339":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"6:62:2736":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"6:1558:3890":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:6114:11420":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:12365:9937":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"5:6954:269":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"16:6753:9314":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"16:5905:9162":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:9812:6857":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:11163:8257":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:11087:8251":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"6:6961:6369":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"20:3286:5316":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:9752:2380":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:44170:10119":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:4742:11985":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"6:7657:11463":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:30738:30282":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:41921:170":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"6:4428:5293":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"16:4862:9115":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:5082:10304":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:914:9623":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:10981:8094":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"20:3276:5315":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:1743:655":{"crate_id":1,"path":["std","env"],"kind":"module"},"6:4800:5330":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:40414:10036":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:44737:10145":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:12043:690":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:43119:10080":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:8200:2412":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:40348:17272":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:8281:11578":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:9014:10426":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:13260:8612":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"14:215:9619":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:13982:8843":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:10673:8191":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:9806:6855":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:582:7962":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:12030:399":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:46623:10188":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"6:4776:5327":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:8866:6779":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:10262:7793":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"0:72:1810":{"crate_id":0,"path":["num_cpus","get"],"kind":"function"},"2:40619:9904":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"6:4789:5329":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:47813:10248":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:12544:8483":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"6:5941:5855":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:1537:3888":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:9712:33244":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:3255:17341":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:11952:8353":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"16:6696:9301":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:22279:12118":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"1:640:10278":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:5689:9901":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"6:533:3130":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:4740:11983":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:11125:8254":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"6:5921:5868":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"5:2967:6828":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:21798:9976":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:621:10275":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"5:3179:2462":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:10215:8139":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:8274:10296":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"5:3748:9727":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:13740:8788":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:0:1523":{"crate_id":1,"path":["std"],"kind":"module"},"17:12622:8497":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"6:4556:5308":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:42894:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"17:10457:8163":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"16:5696:20303":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:13025:8571":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:2355:131":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"6:4908:5875":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:10317:8147":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"16:4949:9118":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:9781:8097":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:10876:9950":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:2873:12033":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:11508:20375":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:7037:6785":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:10917:8236":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"}},"external_crates":{"20":{"name":"libc","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}