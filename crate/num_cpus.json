{"root":"0:0:1749","crate_version":"1.15.0","includes_private":false,"index":{"2:11431:60083":{"id":"2:11431:60083","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"2:11036:7969","prim@char":"1:12374:407"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:7968","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11041:7968","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11061:7973","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11446:60086":{"id":"2:11446:60086","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:11036:7969","prim@char":"1:12374:407"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:7968","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5104:60722":{"id":"5:5104:60722","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:2454","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6735:7554","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:2454","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6735:7554","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11349:54647":{"id":"2:11349:54647","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:48050:175"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48048:177","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9133:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9133:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11420:60078":{"id":"2:11420:60078","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11036:7969","prim@char":"1:12374:407","`DoubleEndedIterator`":"2:7075:119","str::match_indices":"2:11417:60077"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:50184:8189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:7968","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11041:7968","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11056:7972","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1749":{"id":"0:0:1749","crate_id":0,"name":"num_cpus","span":{"filename":"src/lib.rs","begin":[1,0],"end":[459,1]},"visibility":"public","docs":"A crate with utilities to determine the number of CPUs available on the\ncurrent system.\n\nSometimes the CPU will exaggerate the number of CPUs it contains, because it can use\n[processor tricks] to deliver increased performance when there are more threads. This \ncrate provides methods to get both the logical and physical numbers of cores.\n\nThis information can be used as a guide to how many tasks can be run in parallel.\nThere are many properties of the system architecture that will affect parallelism,\nfor example memory access speeds (for all the caches and RAM) and the physical\narchitecture of the processor, so the number of CPUs should be used as a rough guide\nonly.\n\n\n## Examples\n\nFetch the number of logical CPUs.\n\n```\nlet cpus = num_cpus::get();\n```\n\nSee [`rayon::Threadpool`] for an example of where the number of CPUs could be\nused when setting up parallel jobs (Where the threadpool example uses a fixed\nnumber 8, it could use the number of CPUs).\n\n[processor tricks]: https://en.wikipedia.org/wiki/Simultaneous_multithreading\n[`rayon::ThreadPool`]: https://docs.rs/rayon/1.*/rayon/struct.ThreadPool.html","links":{},"attrs":["#![deny(missing_docs)]","#![allow(non_snake_case)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:72:1614","0:73:1632"],"is_stripped":false}},"2:11357:54671":{"id":"2:11357:54671","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11358:54672"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11344:60068":{"id":"2:11344:60068","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11365:60071":{"id":"2:11365:60071","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:50280:8193","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11402:54686":{"id":"2:11402:54686","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"self::pattern":"2:11036:7969","str::splitn":"2:11399:54684","prim@char":"1:12374:407"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:50138:7580","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:7968","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11041:7968","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11056:7972","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11363:58504":{"id":"2:11363:58504","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11362:58507"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:50299:8195","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5121:2222":{"id":"5:5121:2222","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:6990:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6990:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11343:54214":{"id":"2:11343:54214","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:10604:8336"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11414:60076":{"id":"2:11414:60076","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"prim@char":"1:12374:407","str::matches":"2:11411:2103","`DoubleEndedIterator`":"2:7075:119","self::pattern":"2:11036:7969"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:50238:8192","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:7968","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11041:7968","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11056:7972","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11393:60072":{"id":"2:11393:60072","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"`DoubleEndedIterator`":"2:7075:119","str::split":"2:11384:1876","self::pattern":"2:11036:7969","str::rsplit_terminator":"2:11396:60073","prim@char":"1:12374:407"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:50066:8184","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:7968","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11362:58507":{"id":"2:11362:58507","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11363:58504"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:50290:8194","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11440:54689":{"id":"2:11440:54689","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:11036:7969","prim@char":"1:12374:407"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48048:177","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:7968","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11041:7968","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11056:7972","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5111:60724":{"id":"5:5111:60724","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:6990:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6990:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11411:2103":{"id":"2:11411:2103","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"str::matches":"2:11411:2103","`DoubleEndedIterator`":"2:7075:119","self::pattern":"2:11036:7969","prim@char":"1:12374:407"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:50220:8191","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:7968","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:73:1632":{"id":"0:73:1632","crate_id":0,"name":"get_physical","span":{"filename":"src/lib.rs","begin":[108,0],"end":[110,1]},"visibility":"public","docs":"Returns the number of physical cores of the current system.\n\nThis will always return at least `1`.\n\n# Note\n\nPhysical count is supported only on Linux, mac OS and Windows platforms.\nOn other platforms, or if the physical count fails on supported platforms,\nthis function returns the same as [`get()`], which is the number of logical\nCPUS.\n\n# Examples\n\n```\nlet logical_cpus = num_cpus::get();\nlet physical_cpus = num_cpus::get_physical();\nif logical_cpus > physical_cpus {\n    println!(\"We have simultaneous multithreading with about {:.2} \\\n              logical cores to 1 physical core.\", \n              (logical_cpus as f64) / (physical_cpus as f64));\n} else if logical_cpus == physical_cpus {\n    println!(\"Either we don't have simultaneous multithreading, or our \\\n              system doesn't support getting the number of physical CPUs.\");\n} else {\n    println!(\"We have less logical CPUs than physical CPUs, maybe we only have access to \\\n              some of the CPUs on our system.\");\n}\n```\n\n[`get()`]: fn.get.html","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11347:1614":{"id":"2:11347:1614","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:48050:175"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48048:177","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9133:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9133:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11359:8216":{"id":"2:11359:8216","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12374:407"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49986:8179","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11434:60084":{"id":"2:11434:60084","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:11036:7969","prim@char":"1:12374:407"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:7968","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11454:8377":{"id":"2:11454:8377","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5122:53427":{"id":"5:5122:53427","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:11456:53430"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6990:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11396:60073":{"id":"2:11396:60073","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"str::split":"2:11384:1876","self::pattern":"2:11036:7969","prim@char":"1:12374:407","str::split_terminator":"2:11393:60072"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:50084:8185","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:7968","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11041:7968","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11056:7972","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11367:54688":{"id":"2:11367:54688","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12374:407","self::pattern":"2:11036:7969"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:7968","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11387:54680":{"id":"2:11387:54680","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12374:407","self::pattern":"2:11036:7969"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:10860:7584","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:7968","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11452:1741":{"id":"2:11452:1741","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"2:10997:2262","FromStr::Err":"2:10998:125"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48192:206","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:10997:2262","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:10997:2262","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5105:2199":{"id":"5:5105:2199","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:6990:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6990:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:7968","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11457:53431":{"id":"2:11457:53431","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11460:7486":{"id":"2:11460:7486","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4472:7486"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:50324:7487","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5119:60725":{"id":"5:5119:60725","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:6990:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6990:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5103":{"id":"5:5103","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5014:1349","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5104:60722","5:5105:2199","5:5108:60723","5:5111:60724","5:5119:60725","5:5120:60726","5:5121:2222","5:5122:53427","5:5123:53428"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11384:1876":{"id":"2:11384:1876","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"str::rsplit":"2:11390:54682","self::pattern":"2:11036:7969","str::split_whitespace":"2:11362:58507","prim@char":"1:12374:407","`DoubleEndedIterator`":"2:7075:119"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:50016:2197","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:7968","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11423:1880":{"id":"2:11423:1880","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11456:53430":{"id":"2:11456:53430","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11355:60069":{"id":"2:11355:60069","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"crate::ops::Index":"2:2991:7528","str::slice_mut_unchecked":"2:11356:60070","`str`":"1:12380:1349"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11358:54672":{"id":"2:11358:54672","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11357:54671"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11405:60074":{"id":"2:11405:60074","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48048:177","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:7968","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11455:53429":{"id":"2:11455:53429","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11361:7239":{"id":"2:11361:7239","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:50002:2195","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11336:1957":{"id":"2:11336:1957","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11461:60089":{"id":"2:11461:60089","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4469:60089"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:50333:8198","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11334":{"id":"2:11334","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:10599:1349","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11335:786","2:11336:1957","2:11337:60065","2:11338:60066","2:11340:60067","2:11343:54214","2:11344:60068","2:11345:308","2:11346:1654","2:11347:1614","2:11349:54647","2:11351:54648","2:11353:54649","2:11355:60069","2:11356:60070","2:11357:54671","2:11358:54672","2:11359:8216","2:11360:8000","2:11361:7239","2:11362:58507","2:11363:58504","2:11364:1873","2:11365:60071","2:11366:58501","2:11367:54688","2:11370:54235","2:11373:54237","2:11376:1941","2:11380:7248","2:11384:1876","2:11387:54680","2:11390:54682","2:11393:60072","2:11396:60073","2:11399:54684","2:11402:54686","2:11405:60074","2:11408:60075","2:11411:2103","2:11414:60076","2:11417:60077","2:11420:60078","2:11423:1880","2:11425:60079","2:11427:60080","2:11429:60081","2:11430:60082","2:11431:60083","2:11434:60084","2:11437:1922","2:11440:54689","2:11443:60085","2:11446:60086","2:11449:60087","2:11452:1741","2:11454:8377","2:11455:53429","2:11456:53430","2:11457:53431","2:11458:60088","2:11460:7486","2:11461:60089"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5123:53428":{"id":"5:5123:53428","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:11457:53431"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6990:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11390:54682":{"id":"2:11390:54682","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"str::split":"2:11384:1876","prim@char":"1:12374:407","`DoubleEndedIterator`":"2:7075:119","self::pattern":"2:11036:7969"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:50034:7578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:7968","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11041:7968","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11056:7972","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11376:1941":{"id":"2:11376:1941","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"prim@char":"1:12374:407","`None`":"2:48050:175","self::pattern":"2:11036:7969"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48048:177","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:7968","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11370:54235":{"id":"2:11370:54235","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12374:407","self::pattern":"2:11036:7969"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:7968","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11417:60077":{"id":"2:11417:60077","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"`DoubleEndedIterator`":"2:7075:119","str::rmatch_indices":"2:11420:60078","prim@char":"1:12374:407","self::pattern":"2:11036:7969"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:50166:8188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:7968","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11399:54684":{"id":"2:11399:54684","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12374:407","str::rsplitn":"2:11402:54686","self::pattern":"2:11036:7969"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:50120:7582","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:7968","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11340:60067":{"id":"2:11340:60067","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11338:60066"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11437:1922":{"id":"2:11437:1922","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12374:407","self::pattern":"2:11036:7969"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48048:177","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:7968","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11345:308":{"id":"2:11345:308","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:11346:1654","`u8`":"1:12391:1445"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11458:60088":{"id":"2:11458:60088","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4471:60088"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:50315:8197","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11366:58501":{"id":"2:11366:58501","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:50308:8196","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11430:60082":{"id":"2:11430:60082","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11346:1654":{"id":"2:11346:1654","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12391:1445"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11380:7248":{"id":"2:11380:7248","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:48050:175","prim@char":"1:12374:407","self::pattern":"2:11036:7969"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48048:177","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:7968","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11041:7968","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11056:7972","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11425:60079":{"id":"2:11425:60079","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11427:60080":{"id":"2:11427:60080","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11337:60065":{"id":"2:11337:60065","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5108:60723":{"id":"5:5108:60723","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:6990:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6990:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:7968","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11429:60081":{"id":"2:11429:60081","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11335:786":{"id":"2:11335:786","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12374:407"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11364:1873":{"id":"2:11364:1873","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:50270:2198","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:72:1614":{"id":"0:72:1614","crate_id":0,"name":"get","span":{"filename":"src/lib.rs","begin":[73,0],"end":[75,1]},"visibility":"public","docs":"Returns the number of available CPUs of the current system.\n\nThis function will get the number of logical cores. Sometimes this is different from the number\nof physical cores (See [Simultaneous multithreading on Wikipedia][smt]).\n\nThis will always return at least `1`.\n\n# Examples\n\n```\nlet cpus = num_cpus::get();\nif cpus > 1 {\n    println!(\"We are on a multicore system with {} CPUs\", cpus);\n} else {\n    println!(\"We are on a single core system\");\n}\n```\n\n# Note\n\nThis will check [sched affinity] on Linux, showing a lower number of CPUs if the current\nthread does not have access to all the computer's CPUs.\n\nThis will also check [cgroups], frequently used in containers to constrain CPU usage.\n\n[smt]: https://en.wikipedia.org/wiki/Simultaneous_multithreading\n[sched affinity]: http://www.gnu.org/software/libc/manual/html_node/CPU-Affinity.html\n[cgroups]: https://www.kernel.org/doc/Documentation/cgroup-v1/cgroups.txt","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11449:60087":{"id":"2:11449:60087","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:11036:7969","prim@char":"1:12374:407"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:7968","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11041:7968","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11056:7972","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11360:8000":{"id":"2:11360:8000","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12374:407"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49992:8180","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11351:54648":{"id":"2:11351:54648","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9133:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9133:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"5:5120:60726":{"id":"5:5120:60726","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`String`":"5:6990:220","`Box<str>`":"5:286:2454"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:2454","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6735:7554","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6990:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11353:54649":{"id":"2:11353:54649","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9133:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9133:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11373:54237":{"id":"2:11373:54237","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12374:407","self::pattern":"2:11036:7969"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:7968","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11041:7968","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11056:7972","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11408:60075":{"id":"2:11408:60075","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48048:177","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:7968","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11041:7968","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11056:7972","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11356:60070":{"id":"2:11356:60070","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"str::slice_unchecked":"2:11355:60069","`str`":"1:12380:1349","crate::ops::IndexMut":"2:2995:7527"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11338:60066":{"id":"2:11338:60066","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11443:60085":{"id":"2:11443:60085","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12374:407","self::pattern":"2:11036:7969"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:7968","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11041:7968","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11056:7972","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"2:3323:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"1:11228:2162":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"5:2736:7299":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"6:135:2623":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"5:6759:7670":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"5:6329:8403":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"16:2762:9073":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:29565:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"16:7144:8881":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:12836:10330":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:5011:7529":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:11041:7968":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"5:1348:2254":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"5:4041:9552":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:49834:7568":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:6919:11122":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"2:46779:10991":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:7953:7707":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"12:1120:8686":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:3178:7956":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:11198:2142":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"16:6337:8868":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"20:1350:3694":{"crate_id":20,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"20:1574:3717":{"crate_id":20,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:10881:9596":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"12:1518:8696":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:12398:1088":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:3249:9201":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:8596:118":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"17:9791:9825":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"7:0:1488":{"crate_id":7,"path":["unwind"],"kind":"module"},"20:3414:5138":{"crate_id":20,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"6:4329:5119":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"16:7404:8809":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:1021:9270":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:54036:11085":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"5:2029:61008":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"5:2980:7674":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:11652:58397":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:48260:179":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"20:3071:5104":{"crate_id":20,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:46555:7346":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"12:2053:7703":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"4:0:1995":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"20:1504:3709":{"crate_id":20,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:9061:9162":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:2936:2449":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:52386:8106":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"10:0:1998":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:12265:10134":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:11853:10049":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:9913:2139":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"2:47330:7791":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"5:1436:194":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"6:4797:11418":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"6:4621:11373":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:4:980":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:11787:10040":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"20:5046:6177":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:8328:2161":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"2:56953:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:931:7694":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:13279:10465":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:4431:7917":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"6:1686:3711":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:47124:7780":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"6:4191:5104":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:51763:8132":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:7001:7789":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:9512:11207":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"16:4348:10572":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"16:5856:8856":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:11186:11224":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"1:9343:2254":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"20:5485:5169":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:8110:46820":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"5:3541:7671":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"2:51841:8145":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"5:3106:7671":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"17:13459:10506":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:13214:10421":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:9613:215":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"20:3363:5132":{"crate_id":20,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:2285:184":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:10385:9228":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:49090:126":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:6679:2290":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:12176:10116":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:12396:764":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"16:6164:8784":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"20:3389:5135":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"20:1558:3716":{"crate_id":20,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:12379:1319":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"16:7430:194":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:48323:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"20:4904:6167":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"16:5503:8843":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"6:4247:5109":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:5693:7498":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:1938:7851":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"17:9820:9273":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:8091:2143":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:3192:2218":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"6:4726:5144":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:11828:10047":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:48808:7334":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:12028:8714":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:10921:9904":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"18:515:9318":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:12380:1349":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"5:2737:60983":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"6:7255:11519":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:5176:7597":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"20:3059:5102":{"crate_id":20,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"20:527:2940":{"crate_id":20,"path":["libc","unix","hostent"],"kind":"struct"},"2:2676:222":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"20:1635:3770":{"crate_id":20,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:11137:9920":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:5167:7759":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"5:5211:8401":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:900:7573":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:8871:9797":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:49112:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"5:3362:7573":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"6:545:2940":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:2485:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"14:31:10853":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:21739:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:1615:7671":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"2:49340:7536":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:12617:10260":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"16:5210:9790":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"5:6938:8272":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:13141:10405":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:9362:9162":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:12386:720":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"16:5941:190":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:47115:7779":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:2674:2498":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"1:8552:7910":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"20:4180:5681":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:49078:108":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"20:1398:3700":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:574:7841":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:2826:7643":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:11458:9598":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"6:4778:11404":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:9193:61117":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:21110:8236":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:887:2254":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:48361:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:1751:11530":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"20:3086:4983":{"crate_id":20,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"5:3014:7675":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:10310:9880":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:8648:7878":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:29537:7201":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:20249:7523":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"16:5758:8852":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"20:138:2623":{"crate_id":20,"path":["libc","unix","fpos_t"],"kind":"enum"},"20:4278:1673":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:4266:7517":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"16:2622:9080":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"12:1859:7673":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"20:3433:5140":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"16:4432:10575":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"12:1845:7671":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"17:242:9700":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:46970:8272":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:12216:9603":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"18:548:139":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"20:5467:5166":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:4015:7875":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:48627:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"5:5974:7670":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:12850:10333":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"6:4706:5142":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:46372:194":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"18:531:9319":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"6:592:2947":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:9597:163":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:2843:7658":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"20:3489:5146":{"crate_id":20,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"16:5739:8851":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:6783:2293":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:11915:138":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:7846:7523":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:11036:7969":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"20:4131:5677":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:1714:3715":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:46255:7737":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:48665:2285":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:2232:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"16:4840:10587":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:8631:9696":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:46482:2125":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"14:165:45130":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:1552:2184":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:53998:8108":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:11163:11614":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"17:11500:9997":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:12695:10301":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:9577:9153":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"20:5064:6178":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"20:568:2946":{"crate_id":20,"path":["libc","unix","itimerval"],"kind":"struct"},"16:3707:10565":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:50464:7981":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"20:3286:5125":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"6:7166:6176":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:29743:8264":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"5:271:9548":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:20021:59647":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"16:4135:10567":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:11704:10958":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:11762:11620":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"16:5817:8855":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"16:2311:8767":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:50751:8210":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:11208:128":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"6:4804:11421":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:13168:10412":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:8971:2257":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:9458:9125":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:9637:2172":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:11631:36473":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"16:5574:8846":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"6:4690:970":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"6:513:2937":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"6:1678:3710":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:2586:9579":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"5:3910:2254":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"6:4294:5115":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"6:5692:5130":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:11679:188":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"17:10233:9874":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:7960:15465":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"5:4747:2284":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:49745:8178":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:6823:2279":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:53066:8104":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:1608:3705":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:9433:9817":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"6:4417:5124":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"16:5175:45203":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"6:4096:5096":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:10984:7824":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"16:4536:10577":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"12:274:11320":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:21970:165":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:46514:7967":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"12:98:8687":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:11161:9924":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"12:1866:7674":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"12:853:7701":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"16:7535:8787":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:19976:2506":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:8161:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:52508:11034":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"20:4151:5664":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:52012:11025":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:49027:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"6:581:2945":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"20:3276:5124":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:9764:9824":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:57018:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:50166:8188":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"16:7266:8886":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:3125:9709":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"16:7215:8882":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"18:644:9677":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:20706:19647":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"2:53814:8140":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:2685:2499":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:20044:59652":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"5:4104:9552":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:50280:8193":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:48251:7253":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:46460:199":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:9133:218":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:339:161":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"11:44:8673":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"2:39342:2502":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:4723:770":{"crate_id":2,"path":["core","iter"],"kind":"module"},"20:1472:3706":{"crate_id":20,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:53922:8123":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"16:2548:9068":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:47300:2194":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"16:7447:8793":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:8774:9127":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:11951:10079":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:2497:233":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:52242:8126":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:11288:9943":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"6:4449:5127":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"12:810:7695":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"6:5672:11458":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:681:11106":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"16:4712:10583":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:50512:7982":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:9524:11209":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"12:1044:8683":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:9681:9751":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"20:5447:6520":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:9155:9802":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:10997:9909":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"16:7335:8805":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"6:4231:5107":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"20:3408:5137":{"crate_id":20,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"16:3393:10560":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:0:483":{"crate_id":2,"path":["core"],"kind":"module"},"2:49045:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"20:1531:3712":{"crate_id":20,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:2397:2152":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"6:4185:5103":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"16:5365:8783":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:10221:9873":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"5:4071:2184":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:12964:10358":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"5:3763:9548":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:8960:2256":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"17:12337:9252":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:20451:8014":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:39329:8491":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:6763:2224":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:9263:9809":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:11152:7724":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:719:14470":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"2:46600:7949":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"20:3334:5129":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:9930:9832":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:49361:2250":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:8752:2195":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"16:7907:8894":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:8215:7715":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"20:614:2967":{"crate_id":20,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:12022:10093":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:12550:10205":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:20236:8151":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"1:524:9577":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:9738:9218":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:5315:11118":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:7425:7761":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"6:6479:6172":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:7190:9590":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"5:6319:8402":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"16:2984:9077":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"6:5504:5674":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:12399:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:11675:11125":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"5:5370:228":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"20:1550:3715":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"5:7001:8417":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:10822:46828":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:2921:2200":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:13134:10404":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:3203:8009":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"20:3370:5133":{"crate_id":20,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"16:6571:8873":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:20701:8017":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"9:188:8586":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"17:9422:9816":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"20:2982:5097":{"crate_id":20,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:774:140":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"9:622:8563":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"17:9446:9818":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"6:4126:5099":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"16:7637:8781":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:8885:2251":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:11734:9836":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"12:1681:142":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"20:557:2944":{"crate_id":20,"path":["libc","unix","linger"],"kind":"struct"},"17:10894:9194":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:46852:8198":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"6:5625:11433":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:50138:7580":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:12748:10307":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"20:5479:5168":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:13024:10373":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:53032:8122":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:10796:9249":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:20173:8011":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"2:3972:7943":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"5:6767:8457":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"16:2859:9047":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"6:5861:5708":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"5:778:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:50938:191":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"6:6430:6170":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"11:36:11328":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"1:11381:7504":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:54212:11095":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:20858:7734":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:10182:9867":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:46986:8273":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"16:5519:8844":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"12:985:7703":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:47228:7795":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"16:4565:10578":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:10257:9876":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:1636:573":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:10394:9229":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:9918:9595":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:944:7670":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"6:4115:5098":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:51011:7493":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"20:4077:5672":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:6614:7764":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:47550:9575":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"20:1355:3695":{"crate_id":20,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:11107:7976":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:8610:7336":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:48787:7332":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:11173:2141":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"17:11247:9933":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"9:863:8520":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:2809:7645":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:6675:1855":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:2995:7527":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"5:2954:7673":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"16:4208:10568":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:54071:11088":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"16:4288:10570":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:48285:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:3269:2216":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"20:3174:5115":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:50994:157":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"20:3197:5118":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"16:7887:8801":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"6:6998:6520":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"16:7461:8794":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:954:7671":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"17:13114:10398":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"5:1404:7695":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:4676:6521":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"17:11330:9958":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:9317:9265":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:11056:7972":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:50066:8184":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"6:4212:5105":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"16:7413:8825":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:7922:14466":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:12389:719":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"16:5642:8848":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:10973:9908":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:12073:10098":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"6:1636:3706":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:8941:9798":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:8744:10956":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"16:2291:9090":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:50786:120":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"1:4012:7874":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:11368:9966":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:11343:9962":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"16:0:2003":{"crate_id":16,"path":["gimli"],"kind":"module"},"6:567:2943":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:9831:9275":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:10825:8190":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"16:3017:9714":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"20:1522:3711":{"crate_id":20,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"5:869:2254":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"5:3472:2210":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:51697:11022":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"6:4286:5114":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:20042:59649":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"16:6646:9098":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:51787:8124":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"16:6759:8803":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:8643:7877":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"12:669:7696":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"6:6293:2818":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:6375:3629":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:8685:7602":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"20:1490:3708":{"crate_id":20,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"16:5606:8847":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"6:4239:5108":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:6007:2286":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:628:7484":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:50184:8189":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:11447:9597":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"5:6907:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:11977:11231":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:46356:196":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"16:2456:9089":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:4130:7345":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:9605:7581":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:5658:7496":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:50034:7578":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:13231:10428":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:4266:8161":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"12:738:7694":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"17:11186:9927":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:6014:2287":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:8828:143":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"5:1386:7693":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:1962:9213":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:48801:7333":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"6:6572:6178":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:1825:7494":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:2513:1853":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:8410:2193":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:11576:10012":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"20:5494:6522":{"crate_id":20,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"16:7366:8807":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:10490:9888":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"6:5523:5676":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:46788:8050":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:46773:7487":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:47247:7797":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"6:495:2934":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"16:5402:8837":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"16:2273:9048":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:51023:7491":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"18:719:9310":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:49814:7569":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"5:1425:7697":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"6:5733:11482":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:10838:7500":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"6:4354:11345":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:12251:10131":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"6:4665:11381":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"20:4806:6165":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"18:564:9321":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:12816:10322":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:2851:7662":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"5:1594:9548":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:11199:9928":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:9365:7744":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"6:5582:5681":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:1672:1052":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"6:4565:5140":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:50220:8191":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"20:542:2942":{"crate_id":20,"path":["libc","unix","pollfd"],"kind":"struct"},"12:632:2254":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:49060:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"2:47185:7792":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:13354:10478":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"18:636:9689":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"20:4229:5686":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"6:4611:11370":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:29503:7200":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:4967:7723":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:11813:10044":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:29543:7202":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:8944:2253":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:20418:7523":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"2:47541:2225":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:9909:9830":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:54016:11083":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:1580:3702":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"9:382:8515":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:686:14469":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"20:0:791":{"crate_id":20,"path":["libc"],"kind":"module"},"17:11606:10015":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:2717:2501":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"17:10350:9128":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"6:1643:3707":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"6:4534:5137":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"16:7521:8786":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:12373:909":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"20:3019:5100":{"crate_id":20,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"20:134:2622":{"crate_id":20,"path":["libc","unix","FILE"],"kind":"enum"},"17:10159:9866":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"16:6721:8876":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:47532:11006":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:13506:10520":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"5:3338:159":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"16:6354:8869":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:4321:8162":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"16:5974:8858":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:11858:8221":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:8551:130":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"6:586:2946":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:9411:7570":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"6:6269:2860":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"20:4272:5707":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"9:0:1997":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:6439:11121":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:50920:201":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:46953:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:3190:2217":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:4322:7513":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:10997:2262":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:7873:7839":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"12:2069:7704":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:29637:8263":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"17:9303:9160":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:8427:2195":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"1:8069:2139":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:13393:10489":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:12374:407":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"6:6981:11507":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:8212:9250":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:10296:9879":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"5:3429:9548":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:4452:7920":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"20:4974:6172":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:10949:9907":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"20:3092:5105":{"crate_id":20,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"20:5033:6176":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","termios2"],"kind":"struct"},"16:5793:8854":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"20:1444:3705":{"crate_id":20,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:47084:7776":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"20:1514:3710":{"crate_id":20,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:9691:9215":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"6:4257:5110":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"6:4206:4983":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:47043:11002":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"19:0:996":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"16:7189:8775":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:9475:9150":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:12781:10318":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:9295:182":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:12395:1441":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"17:2916:9189":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:12103:10103":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:54135:11092":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"16:5450:8840":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:49805:7565":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"18:80:53226":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"16:2402:9084":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:48551:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:12378:306":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"17:12674:10296":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:52096:8146":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:9372:7584":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:4300:7518":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:52766:8139":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:11363:53554":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:12390:715":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"20:501:2938":{"crate_id":20,"path":["libc","unix","rusage"],"kind":"struct"},"1:8503:7594":{"crate_id":1,"path":["std","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:9719:11114":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:12021:8714":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:20423:19629":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:6707:2296":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:13100:10391":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"20:3238:5122":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:13184:10415":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"12:1628:9546":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:8526:9231":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"14:0:2001":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:969:7697":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:9429:7748":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:49960:8275":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:13176:10413":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:8588:7602":{"crate_id":1,"path":["std","net","socket_addr","SocketAddr"],"kind":"enum"},"20:477:2934":{"crate_id":20,"path":["libc","unix","utimbuf"],"kind":"struct"},"12:1555:8698":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"5:6805:8452":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:4007:7543":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"20:1479:3707":{"crate_id":20,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:1608:7253":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:6076:2295":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:7976:11139":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:10663:7508":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:9329:2197":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:49349:143":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"6:6409:6167":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:54173:11094":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:50447:7980":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:50644:8280":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:51994:8117":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:8911:61114":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"16:6807:9101":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"20:3104:5106":{"crate_id":20,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:9526:9148":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"16:7803:8892":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"17:8393:9184":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:9452:2289":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"16:7868:8799":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"16:5715:8850":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:13221:10423":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:53564:8116":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:54082:11089":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:49906:7577":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:11531:7503":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"14:215:10858":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:48589:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:7847:7813":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"18:538:9320":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:1114:7705":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:11519:7502":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:13007:10366":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"20:4203:5684":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlattr"],"kind":"struct"},"6:6554:6177":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"6:5534:5677":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"5:5820:19841":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:9118:61121":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:11061:7973":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:10283:9878":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"5:630:10934":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:9449:7585":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:50238:8192":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:46860:8355":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"12:2178:11323":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"20:3215:5120":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"16:7920:8895":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"6:7249:5169":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:5628:58936":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"6:4768:5146":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:8692:7915":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:49845:7557":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:1105:7704":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:11659:9600":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"17:8295:46825":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"16:6794:9100":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:10527:56048":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"2:50539:7983":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"6:131:2622":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:49575:7558":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"16:6149:8833":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"20:1543:3714":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:13404:10490":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:12397:1498":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"20:483:2935":{"crate_id":20,"path":["libc","unix","timeval"],"kind":"struct"},"2:11050:7971":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:8796:9136":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"6:5684:5131":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:10860:7584":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:10670:9255":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:11014:9911":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:6836:2297":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"16:4404:10574":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:3228:2219":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:12356:53587":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:9183:9803":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"20:3348:5130":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Chdr"],"kind":"struct"},"2:48794:7331":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:10604:8336":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"12:1832:2254":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"6:7289:6522":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:9805:9272":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:4244:7514":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:12388:718":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:10574:8371":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:52172:8138":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"18:507:9677":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"6:560:2942":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"16:4912:10589":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:50396:7970":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"6:7214:5165":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:4503:7884":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:9351:7741":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"20:3065:5103":{"crate_id":20,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:8389:2165":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"17:10532:126":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:9947:47015":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:6520:7777":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:48099:7252":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:11774:10039":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:4970:7721":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"16:4879:10588":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:58314:11103":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"2:50333:8198":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:53216:8128":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:8272:9257":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:46521:7769":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"16:2424:9062":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"6:5480:5672":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"9:676:8608":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"6:5841:1673":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"5:1240:7706":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"16:6474:8871":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"20:3461:5143":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:4063:8153":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:996:7701":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:7733:7542":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"6:5713:11476":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:6524:6175":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"18:727:9311":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"6:6352:3657":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:6602:162":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:12322:10142":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:8814:139":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1:1091:7703":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"18:614:61126":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:52340:8121":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:46877:7487":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:11841:10048":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"18:0:2005":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:8441:9253":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"18:609:9684":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:10360:9285":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:1476:142":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:50576:7984":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:50611:7987":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"6:4559:11349":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"14:221:10860":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:50601:7986":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:12345:14471":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:9335:7504":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:12164:10114":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:2253:2144":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"16:6139:8862":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:11271:9935":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:5821:2671":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"16:5424:8838":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"6:1654:3708":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"6:5605:5685":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"6:1505:3695":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:51741:8144":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:10625:9137":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:50002:2195":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:48235:2254":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:49992:8180":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:13059:10382":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:1887:11114":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"5:4986:9557":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"6:5699:11465":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:6214:7742":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:6567:8043":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"16:6276:8811":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"16:5536:8845":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:11168:11616":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"20:4107:5675":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:7803:9593":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:21379:8253":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"16:7489:8764":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:47033:9569":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:12377:1014":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"17:11217:9929":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"0:72:1614":{"crate_id":0,"path":["num_cpus","get"],"kind":"function"},"16:6030:8861":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"16:5959:9044":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"15:214:8710":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:50270:2198":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"20:4193:5683":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"6:1511:11335":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"6:575:2944":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:11661:10024":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:12884:10336":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:2860:7667":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"12:353:8688":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:48399:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"18:699:9309":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:11528:10003":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"16:2570:9119":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:10088:9865":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:8418:9197":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:2903:126":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:9885:9828":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:12797:10321":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:52461:11033":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"6:62:2546":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:8156:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:10108:9192":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"20:4095:5673":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"9:111:8578":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"20:3137:5110":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:6230:202":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:2767:7617":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:9280:2254":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:20964:7523":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:7152:155":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:51717:11023":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:5225:17769":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:2255:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:50930:207":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:10608:9135":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:9293:9269":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:20966:8015":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:12307:10138":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"6:5876:11494":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"5:2746:59787":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:49571:8375":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:11570:2172":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"16:2740:9072":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:12278:10135":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"14:202:8420":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"5:6775:59698":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:47153:7783":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:46541:8828":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"13:220:11319":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:2788:7627":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:7868:7822":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"16:7850:8800":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:9359:7253":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:2666:216":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"20:1431:3703":{"crate_id":20,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:3155:7865":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:49371:11017":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:2610:2201":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"6:7220:5166":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"18:652:9677":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:2831:7652":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:562:9705":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:7746:11232":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:11356:9963":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"5:5523:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"5:2988:7672":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"16:6632:8875":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"20:1368:3697":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:4276:7346":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:7055:7732":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:11087:9915":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"20:3320:5128":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"6:4644:5679":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:2855:7664":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"16:4680:10582":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:4252:7515":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"12:1085:8685":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"5:1226:7704":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:11547:10008":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"6:4515:5135":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:10455:9287":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:50308:8196":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"12:659:7253":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"6:4335:5120":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:10875:9195":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:13374:10484":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:3620:7253":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"6:4653:5680":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:52562:11036":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:1919:7544":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:21358:11535":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:8361:2224":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"6:1707:3714":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"5:6093:7253":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:10590:8373":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"9:586:8560":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"2:3960:7942":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:50120:7582":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"20:3355:5131":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Chdr"],"kind":"struct"},"20:563:2945":{"crate_id":20,"path":["libc","unix","sigval"],"kind":"struct"},"16:4740:10584":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:11889:201":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"2:2491:146":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"17:8596:9695":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:11174:9926":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:967:9706":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:12291:10136":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"16:7374:8891":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:46816:8053":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"20:4919:6169":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:8561:9211":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"9:505:8510":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:9501:9160":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:46906:8357":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"16:7350:9107":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:12609:10257":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:4423:7916":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:11756:58392":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"17:11300:9946":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:11684:10028":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"6:4581:11354":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:7980:8491":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:56940:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:4090:8154":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"16:7245:8884":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:7943:7678":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"16:5927:8857":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:12349:10145":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:10583:9132":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"6:5782:5686":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:49164:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"6:4267:5111":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"6:4379:5122":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:12237:10130":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"16:6262:8795":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"5:3484:8462":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:12896:10339":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"6:7237:5167":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:2290:123":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"6:1541:3698":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:3592:7595":{"crate_id":1,"path":["std","net","display_buffer","DisplayBuffer"],"kind":"struct"},"20:3425:5139":{"crate_id":20,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:8863:7534":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:49926:7576":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"5:6300:8401":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:2792:7629":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:1771:9152":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"6:4200:1863":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:2939:2450":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"6:1500:3694":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"20:1386:3699":{"crate_id":20,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:8055:9126":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"6:4629:11377":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"9:827:8517":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"18:690:9308":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:6391:8221":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"16:7948:8797":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:8319:8164":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:545:7836":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:47214:7794":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:2250:2140":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:53876:8105":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:3312:2204":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"6:5541:5678":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:47194:7787":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:678:11104":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"16:3557:10561":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"12:861:7702":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:2932:2448":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"5:36:8396":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"16:4253:10569":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:5761:7501":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"20:4943:6171":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:6542:202":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:8981:9799":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:47264:7798":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:2867:7718":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:451:7817":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"16:2648:9079":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:3420:2163":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"20:5455:5164":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"16:6768:8877":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:38120:179":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"17:12485:10154":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"16:7297:8889":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:4195:203":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"6:1574:3701":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:5009:7531":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:8814:127":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"17:9250:9808":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:48192:206":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:52539:11035":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"16:7307:8890":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:7034:132":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:3402:1854":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"6:1701:3713":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:21937:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"6:4274:5112":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"18:113:53228":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:11681:7510":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:1002:7702":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:50590:7985":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"20:3147:5111":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"3:223:206":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:50739:8209":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"20:1436:3704":{"crate_id":20,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"6:4496:5133":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:10508:11113":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"20:469:2933":{"crate_id":20,"path":["libc","unix","group"],"kind":"struct"},"2:49379:11018":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:11756:11619":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:918:7693":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:50755:8211":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:8812:2240":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"1:11900:7875":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:12361:10152":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"18:481:9316":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"20:3180:5116":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:4742:7721":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:7422:2261":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:8368:9129":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"5:2993:8449":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:9563:7582":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"12:725:7693":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"16:6219:8865":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:49796:7566":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:10404:7888":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"2:11262:110":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"12:60:61105":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:10642:9258":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"5:2918:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"6:4475:5129":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:8510:9790":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:56583:8225":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:8954:2254":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:52878:8127":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"16:2500:9078":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:6780:2292":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"16:2332:9083":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:11607:7637":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"16:2696:9070":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"5:4900:9548":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"18:736:9312":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:11995:11622":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"9:592:8562":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"5:2476:8487":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:11873:10052":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:1811:594":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:7837:7968":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:11921:7882":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"6:4367:5121":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"18:599:61125":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:4527:5136":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:9631:9145":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:10945:2215":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:2942:2451":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"16:4376:10573":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"16:6506:8872":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"16:6323:8788":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"16:7037:7310":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"12:1852:7672":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"0:0:1749":{"crate_id":0,"path":["num_cpus"],"kind":"module"},"1:12340:56421":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:49871:7555":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:1738:3717":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:11125:9917":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"16:6230:8866":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:4204:8156":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"5:6744:7253":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"6:7226:11515":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"16:4653:10581":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"6:4461:5128":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"20:3154:5112":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:12980:10362":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:11708:10029":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:10476:47087":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"6:4540:5138":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"5:1690:7671":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"17:9539:9147":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:51942:8125":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"12:762:7671":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"17:13572:10532":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:8074:2141":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:3152:7864":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"16:6855:8878":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:52796:8142":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"6:5472:5671":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"20:4209:5685":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"6:5443:5649":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:12087:10101":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:53002:8119":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:21838:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"5:4531:200":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:3984:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:13518:10522":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:9577:7580":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:50418:7974":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:48475:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"16:4626:10580":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"20:4847:3657":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:247:9701":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:56992:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:9123:7523":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:10750:56049":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"1:4902:7093":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:21163:10960":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"20:3209:5119":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:0:1341":{"crate_id":1,"path":["std"],"kind":"module"},"6:1695:3712":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:10121:9193":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:9671:9185":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"12:2184:11324":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"6:4605:11367":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"16:7581:8810":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:9382:9814":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"6:4346:11340":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:13082:10387":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:49897:7574":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:54120:11091":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:2029:180":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:2796:7631":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:979:7699":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:2678:107":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:10809:8187":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"5:286:2454":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:54056:11087":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:46913:8358":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:9471:7545":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:48116:7573":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:2757:7612":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:21391:8252":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"16:6495:8702":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"20:5417:2893":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:51871:8133":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:53422:8148":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"6:5498:5673":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:13594:10538":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:11970:7488":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"17:10321:9284":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"6:5510:5675":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"12:2190:61100":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"16:6545:8802":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"9:33:8611":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"16:5438:8839":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:12391:1445":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"1:3084:2227":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"6:6545:11504":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:2494:131":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"1:1604:2254":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:2154:574":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"6:5568:11432":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:8739:2727":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:4350:2336":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"6:646:2967":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:52031:8102":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:9751:9216":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"5:2049:8484":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:8377:2162":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"17:12514:10174":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:11551:8290":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"1:2399:2153":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"6:5749:11486":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:50819:8292":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"6:4737:11397":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:8881:61120":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:10466:9886":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"16:6124:8832":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:47134:7781":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:7429:7763":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"6:507:2936":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"0:73:1632":{"crate_id":0,"path":["num_cpus","get_physical"],"kind":"function"},"16:7615:8798":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:47144:7782":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:9608:214":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"16:3001:9076":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"20:2995:5098":{"crate_id":20,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:10270:9877":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"16:7287:8888":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:11778:9602":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"16:4777:10585":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"16:6087:8808":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:56979:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:2448:7523":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"12:1534:8697":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"5:6020:9548":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:47205:7793":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:50315:8197":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"16:5194:9789":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:9532:8879":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:12012:2511":{"crate_id":2,"path":["core","const_closure","ConstFnMutClosure"],"kind":"struct"},"17:10139:9162":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:12393:1443":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"17:12860:10334":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:2673:2446":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"5:7012:8418":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"16:6101:8782":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:9488:9149":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:2568:114":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"16:6188:8864":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:13047:10376":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:9591:7583":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"16:3179:10558":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:54025:11084":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"14:187:45136":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"5:4026:240":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"16:7934:8796":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"16:6178:8863":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"5:6461:9562":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:12134:10108":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"20:590:2949":{"crate_id":20,"path":["libc","unix","protoent"],"kind":"struct"},"17:9712:9822":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:49916:7575":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"5:5906:9562":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"2:7098:2452":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:48133:7310":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"17:9283:9811":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:8475:9139":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:21329:58412":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"20:4174:5680":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlmsgerr"],"kind":"struct"},"6:6322:6166":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:48166:7311":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:49986:8179":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"1:2248:127":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"15:193:8706":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:20261:8016":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"17:10752:9130":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"20:4824:2727":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:11588:11618":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"5:1943:7836":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"6:5587:5682":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:8761:7683":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"16:5771:8853":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"12:300:8690":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"16:2596:9120":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:12211:10128":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:11721:10032":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:8064:2138":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:8591:110":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:47238:7796":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"6:4152:5101":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:12394:1444":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:13327:10466":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:12381:1427":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:1826:11111":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:7784:9591":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"7:32:44397":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"20:1537:3713":{"crate_id":20,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:49974:7754":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:10577:7692":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"2:46396:195":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"5:1059:8482":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"12:697:7697":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:8697:7918":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:7937:14468":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:9897:9829":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:9857:9200":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:21871:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:20290:7523":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:2256:1937":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:50973:8219":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"20:3380:5134":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:11054:9913":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"12:2080:7705":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"6:5595:5683":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"9:896:8522":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:29579:8262":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"6:6500:6173":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"5:1043:61067":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"12:834:7700":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:52288:8114":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:49824:7567":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:9553:9162":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:4199:8155":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:10075:9864":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"6:5727:11479":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:50084:8185":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"6:1518:11338":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:57005:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"20:5019:6175":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:2901:206":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"16:6294:8812":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:52049:11026":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:4583:7890":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:8575:7911":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"20:1410:3701":{"crate_id":20,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:8717:7893":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:29328:8305":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:54045:11086":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:10200:9576":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"16:3448:9718":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"5:6984:11528":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"1:1620:7672":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:12060:10097":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"18:96:53227":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"20:3187:5117":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:9031:61116":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"6:4427:5125":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:53960:8143":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"12:1003:7704":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"12:1138:7706":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"16:6441:8870":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:7858:53586":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"13:108:61106":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"6:4139:5100":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"16:6820:10664":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:420:8753":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"6:6329:2727":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"12:0:2000":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"5:781:8454":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:8137:46824":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"9:800:11329":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"6:539:2939":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:47571:10954":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"20:3160:5113":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:9397:7746":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:3468:56387":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:5892:7743":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:12392:1442":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"17:11939:10077":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"5:1369:7253":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:12387:717":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:9519:11208":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"12:2205:2131":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"12:822:7699":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:973:7698":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:2804:7635":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:8711:7876":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:2973:8021":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"17:8339:46826":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:49051:129":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"5:4948:7548":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:1637:7675":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"5:2742:59786":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:13071:10383":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:2650:2209":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"20:3482:5145":{"crate_id":20,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:50299:8195":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:13478:10511":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:11847:7545":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"16:6450:8703":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:6494:7742":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:2576:2207":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"6:4745:11399":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"14:40:9909":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:8606:190":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"18:755:9313":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:8121:117":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:7298:58042":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:8540:206":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"17:1931:9146":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"16:3680:10564":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:11909:10058":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:13536:10528":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:20023:59651":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"20:4925:6170":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:12630:10266":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:2381:2147":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"17:9601:9151":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"12:1836:7253":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:6884:213":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"12:1840:7670":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:13580:10535":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"16:2921:8768":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:2677:221":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:11218:117":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"9:977:8523":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"9:956:8518":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:12384:626":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:21200:11532":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:10090:7571":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"16:5681:8849":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:11761:10037":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"6:7279:11524":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:10374:9227":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"6:608:2949":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:8666:9697":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:10939:2217":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"17:13126:10401":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"20:3119:5108":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"20:4887:3632":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"5:1311:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:3484:1852":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:4534:8352":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:12909:10345":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"5:5559:8438":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:5885:7742":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:4764:7755":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"16:7022:9056":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"16:2833:9046":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:3375:2184":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"1:7537:56419":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"20:4781:3628":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:50731:8204":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"2:21240:8065":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:11639:10023":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:1123:7706":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:2327:185":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:10123:7572":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"2:54097:11090":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"12:119:8691":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:50767:8290":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"12:1029:7705":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:50016:2197":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"5:2254:8488":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:8081:2142":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"12:646:7573":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:598:7727":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:11070:9914":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:8486:7593":{"crate_id":1,"path":["std","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:52318:8118":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"5:6750:8456":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"5:1077:8483":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:10942:2219":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"17:12739:10306":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:5346:11118":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:6012:8860":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"16:3590:10562":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"5:6891:2132":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:11837:7606":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"12:320:8689":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:47523:1855":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"6:4102:5097":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"6:4598:11365":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:5824:7505":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:7075:119":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:8902:2252":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"6:1525:3696":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:9627:9158":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:11536:10005":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:11235:9930":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"16:6713:8806":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:10403:9130":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"17:12756:10308":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"5:6797:194":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:9844:9276":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"20:4101:5674":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"20:4910:6168":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"5:2959:8448":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:51893:8137":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:10733:7499":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"17:11034:9912":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:13039:10375":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:8145:2210":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:8951:61118":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:8420:2194":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:7735:9705":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"5:6417:239":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"20:5461:5165":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:52642:8147":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:2743:2503":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"20:1361:3696":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"16:5226:10591":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"20:3111:5107":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"6:1722:3716":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:13366:10481":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:11974:10088":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:46939:8055":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:4439:7919":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:9071:61112":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:2488:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"16:8047:126":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:6850:2298":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"5:852:8455":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"20:536:2941":{"crate_id":20,"path":["libc","unix","iovec"],"kind":"struct"},"17:10845:9252":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"6:6277:3628":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"9:649:8564":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"1:9489:53577":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"5:3560:9548":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:3161:229":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:11515:10001":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:8594:110":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"2:38137:2506":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:52364:8103":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"5:6879:2131":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:50735:8207":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"7:79:44404":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:10774:9128":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:9618:7637":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:4836:7725":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:50981:8220":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:21365:8310":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"16:3254:10559":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:2800:7633":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"6:4179:5102":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:21640:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:12972:10360":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"20:4185:5682":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:48184:189":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"6:4698:5141":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"20:55:2546":{"crate_id":20,"path":["libc","unix","DIR"],"kind":"enum"},"1:3459:2166":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:2026:181":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:0:2004":{"crate_id":17,"path":["object"],"kind":"module"},"5:1981:8485":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"8:0:1996":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:50433:7977":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"5:6826:7253":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:39293:7506":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"1:8220:7716":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:10420:9286":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:48437:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:20004:59599":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"16:6248:8785":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"16:5379:8836":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"16:7958:8829":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"20:3166:5114":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"20:3451:5142":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:5384:7785":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"16:6308:8867":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:11860:7874":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:6434:7259":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:3374:7768":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"2:21:662":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:22402:8024":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:11351:7501":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"5:6990:220":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"16:7095:9059":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:48175:7306":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"6:5835:5707":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:5062:7532":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"20:4817:6166":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"16:6881:8879":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:8162:9198":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:7038:148":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:13203:10420":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"18:681:9307":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"6:6538:11501":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:20339:8014":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:12638:10267":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:39333:7766":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:3188:7966":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:661:7853":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"12:777:8675":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"1:1626:7673":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:8991:61119":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"20:3471:5144":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"20:1377:3698":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:53674:8136":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:10854:9212":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:20298:7735":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"5:2738:11526":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:2772:7619":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"6:4635:11378":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"6:1887:3770":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:21252:8066":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"20:5439:6519":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:11997:10089":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:960:7695":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"20:3308:5127":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"5:1395:7694":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:11618:134":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"6:4280:5113":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:9722:9823":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:2680:224":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"17:12118:10107":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:990:7700":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:8541:2166":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:8862:2250":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:9350:9268":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:22003:8239":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:46920:8359":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"6:4489:5132":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:13382:10485":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"16:7256:8885":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"20:3006:5099":{"crate_id":20,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:3088:8265":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"16:2358:9065":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"6:5720:11478":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"18:624:61127":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"5:677:227":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:50743:8208":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:9339:9267":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:46548:10990":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"2:3172:7774":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:11464:9599":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"5:3349:2254":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"6:4716:5143":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"16:6597:8874":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:52194:8141":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"5:1195:7703":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:52956:8115":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:12372:365":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"1:11238:55962":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"20:3401:5136":{"crate_id":20,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:11259:9934":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:6811:59456":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"17:11559:10009":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:9658:9820":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:9328:9266":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"6:4224:5106":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:25212:8047":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:20449:8100":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:3240:8010":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:4314:7520":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"20:4042:5649":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:6975:6519":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:4673:11386":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"5:6789:7253":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"16:524:9040":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:46840:8361":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"16:6697:9096":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"16:7545:8813":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:12008:10091":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"14:160:10853":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:11338:11139":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"18:574:9677":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:2582:126":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"6:487:2933":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"13:0:1994":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:1643:7197":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:1737:8313":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:2383:2148":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"5:7067:7671":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"17:8822:61113":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"2:52720:8135":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:11436:9968":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:1903:46910":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:8701:9698":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"15:0:2002":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:4310:7519":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"12:2198:11326":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:13148:10406":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"20:3257:5123":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:487:9704":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:9700:9214":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:4115:7882":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:3386:7767":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"1:8611:7603":{"crate_id":1,"path":["std","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:11149:9921":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"5:7084:8397":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"6:7208:5164":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"5:3804:7573":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:46830:8360":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:54150:11093":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:4373:7348":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:4401:7914":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"20:549:2943":{"crate_id":20,"path":["libc","unix","winsize"],"kind":"struct"},"1:8703:7887":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"20:5473:5167":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"16:7321:8792":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:11744:11132":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:58293:11102":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"17:10520:9893":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:53752:8120":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"11:0:1999":{"crate_id":11,"path":["adler"],"kind":"module"},"1:8469:7592":{"crate_id":1,"path":["std","net","ip_addr","Ipv4Addr"],"kind":"struct"},"5:0:281":{"crate_id":5,"path":["alloc"],"kind":"module"},"18:766:9314":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:12948:10355":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:48243:7573":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:5392:187":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:21292:58411":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:12385:627":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"1:5085:7521":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"16:3623:10563":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:9289:7500":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:10546:46827":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"18:582:2506":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"20:495:2937":{"crate_id":20,"path":["libc","unix","rlimit"],"kind":"struct"},"6:4307:5117":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"20:582:2948":{"crate_id":20,"path":["libc","unix","servent"],"kind":"struct"},"1:4892:7517":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"18:660:9305":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"6:6424:6169":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:49332:11013":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:47093:2193":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:5678:7497":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:9413:7747":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:21184:8070":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"20:3443:5141":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:8440:2198":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"6:7243:5168":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:9304:7573":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:51911:11024":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:10445:9252":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:8104:128":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"6:4551:5139":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:12926:10350":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:3230:2220":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"20:4298:5708":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:5741:11484":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:10786:8186":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:11748:10036":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:10528:9248":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:8129:7858":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"16:6668:8791":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"16:2380:9061":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:8446:151":{"crate_id":1,"path":["std","net","ip_addr","IpAddr"],"kind":"enum"},"2:47063:7555":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:10721:9902":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:1828:11112":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1:8637:7876":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:21805:7844":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"16:6037:9064":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:10506:9890":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:21904:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"5:1211:7705":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:10497:47088":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:965:7696":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"20:3226:5121":{"crate_id":20,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:6311:6165":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:9778:9217":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:49148:7330":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"17:11594:10013":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"16:6843:9103":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:1864:11113":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:20870:59602":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:8608:7335":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"5:5543:2284":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:8602:7333":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:12730:10302":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:6407:9588":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"16:2816:9074":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"6:5772:11492":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:12198:10127":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:457:7818":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"6:6953:2893":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"5:6967:8467":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:10749:8183":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"20:4120:5676":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:13192:10416":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:3951:7600":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:5878:202":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"16:2526:9067":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"16:5472:8841":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:9384:7745":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:46958:8271":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:5461:7786":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"20:5004:6174":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"9:920:8519":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:13340:10472":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:10682:9256":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"16:7227:8883":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:46416:198":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:12225:10129":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:13158:10409":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:47560:11008":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:21267:10966":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:2991:7528":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"1:9906:127":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"20:4773:2860":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"6:4575:11351":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"3:0:431":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:8604:7334":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"6:4816:11426":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:7148:53920":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"18:521:9315":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:5504:186":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"9:709:2250":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:386:9702":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"20:4138:5678":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"16:2718:9071":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:50747:8212":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"16:5113:10590":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:6040:2288":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:8225:2211":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:8735:7722":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"16:5154:9050":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"16:6654:8790":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"16:4808:10586":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:13492:10513":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"6:4317:5118":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"12:815:7698":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:9307:7502":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"16:2478:9066":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:2816:7647":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:9656:7638":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:4904:7095":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:8868:7535":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"20:4797:2818":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:1550:3699":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:3151:8266":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:9477:7840":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"12:1872:7675":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"6:1668:3709":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"20:4995:6173":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:51972:8113":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:10207:9869":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:8368:2226":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:2821:7649":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:2235:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"6:1595:3703":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:4208:7720":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:21772:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:910:7253":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"16:5995:8859":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:50324:7487":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:12033:10094":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:47289:7800":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"16:153:8772":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:47279:7799":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:11543:1910":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:47315:7801":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:50807:7640":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:8623:7604":{"crate_id":1,"path":["std","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:48108:2254":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:52142:8134":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"6:4659:5684":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"9:19:8610":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"20:4870:3629":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:9484:7578":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:13527:10526":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"6:6448:6171":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:1760:8312":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"16:2252:9049":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"5:2947:2254":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:6415:6168":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:4398:5123":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:1474:1637":{"crate_id":2,"path":["core","mem"],"kind":"module"},"6:1600:3704":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"6:4810:11423":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:3166:133":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"5:949:9548":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:3345:2225":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"6:1562:3700":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"16:7276:8887":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"16:7475:8789":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:47176:7784":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:5707:7499":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"6:6392:3632":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:47106:7778":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:4906:7097":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"1:9546:53575":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"17:10434:9883":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"5:5631:2184":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:9644:9144":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:50759:8205":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"16:7113:9060":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:10062:9863":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:13413:10492":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"16:6115:8780":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:48513:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:12768:10313":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"16:2885:9081":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"5:217:8446":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:13031:10374":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:11800:10042":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"20:1416:3702":{"crate_id":20,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"20:489:2936":{"crate_id":20,"path":["libc","unix","timespec"],"kind":"struct"},"18:707:7971":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"14:7:10853":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:9165:61115":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"6:4761:5145":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:11485:9993":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:21313:58410":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:2784:7625":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"16:6682:8804":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:46294:8022":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:11342:7691":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:5849:7788":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:11315:9952":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:19989:59599":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"16:8034:8765":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:11714:11129":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"5:1414:7696":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:11106:9916":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:12046:10096":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:9466:11204":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:21216:10962":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:8241:9254":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"6:6302:11500":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:20442:7523":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"6:4437:5126":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:8433:2197":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:21057:8235":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"6:4683:11392":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"6:4592:11362":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"6:6509:6174":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"16:7071:8880":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:10245:9875":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:11729:11130":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:52410:8107":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:8600:7332":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:47162:11003":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:8324:8165":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"5:6954:8466":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"6:4506:5134":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:1611:7670":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:48048:177":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"16:2784:9075":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:51809:8112":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:7894:7824":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"6:5660:11454":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:13436:10505":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"20:4165:5679":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlmsghdr"],"kind":"struct"},"1:4260:7516":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"6:600:2948":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:9274:9810":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"5:6924:8465":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:20292:7733":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:2449:7526":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:5644:7495":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:20210:8097":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"17:10332:9292":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:9522:7579":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:50290:8194":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"5:4944:7550":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:7047:2453":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"18:491:9676":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:4330:7347":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"1:4214:7719":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:5554:5664":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"12:444:140":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"20:3080:1863":{"crate_id":20,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:12148:10110":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:9401:9815":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"6:4361:11347":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"5:6735:7554":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:50763:8206":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:8794:17770":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"16:4318:10571":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:4697:58847":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"6:0:791":{"crate_id":6,"path":["libc"],"kind":"module"},"5:686:109":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"20:3127:5109":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"5:5000:9560":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"2:3912:2184":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"1:3267:2215":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"6:501:2935":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"16:2674:9069":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"6:7266:11523":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:11617:10016":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:1632:7674":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"12:393:61102":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:56966:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:8598:7331":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:47516:10953":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:46899:8197":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:2778:7622":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:13091:10390":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:5007:7522":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:9873:9827":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:12934:10353":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:50624:8279":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:2501:232":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1:3477:2164":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"16:3845:10566":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:12955:10357":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"15:175:8705":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"20:3032:5101":{"crate_id":20,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:8494:9789":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:7731:7539":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"5:3733:7670":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:46883:8356":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"16:5488:8842":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:6134:9581":{"crate_id":1,"path":["std","sync","mpmc","array","Channel"],"kind":"struct"},"1:1967:7852":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:48124:7253":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"1:8532:11611":{"crate_id":1,"path":["std","net","ip_addr","fmt","Span"],"kind":"struct"},"2:21706:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"6:554:2941":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"5:1358:7573":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:9223:46872":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"5:6832:7253":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:1889:11115":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:3158:7866":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"5:1445:8480":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:6638:11122":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"2:2321:178":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"16:5592:9038":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"6:519:2938":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:9567:11613":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:21275:10967":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:412:9602":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"18:671:9306":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"12:387:61101":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:13557:10531":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:21673:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"5:4626:2184":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:9321:7503":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"16:4510:10576":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"5:6486:9568":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"16:7825:8893":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"16:6048:8774":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:10708:9251":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:46438:197":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:14:2106":{"crate_id":2,"path":["core","write"],"kind":"macro"},"1:12375:1461":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:12874:10335":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:8137:2208":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:2730:2447":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"6:1532:3697":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:49884:7556":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:49324:7537":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:7732:7541":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:2847:7660":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"18:590:9679":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"12:751:7670":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:9371:9801":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:2762:7615":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:5572:118":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"16:7992:8828":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"20:4069:5671":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"5:6168:9548":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:46800:8051":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"16:4597:10579":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"5:1953:8451":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:2908:115":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"20:3296:5126":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"20:521:2939":{"crate_id":20,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"12:1065:8684":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"6:4300:5116":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"5:5434:7670":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:6313:9581":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:2837:7655":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"20:2976:5096":{"crate_id":20,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:46341:8020":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:9021:9800":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:11893:10053":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:6997:7790":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:4655:7891":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:9108:9801":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"20:574:2947":{"crate_id":20,"path":["libc","unix","tms"],"kind":"struct"},"1:2409:2158":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"}},"external_crates":{"20":{"name":"libc","html_root_url":null},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}