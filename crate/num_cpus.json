{"root":"0:0:2493","crate_version":"1.16.0","includes_private":false,"index":{"2:13332:33575":{"id":"2:13332:33575","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12960:17805","str::split":"2:13323:2637","prim@char":"1:12389:476","`DoubleEndedIterator`":"2:8333:130","str::rsplit_terminator":"2:13335:33576"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44087:10188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:9988","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13306:26668":{"id":"2:13306:26668","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12389:476","self::pattern":"2:12960:17805"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:9988","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5717:34285":{"id":"5:5717:34285","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7774:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7774:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:9988","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13280:33571":{"id":"2:13280:33571","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13283:2366":{"id":"2:13283:2366","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42168:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42166:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13289:26628":{"id":"2:13289:26628","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13298:10020":{"id":"2:13298:10020","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12389:476"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44007:10012","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13379:26671":{"id":"2:13379:26671","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12389:476","self::pattern":"2:12960:17805"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42166:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:9988","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:9988","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:17803","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13393:25777":{"id":"2:13393:25777","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13281:336":{"id":"2:13281:336","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13282:2404","`u8`":"1:12408:1869"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13335:33576":{"id":"2:13335:33576","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12960:17805","str::split":"2:13323:2637","prim@char":"1:12389:476","str::split_terminator":"2:13332:33575"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44105:10189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:9988","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:9988","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:17803","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13293:26651":{"id":"2:13293:26651","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:13295:26655","str::split_at_mut":"2:13294:26652"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13403:12482":{"id":"2:13403:12482","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:5018:12482"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44345:9936","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13274:33569":{"id":"2:13274:33569","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13303:2634":{"id":"2:13303:2634","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44291:2959","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13373:33585":{"id":"2:13373:33585","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12389:476","self::pattern":"2:12960:17805"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:9988","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13401:33589":{"id":"2:13401:33589","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:5017:33589"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44336:10101","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5720:34286":{"id":"5:5720:34286","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7774:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13400:26534":{"id":"2:13400:26534","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1066:37916"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13398:26532":{"id":"2:13398:26532","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1066:37916"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5728:34287":{"id":"5:5728:34287","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7774:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13294:26652":{"id":"2:13294:26652","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:13293:26651","str::split_at_mut_checked":"2:13296:26656"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13388:33588":{"id":"2:13388:33588","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12389:476","self::pattern":"2:12960:17805"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:9988","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:9988","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:17803","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13399:26533":{"id":"2:13399:26533","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1066:37916"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13404:33590":{"id":"2:13404:33590","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:5015:33590"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44354:10100","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13279:26198":{"id":"2:13279:26198","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12507:17806"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13366:33581":{"id":"2:13366:33581","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13301:31640":{"id":"2:13301:31640","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13302:31628"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44311:10195","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73:2384":{"id":"0:73:2384","crate_id":0,"name":"get_physical","span":{"filename":"src/lib.rs","begin":[108,0],"end":[110,1]},"visibility":"public","docs":"Returns the number of physical cores of the current system.\n\nThis will always return at least `1`.\n\n# Note\n\nPhysical count is supported only on Linux, mac OS and Windows platforms.\nOn other platforms, or if the physical count fails on supported platforms,\nthis function returns the same as [`get()`], which is the number of logical\nCPUS.\n\n# Examples\n\n```\nlet logical_cpus = num_cpus::get();\nlet physical_cpus = num_cpus::get_physical();\nif logical_cpus > physical_cpus {\n    println!(\"We have simultaneous multithreading with about {:.2} \\\n              logical cores to 1 physical core.\", \n              (logical_cpus as f64) / (physical_cpus as f64));\n} else if logical_cpus == physical_cpus {\n    println!(\"Either we don't have simultaneous multithreading, or our \\\n              system doesn't support getting the number of physical CPUs.\");\n} else {\n    println!(\"We have less logical CPUs than physical CPUs, maybe we only have access to \\\n              some of the CPUs on our system.\");\n}\n```\n\n[`get()`]: fn.get.html","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13368:33582":{"id":"2:13368:33582","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13287:26627":{"id":"2:13287:26627","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13300:7320":{"id":"2:13300:7320","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44023:2962","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13326:26658":{"id":"2:13326:26658","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12389:476","self::pattern":"2:12960:17805"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12775:9999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:9988","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13299:10205":{"id":"2:13299:10205","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12389:476"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44013:10186","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13350:2865":{"id":"2:13350:2865","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12960:17805","`DoubleEndedIterator`":"2:8333:130","prim@char":"1:12389:476","str::rmatches":"2:13353:33577"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44241:10192","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:9988","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5732:25780":{"id":"5:5732:25780","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13397:25783"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13391:2486":{"id":"2:13391:2486","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12921:137","`FromStr`":"2:12920:3015"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42298:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12920:3015","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12920:3015","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13309:26669":{"id":"2:13309:26669","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12389:476","self::pattern":"2:12960:17805"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:9988","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13364:33580":{"id":"2:13364:33580","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13338:26662":{"id":"2:13338:26662","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12389:476","self::pattern":"2:12960:17805","str::rsplitn":"2:13341:26664"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44141:10004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:9988","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13396:25782":{"id":"2:13396:25782","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13362:2641":{"id":"2:13362:2641","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:72:2366":{"id":"0:72:2366","crate_id":0,"name":"get","span":{"filename":"src/lib.rs","begin":[73,0],"end":[75,1]},"visibility":"public","docs":"Returns the number of available CPUs of the current system.\n\nThis function will get the number of logical cores. Sometimes this is different from the number\nof physical cores (See [Simultaneous multithreading on Wikipedia][smt]).\n\nThis will always return at least `1`.\n\n# Examples\n\n```\nlet cpus = num_cpus::get();\nif cpus > 1 {\n    println!(\"We are on a multicore system with {} CPUs\", cpus);\n} else {\n    println!(\"We are on a single core system\");\n}\n```\n\n# Note\n\nThis will check [sched affinity] on Linux, showing a lower number of CPUs if the current\nthread does not have access to all the computer's CPUs.\n\nThis will also check [cgroups], frequently used in containers to constrain CPU usage.\n\n[smt]: https://en.wikipedia.org/wiki/Simultaneous_multithreading\n[sched affinity]: http://www.gnu.org/software/libc/manual/html_node/CPU-Affinity.html\n[cgroups]: https://www.kernel.org/doc/Documentation/cgroup-v1/cgroups.txt","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13295:26655":{"id":"2:13295:26655","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13296:26656"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42166:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13353:33577":{"id":"2:13353:33577","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12960:17805","`DoubleEndedIterator`":"2:8333:130","prim@char":"1:12389:476","str::matches":"2:13350:2865"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44259:10193","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:9988","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:9988","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:17803","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13272:2718":{"id":"2:13272:2718","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13291:33572":{"id":"2:13291:33572","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12395:1739","str::slice_mut_unchecked":"2:13292:33573","crate::ops::Index":"2:39712:12510"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13292:33573":{"id":"2:13292:33573","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12395:1739","crate::ops::IndexMut":"2:3490:12511","str::slice_unchecked":"2:13291:33572"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13296:26656":{"id":"2:13296:26656","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13295:26655"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42166:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13344:26666":{"id":"2:13344:26666","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42166:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:9988","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13394:26529":{"id":"2:13394:26529","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40067:17883","Self::is_ascii":"2:13393:25777"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42166:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40067:17883","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13341:26664":{"id":"2:13341:26664","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12389:476","str::splitn":"2:13338:26662","self::pattern":"2:12960:17805"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44159:10005","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:9988","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:9988","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:17803","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13282:2404":{"id":"2:13282:2404","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12408:1869"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13356:33578":{"id":"2:13356:33578","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12960:17805","`DoubleEndedIterator`":"2:8333:130","prim@char":"1:12389:476","str::rmatch_indices":"2:13359:33579"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44187:10190","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:9988","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5712":{"id":"5:5712","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5713:34284","5:5714:7277","5:5717:34285","5:5720:34286","5:5728:34287","5:5729:34288","5:5730:2989","5:5731:25779","5:5732:25780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13359:33579":{"id":"2:13359:33579","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12960:17805","`DoubleEndedIterator`":"2:8333:130","prim@char":"1:12389:476","str::match_indices":"2:13356:33578"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44205:10191","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:9988","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:9988","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:17803","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13376:2683":{"id":"2:13376:2683","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12389:476","self::pattern":"2:12960:17805"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42166:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:9988","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13305:31787":{"id":"2:13305:31787","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44329:10019","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13395:25781":{"id":"2:13395:25781","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5730:2989":{"id":"5:5730:2989","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7774:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7774:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13315:2702":{"id":"2:13315:2702","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42168:191","prim@char":"1:12389:476","self::pattern":"2:12960:17805"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42166:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:9988","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13397:25783":{"id":"2:13397:25783","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5714:7277":{"id":"5:5714:7277","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7774:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:9988","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5729:34288":{"id":"5:5729:34288","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:306:3193","`String`":"5:7774:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:306:3193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13271:1008":{"id":"2:13271:1008","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12389:476"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13270":{"id":"2:13270","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13271:1008","2:13272:2718","2:13273:33568","2:13274:33569","2:13276:33570","2:13279:26198","2:13280:33571","2:13281:336","2:13282:2404","2:13283:2366","2:13285:26626","2:13287:26627","2:13289:26628","2:13291:33572","2:13292:33573","2:13293:26651","2:13294:26652","2:13295:26655","2:13296:26656","2:13298:10020","2:13299:10205","2:13300:7320","2:13301:31640","2:13302:31628","2:13303:2634","2:13304:33574","2:13305:31787","2:13306:26668","2:13309:26669","2:13312:26670","2:13315:2702","2:13319:7329","2:13323:2637","2:13326:26658","2:13329:26660","2:13332:33575","2:13335:33576","2:13338:26662","2:13341:26664","2:13344:26666","2:13347:26667","2:13350:2865","2:13353:33577","2:13356:33578","2:13359:33579","2:13362:2641","2:13364:33580","2:13366:33581","2:13368:33582","2:13369:33583","2:13370:33584","2:13373:33585","2:13376:2683","2:13379:26671","2:13382:33586","2:13385:33587","2:13388:33588","2:13391:2486","2:13393:25777","2:13394:26529","2:13395:25781","2:13396:25782","2:13397:25783","2:13398:26532","2:13399:26533","2:13400:26534","2:13401:33589","2:13403:12482","2:13404:33590"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13369:33583":{"id":"2:13369:33583","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13304:33574":{"id":"2:13304:33574","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44301:10194","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13347:26667":{"id":"2:13347:26667","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42166:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:9988","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:9988","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:17803","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13276:33570":{"id":"2:13276:33570","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:13274:33569"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13312:26670":{"id":"2:13312:26670","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12389:476","self::pattern":"2:12960:17805"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:9988","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:9988","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:17803","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13273:33568":{"id":"2:13273:33568","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13370:33584":{"id":"2:13370:33584","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12389:476","self::pattern":"2:12960:17805"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:9988","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:9988","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12986:17802","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13319:7329":{"id":"2:13319:7329","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42168:191","prim@char":"1:12389:476","self::pattern":"2:12960:17805"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42166:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:9988","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:9988","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:17803","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13385:33587":{"id":"2:13385:33587","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12389:476","self::pattern":"2:12960:17805"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:9988","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5713:34284":{"id":"5:5713:34284","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:306:3193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:306:3193","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13285:26626":{"id":"2:13285:26626","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42168:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42166:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13302:31628":{"id":"2:13302:31628","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13301:31640"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44320:10196","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2493":{"id":"0:0:2493","crate_id":0,"name":"num_cpus","span":{"filename":"src/lib.rs","begin":[1,0],"end":[485,1]},"visibility":"public","docs":"A crate with utilities to determine the number of CPUs available on the\ncurrent system.\n\nSometimes the CPU will exaggerate the number of CPUs it contains, because it can use\n[processor tricks] to deliver increased performance when there are more threads. This \ncrate provides methods to get both the logical and physical numbers of cores.\n\nThis information can be used as a guide to how many tasks can be run in parallel.\nThere are many properties of the system architecture that will affect parallelism,\nfor example memory access speeds (for all the caches and RAM) and the physical\narchitecture of the processor, so the number of CPUs should be used as a rough guide\nonly.\n\n\n## Examples\n\nFetch the number of logical CPUs.\n\n```\nlet cpus = num_cpus::get();\n```\n\nSee [`rayon::Threadpool`] for an example of where the number of CPUs could be\nused when setting up parallel jobs (Where the threadpool example uses a fixed\nnumber 8, it could use the number of CPUs).\n\n[processor tricks]: https://en.wikipedia.org/wiki/Simultaneous_multithreading\n[`rayon::ThreadPool`]: https://docs.rs/rayon/1.*/rayon/struct.ThreadPool.html","links":{},"attrs":["#![deny(missing_docs)]","#![allow(non_snake_case)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:72:2366","0:73:2384"],"is_stripped":false}}},"2:13382:33586":{"id":"2:13382:33586","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12389:476","self::pattern":"2:12960:17805"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:9988","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:9988","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:17803","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5731:25779":{"id":"5:5731:25779","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13396:25782"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13329:26660":{"id":"2:13329:26660","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12960:17805","`DoubleEndedIterator`":"2:8333:130","prim@char":"1:12389:476","str::split":"2:13323:2637"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44055:10002","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:9988","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:9988","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:17803","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13323:2637":{"id":"2:13323:2637","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12960:17805","`DoubleEndedIterator`":"2:8333:130","prim@char":"1:12389:476","str::split_whitespace":"2:13301:31640","str::rsplit":"2:13329:26660"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44037:2963","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:9988","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"16:6098:9141":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:33625:12627":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"11:1893:9747":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"20:3137:5858":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:9742:2920":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"2:11481:10004":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:6885:3050":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"2:22365:12634":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:11124:34969":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:44037:2963":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"6:1489:4442":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:11440:10003":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:14335:8384":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:12826:8156":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"5:1239:33231":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:12408:1869":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"20:1444:4453":{"crate_id":20,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"11:2440:9656":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"6:1530:4446":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:9186:3012":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:42646:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:16520:8933":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"2:46828:10306":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"16:7305:9342":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:5606:10426":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:3438:17762":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"6:8273:11605":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:14573:8421":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"20:5479:5916":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:14832:8476":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:9141:199":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:11273:2934":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"5:898:9741":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:16362:8908":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:10630:7819":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:12392:1328":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"6:4842:5849":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"18:581:3253":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:10400:7410":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:22718:12713":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"6:5295:11352":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:16283:8888":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:46363:10271":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:22642:17963":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"2:39824:216":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"18:718:7807":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:4308:30595":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"16:6749:9034":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"16:7716:34959":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:40877:134":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:5672:114":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"6:5488:11430":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"17:11527:8009":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:22713:12715":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"1:8219:2918":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:11851:8038":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:11447:9720":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"2:38309:17948":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"20:1410:4449":{"crate_id":20,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"5:1395:9649":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"16:2900:9069":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"20:4165:6427":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlmsghdr"],"kind":"struct"},"2:10398:7409":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"17:11971:8047":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:8668:3475":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:3536:2992":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"1:12175:27934":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:2766:201":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"5:6812:7333":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:16613:8273":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"2:21755:12636":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:14114:8334":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"20:1416:4450":{"crate_id":20,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"5:1533:3012":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:4411:10416":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"5:6117:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"11:2366:9665":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"2:32375:10082":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"20:582:3696":{"crate_id":20,"path":["libc","unix","servent"],"kind":"struct"},"2:46926:10339":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"5:5006:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:4716:221":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:8748:150":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"16:6680:9243":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"10:44:9669":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"16:5144:9121":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:12886:8167":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"17:16218:8869":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"11:123:11295":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"6:5151:5876":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:41928:9978":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:44187:10190":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:45054:180":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:11887:10413":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"16:6837:9266":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"6:5019:5867":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"9:390:20392":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:46754:10304":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"16:6713:9247":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:44763:11719":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:11678:8019":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:8441:178":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"16:6588:9218":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"6:6770:11570":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"20:3111:5855":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:11067:10550":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"2:9417:9987":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"16:6042:9078":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:3402:17771":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"2:32368:9436":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:10181:7430":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"1:957:9637":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"16:6808:9074":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:3566:2944":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"17:11566:8012":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:13157:8190":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"11:299:11296":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"16:6159:9147":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:12411:1863":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:42210:7333":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"16:7401:34956":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"5:6685:9656":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:3402:2987":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:33826:17942":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:43954:10180":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"14:214:9633":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:12992:8178":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:12394:1705":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"11:2539:11302":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"6:5007:5866":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:12711:8148":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:15714:8721":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:8613:10415":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"6:6902:6456":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"5:3094:7382":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:41906:170":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:4824:11202":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"1:7835:25982":{"crate_id":1,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"2:44486:10207":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:42202:9654":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"17:13719:8244":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"6:5301:11355":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"5:3095:34851":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:13006:8181":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"6:578:3696":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:11691:3008":{"crate_id":1,"path":["std","sys","thread_local","fast_local","eager","State"],"kind":"enum"},"2:3449:3188":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"5:1379:9378":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"20:536:3689":{"crate_id":20,"path":["libc","unix","iovec"],"kind":"struct"},"6:5165:5877":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:16297:8890":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"20:3065:5851":{"crate_id":20,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:8795:32472":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:33759:17943":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"18:491:7766":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"6:6777:11571":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"6:6462:6424":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:7714:17879":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"2:23731:236":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:16332:8903":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:34384:17947":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"20:1361:4444":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:45044:10229":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"1:11753:11742":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:11720:8024":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"2:47435:10381":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"16:7386:9350":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:33141:9388":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"6:6521:6429":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:42424:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:11976:26456":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"16:6205:21406":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"6:8343:11619":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:1867:2387":{"crate_id":2,"path":["core","mem"],"kind":"module"},"17:10296:21473":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:8797:3008":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:34557:9397":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"20:55:3294":{"crate_id":20,"path":["libc","unix","DIR"],"kind":"enum"},"16:2920:9070":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"20:3127:5857":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:3433:2965":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:22919:11635":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"16:7838:21415":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:1645:9661":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"16:4404:9108":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"6:6544:6433":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:41394:2992":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:11309:7988":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"6:5249:11334":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:16159:8854":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:11805:8035":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"18:515:7764":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:46477:10277":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:22685:12714":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"16:6953:9278":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:12056:8063":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:8645:10528":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"5:7708:9785":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"11:830:9655":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"6:6381:6397":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:8296:5917":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:12044:8059":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:3493:2969":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"11:1005:9378":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:15418:8639":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:45987:10236":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"16:3441:9099":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"2:22969:31780":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:47003:10340":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"20:5455:5912":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:5855:220":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:23191:10071":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"17:11465:8002":{"crate_id":17,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"5:7094:17836":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"1:1852:703":{"crate_id":1,"path":["std","env"],"kind":"module"},"5:7519:9781":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:16750:9006":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"2:43626:11715":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"6:6823:6434":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:2081:198":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"6:6708:11553":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"6:479:3683":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:46296:10268":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:4338:12590":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"20:2982:5845":{"crate_id":20,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:3041:124":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"17:12798:21611":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"20:4910:6916":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:40479:9936":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:15836:8750":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"6:1569:4450":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"6:1703:4463":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:43173:7418":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"16:8626:9542":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:13953:152":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:8386:3191":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:11902:8043":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:40971:10128":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"5:3703:182":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:8555:2963":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"5:7872:9795":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"16:7508:9372":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:39874:10090":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:505:29277":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:11691:8020":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:46118:10250":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:4066:7333":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"16:6269:9161":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"6:5570:11439":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:7609:7339":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:11016:7982":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"6:523:3688":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:14859:8479":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:2018:794":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"17:11448:7999":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:44023:2962":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"16:7192:21412":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:14393:8393":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"15:327:20502":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"20:3348:5878":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Chdr"],"kind":"struct"},"2:12775:9999":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:11714:10453":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:44779:11723":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:8022:10460":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"6:5381:6432":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"16:8137:9092":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:15864:8758":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:2155:9799":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:43371:10156":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"16:0:2764":{"crate_id":16,"path":["gimli"],"kind":"module"},"5:1564:7333":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"11:1064:20471":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:46346:10270":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:7831:17927":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"13:110:34937":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:2406:7839":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"11:102:11294":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:910:9639":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:11329:10000":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:9855:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:22958:10049":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:10999:2923":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"16:5172:9122":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"6:4881:5852":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"16:6408:9184":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:7170:12630":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"5:7060:17834":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:12975:7803":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:14507:8410":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:3443:2982":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"5:6149:3033":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:15939:8780":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"20:4925:6918":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:11630:8016":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"5:2357:34855":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"6:5057:5869":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"18:706:7803":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:15064:8516":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:16198:8866":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"20:3451:5890":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:39844:2890":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"6:4914:5854":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"6:1521:4445":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"9:445:20391":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:11402:10002":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"18:96:25665":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"5:7258:34467":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:11421:7998":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:12673:8142":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:12191:8076":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"17:11222:7986":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"6:7361:6914":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"5:3105:33222":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:22851:10042":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"11:1580:9657":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"16:2620:9056":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:44755:11717":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:3039:10410":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:8231:140":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"5:7856:9747":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:11382:10592":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"20:590:3697":{"crate_id":20,"path":["libc","unix","protoent"],"kind":"struct"},"2:3293:17769":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"16:4844:9112":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"6:5107:5872":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:4789:11632":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"20:4773:3608":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"20:1479:4455":{"crate_id":20,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"20:4298:6456":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"20:1504:4457":{"crate_id":20,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:15946:8781":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:43834:10169":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:13290:7921":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"20:3119:5856":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:13890:8285":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"16:5282:9126":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:7947:29290":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:43922:10177":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"16:7969:9468":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:14019:8306":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:22983:10050":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:47358:10363":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:40905:10123":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"11:434:34931":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:4359:12592":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"5:3313:9660":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:15106:8520":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:11401:7995":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:1838:7535":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"2:2732:113":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"0:0:2493":{"crate_id":0,"path":["num_cpus"],"kind":"module"},"5:938:12495":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:43883:10175":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:9529:9988":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:41372:9970":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:42128:9981":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"14:202:17819":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"6:1727:4465":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"5:5826:17834":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"6:6876:6455":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"16:7416:9353":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"16:7058:9290":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"5:1645:9746":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:16739:9005":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"2:22539:12720":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"2:39729:213":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:8093:12530":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:821:12554":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"6:8284:5915":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:23246:10076":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"1:879:3012":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:667:7831":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:11495:10005":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"16:6502:20516":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"20:4174:6428":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlmsgerr"],"kind":"struct"},"17:14708:8440":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:11308:162":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"17:14975:8498":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"16:7372:9085":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:13602:10030":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"5:1223:34521":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:16812:9017":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"20:3443:5889":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:5562:11437":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"20:3092:5853":{"crate_id":20,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"14:0:2762":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"6:6731:11558":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"1:994:9647":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"16:7789:34963":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:4208:12574":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:23268:10078":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"20:3238:5870":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"16:155:9020":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"17:12537:8134":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:11173:34970":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"6:7539:6921":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:16399:8915":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"6:5682:11482":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:8723:10531":{"crate_id":1,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"2:40958:9960":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"6:8014:11596":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"20:4095:6421":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:4930:12581":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"20:4120:6424":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:32399:3186":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"6:4875:5851":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:9252:12622":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"16:7337:9346":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"5:4217:9654":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:3455:141":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"17:13515:21484":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:597:10391":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:13119:8188":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"17:12816:7847":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"17:14997:8509":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:16507:8259":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"6:5551:5892":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:15896:8766":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:10945:11732":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"18:573:7767":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:11035:10430":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"1:8562:2959":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"1:1489:156":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:10670:29284":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"1:9340:10560":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"7:32:20377":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:3671:17849":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"6:5224:5885":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:10167:21469":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"20:3104:5854":{"crate_id":20,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:9438:235":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"5:3809:34461":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:12524:8133":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:23235:10075":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"16:4184:9105":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"6:5117:5873":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:10549:7963":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"12:0:2761":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:6424:10439":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"16:2450:9042":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"11:2545:11303":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"6:5349:11368":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"1:3910:10412":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"20:614:3715":{"crate_id":20,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"1:3307:30989":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:971:12494":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"17:14672:8434":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:472:7827":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"6:6758:11568":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"6:1551:4448":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:5260:438":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"17:11788:8032":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:14152:8342":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"16:2486:9050":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:42857:7409":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"3:0:510":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:42535:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:7548:6922":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:15701:8715":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"20:4974:6920":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:32389:10083":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:32487:3242":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"17:16323:8899":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:14547:8418":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"16:8014:9091":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"20:574:3695":{"crate_id":20,"path":["libc","unix","tms"],"kind":"struct"},"17:12066:8064":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:10402:7411":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:2242:129":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"6:5658:11470":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"2:10041:33117":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"18:507:7767":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"6:7986:3641":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"5:2594:11626":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:46494:10278":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:22589:31834":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"20:5473:5915":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:9347:10561":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"6:5676:11479":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:12406:914":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"16:8503:9528":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:5620:10427":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:4846:17860":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:6076:2944":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"16:7731:7397":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"5:4506:34489":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"6:5603:11444":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:10928:7981":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:12787:8154":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:41960:12551":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:42338:3012":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:8631:10526":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:9443:3045":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"16:2748:9062":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"20:5439:7267":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:31158:196":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"16:6256:9160":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:13145:8189":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"11:685:9654":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:8256:10471":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"2:22577:12723":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"2:23121:2928":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"2:2713:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:15010:8510":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:12306:8090":{"crate_id":17,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"17:14652:8431":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:40678:10105":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"17:0:2765":{"crate_id":17,"path":["object"],"kind":"module"},"1:4174:12573":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:6971:11634":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"2:2343:9803":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:13742:10032":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:9373:25714":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:23257:10077":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"11:2466:9747":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"11:854:9644":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:8835:3010":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"13:0:2755":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:7343:29298":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"2:14008:12497":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:8284:146":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:15315:8553":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:43107:7418":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"16:2550:9053":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:10696:7821":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:12737:10018":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:42864:7408":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"8:0:2757":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:14599:8424":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"16:8598:9540":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:16595:8263":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"1:4330:12589":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:15919:8774":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"5:7721:18011":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:12340:10597":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"2:6976:11633":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"17:16264:8883":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"10:0:2759":{"crate_id":10,"path":["adler"],"kind":"module"},"11:2551:34930":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"5:4582:34489":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"20:527:3688":{"crate_id":20,"path":["libc","unix","hostent"],"kind":"struct"},"2:40598:17876":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"17:13070:7985":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"2:2936:2928":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:10534:7962":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:9360:10564":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"5:4172:34461":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:15531:8682":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"5:3277:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:11338:11735":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:5305:10425":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:10406:7412":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:44767:11720":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:10218:21470":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"16:6188:9152":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:32929:9391":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"6:5366:6427":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:2477:2903":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:2960:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"5:1595:9640":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:8512:2926":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"1:8359:10475":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:10778:7964":{"crate_id":17,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"20:3032:5849":{"crate_id":20,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:12749:8151":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:14405:8395":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:14963:8496":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:13838:8274":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:44055:10002":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"18:0:2766":{"crate_id":18,"path":["memchr"],"kind":"module"},"16:7949:9088":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:4346:12591":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:10404:206":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"5:7666:2896":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"16:3308:9041":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"14:160:9627":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"6:6716:11556":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"17:16311:8897":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:12986:17802":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:13690:32693":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"11:1725:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:10921:10584":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"2:10036:32473":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:13095:8187":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"2:42219:7397":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"16:4766:9110":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"6:4937:5857":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"16:6084:9136":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:11702:10449":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:10627:10547":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:12648:8140":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:44840:18067":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"17:16668:8984":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"17:11432:21494":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:5351:204":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"16:3587:9100":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"16:5198:9123":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"9:480:20390":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:11733:21514":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"1:12361:12488":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"6:5420:11389":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:3599:2616":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"6:1667:4458":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:8007:10390":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"6:8302:11609":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"11:1914:9661":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"18:765:25675":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"16:8121:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:6267:9952":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:384:10388":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:47279:10352":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:40981:10129":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:42106:10415":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:11728:10454":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:2715:2974":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:2937:17882":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:15621:8698":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"20:3334:5877":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:1621:7333":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:11124:29294":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:5794:3419":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:11223:10548":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:10787:8104":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"1:1982:10405":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:32457:3187":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"20:4151:6412":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:11759:11743":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"16:8546:9533":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:10389:120":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"6:1500:11320":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"20:2995:5846":{"crate_id":20,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"20:501:3686":{"crate_id":20,"path":["libc","unix","rusage"],"kind":"struct"},"2:47320:10355":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:2084:197":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:22671:2928":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"1:12416:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:11742:10456":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"6:570:3695":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:11952:8045":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:11198:3012":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"20:3433:5888":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:16385:8912":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"16:5085:9119":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:30747:7282":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"5:1496:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"5:7575:7333":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:8549:2962":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"5:4536:2944":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:46072:10247":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:46200:10255":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"16:5318:9127":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:40827:10118":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"16:6173:9150":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:42878:7411":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:3349:2985":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:10246:21471":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:8620:11727":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"6:4816:5847":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:16684:8989":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"20:4203:6432":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlattr"],"kind":"struct"},"17:14640:8430":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:6217:220":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"20:3080:2624":{"crate_id":20,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:11503:8005":{"crate_id":17,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"2:42572:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:9202:7333":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"10:36:11308":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:39894:10092":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:16241:8882":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:15679:8711":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"5:7233:34503":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:4646:7420":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:2052:7279":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:8247:17933":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:14084:8322":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"18:481:7765":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"6:1657:4457":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:15496:8681":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:12356:26231":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:46325:10269":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:11247:2963":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"17:14807:8473":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"6:5471:11425":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:15777:8736":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:16728:9000":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"20:4193:6431":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"16:8528:9531":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"6:5593:5894":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"5:894:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:13034:17811":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:15931:8777":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:12931:8172":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"16:5113:9120":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:11824:25813":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:5305:7854":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"6:8308:11610":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:46554:10296":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:8542:2961":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:6700:3040":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"5:3347:9659":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:11706:8022":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"11:671:3012":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"11:881:9647":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:7415:25746":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"16:6852:9268":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"16:4873:9113":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"20:5447:7268":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:14947:8492":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:10977:34974":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:4826:11204":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"17:3720:7845":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:44787:11725":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"11:835:9641":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"6:5533:5889":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:9301:10554":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"5:3465:9747":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"14:187:20485":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:5094:12601":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:12082:8066":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:11112:29286":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:22501:12719":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"17:15286:8533":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:2610:17963":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"17:12135:8071":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:46604:10298":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:6871:3049":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"9:500:9723":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:9456:162":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"16:5449:9131":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:12762:8152":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"6:6443:6422":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:13554:8219":{"crate_id":17,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"6:497:3686":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:11016:29036":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:13662:8232":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"20:4138:6426":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:8664:10530":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:3304:28884":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"20:557:3692":{"crate_id":20,"path":["libc","unix","linger"],"kind":"struct"},"11:430:34935":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:47248:10349":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:8364:2978":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:16145:8848":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:12347:8096":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:13983:8297":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"11:2420:7333":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"2:41944:9980":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:41988:11705":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"17:16026:8799":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"20:3147:5859":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:4160:12571":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"20:495:3685":{"crate_id":20,"path":["libc","unix","rlimit"],"kind":"struct"},"16:8669:9436":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"16:908:7825":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"11:2228:8056":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"6:5387:11373":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"6:5357:11369":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"2:10864:31987":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"5:1614:9637":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"11:2137:9648":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"20:4042:6397":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"16:6866:21410":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:12851:8165":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"5:4337:2944":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"20:4806:6913":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:8003:2991":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"16:3126:20547":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:11998:8049":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"16:6144:21405":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"5:798:119":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"20:4077:6420":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"6:5450:11410":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:1650:9662":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:7780:31710":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"16:8585:9537":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"5:1604:9655":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"0:73:2384":{"crate_id":0,"path":["num_cpus","get_physical"],"kind":"function"},"20:4272:6455":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:39881:10091":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:4725:9942":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:47294:10353":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:9448:3046":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"2:44159:10005":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"20:3160:5861":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:4359:2944":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:3052:138":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:45081:9667":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:3288:17768":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"2:30800:7418":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"16:2840:9066":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:21667:3253":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:3254:3241":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"2:9850:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"6:5088:5871":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:15973:8788":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:39053:17952":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:10940:11730":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"6:538:3690":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:14520:8413":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:13570:21485":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"6:5325:11363":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"11:1105:9651":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"6:5541:5890":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:2710:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"5:3352:33326":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:11163:7985":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"16:8267:9486":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"11:772:9639":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:4435:9937":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:923:9640":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:13818:8273":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:11026:34972":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"16:6239:9156":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:9165:10549":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:45093:10231":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"5:3729:9654":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:46104:10249":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"14:7:9627":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:42387:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"20:5467:5914":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"14:220:9635":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"6:6652:11534":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"20:521:3687":{"crate_id":20,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"16:7938:9464":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"16:7765:9415":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:11290:9999":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:15731:8726":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:12403:920":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:10938:34971":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:3074:138":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"5:40:12512":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:10337:2927":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"16:4694:9109":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:4168:12572":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"16:2570:9054":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:2323:139":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:3736:17773":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:44783:11724":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:1624:9656":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"16:7542:9377":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"9:422:20393":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"6:1563:4449":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:8280:2977":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"16:5709:21404":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:11358:21492":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:15876:8759":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:2011:12540":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"20:3320:5876":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:26131:267":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:8209:2921":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"16:7282:9341":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"11:2559:11306":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:8245:128":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:44291:2959":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"6:7469:6918":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:46036:10241":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"5:7619:7333":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"6:6419:6420":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"20:5019:6923":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"20:4870:4377":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:14692:8435":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:40867:10121":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:3273:9392":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:10564:7816":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:12723:8149":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"6:6659:11535":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"20:5417:3641":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:43872:10174":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:6376:10037":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"16:2506:9051":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:6055:3047":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:11831:8010":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:11319:34973":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"11:1674:34919":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:43935:10178":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"18:698:7801":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:3420:125":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:12491:10010":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:40780:10115":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"1:5656:10429":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:7892:7831":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:3263:12628":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"6:5477:11428":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:661:10392":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:2957:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:2045:678":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:21677:33042":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"5:7611:7333":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:11606:7985":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"16:7521:9375":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:2493:2908":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"5:2157:2977":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:43418:10165":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:15586:8694":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:46264:10266":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:8108:10469":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:32322:11305":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"20:3363:5880":{"crate_id":20,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"6:7577:11593":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:13361:8205":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:16786:9013":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"2:13196:120":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:15602:8697":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"16:4241:9106":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:13585:10027":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"2:11222:9654":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"6:6680:11541":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"16:7424:21413":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"6:5428:11394":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:40704:10107":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:8485:2991":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:46427:10275":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:10607:153":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1:7902:10458":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:12018:8051":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"2:44805:131":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"1:2495:2909":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"17:14612:8426":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:1930:10404":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:11964:10594":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:44354:10100":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:43426:10166":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"20:3209:5867":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:23007:31770":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"16:2820:9065":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"5:7774:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"20:1436:4452":{"crate_id":20,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:12392:8100":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:12698:10016":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:4015:10414":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:3644:17953":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"5:7531:9656":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:13266:21482":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:40541:10097":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"16:6389:9177":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:38474:17951":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"16:2950:9071":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:15573:8689":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:10274:21472":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"20:1537:4461":{"crate_id":20,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:2969:258":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:12661:10013":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:47201:10346":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:14773:8470":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"5:735:9738":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:5983:3036":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"5:2377:11625":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"6:5036:11325":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:8073:12486":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"5:7787:9792":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"11:698:7333":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"16:7259:9340":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:12413:977":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"5:7561:33336":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"16:7578:10564":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:11515:8006":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:13757:8259":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:12699:8147":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"16:5060:9118":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:378:10386":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:15121:8524":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:12359:8097":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:0:568":{"crate_id":2,"path":["core"],"kind":"module"},"17:12897:8168":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:4116:12568":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"11:1888:9656":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"18:635:7790":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:16632:8977":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"2:43783:10168":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"6:6638:11523":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:10487:21479":{"crate_id":17,"path":["object","common","RelocationFlags"],"kind":"enum"},"17:12335:8095":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"6:6748:11561":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"6:6813:11584":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"20:4781:4376":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:13873:116":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"17:12095:8068":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"6:5441:11404":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:23169:10069":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"6:6723:11557":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"2:42290:9989":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:23100:12567":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:11847:10412":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"16:5255:9125":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"5:4307:2944":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"20:483:3683":{"crate_id":20,"path":["libc","unix","timeval"],"kind":"struct"},"2:44205:10191":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:12869:8211":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"5:5150:2944":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"20:4101:6422":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:44979:207":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:38419:17950":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:13169:8191":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"20:3215:5868":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"16:2435:20544":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"2:4720:9941":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:11255:11725":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"1:1106:9649":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:33353:17941":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"16:2415:20517":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"20:3355:5879":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Chdr"],"kind":"struct"},"2:45012:10224":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:44007:10012":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"6:6564:11491":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:42146:9984":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"6:7332:3566":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:11523:10007":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:3684:31809":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:13692:8236":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"18:623:34979":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:11509:10006":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"20:4229:6434":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"20:3408:5885":{"crate_id":20,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:9735:139":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"17:15689:8712":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:40800:2922":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"1:9416:187":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"6:5641:11467":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"18:735:25674":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:14886:8483":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:4501:17852":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"1:9474:2934":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"6:4984:5863":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"16:6111:9146":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:10650:12544":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:15887:8763":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"16:5379:9129":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:44623:10211":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"6:5179:5880":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:39784:215":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:9194:10552":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:8639:10520":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:12401:763":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"16:6738:34960":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:4812:12573":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"6:1684:4460":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"13:229:11293":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"16:7495:9368":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:44957:164":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:14072:8319":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:46716:10302":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"16:546:9027":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:34038:17945":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"20:3166:5862":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"16:6876:9271":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:12410:1857":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"17:10394:21476":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:23076:10063":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:14533:8106":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:3285:17767":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"6:8199:6924":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"16:3695:9101":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:7738:26228":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:40575:10100":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:22363:2928":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"6:5586:5893":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:10843:7970":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:5533:129":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"6:5494:11432":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"17:16798:9016":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"1:4110:12569":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:8264:10472":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:11757:21515":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"1:8749:3007":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"1:8197:2920":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"20:1531:4460":{"crate_id":20,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"20:3482:5893":{"crate_id":20,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:32400:244":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"11:1601:9658":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:12952:8174":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"16:3048:20546":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:8251:17932":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:4482:17766":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:11537:29295":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"17:14416:8396":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"20:3197:5866":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"20:3380:5882":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"5:2275:9754":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"18:670:7797":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"16:4983:9117":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:44598:10210":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:41403:10134":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"18:598:34982":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:22457:12718":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"1:5869:10432":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:13625:10126":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"1:1905:10402":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:22904:10043":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"16:5417:9130":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:30521:12553":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:6776:9954":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:6392:29251":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:43983:10182":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:40730:10108":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:12400:747":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"17:16775:9011":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"18:521:25676":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:12149:8072":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"17:10368:21475":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:13306:8202":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:16008:8796":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:3400:2986":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"6:553:3692":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:14312:8380":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"2:8063:3028":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"4:0:2756":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:21826:10040":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"16:2990:9073":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"16:8320:21418":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"7:0:1921":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:16084:8841":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"20:3086:5730":{"crate_id":20,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:14269:8369":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:11386:21493":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"2:42281:7396":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:9288:3038":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:2222:189":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:44259:10193":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:10597:7818":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"16:6822:21409":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"2:2771:135":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:44345:9936":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"5:1636:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:12583:8138":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"6:1632:4455":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"16:8028:9470":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:40858:10120":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"20:3286:5873":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"6:5127:5874":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:16656:8982":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"1:12396:1829":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"17:3503:7843":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"9:176:20458":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:15549:8687":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:14738:8459":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"20:3276:5872":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:11579:8014":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"6:8031:7268":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:44013:10186":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:44440:10198":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"11:2380:3012":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"20:3425:5887":{"crate_id":20,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"5:3101:33221":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:13717:205":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:45020:10226":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:22935:10044":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"20:1355:4443":{"crate_id":20,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"9:0:2758":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"16:2724:9061":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:10766:18034":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"2:39632:17848":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"5:5963:251":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"5:6275:2944":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"6:6666:11536":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:46156:10252":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"5:994:12496":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"6:4997:5865":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:10394:129":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:47305:10354":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:15431:8646":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:12028:8053":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"2:2612:17964":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"20:3019:5848":{"crate_id":20,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:43379:10158":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"16:5649:9132":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"16:7883:9188":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:2437:7842":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:22563:2928":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"6:7487:6919":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:8574:10522":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"6:7368:3475":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"20:3489:5894":{"crate_id":20,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"6:8249:5912":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"6:5405:11384":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:2751:2966":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:15905:8767":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"11:2400:9654":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"5:6533:12726":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"20:5033:6924":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","termios2"],"kind":"struct"},"17:15641:8706":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"6:5241:5887":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:11777:8030":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"2:12008:10008":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"17:13209:138":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"16:8636:21419":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:23202:10072":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"2:3490:12511":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"6:6765:11569":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"1:7821:25984":{"crate_id":1,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"2:41365:9969":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"16:2772:9063":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"11:488:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"11:2301:9378":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"20:1543:4462":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:40937:10127":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:6479:10431":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"15:306:20498":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"18:563:7776":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"18:689:7800":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:680:10395":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"20:4185:6430":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:5217:5884":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"20:1558:4464":{"crate_id":20,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"15:394:20508":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"2:5361:988":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:43862:10173":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:10744:2986":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"2:23158:10068":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"16:8298:9490":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"16:2684:9059":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:12395:1739":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:12475:18024":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"5:3097:11622":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:2378:21542":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:3258:12626":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"6:4829:5848":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:506:7829":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"16:8151:9093":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:2729:29279":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"20:5461:5913":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:4888:12604":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:42354:7333":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"6:7563:6923":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:16494:8245":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"17:14917:8489":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"6:1625:4454":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"16:5224:9124":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:2790:2976":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:3581:211":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:47239:10348":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"16:7462:9364":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"5:4569:2944":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"17:16209:8867":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"20:3059:5850":{"crate_id":20,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:13781:8260":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:2966:145":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"1:1083:9378":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"16:7919:9456":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:43944:10179":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"20:1514:4458":{"crate_id":20,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:1339:7834":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:7809:25983":{"crate_id":1,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"},"20:4107:6423":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:15989:8791":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:3217:3237":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:11051:239":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:3665:26505":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:1633:9659":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:14872:8480":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:33893:17944":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:44775:11722":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:13871:8280":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"6:1494:4443":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"16:4267:9107":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:10729:7822":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:14140:8339":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"5:7551:9783":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"11:2566:2896":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:2479:2904":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"20:134:3370":{"crate_id":20,"path":["libc","unix","FILE"],"kind":"enum"},"1:6736:3048":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"19:0:1305":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:10031:21465":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"5:0:309":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:9319:25742":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"16:8233:21417":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:40564:10099":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"18:726:7810":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:21814:12635":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"5:7541:9782":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"6:5395:11378":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:3247:3239":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"17:14460:8404":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"20:3006:5847":{"crate_id":20,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:42609:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:8202:2917":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:4566:10418":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"6:5375:6428":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:2596:679":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:3848:12552":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:14220:8344":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:15963:8785":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"6:7454:6916":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:7308:3608":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"20:1550:4463":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:14327:8382":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"18:608:7783":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:40928:9953":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"11:798:9656":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:5009:12578":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"6:6473:6425":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:15036:8512":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"16:7212:9327":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"5:221:9736":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:3072:226":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"17:12216:8079":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"2:41413:9972":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"16:8043:34957":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"20:3180:5864":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:15655:8709":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"16:2704:9060":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"16:7907:9455":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:8354:10474":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:46171:10253":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:5184:12608":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"5:3318:33325":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"5:1424:9653":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:12079:17798":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"1:6010:3037":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:10357:10402":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"17:12625:8139":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:13385:8206":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:965:9641":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:23089:10064":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"18:80:25664":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"6:1589:4452":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:10535:26089":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"17:11926:8044":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:12293:8088":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"6:1597:4453":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:10849:29279":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:4459:110":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:16642:8978":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"2:21723:33047":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"11:396:34922":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:8272:2975":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"6:8290:5916":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:14821:8475":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:40526:31746":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"11:1023:9648":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:41020:9964":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:16171:8857":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"6:6631:5878":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:3684:2614":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:40671:10104":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"17:11553:8011":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"20:2976:5844":{"crate_id":20,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:15769:8734":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"6:6611:11516":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:10332:21474":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:30811:31766":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"1:988:9646":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:11041:2928":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:44241:10192":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"1:12414:1931":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"16:2880:9068":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"20:469:3681":{"crate_id":20,"path":["libc","unix","group"],"kind":"struct"},"16:3889:7862":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:44633:10215":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:9267:12624":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"6:5507:11435":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"2:8757:17931":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:43996:10185":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"16:2640:9057":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:42498:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:46395:10273":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:2551:2613":{"crate_id":1,"path":["std","io"],"kind":"module"},"6:5069:5870":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:42072:31751":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:10141:21468":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"16:2467:9044":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:40887:9947":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:12260:21586":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"17:16187:8861":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:8891:3013":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:3826:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"20:5064:6926":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:41421:9974":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:41030:10130":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:4908:7423":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:44455:10203":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:6300:29282":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"16:3834:9102":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:30785:7284":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:23027:31781":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:11539:8010":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"11:2323:9648":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"20:4887:4380":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"16:2966:9072":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:42259:12489":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"5:6552:12727":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"5:3875:9752":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:22798:10041":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"6:5341:11367":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"20:542:3690":{"crate_id":20,"path":["libc","unix","pollfd"],"kind":"struct"},"6:7448:6915":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:31185:3253":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"1:8875:3011":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:40807:10116":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:5862:10431":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"16:8483:9527":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"6:485:3684":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"6:7586:6925":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:12605:7985":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:14845:8478":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:22591:17963":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"2:10355:144":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:2328:2900":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"20:3370:5881":{"crate_id":20,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:10408:7413":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:12122:8070":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:16341:8905":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"6:559:3693":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:42260:12616":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"16:6696:9246":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:6527:220":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:5117:12603":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:32398:237":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"18:538:7774":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:11878:7985":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"20:4904:6915":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:15753:8732":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:11367:10001":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:3674:2925":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"6:4921:5855":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"6:586:3697":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:4799:7421":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"16:6123:9079":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"11:1085:34921":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:22244:33054":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"6:5311:11358":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"16:8179:9476":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:46214:10256":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:23279:10079":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"2:12041:10009":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"17:14483:8409":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:1969:2944":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"6:5520:11436":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"17:13610:8225":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"11:708:9637":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:12860:8166":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:317:7824":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:14031:8309":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"20:3187:5865":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:3913:10413":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"11:1140:9652":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:44469:10206":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:2332:2698":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"5:6901:34461":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:7715:17880":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:43097:11706":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"16:6064:9080":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"5:789:250":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:8532:2960":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"1:8885:3012":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"11:1900:9659":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"6:8267:11604":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"11:351:34926":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"5:2825:11629":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:4222:12576":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:8295:165":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"11:1907:9660":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"16:5689:9133":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:10516:21480":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"18:659:7791":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:824:190":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"2:6965:9961":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"2:46139:10251":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:12507:17806":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"20:138:3371":{"crate_id":20,"path":["libc","unix","fpos_t"],"kind":"enum"},"16:8612:9095":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:23042:31779":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"20:1522:4459":{"crate_id":20,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:961:9638":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"11:1049:9649":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"20:1350:4442":{"crate_id":20,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:10655:9994":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:3656:2927":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:46378:10272":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:10663:7820":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:12234:8081":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"20:4278:2423":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:3205:3236":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"20:4180:6429":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"6:6449:6423":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"5:7677:2897":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"6:5025:5868":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:6507:11490":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"20:4847:4405":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:42185:173":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"11:873:9646":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"15:288:20497":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"16:6421:9029":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:32382:7421":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"20:1635:4518":{"crate_id":20,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:11708:10593":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"16:7016:9286":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"16:7980:9089":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"6:545:3691":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"11:1158:9653":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"16:3110:9096":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"16:3987:7870":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"2:22:826":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:23213:10073":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"2:40752:2475":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"1:4218:12575":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:13933:8290":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:9135:10547":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:41379:2617":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:45957:10232":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:9429:2944":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"5:4377:3012":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"16:6302:9168":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"6:7350:6913":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:21934:10040":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"5:2171:9752":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"16:6573:9215":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"6:1507:11323":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:532:12467":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:47396:10365":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:40849:10119":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:43152:31769":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"1:5640:10428":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:4677:12594":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"16:6914:9275":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"6:465:3681":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:46456:10276":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"6:5271:11339":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"16:7350:9348":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:46509:10279":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:15540:8686":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:14001:8305":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:12570:8137":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"5:2304:11621":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"5:7692:9777":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:4146:12570":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:3458:142":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"18:643:7767":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"5:7736:9788":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"18:113:25666":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:10980:140":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"16:2590:9055":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:14127:8338":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:8568:10520":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"11:1920:9662":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"5:291:34461":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:22991:10051":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:8732:12612":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:1115:9653":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"16:6998:9279":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"5:3373:9662":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:4877:3072":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:21706:33045":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"6:7414:4377":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:43190:138":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:4567:9939":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:9237:12623":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"16:8711:9549":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:13547:8218":{"crate_id":17,"path":["object","read","RelocationMap"],"kind":"struct"},"16:4152:9104":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:7796:25985":{"crate_id":1,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"1:3617:2924":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:982:9644":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:12319:8093":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:7372:31263":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:10115:21467":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:46004:10239":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:11983:10457":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:12415:1434":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:16132:8842":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:10803:2962":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:12409:21587":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:8902:3014":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:8304:3192":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:13471:7847":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:21922:2928":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:46666:10300":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:4492:10417":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:12225:8080":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"1:11236:10549":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"5:7511:7333":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"20:3071:5852":{"crate_id":20,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:13909:8286":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:11291:34975":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:44534:10209":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:44771:11721":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:10615:157":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:12960:17805":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:39712:12510":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:13427:8209":{"crate_id":17,"path":["object","read","ObjectMapFile"],"kind":"struct"},"1:12404:902":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"6:6534:6431":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:9433:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:43136:9505":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:44961:219":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:10250:10144":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"0:72:2366":{"crate_id":0,"path":["num_cpus","get"],"kind":"function"},"1:936:9656":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"20:3308:5875":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"16:6440:21407":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:12721:10017":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:4447:9938":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:13028:8185":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"17:13970:8296":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:42250:7398":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"16:7554:21414":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:10747:2982":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"1:6201:10431":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"5:3306:3012":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"5:3860:2977":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"18:680:7798":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"16:6731:9257":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:40554:10098":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"16:5348:9128":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"16:6984:9094":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:15160:8531":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"20:1368:4445":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"20:3471:5892":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:12007:29292":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"2:40515:10094":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"16:7358:9084":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:32364:10081":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"1:5274:10425":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:3212:247":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"9:328:11309":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"6:4869:5850":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"20:3154:5860":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:13349:8204":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"6:6480:6426":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:2146:17973":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"5:2182:9753":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"1:685:12484":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"11:785:9640":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"2:10336:226":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"17:15351:8584":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:42363:196":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:9747:26088":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"6:5139:5875":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:5265:11336":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:21704:33049":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:32458:3243":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:10861:139":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"17:15812:8742":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:10784:7965":{"crate_id":17,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"2:21689:33042":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"17:13945:8293":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"6:4890:2624":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:44329:10019":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:11985:8048":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"6:1696:4462":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"20:3226:5869":{"crate_id":20,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"20:5046:6925":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:40742:2962":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"2:47122:10343":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:16714:8997":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"6:4970:5861":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:13398:8208":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"5:306:3193":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:6942:233":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:6590:186":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"11:842:12494":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:12372:25719":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:11232:21495":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"20:489:3684":{"crate_id":20,"path":["libc","unix","timespec"],"kind":"struct"},"2:44336:10101":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:13958:8295":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"6:6700:11550":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"2:47048:10341":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"5:1625:9638":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:47093:10342":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:8027:10462":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:5281:32505":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:9208:10433":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:11281:7987":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"6:5648:5891":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:322:7825":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"16:6462:21408":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"16:8723:138":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:13193:8193":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"6:6437:6421":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:13537:8172":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:8820:3009":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:437:185":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"6:4990:5864":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"16:3141:7857":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:42166:194":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"16:7807:34961":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"6:5622:11458":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"6:6411:6419":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:12249:8085":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"16:5742:7963":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:46621:10299":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"16:6658:9237":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"20:4995:6921":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"20:1398:4448":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"20:4824:3475":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"5:7502:9750":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"5:6170:18258":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"16:7159:9314":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:9225:10553":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"5:4491:265":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"16:8105:9474":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"14:31:9627":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:44301:10194":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"16:6781:9260":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:3665:17850":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"20:4131:6425":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"16:6640:9223":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"1:902:7333":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:15077:8517":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"5:1011:3012":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:21735:33050":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"6:6493:6412":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:12163:8073":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"1:12389:476":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"5:7084:17835":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:5976:3035":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"18:589:7777":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:40686:10106":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"9:355:20406":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:12176:8074":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"6:6917:11586":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:15739:8729":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:21753:2928":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:9306:116":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:11247:2671":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"6:1711:4464":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:583:7830":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:45033:32839":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"1:573:12472":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:4855:7422":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"17:1220:7832":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:5465:203":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"17:16377:8909":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"16:4902:9114":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:14560:8419":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:16761:9007":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"2:46089:10248":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:10378:10574":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"17:14586:8422":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:3854:7846":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"20:3389:5883":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:13916:10038":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"20:3414:5886":{"crate_id":20,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"11:1564:20472":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:41179:9967":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:40836:2960":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:12920:8170":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"16:4810:9111":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:11653:8017":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:13798:8263":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:9152:10548":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"16:2860:9067":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:9393:11729":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:3347:2984":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"20:0:1013":{"crate_id":20,"path":["libc"],"kind":"module"},"20:1472:4454":{"crate_id":20,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"16:7044:9082":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:1639:9660":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"6:4964:5860":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:8690:10419":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:9421:3039":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"1:3445:2983":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"6:5462:11419":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:15:2868":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:39716:10086":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:15665:8710":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:8045:8104":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"17:2227:7835":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:11065:7983":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:15981:8789":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:46583:10297":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:46695:10301":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:4822:11200":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"11:740:9638":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:10741:2984":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"2:3659:147":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:39668:17772":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"17:15475:8676":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:47222:10347":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:10396:7408":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:43852:10172":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:23224:10074":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"20:3296:5874":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"5:6731:34461":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:11027:10469":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"17:12941:8173":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:12920:3015":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:12687:8146":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"20:3401:5884":{"crate_id":20,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:11818:8036":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"6:8261:5914":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:43630:9996":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"11:2121:9378":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:2973:257":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"11:2495:20467":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"16:7959:9467":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:46849:10307":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:12405:908":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"17:14043:8310":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:10418:21477":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"5:1410:9648":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"16:6625:9221":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:11617:7986":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:5319:2994":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"6:5255:5888":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"6:4805:5846":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"5:2265:12467":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"18:613:34980":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"6:4792:5845":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"6:1514:4444":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:9577:10403":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"5:7583:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:44949:11726":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"1:2645:2615":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"16:6970:9077":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:15829:8749":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:46185:10254":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:14902:8485":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"20:1574:4465":{"crate_id":20,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:14299:8378":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"2:23180:10070":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"17:15090:8518":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"5:1548:9654":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"16:8000:9090":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"16:6794:9261":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"17:15852:8752":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:6153:9950":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"16:7075:21411":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:47343:10362":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:40485:10093":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"16:8066:21416":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"16:6337:9171":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"11:2533:11301":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:2808:202":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"11:0:2760":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"17:15439:8647":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:4230:12577":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"6:6691:11544":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"1:1617:3012":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:32489:115":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"6:4896:5730":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:33692:12629":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"6:4976:5862":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:3310:30861":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:46281:10267":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:21806:2928":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:9312:10557":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:43165:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"6:6882:2423":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:21721:33053":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:12371:8098":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:47259:10350":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"18:531:7771":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:12204:8077":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"2:44971:227":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:11592:7946":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"20:549:3691":{"crate_id":20,"path":["libc","unix","winsize"],"kind":"struct"},"17:11475:21495":{"crate_id":17,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"1:0:1731":{"crate_id":1,"path":["std"],"kind":"module"},"16:8058:9472":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:10793:7968":{"crate_id":17,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"17:13181:8192":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"2:47151:10344":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"5:1259:34515":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:22232:10039":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"6:6740:11560":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"2:44751:11716":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"2:43396:157":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:44087:10188":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:8087:12487":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:10518:114":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"1:4928:12579":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"6:7341:11592":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"20:5485:5917":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:15148:8527":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:44419:17817":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:12035:8056":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:46243:10265":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:44141:10004":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:13055:8010":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"1:9764:128":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"16:4956:9116":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:1867:10400":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:39744:210":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"6:8008:7267":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:1690:4461":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:15024:8511":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:12280:8086":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:43387:10159":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:13041:8186":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"9:236:3008":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:43909:10116":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:43211:7419":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"6:7604:6926":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:12407:895":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:15785:8738":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:47180:10345":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"11:1880:3012":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"16:6028:9075":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"6:5319:11362":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"20:1431:4451":{"crate_id":20,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"6:8255:5913":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:12108:8069":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:6817:3043":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"6:5635:11464":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"17:16555:8963":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"16:896:9036":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"17:14933:8490":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:10097:21466":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"16:7990:9469":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:892:9654":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"6:0:1013":{"crate_id":6,"path":["libc"],"kind":"module"},"2:44561:10022":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:12983:21613":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:14627:8429":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"16:5757:9134":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"5:6033:9656":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:12981:17803":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"16:8096:9473":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:10832:32463":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:9492:10566":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:12776:8153":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"6:8319:11614":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:40770:10109":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:13854:8278":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:11908:10414":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"5:7797:9793":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:4699:12595":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:10987:10573":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"2:13896:10037":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"16:6368:9023":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:40715:18011":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"3:234:226":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:15844:8751":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:14055:8311":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"16:7030:9288":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"5:1132:34461":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:7518:6920":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:39766:212":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:13733:8245":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"16:7223:9328":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"6:491:3685":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"16:6942:9277":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:5131:7852":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"1:4891:12594":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:12976:8176":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"16:6843:9267":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:44320:10196":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"5:5562:17789":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"6:5230:5886":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:4986:10421":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"20:3461:5891":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:5088:17870":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"20:1377:4446":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"6:5288:11350":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"20:4817:6914":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:677:10393":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:3343:9393":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:8006:2928":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:10970:2921":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"1:8579:12550":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"11:2349:9649":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"1:2325:2899":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:13491:8213":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:42722:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:40699:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:13592:8222":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"5:3940:9747":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"6:517:3687":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:41165:9966":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:3461:143":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:13921:8289":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:2963:163":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"17:13082:7986":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"6:6526:6430":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"16:8209:9081":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:34211:17946":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"14:40:8260":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"6:5205:5883":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"20:1386:4447":{"crate_id":20,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:1628:9747":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"5:1794:34461":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:43408:3008":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:42461:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:3207:118":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"6:4947:5858":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:13635:8226":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:42685:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:11050:25712":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:8251:10408":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"17:12840:8161":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:46799:10305":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"17:11114:7984":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:40919:10126":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:14346:8387":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"18:651:7767":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:6696:2617":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"16:6608:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:44612:17818":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:14099:8328":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:15557:8688":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:22628:12724":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"16:8565:9536":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"11:2148:9649":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"6:6672:11539":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:14796:8471":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"20:568:3694":{"crate_id":20,"path":["libc","unix","itimerval"],"kind":"struct"},"1:11130:29276":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:13451:8211":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:16019:8797":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:13322:21483":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:4932:12582":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:2148:17974":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"6:4929:5856":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:5980:2944":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"2:4598:9940":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:16036:8804":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"6:5044:11330":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:5726:10430":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"14:165:20478":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"16:7168:9315":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:43964:10181":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:44759:11718":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:16179:8860":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"16:4120:9103":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"6:564:3694":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"6:4902:5853":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:9352:10562":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:1869:10401":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:16832:8295":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"1:4777:12600":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:952:9655":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"5:3716:3012":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:2802:195":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"20:5494:7269":{"crate_id":20,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:5482:5844":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"20:3174:5863":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"6:532:3689":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:14438:8403":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:40637:10103":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"6:7316:4376":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:5103:12602":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"1:1928:10403":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:38364:17949":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:30779:7283":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:5797:12617":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"17:11075:34968":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:42871:7410":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:766:154":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:13205:8194":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"11:1884:7333":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:47373:10364":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:44311:10195":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"16:8223:9478":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:46410:10274":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"6:5629:11461":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"2:21932:12633":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"6:5334:11366":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"2:3933:9656":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:41006:7788":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"20:4797:3566":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"5:5518:34461":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:15136:8172":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"11:809:9747":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"6:1584:4451":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"6:5412:1257":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:3093:9804":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"1:8503:2923":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:44954:151":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"15:0:2763":{"crate_id":15,"path":["addr2line"],"kind":"module"},"9:53:20409":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:46733:10303":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"16:2796:9064":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:10961:10567":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"2:44646:10219":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:47268:10351":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"5:1586:9639":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"20:3257:5871":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"6:5670:11477":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"6:7431:4380":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"5:7748:9790":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"5:5566:17790":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"6:7463:6917":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:45972:10235":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:12393:335":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"6:8330:11615":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:8751:12501":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:44664:10023":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"5:3339:9661":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:9178:10550":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"11:328:11299":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:12390:1891":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"1:1097:9648":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:21808:12632":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:14375:8392":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:42194:3012":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"16:5727:7962":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:12402:742":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"6:1643:4456":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:12550:8136":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:15050:8513":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:39804:214":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"6:473:3682":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:12388:1187":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:14750:8461":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:44105:10189":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"16:2660:9058":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:10442:21478":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"20:4069:6419":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:4957:5859":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:11990:10457":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"16:6904:9274":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:42346:9654":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"11:364:34924":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:15997:8792":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:13014:8183":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"1:10444:12619":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"16:6890:9076":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:2082:1372":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"6:7391:4405":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:43124:11714":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:11008:29034":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"2:44829:10221":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"16:8165:9083":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"16:4929:9115":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:8494:2993":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1:10950:2917":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"1:8192:2919":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"6:6599:11512":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"6:8353:7269":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:42298:226":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"5:7185:264":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"17:14358:8389":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:42759:3034":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:45070:10230":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:11958:8046":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:14284:8373":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"20:1490:4456":{"crate_id":20,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:16701:8991":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"1:12399:744":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"20:563:3693":{"crate_id":20,"path":["libc","unix","sigval"],"kind":"struct"},"1:10376:10575":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"2:43843:10170":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:22210:12638":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"17:16822:8290":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"6:5196:5882":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"16:7471:9367":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"16:2530:9052":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:23069:11638":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:1675:4459":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:22205:2928":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"2:40591:10101":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"16:903:7824":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"2:40896:9949":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:11864:8039":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:15410:8636":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"17:12736:8150":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:41388:9971":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:15953:8782":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:6814:3042":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:7490:30592":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"6:5282:11347":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"20:5004:6922":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:2505:2914":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:12387:420":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:40067:17883":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"2:42094:10147":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:12966:9988":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"5:1898:9747":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"2:3699:17770":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:12906:8169":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:43611:10167":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"6:6790:11578":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:946:9747":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"5:7591:9784":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:4:1270":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:12409:1851":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"20:4943:6919":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:40949:9959":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:46051:10242":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:11457:8001":{"crate_id":17,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"1:628:12481":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"5:7760:9791":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"5:4142:9656":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"20:477:3682":{"crate_id":20,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:46019:10240":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:36433:9398":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:8333:130":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:1539:4447":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"6:5051:11332":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:40583:9936":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:41155:2961":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"7:79:20384":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:15760:8733":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:40990:9962":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"18:754:7815":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:8625:12593":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"20:4919:6917":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"5:5309:3033":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"6:6623:5879":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:11290:11734":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"6:5186:5881":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:10823:7826":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:3654:254":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:13222:21481":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:12962:21612":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:12008:7902":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"16:3014:20545":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:12412:1845":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"20:4209:6433":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"}},"external_crates":{"20":{"name":"libc","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":30}