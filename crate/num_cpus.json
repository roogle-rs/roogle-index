{"root":"0:0:1790","crate_version":"1.15.0","includes_private":false,"index":{"2:12016:1782":{"id":"2:12016:1782","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11561:125","`FromStr`":"2:11560:2291"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:41339:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:11560:2291","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11560:2291","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11904:34048":{"id":"2:11904:34048","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11902:34047"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11930:31087":{"id":"2:11930:31087","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:43452:9157","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5389:34722":{"id":"5:5389:34722","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7250:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7250:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11954:28730":{"id":"2:11954:28730","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11600:16427","`DoubleEndedIterator`":"2:7193:119","prim@char":"1:11871:415","str::split":"2:11948:1923"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:43178:9140","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:9130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11605:9130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11620:16425","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11963:28732":{"id":"2:11963:28732","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11871:415","self::pattern":"2:11600:16427","str::rsplitn":"2:11966:28734"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:43264:9142","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:9130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:72:1655":{"id":"0:72:1655","crate_id":0,"name":"get","span":{"filename":"src/lib.rs","begin":[73,0],"end":[75,1]},"visibility":"public","docs":"Returns the number of available CPUs of the current system.\n\nThis function will get the number of logical cores. Sometimes this is different from the number\nof physical cores (See [Simultaneous multithreading on Wikipedia][smt]).\n\nThis will always return at least `1`.\n\n# Examples\n\n```\nlet cpus = num_cpus::get();\nif cpus > 1 {\n    println!(\"We are on a multicore system with {} CPUs\", cpus);\n} else {\n    println!(\"We are on a single core system\");\n}\n```\n\n# Note\n\nThis will check [sched affinity] on Linux, showing a lower number of CPUs if the current\nthread does not have access to all the computer's CPUs.\n\nThis will also check [cgroups], frequently used in containers to constrain CPU usage.\n\n[smt]: https://en.wikipedia.org/wiki/Simultaneous_multithreading\n[sched affinity]: http://www.gnu.org/software/libc/manual/html_node/CPU-Affinity.html\n[cgroups]: https://www.kernel.org/doc/Documentation/cgroup-v1/cgroups.txt","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5383:6552":{"id":"5:5383:6552","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7250:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7250:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:9130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5400:28188":{"id":"5:5400:28188","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12021:28186"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7250:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11924:9446":{"id":"2:11924:9446","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11871:415"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:43136:9427","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11978:34057":{"id":"2:11978:34057","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11600:16427","`DoubleEndedIterator`":"2:7193:119","prim@char":"1:11871:415","str::matches":"2:11975:2149"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:43382:9434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:9130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11605:9130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11620:16425","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11951:28728":{"id":"2:11951:28728","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11871:415","self::pattern":"2:11600:16427"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:11423:9137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:9130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:73:1673":{"id":"0:73:1673","crate_id":0,"name":"get_physical","span":{"filename":"src/lib.rs","begin":[108,0],"end":[110,1]},"visibility":"public","docs":"Returns the number of physical cores of the current system.\n\nThis will always return at least `1`.\n\n# Note\n\nPhysical count is supported only on Linux, mac OS and Windows platforms.\nOn other platforms, or if the physical count fails on supported platforms,\nthis function returns the same as [`get()`], which is the number of logical\nCPUS.\n\n# Examples\n\n```\nlet logical_cpus = num_cpus::get();\nlet physical_cpus = num_cpus::get_physical();\nif logical_cpus > physical_cpus {\n    println!(\"We have simultaneous multithreading with about {:.2} \\\n              logical cores to 1 physical core.\", \n              (logical_cpus as f64) / (physical_cpus as f64));\n} else if logical_cpus == physical_cpus {\n    println!(\"Either we don't have simultaneous multithreading, or our \\\n              system doesn't support getting the number of physical CPUs.\");\n} else {\n    println!(\"We have less logical CPUs than physical CPUs, maybe we only have access to \\\n              some of the CPUs on our system.\");\n}\n```\n\n[`get()`]: fn.get.html","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11898":{"id":"2:11898","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11899:807","2:11900:2004","2:11901:34046","2:11902:34047","2:11904:34048","2:11907:29806","2:11908:34049","2:11909:312","2:11910:1695","2:11911:1655","2:11913:28695","2:11915:28696","2:11917:28697","2:11919:34050","2:11920:34051","2:11921:28719","2:11922:28720","2:11923:9158","2:11924:9446","2:11925:6595","2:11926:31076","2:11927:31083","2:11928:1920","2:11929:34052","2:11930:31087","2:11931:28736","2:11934:28346","2:11937:28348","2:11940:1988","2:11944:6604","2:11948:1923","2:11951:28728","2:11954:28730","2:11957:34053","2:11960:34054","2:11963:28732","2:11966:28734","2:11969:34055","2:11972:34056","2:11975:2149","2:11978:34057","2:11981:34058","2:11984:34059","2:11987:1927","2:11989:34060","2:11991:34061","2:11993:34062","2:11994:34063","2:11995:34064","2:11998:34065","2:12001:1969","2:12004:28737","2:12007:34066","2:12010:34067","2:12013:34068","2:12016:1782","2:12018:28189","2:12019:29810","2:12020:28190","2:12021:28186","2:12022:28185","2:12023:34069","2:12025:11182","2:12026:34070"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11910:1695":{"id":"2:11910:1695","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11888:1486"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11902:34047":{"id":"2:11902:34047","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11923:9158":{"id":"2:11923:9158","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11871:415"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:43130:9150","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11917:28697":{"id":"2:11917:28697","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9780:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9780:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11966:28734":{"id":"2:11966:28734","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11871:415","str::splitn":"2:11963:28732","self::pattern":"2:11600:16427"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:43282:9143","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:9130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11605:9130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11620:16425","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11909:312":{"id":"2:11909:312","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:11910:1695","`u8`":"1:11888:1486"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5401:28187":{"id":"5:5401:28187","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12022:28185"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7250:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11937:28348":{"id":"2:11937:28348","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11871:415","self::pattern":"2:11600:16427"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:9130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11605:9130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11620:16425","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11944:6604":{"id":"2:11944:6604","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41197:177","prim@char":"1:11871:415","self::pattern":"2:11600:16427"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41195:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:9130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11605:9130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11620:16425","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11922:28720":{"id":"2:11922:28720","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11921:28719"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11925:6595":{"id":"2:11925:6595","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:43146:2237","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11899:807":{"id":"2:11899:807","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11871:415"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11901:34046":{"id":"2:11901:34046","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11915:28696":{"id":"2:11915:28696","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9780:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9780:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11940:1988":{"id":"2:11940:1988","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41197:177","prim@char":"1:11871:415","self::pattern":"2:11600:16427"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41195:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:9130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11987:1927":{"id":"2:11987:1927","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12010:34067":{"id":"2:12010:34067","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11871:415","self::pattern":"2:11600:16427"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:9130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12007:34066":{"id":"2:12007:34066","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11871:415","self::pattern":"2:11600:16427"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:9130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11605:9130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11620:16425","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11948:1923":{"id":"2:11948:1923","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11600:16427","`DoubleEndedIterator`":"2:7193:119","prim@char":"1:11871:415","str::split_whitespace":"2:11926:31076","str::rsplit":"2:11954:28730"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:43160:2238","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:9130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11926:31076":{"id":"2:11926:31076","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11927:31083"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:43434:9436","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11928:1920":{"id":"2:11928:1920","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:43414:2234","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11991:34061":{"id":"2:11991:34061","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5382:34720":{"id":"5:5382:34720","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:279:2469","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6999:9045","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:279:2469","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6999:9045","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11900:2004":{"id":"2:11900:2004","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11957:34053":{"id":"2:11957:34053","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11600:16427","str::split":"2:11948:1923","prim@char":"1:11871:415","`DoubleEndedIterator`":"2:7193:119","str::rsplit_terminator":"2:11960:34054"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:43210:9429","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:9130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11994:34063":{"id":"2:11994:34063","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1790":{"id":"0:0:1790","crate_id":0,"name":"num_cpus","span":{"filename":"src/lib.rs","begin":[1,0],"end":[459,1]},"visibility":"public","docs":"A crate with utilities to determine the number of CPUs available on the\ncurrent system.\n\nSometimes the CPU will exaggerate the number of CPUs it contains, because it can use\n[processor tricks] to deliver increased performance when there are more threads. This \ncrate provides methods to get both the logical and physical numbers of cores.\n\nThis information can be used as a guide to how many tasks can be run in parallel.\nThere are many properties of the system architecture that will affect parallelism,\nfor example memory access speeds (for all the caches and RAM) and the physical\narchitecture of the processor, so the number of CPUs should be used as a rough guide\nonly.\n\n\n## Examples\n\nFetch the number of logical CPUs.\n\n```\nlet cpus = num_cpus::get();\n```\n\nSee [`rayon::Threadpool`] for an example of where the number of CPUs could be\nused when setting up parallel jobs (Where the threadpool example uses a fixed\nnumber 8, it could use the number of CPUs).\n\n[processor tricks]: https://en.wikipedia.org/wiki/Simultaneous_multithreading\n[`rayon::ThreadPool`]: https://docs.rs/rayon/1.*/rayon/struct.ThreadPool.html","links":{},"attrs":["#![deny(missing_docs)]","#![allow(non_snake_case)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:72:1655","0:73:1673"],"is_stripped":false}},"2:11995:34064":{"id":"2:11995:34064","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11871:415","self::pattern":"2:11600:16427"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:9130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11605:9130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11625:16424","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11969:34055":{"id":"2:11969:34055","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41195:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:9130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11972:34056":{"id":"2:11972:34056","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41195:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:9130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11605:9130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11620:16425","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12021:28186":{"id":"2:12021:28186","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11927:31083":{"id":"2:11927:31083","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11926:31076"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:43443:9437","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11920:34051":{"id":"2:11920:34051","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11877:1388","crate::ops::IndexMut":"2:2973:11205","str::slice_unchecked":"2:11919:34050"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11921:28719":{"id":"2:11921:28719","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11922:28720"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12004:28737":{"id":"2:12004:28737","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11871:415","self::pattern":"2:11600:16427"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41195:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:9130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11605:9130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11620:16425","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12018:28189":{"id":"2:12018:28189","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12022:28185":{"id":"2:12022:28185","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5386:34721":{"id":"5:5386:34721","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7250:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7250:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:9130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12026:34070":{"id":"2:12026:34070","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4524:34070"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:43477:9347","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12001:1969":{"id":"2:12001:1969","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11871:415","self::pattern":"2:11600:16427"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41195:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:9130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5397:34723":{"id":"5:5397:34723","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7250:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7250:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5381":{"id":"5:5381","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5382:34720","5:5383:6552","5:5386:34721","5:5389:34722","5:5397:34723","5:5398:34724","5:5399:2263","5:5400:28188","5:5401:28187"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11934:28346":{"id":"2:11934:28346","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11871:415","self::pattern":"2:11600:16427"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:9130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11960:34054":{"id":"2:11960:34054","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11600:16427","str::split":"2:11948:1923","prim@char":"1:11871:415","str::split_terminator":"2:11957:34053"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:43228:9430","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:9130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11605:9130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11620:16425","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11981:34058":{"id":"2:11981:34058","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11600:16427","`DoubleEndedIterator`":"2:7193:119","prim@char":"1:11871:415","str::rmatch_indices":"2:11984:34059"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:43310:9431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:9130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11911:1655":{"id":"2:11911:1655","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41197:177"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41195:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9780:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9780:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11919:34050":{"id":"2:11919:34050","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11877:1388","str::slice_mut_unchecked":"2:11920:34051","crate::ops::Index":"2:2969:11204"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11931:28736":{"id":"2:11931:28736","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11871:415","self::pattern":"2:11600:16427"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:9130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11975:2149":{"id":"2:11975:2149","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11600:16427","`DoubleEndedIterator`":"2:7193:119","prim@char":"1:11871:415","str::matches":"2:11975:2149"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:43364:9433","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:9130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12013:34068":{"id":"2:12013:34068","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11871:415","self::pattern":"2:11600:16427"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:9130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11605:9130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11620:16425","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11908:34049":{"id":"2:11908:34049","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:12023:34069":{"id":"2:12023:34069","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4526:34069"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:43459:9348","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5398:34724":{"id":"5:5398:34724","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:279:2469","`String`":"5:7250:222"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:279:2469","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6999:9045","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7250:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11989:34060":{"id":"2:11989:34060","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11913:28695":{"id":"2:11913:28695","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41197:177"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41195:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9780:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9780:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11984:34059":{"id":"2:11984:34059","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11600:16427","`DoubleEndedIterator`":"2:7193:119","prim@char":"1:11871:415","str::match_indices":"2:11981:34058"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:43328:9432","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:9130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11605:9130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11620:16425","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12025:11182":{"id":"2:12025:11182","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4527:11182"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:43468:9082","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11907:29806":{"id":"2:11907:29806","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11167:16428"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11929:34052":{"id":"2:11929:34052","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:43424:9435","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11998:34065":{"id":"2:11998:34065","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11871:415","self::pattern":"2:11600:16427"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:9130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11993:34062":{"id":"2:11993:34062","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12019:29810":{"id":"2:12019:29810","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39353:29805","Self::is_ascii":"2:12018:28189"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41195:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"AsciiChar","id":"2:39353:29805","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5399:2263":{"id":"5:5399:2263","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7250:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7250:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12020:28190":{"id":"2:12020:28190","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"2:43118:9426":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:39964:1771":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"2:8203:11297":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:7687:9201":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"20:4042:5669":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"15:0:2049":{"crate_id":15,"path":["addr2line"],"kind":"module"},"11:320:7042":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"18:614:34887":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:10206:9142":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:12902:8050":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:44900:9472":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:13698:8285":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:10733:9146":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"5:4046:8962":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:13145:8125":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:8909:2237":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:11215:9655":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"20:1558:3736":{"crate_id":20,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"20:4203:5704":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlattr"],"kind":"struct"},"2:42204:67":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"18:707:7286":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:7781:2198":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:4592:16495":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"20:4919:6189":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:42496:2283":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:1919:19508":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:2696:2514":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"16:8170:8853":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:10580:7588":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:7562:9597":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:42947:9411":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"20:5494:6541":{"crate_id":20,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"16:7529:8406":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:43879:10862":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"17:8195:19445":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:4773:32521":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"5:3687:9047":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"6:4554:5142":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"20:3160:5133":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:5976:10716":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:21520:9170":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:21682:9178":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:13181:8130":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:13240:8149":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:4324:6689":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:2784:16552":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:8309:11293":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:46605:9564":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:10626:7593":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:40116:9093":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:45177:9483":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"6:4924:10627":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:11060:7597":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:4069:27928":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:11081:9647":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"2:40239:9106":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:4323:9625":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:9946:7502":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:9972:9610":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"16:5346:8449":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"16:6876:8400":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:39139:9210":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1:9991:26248":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"16:6336:8576":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"6:554:2963":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"20:1368:3717":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"5:5484:7089":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:10452:7164":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"17:13194:8136":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:9188:34874":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"9:234:2283":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:487:7312":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"16:7588:8783":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"20:4824:2747":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"11:853:8954":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:6582:215":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"20:4974:6192":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"18:671:7280":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"20:4185:5702":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:4740:5160":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:39173:6689":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"2:9780:220":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:8958:9758":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"16:7065:8686":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"16:5000:8444":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"16:2694:8380":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:22346:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"6:4510:5140":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"20:536:2961":{"crate_id":20,"path":["libc","unix","iovec"],"kind":"struct"},"6:1747:3737":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"5:5234:16412":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:8417:2285":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"6:1617:3725":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:9923:2287":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:12019:7528":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:618:9599":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:2339:2184":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:4755:11257":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"11:1003:8956":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:8828:11305":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:2535:2248":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:11339:7684":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"16:6575:19402":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:2864:126":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:43759:9455":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"6:4529:10539":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:47219:9575":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"5:6243:7076":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:12098:7834":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"5:7145:2177":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:41133:9389":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"11:2178:10511":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:10569:7584":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"16:8269:126":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:12393:105":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"6:1520:10529":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:11892:1482":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"16:2742:8382":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"20:1398:3720":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"13:226:10504":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:9218:7437":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:8131:2237":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"1:11885:739":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"18:515:7248":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:20439:2529":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"6:7240:6539":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"18:609:7267":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"20:138:2643":{"crate_id":20,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:3876:11247":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:13344:8174":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:4378:6690":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"5:5794:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:9972:2238":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:38974:198":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"16:6164:8533":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:1906:9078":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:635:9600":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"20:1514:3730":{"crate_id":20,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"20:5046:6197":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:10104:7521":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:8204:9129":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:4398:2351":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:10921:7166":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"5:7069:9062":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:11837:25879":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"6:4277:5117":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:43887:10864":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"6:4804:10571":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:4251:9624":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"20:3363:5152":{"crate_id":20,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:46215:9530":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:7660:9664":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"2:3630:6609":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:10660:7597":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:11889:1483":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1:8726:184":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:2341:2185":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:9321:143":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"5:7190:9063":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"6:4734:10543":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"5:2188:10773":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"6:4414:5128":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"20:3080:1910":{"crate_id":20,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:355:9595":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:7450:7313":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:12622:7597":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:5906:7146":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"6:1571:3720":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:9178:7436":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:12461:7906":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:13411:8193":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:4799:791":{"crate_id":2,"path":["core","iter"],"kind":"module"},"16:6307:8390":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:11153:9148":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:43899:10867":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"20:3471:5164":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"16:5797:8475":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:11628:7748":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:7271:157":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"6:4819:5699":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"6:5996:10722":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:2505:131":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:40249:9374":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:9886:7490":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"6:6616:3677":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:1071:8957":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:1783:9608":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"16:7803:8797":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"6:1527:10532":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"5:4335:7082":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"20:549:2963":{"crate_id":20,"path":["libc","unix","winsize"],"kind":"struct"},"1:11874:1043":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:38912:16396":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"6:5817:5684":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"5:6574:7089":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:3453:2206":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"1:6534:2321":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"18:80:23307":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:9110:26160":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"16:8129:8848":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:40027:9359":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:45593:9503":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:41512:80":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:44137:9466":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"6:6788:6195":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:6679:6188":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:3140:232":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:10491:7575":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:3165:2259":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:11614:7286":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"6:587:2968":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:45279:9487":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:11641:7749":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:9372:2201":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"20:3296:5146":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:39903:9355":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"5:6289:7055":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"20:3408:5157":{"crate_id":20,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:13477:8208":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:12550:7924":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"20:3401:5156":{"crate_id":20,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:9313:139":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"17:11136:7636":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:6369:2314":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:40087:9364":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:9488:7455":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"16:3782:8420":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"6:6098:5727":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:2204:127":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:2357:2190":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"20:4229:5706":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"6:4542:5141":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:13879:8331":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:2499:73":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:45325:9494":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"5:7008:6609":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:41090:10852":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"6:6012:10727":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:39353:29805":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:1572:7046":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"17:12496:7918":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:4732:7144":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"5:1381:6609":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:11653:7752":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:39100:2171":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:44179:8971":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:43104:9423":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:1062:8956":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:4849:11283":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"18:681:7281":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:38959:9205":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"6:4354:5122":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:13356:8175":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:22082:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"2:31873:9201":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"20:3433:5160":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:8475:2288":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"17:11391:7695":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:45569:9502":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:8250:9726":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:43136:9427":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:2235:97":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:2780:16553":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:10932:7167":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"5:7157:2178":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:10649:7595":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:44094:193":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"20:3389:5155":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"20:3414:5158":{"crate_id":20,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:4091:11268":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:5682:2310":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:2569:2241":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:20636:11322":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"20:4180:5701":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:8796:30651":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:40190:9372":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:11615:7744":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"5:3157:8966":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:1577:8966":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"18:521:23320":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"5:782:7058":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"5:1431:8945":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:8205:10872":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:45232:9486":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"6:482:2954":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"20:4095:5693":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"20:4910:6188":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"20:1410:3721":{"crate_id":20,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"20:4120:5696":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:30083:6558":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:11502:7715":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"11:985:8687":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:4752:386":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"6:573:2966":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:10589:7589":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:20486:31807":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"6:7479:5185":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:47318:9582":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"11:777:7048":{"crate_id":11,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"17:9734:7478":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:11069:19471":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:47239:9577":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:2793:8702":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"17:10039:7514":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"6:4592:5144":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"16:7711:8787":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"5:2905:33743":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:9796:7483":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:8309:9130":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:11832:7795":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"20:489:2956":{"crate_id":20,"path":["libc","unix","timespec"],"kind":"struct"},"18:755:7298":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"16:7626:8784":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:13376:8182":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"16:4596:8432":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"5:3128:33853":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:10165:9141":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:20699:11324":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"6:4449:5132":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"5:5190:7055":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:1985:182":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:49200:11351":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"17:10015:7510":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:9670:7474":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:39056:199":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"16:8142:8851":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:43911:10870":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"20:3443:5161":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:5481:9094":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"16:2720:8381":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:20881:11259":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:10672:2202":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"5:1421:8963":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:42714:10861":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"10:0:2045":{"crate_id":10,"path":["adler"],"kind":"module"},"17:13135:8124":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"6:1731:3736":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:22886:9071":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:10026:7511":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"6:7520:5189":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:8972:24514":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:31942:2523":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"6:1652:3727":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:8276:9626":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"5:2911:33744":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"6:6575:6185":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"16:8047:8839":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"5:210:7053":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:11891:1485":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"1:4569:10372":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:42259:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"17:12158:7842":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:8469:2287":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"6:7263:6540":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:10316:7560":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:45425:9497":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:47199:9573":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:10068:7518":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:11321:9619":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:11476:9656":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"16:6146:192":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:11888:1486":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"1:7561:11259":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:10897:7619":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:2899:2240":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:9559:7123":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"2:4314:7110":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:7164:2468":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:8486:2289":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"5:2076:7070":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"16:6236:8566":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:13309:8165":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"11:725:8947":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:12403:7897":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:4637:11273":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"20:3197:5138":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:12033:7826":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"20:3380:5154":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"15:198:18495":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:21821:9193":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"6:562:2964":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"6:4715:5158":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"16:4818:8438":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"16:4480:8428":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"16:4037:8424":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"6:6673:6187":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"16:3585:8418":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"16:6671:8625":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"20:4298:5728":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:547:2962":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:41832:2309":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:1537:2224":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"17:11544:7720":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:13564:8257":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"5:35:7051":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"16:154:7036":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"20:4817:6186":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:2338:180":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"16:6919:34865":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:7788:2202":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"1:4674:11258":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:11869:369":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"11:1518:18476":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:2206:2180":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:13651:8273":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"6:541:2961":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:11446:7703":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:8860:11306":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:8216:9722":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"6:568:2965":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:12318:7884":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"5:1611:7055":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:45523:9500":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"5:7173:101":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"6:4664:5152":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:39917:100":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:41954:6679":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:44946:9474":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"20:5473:5187":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:42514:9407":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"6:1609:3724":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"6:4399:5126":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:7585:9659":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"11:60:34846":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:867:6609":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"20:521:2959":{"crate_id":20,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:21807:9192":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"16:6935:8663":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:3320:2266":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:2741:11308":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"16:2967:18541":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:40200:9373":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"20:582:2968":{"crate_id":20,"path":["libc","unix","servent"],"kind":"struct"},"14:31:8936":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"16:6179:8535":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"16:4510:8429":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:45644:9504":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:49635:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:43891:10865":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"16:7572:34866":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"6:1710:3733":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"20:3059:5122":{"crate_id":20,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"5:1212:8957":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:39014:197":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:4409:11273":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:585:11181":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:9721:7477":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:20484:31805":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"20:1377:3718":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:43660:9449":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:11890:1484":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"16:4445:8427":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:12196:149":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:10857:19469":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"16:7449:8766":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:9653:7471":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"20:3425:5159":{"crate_id":20,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:11894:1539":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:5063:189":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"5:5640:230":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:41968:6680":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:9424:7447":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"16:0:2050":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:2910:2463":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:12646:7942":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:2682:2513":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"16:8090:8844":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"20:590:2969":{"crate_id":20,"path":["libc","unix","protoent"],"kind":"struct"},"17:10092:7520":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:39950:9357":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:7852:2251":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:7580:9657":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"6:4504:5139":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:10080:7519":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:41552:87":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"5:4913:2224":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"18:564:7260":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:9350:34871":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:13821:8321":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:8858:7304":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:11876:1358":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"5:2168:33730":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"18:582:2529":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:9566:7438":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:10705:7602":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:43382:9434":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"5:3774:7055":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:20905:11259":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:10377:7563":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:12388:7893":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:8753:7301":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:41961:6678":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"20:3180:5136":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"16:7042:8684":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:11200:9653":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:9826:7485":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:5175:188":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:41632:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"6:7485:5186":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"11:1555:8965":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:45825:9508":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:11044:2214":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:4034:16392":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:2973:11205":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"6:5804:5698":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:12516:11197":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"6:4834:5704":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:41432:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"18:531:7255":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:21321:9592":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"5:6735:7093":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:12435:203":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"2:42222:108":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"11:2198:10515":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:9876:7376":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"5:4136:2224":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"6:4301:5119":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"16:5402:7425":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"16:6061:18513":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"20:3032:5121":{"crate_id":20,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:13257:8152":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"9:388:18397":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:3460:1899":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"11:387:34847":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:1561:2287":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"16:7669:8408":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:12259:7878":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:12236:7869":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"16:2862:8387":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:3130:26514":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:9018:165":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"11:1681:142":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"20:4870:3649":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"16:6327:8575":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"16:8214:8745":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"6:653:2987":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:8788:7302":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"6:6533:2880":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:13121:8121":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:4503:11279":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"6:6809:10745":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"5:6441:7055":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"20:2976:5116":{"crate_id":20,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:41027:9121":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:9068:34872":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:39783:31252":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"6:4974:10632":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"16:3225:8415":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:47208:9574":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"20:483:2955":{"crate_id":20,"path":["libc","unix","timeval"],"kind":"struct"},"1:911:7046":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"2:42194:10853":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"6:4406:5127":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:11853:24505":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"18:660:7274":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:8766:9744":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:11158:9785":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:2684:224":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:13865:8328":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:9748:7437":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"20:4131:5697":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"11:1836:6609":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:3170:32956":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:43907:10869":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"11:1866:8968":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"11:274:10506":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:43738:16440":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:13506:8215":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:11483:9656":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"14:0:2048":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:6548:2322":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"7:79:18389":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:8908:9751":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"5:4398:7082":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:12592:7928":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"6:4702:5156":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:41672:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"16:3030:8412":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:3920:11250":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"6:5735:5691":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:6004:10724":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:11600:16427":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"17:13842:8324":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:9641:7469":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"20:3006:5119":{"crate_id":20,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:8081:2204":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"17:12419:7898":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"16:4327:8425":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:2731:2462":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"5:3116:2287":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"16:4789:8437":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"16:4400:8426":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:11383:9621":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:7585:31066":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"6:4366:5124":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:6930:2303":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:20912:11320":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:10712:19577":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:2815:8706":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:4424:6691":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:20673:11323":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"16:5741:19398":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"20:4193:5703":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"20:1574:3737":{"crate_id":20,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:11011:7625":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:12404:7134":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"6:5015:10639":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:2917:2465":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"14:40:7670":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:9106:6681":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"5:6092:11353":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"20:3370:5153":{"crate_id":20,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:8897:9748":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"11:822:11190":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"18:538:7258":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"6:4422:5129":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:4247:9087":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:5552:204":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:7548:16540":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"6:7556:10767":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:40168:9102":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"11:1029:8957":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"16:8180:19410":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"19:0:1025":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:2593:126":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:21642:10782":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"5:6999:9045":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"18:481:7249":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:2681:2461":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"1:1844:9611":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"9:52:18414":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:21800:10785":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:3777:9621":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:13292:8158":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:11109:7635":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:8360:19458":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:1821:9610":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:7151:132":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:30681:2529":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"17:13211:8141":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"16:2572:8375":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"5:4365:2224":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"6:579:2967":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"5:7250:222":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"16:55:8829":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"5:7264:9069":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:1812:9077":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"20:542:2962":{"crate_id":20,"path":["libc","unix","pollfd"],"kind":"struct"},"16:6793:8651":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:1034:7315":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:49557:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:10354:7562":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"20:5447:6540":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:8953:7426":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"16:7335:34867":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:20724:11314":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"2:9102:6679":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"6:488:2955":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:46399:9532":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"18:548:139":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:9868:9386":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"6:532:2960":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"6:1645:3726":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:43566:9439":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"4:0:2042":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:11605:9130":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:10000:7506":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"6:7431:6196":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:7155:150":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"9:174:18462":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:8150:9716":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:7667:11224":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"17:9108:34878":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"6:5868:5705":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:11902:7804":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:11185:9652":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"16:6506:8596":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"6:4858:10586":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:21:677":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"17:9822:7484":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"16:6717:8637":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:44880:9471":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:12345:7887":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:43915:10871":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:47254:9578":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"6:1900:3790":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"16:6990:8677":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:43130:9150":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"5:7275:9070":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:9057:208":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"2:44992:9476":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"16:2378:8367":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:11556:7721":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:9933:7500":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"20:4278:1714":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"20:3238:5142":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:10823:7396":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:1621:584":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:43178:9140":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:7541:2290":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:13659:8276":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:12894:8047":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"16:7596:19407":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:21734:31270":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"6:5888:10673":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"20:5004:6194":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:43364:9433":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:1724:16583":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"6:474:2953":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:43328:9432":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:10428:7570":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:10702:2204":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:10615:7592":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"5:7023:7076":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:43282:9143":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"20:4209:5705":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"16:5886:8486":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:10637:10878":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:2254:104":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"5:814:7061":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"5:2915:33745":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:8774:2287":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:4:1008":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:12449:7904":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"20:3147:5131":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:6005:7148":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:43068:9422":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:42987:9416":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:8327:2282":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:30049:6557":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"6:6124:5728":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:43544:16439":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:41044:9123":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:20753:11259":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:11037:19470":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"6:4780:10561":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:40494:9113":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:11193:7646":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"20:563:2965":{"crate_id":20,"path":["libc","unix","sigval"],"kind":"struct"},"2:40478:9112":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"2:2512:235":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:40225:7271":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:42484:143":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:5435:9636":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"16:5920:8343":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:41004:153":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"2:8791:31065":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"16:7467:8774":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:42976:9415":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:11770:7779":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:41975:6681":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"6:7526:10761":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"17:13233:8147":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:6617:9643":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"2:30089:6559":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:22280:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"17:12307:7883":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:8202:11298":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"16:6376:8392":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:47143:9571":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"11:815:8949":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:8144:2234":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"1:1080:8961":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:2839:16561":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"5:5814:2308":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:10347:7163":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"16:7478:8404":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:2810:16557":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:947:8952":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:2502:147":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"18:113:23309":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:11349:9154":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:4099:11269":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"5:2907:10770":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:42966:9414":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:2951:16395":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"17:2933:7324":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:6081:7134":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"5:3123:8967":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"5:6603:7103":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"20:3019:5120":{"crate_id":20,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:4271:5116":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"18:766:23319":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:10127:9140":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"20:3308:5147":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"11:1065:34845":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"16:6662:8624":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:4678:11262":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"6:5005:5166":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:11025:10871":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"11:1120:8960":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:11993:7818":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:3124:24941":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"20:5479:5188":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:7606:7164":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"17:13791:8313":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:8114:2235":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:20505:31803":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:8210:11272":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"6:0:812":{"crate_id":6,"path":["libc"],"kind":"module"},"2:39034:200":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:45377:9496":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:12835:7995":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:6481:2317":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"6:4469:5135":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:10416:7569":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:1947:7320":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:10923:7620":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:40209:9104":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:43955:9461":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"18:699:7284":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:11362:9620":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"6:6566:10741":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"20:1386:3719":{"crate_id":20,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:10052:7516":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:9478:7452":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"20:3154:5132":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:1589:8968":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"16:4702:8434":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"5:1365:8962":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:731:140":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"6:4442:5131":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:13041:8099":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:9866:7488":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:11871:415":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"16:4872:8440":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:6292:164":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:8161:11242":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"16:4845:8439":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"6:4690:5155":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"6:5705:5669":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:3978:11254":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:638:9602":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:22313:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"6:4461:5134":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"16:6132:8528":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:3130:16563":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"5:4206:2287":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:7193:119":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:43443:9437":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"16:5643:8461":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:643:11184":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"11:1832:2287":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"18:736:23318":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:10618:9773":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"6:62:2566":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"16:6474:8410":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:21164:11319":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"6:5786:5696":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:10465:7573":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"16:6943:19404":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:30119:31247":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"1:1982:183":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"16:5693:8462":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:39877:9351":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"5:7090:6609":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"6:5034:10653":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"5:0:284":{"crate_id":5,"path":["alloc"],"kind":"module"},"6:5831:10672":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:1460:1678":{"crate_id":2,"path":["core","mem"],"kind":"module"},"2:2579:114":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"6:4894:10606":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:1846:9612":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"6:1677:3729":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:41331:191":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"14:215:8941":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:43687:9160":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:45054:9478":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:12244:190":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"6:4796:10567":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:2460:16506":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"6:4915:10621":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:39858:16501":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:11826:110":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"5:4817:202":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"6:6836:6198":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"6:4935:5161":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:1738:10780":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:7216:2467":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:8521:19463":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:917:8963":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"6:7514:5188":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:8093:2207":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"17:9228:34876":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"6:7491:10756":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:3244:2257":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"9:352:18411":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:13678:8282":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:9028:217":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:41313:6668":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:11434:7700":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"11:2069:8956":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"14:165:18481":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"6:7566:6541":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"16:7509:8405":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:2344:187":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:5316:9631":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"17:11319:7683":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"16:6361:8580":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:10816:9023":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:44167:9469":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:45903:9524":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:8490:19462":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:13453:8204":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:11886:740":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"1:8224:9716":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:11439:9786":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"20:1436:3724":{"crate_id":20,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:47356:9584":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:4873:10591":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"5:3275:7046":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"2:41246:6608":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:11234:7655":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:3222:16394":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:13265:8154":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:11372:7690":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:21833:11246":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"0:72:1655":{"crate_id":0,"path":["num_cpus","get"],"kind":"function"},"2:21694:31246":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:50931:9594":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"2:43026:9418":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:3356:16460":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"2:2728:2516":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"17:13426:8197":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:11282:7670":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:11882:639":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"1:2545:7124":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"20:5019:6195":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:11062:10882":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"20:614:2987":{"crate_id":20,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:3305:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"16:6351:19401":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:2835:16560":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:10885:7618":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:42250:70":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"20:3215:5140":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"20:568:2966":{"crate_id":20,"path":["libc","unix","itimerval"],"kind":"struct"},"1:8938:9754":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"16:4904:8441":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:8598:19466":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:0:493":{"crate_id":2,"path":["core"],"kind":"module"},"2:21755:31257":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:5539:9096":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:9853:7487":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"16:6321:8574":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"17:12980:8092":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:7118:16541":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"11:751:7076":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"16:8256:8860":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:45979:9526":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"16:2830:8386":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:7776:2201":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:1787:7316":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:12634:7935":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:12113:7837":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:20886:11315":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:501:7070":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"20:1531:3732":{"crate_id":20,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"11:1138:8961":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:43452:9157":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:43228:9430":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"18:491:7250":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:11137:16629":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"16:6442:8587":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:2827:7143":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"6:5923:10694":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:22148:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:41146:9622":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:39771:9341":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:46185:9529":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"6:4773:10559":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:13433:8198":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:6232:204":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"16:6890:8401":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"16:7519:8779":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:44129:9464":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:44086:209":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:4011:102":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:8915:24503":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:13516:8220":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:11620:16425":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:46061:9527":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:40485:1902":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"6:6593:2747":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"14:202:16441":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"16:4969:8443":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"16:6218:8556":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"10:36:10517":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:11870:932":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"6:6743:6192":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:10303:7559":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"16:7498:8778":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"16:7293:8724":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:5922:204":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"17:10402:7565":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"18:652:7251":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:10635:7594":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:959:8955":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"16:5976:8349":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:11878:1468":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"5:1403:8947":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"6:6104:1714":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:4171:9623":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"11:1534:8964":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:7932:2252":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"6:5767:5694":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"20:1635:3790":{"crate_id":20,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"20:5455:5184":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:46747:9565":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"20:1522:3731":{"crate_id":20,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"16:535:8347":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:11844:7797":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:8931:7308":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:9628:7468":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:361:9596":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"16:2546:8374":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:7771:2200":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:1747:9074":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"16:6767:8650":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"16:7543:8407":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"16:2931:18540":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"20:4847:3677":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:3672:9619":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:9617:7467":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"16:5847:8483":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"5:7031:7067":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"6:4375:1910":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:8796:9637":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:2472:1900":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:11484:7707":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:13169:8127":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"6:6694:6190":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"5:3183:8969":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:11152:9648":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"6:1589:3722":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:11872:1502":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:9356:16511":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:12138:7839":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"6:1509:3714":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"18:624:34886":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:3928:11251":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:8156:9718":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:6478:2316":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"11:393:34848":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:11520:7716":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"6:4756:10548":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:8902:105":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"17:9265:7438":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"14:187:18488":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:45745:9507":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:9959:7503":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"20:1431:3723":{"crate_id":20,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:40148:9097":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:21427:11259":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"6:6586:6186":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:4840:11282":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:39835:9347":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:41255:2287":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"9:0:2044":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:5330:9632":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:30283:31244":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"17:8573:19465":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:10682:128":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"17:12923:8058":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:11258:7669":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:11299:7673":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:10334:7437":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:9683:7475":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"6:4432:5130":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:4369:7111":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:888:8948":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:9545:7419":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"20:3119:5128":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:4243:205":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"6:1723:3735":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:41407:181":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:2800:16555":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"6:4709:5157":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:12183:134":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"16:5998:19399":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:9973:7504":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:43883:10863":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:42699:9408":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:41110:31261":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"2:21573:9171":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:11585:7732":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"16:6535:7039":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"5:1227:8956":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"6:4387:5125":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"20:3461:5163":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:21709:9179":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:8232:9724":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"1:11895:1118":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:12224:7867":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"6:4681:5154":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:4521:10534":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:42475:9400":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:9453:19479":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"2:30653:181":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:41181:9126":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:5566:7147":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:42718:9135":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:3368:9081":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"16:2642:8378":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"11:738:8948":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"6:1687:3730":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:40177:9103":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:7844:2249":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:45355:9495":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:3205:2261":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:39159:8745":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"6:4671:5153":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:39851:9348":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:554:9598":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"5:4320:243":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:13667:8277":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"6:1541:3717":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"16:2502:8372":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"5:1196:8687":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"16:3872:8422":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:42234:8816":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"17:10257:7555":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:13219:8144":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:8667:7425":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:2232:96":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:12293:7881":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:2209:2181":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"11:1085:8959":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:10812:9667":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:9104:6680":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"16:6520:8598":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"16:5571:8394":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:12046:7827":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:9033:9647":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"5:6691:242":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"16:7767:19408":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:10015:9137":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:40078:9363":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:50910:9593":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"2:40007:9358":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"16:5557:8391":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:922:8945":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"20:4806:6185":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:43477:9347":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:21169:11342":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"6:1716:3734":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"20:4797:2838":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"20:5417:2913":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:11877:1388":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1:3610:11244":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:21771:31275":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:247:7307":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:562:7313":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"6:4482:5137":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:10692:117":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:43414:2234":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:43895:10866":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:9377:7162":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"18:636:7273":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:3923:2224":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:10505:7576":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:9052:2214":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"5:7098:6609":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"20:4069:5691":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:2768:8701":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"20:3071:5124":{"crate_id":20,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"20:1537:3733":{"crate_id":20,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:43058:9421":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"5:7014:9061":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:43612:9448":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:11532:7719":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"17:9772:7482":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:42956:9413":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:40288:9109":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"6:5041:10656":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"20:3257:5143":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:2914:2464":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"17:12959:8087":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"6:4786:10564":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:13857:8325":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"5:5034:2308":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:1568:7076":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"16:2470:8371":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"6:7508:5187":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:25696:9072":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:8651:7424":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:9023:216":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:41280:6667":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"5:3533:2287":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"6:5990:10719":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:8283:19456":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:47280:9580":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:3145:133":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"9:325:10518":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:11163:7642":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"11:1859:8967":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"20:4887:3652":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"16:5418:8450":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:10409:2260":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"2:40125:9367":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:13499:8213":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:11671:16433":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"15:180:18494":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"5:6175:7093":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"1:1565:6609":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"16:6201:8550":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"11:444:140":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"11:2053:8687":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:875:8947":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:6538:6615":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"5:3974:7076":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:46935:9567":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:41752:84":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:39756:9082":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:40509:7118":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:44192:9470":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"2:11388:9156":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"5:5238:16413":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:45214:9485":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:12194:7848":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"5:5830:16862":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:2746:11310":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:22379:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:3968:11253":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"16:6728:8638":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:8993:10874":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"6:5955:5150":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:4102:9085":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"9:502:9026":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:43210:9429":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"16:5367:18512":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:12085:7832":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:975:7314":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:2674:218":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"5:7233:9068":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"11:2205:2177":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"6:4455:5133":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"16:7437:8765":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:39762:9340":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"6:500:2957":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:9312:7439":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"6:6688:6189":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"16:6868:8658":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"17:12770:7944":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"6:4536:10541":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:49622:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:9477:7120":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"6:506:2958":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:3127:26523":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:8979:34877":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"16:6488:8588":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:13053:8104":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:49596:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"20:3174:5135":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:10220:9143":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:9028:7433":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:11721:7754":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:530:7137":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"20:4107:5695":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:1594:8969":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:39934:31262":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:3287:2245":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:4107:11270":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:40107:9091":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"6:7473:5184":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"5:2904:6656":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"6:7532:10762":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"11:2080:8957":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"16:5724:8467":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:20755:11316":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"16:2404:8368":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:47303:9581":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:2691:226":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"17:8420:19460":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"6:5935:10698":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:43048:9420":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"16:7837:8801":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"6:5054:10661":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"16:5104:8447":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:11090:7632":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"5:1350:2287":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"6:4943:5162":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"5:3087:94":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:13612:8258":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"16:7244:34868":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:12059:7829":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"16:6696:19403":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:8254:2747":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:8389:19459":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:13101:8113":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:4120:11271":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"6:4828:5700":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:2734:2518":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:39870:9350":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"16:7488:8777":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"16:2426:8369":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"16:7366:19406":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:29860:11245":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"20:3451:5162":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"5:6760:7106":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"6:4767:10556":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"6:526:2959":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:11891:7803":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"16:3446:8417":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"16:7635:8785":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:8037:2203":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"16:4728:8435":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"16:5594:8396":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:45722:9506":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:10092:9139":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"20:1479:3727":{"crate_id":20,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:12126:7838":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:12522:7920":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:45471:9498":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"20:4943:6191":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"11:810:8963":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:2686:107":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:20467:31652":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"11:1044:18475":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:10270:7556":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"20:4151:5684":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:11600:7738":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:4676:11261":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"5:264:7055":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:5761:5693":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"20:4272:5727":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:5350:9633":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:11946:7812":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:5243:118":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"18:727:7293":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:9917:7498":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"9:445:18396":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:11355:7688":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:1978:7323":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:2827:16558":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:13812:8319":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:40471:9111":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"6:119:2642":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"18:590:7261":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:5940:9098":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:22412:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"17:10545:7328":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:42887:9409":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:3266:7327":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"16:8156:8411":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:936:11190":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:46997:9568":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"16:6400:8584":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"6:6557:2838":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:1924:11235":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"6:6802:10742":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:43595:9447":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:10412:2256":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:3067:11206":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:3350:2224":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"17:8823:7303":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:10440:7571":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:38873:16477":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:5495:2691":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"17:11785:7783":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:10216:26247":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"16:2594:8376":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:43146:2237":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"5:1412:8948":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:12461:138":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"6:4381:5003":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"5:7039:33741":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"5:3672:2251":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"20:4077:5692":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:40157:9371":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:9093:110":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"20:495:2957":{"crate_id":20,"path":["libc","unix","rlimit"],"kind":"struct"},"6:494:2956":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:13066:8109":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:13316:8166":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:413:163":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"6:5048:10659":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:676:11185":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"16:5677:19397":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:420:7311":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:21717:9180":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:2920:2466":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:22115:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:47265:9579":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:7649:11187":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:901:7076":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"6:4475:5136":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:4898:11289":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"1:7927:9671":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"6:4810:10572":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"6:4930:10630":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"16:2905:8389":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:11924:7811":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:11220:7654":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"2:11423:9137":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:7011:27925":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:8548:19464":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:12607:7932":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:0:2051":{"crate_id":17,"path":["object"],"kind":"module"},"1:8950:9756":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"5:1313:93":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:2382:1898":{"crate_id":1,"path":["std","io"],"kind":"module"},"1:11896:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"5:3621:7055":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:13721:8298":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:11887:736":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:4431:11274":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"20:1504:3729":{"crate_id":20,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"3:229:208":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"6:4492:5138":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:2805:16556":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"5:3149:8968":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:13082:8112":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:20452:31652":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"20:4174:5700":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlmsgerr"],"kind":"struct"},"2:40519:9115":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"5:7330:7046":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"17:10125:7523":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:41390:8962":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"16:4540:8430":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"20:4138:5698":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:10681:7600":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:9138:7435":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:49609:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"11:2190:34844":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:9576:7124":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:2141:585":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"18:690:7283":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"16:7557:8780":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:42506:9406":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:10304:9741":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:43772:9459":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:7499:7158":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:13033:8098":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:857:8962":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:12483:7917":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"16:8109:8847":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:2862:208":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"11:1852:8966":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:49570:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"20:1444:3725":{"crate_id":20,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:6541:3648":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"20:3489:5166":{"crate_id":20,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"14:7:8936":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:3999:9084":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"6:595:2969":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"20:3111:5127":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:41592:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"16:3047:18542":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"6:4360:5123":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:10199:9635":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"1:10938:7168":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"16:7757:8789":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"6:4865:996":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:22181:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:10766:9147":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:3982:11255":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"11:697:8946":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"6:4624:5147":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:10936:7622":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:8971:127":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"2:40260:2236":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:2831:16559":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"16:2616:8377":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:42459:9397":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"20:5439:6539":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:6903:7156":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"16:7683:8409":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:12536:7921":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"5:2406:10774":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"6:6818:6197":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:11312:9151":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:45024:9477":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:43934:120":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:2751:8700":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:2213:1984":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"1:6861:25228":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:41061:11243":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"6:4881:10596":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"6:123:2643":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"20:5467:5186":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"11:659:6609":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"5:779:95":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"5:632:9039":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:13803:8315":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"7:32:18382":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:3435:2208":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"5:7061:196":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"8:0:2043":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"11:1628:7049":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"20:3065:5123":{"crate_id":20,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:5858:5703":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"16:3300:8416":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"5:1057:33746":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"16:4932:8442":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"11:669:8945":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:10598:7623":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"18:574:7251":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:6184:7146":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"6:4636:5148":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:8256:19443":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"6:7497:10757":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:7683:9667":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:3378:1901":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"6:4840:10575":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"5:5903:2224":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"20:1361:3716":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:7518:7160":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"16:6431:8586":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:3157:16478":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:13469:8207":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"18:96:23308":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"6:4726:5159":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:11227:10883":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"6:6764:6193":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"16:2879:8388":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"16:5386:7424":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:8628:85":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"18:719:7290":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"20:3226:5141":{"crate_id":20,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:4650:5149":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"16:3899:8423":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:3142:7326":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"6:6712:6191":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:30105:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:6365:1902":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:11167:16428":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:31877:9202":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"17:9596:7465":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:43264:9142":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"16:6819:8652":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:3151:16479":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:2367:2195":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"5:962:7055":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:2609:2250":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:13324:8167":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"11:2184:10512":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:9696:7457":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"16:2337:8360":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:10691:19576":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:9071:9760":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"20:557:2964":{"crate_id":20,"path":["libc","unix","linger"],"kind":"struct"},"16:3815:8421":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"6:1604:3723":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"6:1663:3728":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"11:353:7044":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:3444:30199":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"20:1543:3734":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"5:1994:9047":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"11:762:7046":{"crate_id":11,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"2:9246:9133":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"17:9907:7497":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:11135:7169":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"1:4559:11252":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:8632:19444":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:930:8949":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"5:279:2469":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:3163:2258":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:2821:8707":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"16:5779:8471":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:2459:11259":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:3185:16393":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:12282:7879":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"20:4995:6193":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:12358:7888":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:12006:7821":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"11:98:10505":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:11800:7788":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:4571:10374":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:40139:9370":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:9038:34880":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:13024:8097":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:11422:7699":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"5:3162:33852":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:11969:7817":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:9895:7493":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:46139:9528":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:1583:8967":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"16:5305:8448":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"5:1077:33827":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"20:0:812":{"crate_id":20,"path":["libc"],"kind":"module"},"6:5773:5695":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"20:2982:5117":{"crate_id":20,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"18:507:7251":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"11:1845:7046":{"crate_id":11,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"1:6405:2320":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"14:221:8943":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:40274:9108":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:39922:9356":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:6870:2265":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:1433:142":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"20:3320:5148":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"20:5461:5185":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:242:7306":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"16:3749:8419":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:39843:9082":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"0:0:1790":{"crate_id":0,"path":["num_cpus"],"kind":"module"},"16:7743:8397":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:9322:34873":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"16:8072:8842":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:45125:9481":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"20:1550:3735":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:45195:9484":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:8738:9742":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:10840:7616":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"16:6854:8656":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:13625:8264":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:12576:7926":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:8459:2286":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:9770:11259":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:7634:11186":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:39997:7112":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:43459:9348":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:13443:8201":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"5:1041:33826":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:41712:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"6:4963:5164":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:9986:7505":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"20:3127:5129":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"5:862:7063":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:42938:9410":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"6:5962:10705":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:41792:91":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:11893:785":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:9275:34879":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:10054:9138":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:22214:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"2:9947:8962":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:12799:7964":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:5381:9635":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"17:10452:7572":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"11:861:8955":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:38990:196":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"16:7016:8678":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:9340:7440":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:12372:7891":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:3242:2256":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:20507:31808":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:3675:9620":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"6:1704:3732":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:43749:9451":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"0:73:1673":{"crate_id":0,"path":["num_cpus","get_physical"],"kind":"function"},"17:10283:7558":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"6:5743:5692":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:10798:19468":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:7836:9669":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:20712:11259":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"20:3355:5151":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Chdr"],"kind":"struct"},"2:20802:9168":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:8198:9622":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:47105:9570":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"6:5797:5697":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"20:3209:5139":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"16:6022:19400":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"6:6035:10733":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:7461:9787":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:47228:9576":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"16:5944:8492":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"20:4781:3648":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"5:1442:8946":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"16:7029:8681":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"6:4612:5146":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:11005:9743":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:46249:9531":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:40097:9366":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"6:4848:10580":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:45094:9480":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"11:834:8952":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"6:4982:10634":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:8623:78":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:42277:126":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"16:7077:19405":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:14:2152":{"crate_id":2,"path":["core","write"],"kind":"macro"},"11:1840:7076":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:41398:6609":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"17:10721:7604":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"16:6243:34870":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"20:4925:6190":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:44150:159":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"20:4904:6187":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"20:469:2953":{"crate_id":20,"path":["libc","unix","group"],"kind":"struct"},"1:11881:638":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:40047:9361":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:8720:9741":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:39078:201":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"6:4602:5145":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:9534:7461":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"6:7218:2913":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"20:1490:3728":{"crate_id":20,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:2302:186":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:10527:19575":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:13689:8283":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:8072:2267":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:12915:8057":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:11879:7801":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:11459:7705":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"5:3520:161":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:11560:2291":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:13763:8304":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:13015:8093":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:10855:9744":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:49583:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:2357:8366":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:11410:7696":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:6753:11312":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"20:55:2566":{"crate_id":20,"path":["libc","unix","DIR"],"kind":"enum"},"20:477:2954":{"crate_id":20,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:10555:7579":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:12510:7919":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:45691:9505":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"12:0:2047":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:41195:179":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:41339:208":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:9591:7129":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:43013:9359":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:3203:2260":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"5:7347:7096":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"6:4573:5143":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"16:8025:8838":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:42299:72":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"5:2115:10769":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:4290:5118":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:40500:2266":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"5:1462:9044":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"14:160:8936":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:43724:9450":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:6721:16536":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"1:9088:9761":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"17:13249:8150":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:10142:19550":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:40069:9362":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:13399:8190":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"16:2786:8384":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"16:5811:8476":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"6:7246:10748":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:3934:11252":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"9:421:18398":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:9409:19478":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"16:7697:8399":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:5715:2312":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:5760:2319":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"16:6390:8583":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:7811:128":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"1:8065:2265":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:39180:9212":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"20:3166:5134":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:6328:9643":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"1:11875:310":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"13:0:2041":{"crate_id":13,"path":["std_detect"],"kind":"module"},"20:4165:5699":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlmsghdr"],"kind":"struct"},"17:11471:7706":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:10735:7607":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"5:2635:10777":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"11:632:2287":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:21333:31655":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:2355:2189":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:3906:11249":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:12269:9166":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:11298:7171":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:8310:19457":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"6:5850:5702":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:1628:6554":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"20:1350:3714":{"crate_id":20,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"20:3482:5165":{"crate_id":20,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:41472:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:13419:8196":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:2969:11204":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:44076:203":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:9068:130":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"20:3104:5126":{"crate_id":20,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"9:481:18395":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:6129:9642":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:9110:6682":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:11372:9155":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:7544:11193":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:10967:7623":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"5:4004:7055":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"16:7317:34869":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"11:300:10509":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"6:5983:10718":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:40056:2235":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"11:1872:8969":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"6:6045:5706":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"5:1241:8961":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:4634:11284":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:0:1380":{"crate_id":1,"path":["std"],"kind":"module"},"1:8377:2283":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"16:5655:8395":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"3:0:439":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:44970:9475":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:8790:6609":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:1658:1081":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:9112:6683":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"16:6904:8660":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:9098:7434":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:1768:606":{"crate_id":1,"path":["std","env"],"kind":"module"},"5:879:2287":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"6:1534:3716":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:46857:9566":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:13777:8306":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:10478:7574":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"20:5485:5189":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:11017:1957":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:21429:11317":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:13488:8212":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:10234:9144":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:2496:74":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"5:7053:6609":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"5:6362:6609":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"18:0:2052":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:43039:9419":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:480:7136":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"6:5060:10664":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:9557:7437":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:21626:9172":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:22247:9197":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"20:5033:6196":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","termios2"],"kind":"struct"},"1:3396:2205":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:13159:8126":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"20:3092:5125":{"crate_id":20,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:39823:9346":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"20:3286:5145":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:9175:9611":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:40527:9117":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:2844:16562":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"5:679:229":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:43424:9435":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"16:2298:18514":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:8782:9746":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"18:599:34884":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"16:2808:8385":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"20:3276:5144":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"7:0:1529":{"crate_id":7,"path":["unwind"],"kind":"module"},"16:6254:8569":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:45076:9479":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"16:5032:8445":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:45501:9499":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:30177:31260":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:8945:9755":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"20:1355:3715":{"crate_id":20,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:43581:9444":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:8137:2238":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"6:5845:5701":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"16:2524:8373":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"13:110:34851":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"5:1453:196":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:9365:127":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"1:10128:11301":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"17:10989:7328":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:10743:7609":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:8844:11304":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:13385:8183":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:9512:7458":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:9839:7486":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"16:2319:8358":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:10041:9764":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"1:8752:9743":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"5:2086:9048":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:3870:11248":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:11233:10884":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"6:6773:6194":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:3990:11256":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:43468:9082":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:47395:9585":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"20:527:2960":{"crate_id":20,"path":["libc","unix","hostent"],"kind":"struct"},"11:0:2046":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"2:9108:192":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"5:3752:7046":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"17:11861:7800":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"16:4624:8433":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:45155:9482":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:844:2287":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"6:4998:5165":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"6:5947:5151":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:6627:16544":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:4175:6688":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:43792:9161":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:6097:7152":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"6:4327:5121":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"5:4166:2224":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:9098:118":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:10837:24512":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"16:5963:8499":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:44924:9473":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:39799:9344":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"6:1695:3731":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:9577:7464":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:10761:19467":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:11813:7790":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:9058:2208":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"17:10516:7577":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"6:1550:3718":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"11:646:8962":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:7922:9670":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:4133:9086":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:2736:2520":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"6:4750:10545":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:9469:7450":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:13332:8168":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"16:6558:8600":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:10647:2198":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"17:9443:7449":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:12433:7900":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:9523:7459":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:9498:7457":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"16:3063:7335":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:10642:10880":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"5:688:109":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:41169:9124":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:9148:34875":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:11884:738":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:7252:25892":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:47333:9583":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"6:4903:10612":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:2508:236":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:47059:9569":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:39813:9345":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:2737:2521":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"17:386:7309":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:2685:223":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"2:43967:16669":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:41382:2287":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:5559:7146":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"16:5630:8456":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"20:1472:3726":{"crate_id":20,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:2886:115":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:41322:6666":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"5:6593:7101":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"16:4568:8431":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:1895:9613":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"1:11820:9790":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"16:2764:8383":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:7798:2199":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"15:219:18499":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"5:7204:31262":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:43160:2238":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:2788:16554":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"20:3086:5003":{"crate_id":20,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:2772:11309":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:12331:7886":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:9361:9134":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:10670:7599":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:39884:16502":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"16:5071:8446":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:10248:9145":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"10:44:8972":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"17:8443:19461":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:3496:7076":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"17:12072:7830":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:10406:2258":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"16:7411:8503":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"16:7259:6667":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:22445:9198":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:2776:11311":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:11625:16424":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:8124:2236":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:7655:9607":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"16:4757:8436":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:8815:9747":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"20:4773:2880":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"5:3546:8962":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:41271:6609":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:41263:8962":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"1:5498:11299":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"16:5708:8465":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:8683:7299":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:39166:9211":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"2:31837:10514":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"20:501:2958":{"crate_id":20,"path":["libc","unix","rusage"],"kind":"struct"},"2:43310:9431":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"20:3348:5150":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Chdr"],"kind":"struct"},"1:1785:9609":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"5:1715:7046":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"6:1514:3715":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:1048:8687":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:5689:2311":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:8718:7300":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:3055:2268":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"5:5708:7076":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"6:1583:3721":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:8400:2284":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"16:6981:8674":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"16:7859:19409":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"16:6293:8572":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:43903:10868":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:11573:7729":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:11883:741":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:11821:7792":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:10660:9778":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"16:5616:8452":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:43434:9436":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:10825:9636":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:20761:11318":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"16:6544:8398":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"6:6656:3652":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"16:2668:8379":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:8883:2313":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:6674:32369":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:13367:8179":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:12563:7925":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:45949:9525":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:10712:24517":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"6:4953:5163":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"20:3187:5137":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"11:119:7040":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:4986:9630":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:3987:9083":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"18:644:7251":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:11671:7175":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:9100:6678":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"6:1559:3719":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"16:3640:7339":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:9380:19477":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:10747:126":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:12178:7843":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:20914:9168":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:953:8954":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:47181:9572":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"20:3137:5130":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:4573:10376":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"17:13744:8299":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:926:8946":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:13639:8270":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:4252:9088":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"20:1416:3722":{"crate_id":20,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"20:134:2642":{"crate_id":20,"path":["libc","unix","FILE"],"kind":"enum"},"6:7543:10766":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:7114:16542":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:2762:16551":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"16:7103:9758":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:13461:8205":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:12217:32851":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:11842:11188":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:45547:9501":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"16:2448:8370":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:5017:9630":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"20:574:2967":{"crate_id":20,"path":["libc","unix","tms"],"kind":"struct"},"1:10993:9742":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:2756:8697":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"16:7652:196":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:39132:9209":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:5366:9634":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:7828:117":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"6:6639:3649":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"20:3334:5149":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:2307:123":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"6:6139:10735":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:11451:10886":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"20:4101:5694":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"6:4314:5120":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:21658:9173":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:42467:9399":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"5:7220:9066":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"16:6460:8393":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"20:2995:5118":{"crate_id":20,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"20:5064:6198":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"5:1980:2251":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"}},"external_crates":{"20":{"name":"libc","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}