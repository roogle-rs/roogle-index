{"root":"0:0:2547","crate_version":"1.16.0","includes_private":false,"index":{"5:5726:34554":{"id":"5:5726:34554","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:299:3251","`String`":"5:7774:257"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:299:3251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13852:33833":{"id":"2:13852:33833","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12652:492","self::pattern":"2:13453:17990"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:10059","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13460:10059","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:13482:17991","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13802:26409":{"id":"2:13802:26409","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12652:492","self::pattern":"2:13453:17990"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:10059","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13460:10059","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13477:17992","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13821:33825":{"id":"2:13821:33825","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"Returns an iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:13453:17990","str::split":"2:13812:2696","prim@char":"1:12652:492","str::split_terminator":"2:13819:33824"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44802:10261","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:10059","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13460:10059","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13477:17992","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13826:26403":{"id":"2:13826:26403","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"Returns an iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning at\nmost `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12652:492","str::splitn":"2:13824:26401","self::pattern":"2:13453:17990"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44856:10076","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:10059","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13460:10059","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13477:17992","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13805:2761":{"id":"2:13805:2761","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42736:203","prim@char":"1:12652:492","self::pattern":"2:13453:17990"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42734:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:10059","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13765:33817":{"id":"2:13765:33817","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13766:33818":{"id":"2:13766:33818","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13850:33831":{"id":"2:13850:33831","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13816:26399":{"id":"2:13816:26399","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"Returns an iterator over substrings of the given string slice, separated\nby characters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:13453:17990","`DoubleEndedIterator`":"2:8394:134","prim@char":"1:12652:492","str::split":"2:13812:2696"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44752:10073","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:10059","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13460:10059","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13477:17992","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13814:26397":{"id":"2:13814:26397","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"Returns an iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nDiffers from the iterator produced by `split` in that `split_inclusive`\nleaves the matched part as the terminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12652:492","self::pattern":"2:13453:17990"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:13240:10070","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:10059","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13878:26314":{"id":"2:13878:26314","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1148:38228"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13836:33826":{"id":"2:13836:33826","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"Returns an iterator over the disjoint matches of a pattern within this\nstring slice, yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:13453:17990","`DoubleEndedIterator`":"2:8394:134","prim@char":"1:12652:492","str::matches":"2:13834:2927"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44956:10265","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:10059","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13460:10059","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13477:17992","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13846:33829":{"id":"2:13846:33829","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13764:2777":{"id":"2:13764:2777","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13879:26315":{"id":"2:13879:26315","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1148:38228"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13819:33824":{"id":"2:13819:33824","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"Returns an iterator over substrings of the given string slice, separated\nby characters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:13453:17990","str::split":"2:13812:2696","prim@char":"1:12652:492","`DoubleEndedIterator`":"2:8394:134","str::rsplit_terminator":"2:13821:33825"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44784:10260","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:10059","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13855:33834":{"id":"2:13855:33834","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12652:492","self::pattern":"2:13453:17990"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:10059","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13824:26401":{"id":"2:13824:26401","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"Returns an iterator over substrings of the given string slice, separated\nby a pattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12652:492","self::pattern":"2:13453:17990","str::rsplitn":"2:13826:26403"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44838:10075","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:10059","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5711":{"id":"5:5711","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5712:34550","5:5713:7336","5:5715:34551","5:5717:34552","5:5725:34553","5:5726:34554","5:5727:3048","5:5728:26136","5:5729:26135"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5713:7336":{"id":"5:5713:7336","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:10059","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13784:33822":{"id":"2:13784:33822","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12658:1772","crate::ops::IndexMut":"2:3628:12564","str::slice_unchecked":"2:13783:33821"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13857:2742":{"id":"2:13857:2742","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12652:492","self::pattern":"2:13453:17990"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42734:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:10059","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13793:31673":{"id":"2:13793:31673","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13794:31674"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:45008:10267","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5727:3048":{"id":"5:5727:3048","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13795:2693":{"id":"2:13795:2693","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"Returns an iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44988:3018","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13872:26137":{"id":"2:13872:26137","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73:2438":{"id":"0:73:2438","crate_id":0,"name":"get_physical","span":{"filename":"src/lib.rs","begin":[108,0],"end":[110,1]},"visibility":"public","docs":"Returns the number of physical cores of the current system.\n\nThis will always return at least `1`.\n\n# Note\n\nPhysical count is supported only on Linux, mac OS and Windows platforms.\nOn other platforms, or if the physical count fails on supported platforms,\nthis function returns the same as [`get()`], which is the number of logical\nCPUS.\n\n# Examples\n\n```\nlet logical_cpus = num_cpus::get();\nlet physical_cpus = num_cpus::get_physical();\nif logical_cpus > physical_cpus {\n    println!(\"We have simultaneous multithreading with about {:.2} \\\n              logical cores to 1 physical core.\", \n              (logical_cpus as f64) / (physical_cpus as f64));\n} else if logical_cpus == physical_cpus {\n    println!(\"Either we don't have simultaneous multithreading, or our \\\n              system doesn't support getting the number of physical CPUs.\");\n} else {\n    println!(\"We have less logical CPUs than physical CPUs, maybe we only have access to \\\n              some of the CPUs on our system.\");\n}\n```\n\n[`get()`]: fn.get.html","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13768:33819":{"id":"2:13768:33819","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:13766:33818"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13848:33830":{"id":"2:13848:33830","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13874:26138":{"id":"2:13874:26138","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13785:26390":{"id":"2:13785:26390","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divides one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:13787:26394","str::split_at_mut":"2:13786:26391"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13844:2700":{"id":"2:13844:2700","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13792:7378":{"id":"2:13792:7378","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"Returns an iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44720:3021","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13779:26366":{"id":"2:13779:26366","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11577:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11577:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13870:2540":{"id":"2:13870:2540","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:13412:149","`FromStr`":"2:13411:3075"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:43002:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:13411:3075","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:13411:3075","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13763:1027":{"id":"2:13763:1027","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12652:492"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13882:12535":{"id":"2:13882:12535","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Returns an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:5069:12535"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:45042:10006","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13774:2458":{"id":"2:13774:2458","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12671:1903"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13794:31674":{"id":"2:13794:31674","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13793:31673"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:45017:10268","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13884:27591":{"id":"2:13884:27591","crate_id":2,"name":"substr_range","span":null,"visibility":"public","docs":"Returns the range that a substring points to.\n\nReturns `None` if `substr` does not point within `self`.\n\nUnlike [`str::find`], **this does not search through the string**.\nInstead, it uses pointer arithmetic to find where in the string\n`substr` is derived from.\n\nThis is useful for extending [`str::split`] and similar methods.\n\nNote that this method may return false positives (typically either\n`Some(0..0)` or `Some(self.len()..self.len())`) if `substr` is a\nzero-length `str` that points at the beginning or end of another,\nindependent, `str`.\n\n# Examples\n```\n#![feature(substr_range)]\n\nlet data = \"a, b, b, a\";\nlet mut iter = data.split(\", \").map(|s| data.substr_range(s).unwrap());\n\nassert_eq!(iter.next(), Some(0..1));\nassert_eq!(iter.next(), Some(3..4));\nassert_eq!(iter.next(), Some(6..7));\nassert_eq!(iter.next(), Some(9..10));\n```","links":{"`str::split`":"2:13812:2696","`str::find`":"2:13805:2761"},"attrs":["#[must_use]","#[unstable(feature = \"substr_range\", issue = \"126769\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["substr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42734:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Range","id":"2:40309:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13790:10091":{"id":"2:13790:10091","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12652:492"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44704:10083","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13777:26365":{"id":"2:13777:26365","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42736:203"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42734:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11577:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11577:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13875:26134":{"id":"2:13875:26134","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13787:26394":{"id":"2:13787:26394","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divides one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13788:26395"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42734:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13798:26407":{"id":"2:13798:26407","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12652:492","self::pattern":"2:13453:17990"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:10059","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13796:33823":{"id":"2:13796:33823","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"Returns an iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44998:10266","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13771:26306":{"id":"2:13771:26306","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12976:17993"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13867:33837":{"id":"2:13867:33837","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12652:492","self::pattern":"2:13453:17990"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:10059","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13460:10059","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13477:17992","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13781:26367":{"id":"2:13781:26367","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11577:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11577:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13788:26395":{"id":"2:13788:26395","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divides one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13787:26394"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42734:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13883:33839":{"id":"2:13883:33839","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Returns an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:5066:33839"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:45051:10170","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5717:34552":{"id":"5:5717:34552","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13775:2420":{"id":"2:13775:2420","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42736:203"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42734:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11577:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11577:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5728:26136":{"id":"5:5728:26136","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13875:26134"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13876:26133":{"id":"2:13876:26133","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13762":{"id":"2:13762","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13763:1027","2:13764:2777","2:13765:33817","2:13766:33818","2:13768:33819","2:13771:26306","2:13772:33820","2:13773:352","2:13774:2458","2:13775:2420","2:13777:26365","2:13779:26366","2:13781:26367","2:13783:33821","2:13784:33822","2:13785:26390","2:13786:26391","2:13787:26394","2:13788:26395","2:13790:10091","2:13791:10277","2:13792:7378","2:13793:31673","2:13794:31674","2:13795:2693","2:13796:33823","2:13797:31675","2:13798:26407","2:13800:26408","2:13802:26409","2:13805:2761","2:13808:7387","2:13812:2696","2:13814:26397","2:13816:26399","2:13819:33824","2:13821:33825","2:13824:26401","2:13826:26403","2:13829:26405","2:13831:26406","2:13834:2927","2:13836:33826","2:13839:33827","2:13841:33828","2:13844:2700","2:13846:33829","2:13848:33830","2:13850:33831","2:13851:33832","2:13852:33833","2:13855:33834","2:13857:2742","2:13859:26410","2:13862:33835","2:13865:33836","2:13867:33837","2:13870:2540","2:13872:26137","2:13873:26310","2:13874:26138","2:13875:26134","2:13876:26133","2:13877:26313","2:13878:26314","2:13879:26315","2:13880:33838","2:13882:12535","2:13883:33839","2:13884:27591"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:72:2420":{"id":"0:72:2420","crate_id":0,"name":"get","span":{"filename":"src/lib.rs","begin":[73,0],"end":[75,1]},"visibility":"public","docs":"Returns the number of available CPUs of the current system.\n\nThis function will get the number of logical cores. Sometimes this is different from the number\nof physical cores (See [Simultaneous multithreading on Wikipedia][smt]).\n\nThis will always return at least `1`.\n\n# Examples\n\n```\nlet cpus = num_cpus::get();\nif cpus > 1 {\n    println!(\"We are on a multicore system with {} CPUs\", cpus);\n} else {\n    println!(\"We are on a single core system\");\n}\n```\n\n# Note\n\nThis will check [sched affinity] on Linux, showing a lower number of CPUs if the current\nthread does not have access to all the computer's CPUs.\n\nThis will also check [cgroups], frequently used in containers to constrain CPU usage.\n\n[smt]: https://en.wikipedia.org/wiki/Simultaneous_multithreading\n[sched affinity]: http://www.gnu.org/software/libc/manual/html_node/CPU-Affinity.html\n[cgroups]: https://www.kernel.org/doc/Documentation/cgroup-v1/cgroups.txt","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13851:33832":{"id":"2:13851:33832","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13772:33820":{"id":"2:13772:33820","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13773:352":{"id":"2:13773:352","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13774:2458","`u8`":"1:12671:1903"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13800:26408":{"id":"2:13800:26408","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12652:492","self::pattern":"2:13453:17990"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:10059","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13829:26405":{"id":"2:13829:26405","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42734:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:10059","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13831:26406":{"id":"2:13831:26406","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42734:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:10059","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13460:10059","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13477:17992","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13877:26313":{"id":"2:13877:26313","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1148:38228"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5729:26135":{"id":"5:5729:26135","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13876:26133"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13797:31675":{"id":"2:13797:31675","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:45026:10090","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13873:26310":{"id":"2:13873:26310","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40630:17863","Self::is_ascii":"2:13872:26137"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42734:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40630:17863","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13880:33838":{"id":"2:13880:33838","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Returns an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:5068:33838"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:45033:10171","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2547":{"id":"0:0:2547","crate_id":0,"name":"num_cpus","span":{"filename":"src/lib.rs","begin":[1,0],"end":[485,1]},"visibility":"public","docs":"A crate with utilities to determine the number of CPUs available on the\ncurrent system.\n\nSometimes the CPU will exaggerate the number of CPUs it contains, because it can use\n[processor tricks] to deliver increased performance when there are more threads. This \ncrate provides methods to get both the logical and physical numbers of cores.\n\nThis information can be used as a guide to how many tasks can be run in parallel.\nThere are many properties of the system architecture that will affect parallelism,\nfor example memory access speeds (for all the caches and RAM) and the physical\narchitecture of the processor, so the number of CPUs should be used as a rough guide\nonly.\n\n\n## Examples\n\nFetch the number of logical CPUs.\n\n```\nlet cpus = num_cpus::get();\n```\n\nSee [`rayon::Threadpool`] for an example of where the number of CPUs could be\nused when setting up parallel jobs (Where the threadpool example uses a fixed\nnumber 8, it could use the number of CPUs).\n\n[processor tricks]: https://en.wikipedia.org/wiki/Simultaneous_multithreading\n[`rayon::ThreadPool`]: https://docs.rs/rayon/1.*/rayon/struct.ThreadPool.html","links":{},"attrs":["#![deny(missing_docs)]","#![allow(non_snake_case)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:72:2420","0:73:2438"],"is_stripped":false}}},"2:13812:2696":{"id":"2:13812:2696","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"Returns an iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:13453:17990","`DoubleEndedIterator`":"2:8394:134","prim@char":"1:12652:492","str::split_whitespace":"2:13793:31673","str::rsplit":"2:13816:26399"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44734:3022","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:10059","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13839:33827":{"id":"2:13839:33827","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"Returns an iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:13453:17990","`DoubleEndedIterator`":"2:8394:134","prim@char":"1:12652:492","str::rmatch_indices":"2:13841:33828"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44884:10262","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:10059","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5712:34550":{"id":"5:5712:34550","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:299:3251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:299:3251","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5715:34551":{"id":"5:5715:34551","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:10059","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13786:26391":{"id":"2:13786:26391","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divides one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:13785:26390","str::split_at_mut_checked":"2:13788:26395"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13859:26410":{"id":"2:13859:26410","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12652:492","self::pattern":"2:13453:17990"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42734:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:10059","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13460:10059","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13477:17992","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13862:33835":{"id":"2:13862:33835","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12652:492","self::pattern":"2:13453:17990"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:10059","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13460:10059","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13477:17992","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13834:2927":{"id":"2:13834:2927","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"Returns an iterator over the disjoint matches of a pattern within the\ngiven string slice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:13453:17990","`DoubleEndedIterator`":"2:8394:134","prim@char":"1:12652:492","str::rmatches":"2:13836:33826"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44938:10264","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:10059","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13841:33828":{"id":"2:13841:33828","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"Returns an iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:13453:17990","`DoubleEndedIterator`":"2:8394:134","prim@char":"1:12652:492","str::match_indices":"2:13839:33827"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44902:10263","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:10059","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13460:10059","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13477:17992","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13791:10277":{"id":"2:13791:10277","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12652:492"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44710:10258","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5725:34553":{"id":"5:5725:34553","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13783:33821":{"id":"2:13783:33821","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12658:1772","str::slice_mut_unchecked":"2:13784:33822","crate::ops::Index":"2:40277:12563"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13865:33836":{"id":"2:13865:33836","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12652:492","self::pattern":"2:13453:17990"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:10059","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13808:7387":{"id":"2:13808:7387","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42736:203","prim@char":"1:12652:492","self::pattern":"2:13453:17990"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42734:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:10059","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13460:10059","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13477:17992","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"17:16301:8955":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:13876:8341":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"5:3090:33608":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"20:3147:5918":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:14365:8449":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"16:3124:20683":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"16:7713:35201":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:2687:17950":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"2:3965:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"1:11272:26079":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:8616:3020":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:48073:10422":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"16:2794:9131":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:596:7894":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:10441:7485":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"2:3874:132":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"6:1507:11368":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"20:4898:6974":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:4513:111":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"6:5325:11408":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"6:7524:6981":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:9431:10635":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"6:6802:6493":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:12761:8216":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:41265:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"5:3324:9728":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:40281:10157":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"20:4272:2477":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"16:7956:9534":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:7741:17859":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"6:5482:5903":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"16:6939:9344":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:8315:158":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"16:7966:9535":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"11:2275:9445":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"17:15115:8584":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:14069:8376":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"20:3160:5920":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:3357:3299":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"16:8011:9158":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"11:2414:9723":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"1:5505:215":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"17:14845:8540":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"16:2722:9128":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"6:8316:11664":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:11643:8052":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:7009:11678":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"1:5312:10497":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:377:10458":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:12021:10528":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:2811:3035":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:11359:32331":{"crate_id":2,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"17:15477:8714":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:3596:154":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"5:1885:9814":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"2:1948:2441":{"crate_id":2,"path":["core","mem"],"kind":"module"},"2:47509:10373":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"20:4841:4464":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:10634:7882":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:10657:116":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"2:8807:12554":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:15611:8756":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:16403:8979":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"20:3308:5934":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:12619:28338":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:11987:10668":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"16:7013:9353":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"6:7515:6980":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:4371:12642":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:44338:10067":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:12133:8135":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:5939:10503":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:10669:7470":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"16:7347:9415":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:8499:190":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"6:7390:4436":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"16:2484:9117":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"5:4473:281":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"14:7:9694":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"18:623:35222":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"9:49:20546":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"16:2878:9135":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:10311:21609":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"20:1368:4504":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"18:765:25819":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"6:1703:4522":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:41157:10171":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:23596:10140":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"2:13240:10070":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"5:7787:9859":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:45338:18006":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"5:2364:11670":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"20:4998:6981":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:1563:4508":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:2877:147":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:40630:17863":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"2:44106:169":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:13529:8280":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:2043:3003":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"16:8063:21552":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:16380:8975":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:3364:3301":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"1:11412:11772":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"16:8708:9616":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:1643:9814":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"5:7559:9850":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"16:8317:21554":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"16:4900:9181":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"16:6981:9161":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:11165:10661":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"1:11404:2730":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:13585:8285":{"crate_id":17,"path":["object","read","RelocationMap"],"kind":"struct"},"2:23277:10113":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:12670:914":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:2025:12591":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"16:6254:9227":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:6310:10022":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"16:8134:9159":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:16512:8312":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"2:3481:9460":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:43002:238":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"5:884:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:10673:7471":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"6:8278:11654":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:1648:9726":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"16:2448:9109":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"20:3226:5928":{"crate_id":20,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:11564:8076":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:10919:12595":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:23706:10150":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"0:72:2420":{"crate_id":0,"path":["num_cpus","get"],"kind":"function"},"6:4890:2683":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:1521:4504":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:14081:8377":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"11:1871:9814":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"6:5585:11489":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:11921:10072":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"16:7302:9409":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"9:470:20527":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"6:1597:4512":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"0:0:2547":{"crate_id":0,"path":["num_cpus"],"kind":"module"},"1:8187:10541":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"13:110:35181":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:8030:3050":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"5:1551:7392":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:15144:8587":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"16:8582:9604":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"20:5449:5971":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"5:3843:3036":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"5:7549:9849":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"5:6547:12777":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:22178:33124":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:32945:249":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:47241:10347":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:12677:1967":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"17:11494:8068":{"crate_id":17,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"6:7308:3625":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:14545:8477":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"16:2618:9123":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:11825:8099":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"6:5301:11400":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:12924:8234":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"17:13856:8340":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:12603:10672":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"17:14650:8493":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"5:2142:3036":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"6:4937:5916":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"11:1083:9718":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:22963:12772":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"1:4803:12651":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:16250:8936":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"6:1539:4506":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:14910:8547":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:23527:12604":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"9:168:20595":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:45740:10296":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"16:6121:9146":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:4171:7392":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:14110:8386":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:15587:8754":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:14859:8542":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"16:7256:9407":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:45505:11770":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"6:570:3754":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:44938:10264":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"16:6779:9327":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:15861:8816":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"6:5265:11381":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:16802:9080":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"6:8326:7328":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:45821:10303":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"17:14373:8451":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"6:4990:5923":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:16755:9072":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"20:1436:4511":{"crate_id":20,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:5716:10500":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:11063:35212":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"9:345:20543":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"6:1530:4505":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:6816:3101":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:16164:8909":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"6:6578:11557":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"6:5295:11397":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:22204:2987":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"11:1542:20609":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:44136:10239":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"16:6186:9219":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"20:3080:2683":{"crate_id":20,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:2787:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"6:7553:11638":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"16:7916:9523":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"6:5036:11370":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"7:78:20522":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"20:3414:5945":{"crate_id":20,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:34458:17925":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"11:1885:9727":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"20:590:3756":{"crate_id":20,"path":["libc","unix","protoent"],"kind":"struct"},"2:3797:159":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:14137:8395":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:14924:8550":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:13000:21749":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:4591:10490":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:45497:11768":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:13030:8245":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:982:9708":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:3423:17926":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"17:10700:7884":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"5:6148:3093":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"11:776:9723":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:47435:10371":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:46850:10313":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:33918:17922":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:40389:228":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:11564:2987":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:42830:12542":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"5:2156:9819":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:15771:8796":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:41445:146":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"20:495:3744":{"crate_id":20,"path":["libc","unix","rlimit"],"kind":"struct"},"1:9225:211":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:3431:17928":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"2:13530:17999":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"20:4128:6484":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:15534:8748":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"5:3079:7441":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:7004:11679":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"2:33706:9455":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:14369:10108":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"16:3108:9163":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:11161:10541":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"17:15659:8765":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"16:6300:9235":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:23673:10147":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"2:2784:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:12836:21748":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"20:3408:5944":{"crate_id":20,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"18:538:7838":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"5:5289:3093":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:16838:8357":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"2:48093:10424":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:3560:3051":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:22653:12690":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"20:5479:5976":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"20:3355:5938":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Chdr"],"kind":"struct"},"2:34324:17924":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"20:4066:6478":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:16230:8933":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"16:7209:9394":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"14:159:9694":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:2685:17949":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"17:14039:8372":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"16:7156:9381":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"6:5069:5929":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:1944:10476":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"17:5328:7918":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"2:44720:3021":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"6:8294:11659":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"6:7445:6977":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"9:0:2817":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"5:7539:9723":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:12800:8219":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:48249:10453":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:43042:3071":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:47078:10338":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:13928:8352":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:13795:8326":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"6:6486:11535":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:4193:12623":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:12969:8239":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:8359:3036":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:16005:8855":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"11:1892:9728":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:4621:10009":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:13575:8239":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:8648:10594":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:13436:8275":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"5:7797:9860":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:23454:31573":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:12357:8160":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:15353:8620":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"15:327:20638":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"20:4098:6481":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:45349:10283":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"20:4117:6483":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:11883:10071":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:11053:8049":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:16777:9074":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"17:11939:8110":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"20:4937:6978":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:9385:10628":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:22648:2987":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"11:344:35165":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"18:573:7831":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:42909:10223":{"crate_id":2,"path":["core","range","iter","IterRangeInclusive"],"kind":"struct"},"2:23618:10142":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"6:4805:5905":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"5:3086:33607":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:6557:10503":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:4771:10011":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:41989:10044":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:4413:3003":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"16:6806:9141":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:10176:21605":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:8106:10534":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"20:3482:5952":{"crate_id":20,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:14598:8486":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:9841:2979":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"5:40:12565":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:23585:10139":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"20:3197:5925":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:16203:8924":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"20:3380:5941":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"18:589:7841":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:2394:21679":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"16:2770:9130":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:1883:10472":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"17:10898:151":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"11:1063:35179":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"5:2291:11666":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:538:3749":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"16:2838:9133":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:14624:8489":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:32936:10154":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"1:11050:10658":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"17:11269:21632":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"14:40:8327":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:45051:10170":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"6:1625:4513":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"20:5027:6983":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","termios2"],"kind":"struct"},"17:15128:8585":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"20:1522:4518":{"crate_id":20,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"20:1350:4501":{"crate_id":20,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:47480:10372":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:47291:10349":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:16191:8921":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:41723:3020":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:9846:26075":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"17:11603:8079":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:11917:3067":{"crate_id":1,"path":["std","sys","thread_local","native","eager","State"],"kind":"enum"},"20:4177:6488":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:12077:10078":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:23695:10149":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"17:15456:8706":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"6:4792:5904":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:33036:278":{"crate_id":2,"path":["core","marker","UnsizedConstParamTy"],"kind":"trait"},"1:702:10467":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"16:7468:9434":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"5:4157:33408":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:12671:1903":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"17:14710:8501":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"5:0:325":{"crate_id":5,"path":["alloc"],"kind":"module"},"11:1579:9725":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:963:9814":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"6:8237:5973":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:15159:8591":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:14057:8373":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:1233:7896":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:3322:261":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"17:13108:8052":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"17:11328:35216":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:3803:17828":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:12907:8278":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:41301:10178":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"20:3086:5789":{"crate_id":20,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"20:1558:4523":{"crate_id":20,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:14690:8498":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"5:4552:3003":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"5:299:3251":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:12898:8233":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:46932:10322":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"16:4402:9175":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:43921:7478":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"20:5473:5975":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:8813:17913":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:9278:10626":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"16:6062:9147":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:11993:10525":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:10667:7469":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"20:4864:4436":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:13066:8252":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"1:9528:246":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:48210:10437":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:9336:12674":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"5:7750:9857":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"9:490:9790":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:8091:10462":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:42734:206":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:23662:10146":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"17:14258:8411":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:41141:10170":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"20:1514:4517":{"crate_id":20,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:3069:175":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"17:15469:8713":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"13:229:11338":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:42528:12602":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"16:8623:9609":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"5:4127:9723":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"16:8093:9540":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:41333:10185":{"crate_id":2,"path":["core","ffi","va_list","VaList"],"kind":"struct"},"17:16814:9083":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"5:888:9808":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:9513:3003":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"17:14122:8389":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:41455:10017":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:6279:10503":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"20:3425:5946":{"crate_id":20,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"20:4092:6480":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:680:7895":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"5:6915:33408":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:969:9722":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:9597:10059":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:2671:697":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:2493:2962":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"20:3461:5950":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:14021:8364":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"20:5411:3700":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"6:1643:4515":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"16:7369:9152":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"20:1377:4505":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"6:1584:4510":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"16:6335:9238":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:31294:7341":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:1639:9723":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:41237:10174":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:13126:10084":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:4848:11245":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"3:1785:238":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:909:9721":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"20:563:3752":{"crate_id":20,"path":["libc","unix","sigval"],"kind":"struct"},"17:15088:8580":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:23548:2987":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"2:12547:10079":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"16:8480:9594":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"11:1898:9729":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"16:2465:9111":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"16:7334:9413":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:2495:2963":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:7915:25975":{"crate_id":1,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"20:3180:5923":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:43580:7469":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:12814:8220":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:10840:3021":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:13648:8292":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:32869:11350":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"6:1589:4511":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:10515:10649":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"2:43468:3092":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:41117:10168":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"16:7575:10638":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:5575:133":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:7819:28337":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"17:11901:8106":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:11222:32330":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"17:12774:8217":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:44856:10076":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:3063:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1:1654:9727":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"6:5428:11439":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:11616:8081":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:47907:10414":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:47192:10344":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"6:5617:11509":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"2:41598:10200":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:1132:9720":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"11:2507:11346":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:31326:3295":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"16:4808:9178":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:23222:10112":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:14337:8445":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"5:3712:9721":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"16:6694:9313":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"16:7027:9355":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"6:6749:11615":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"2:14346:119":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:23418:10122":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:12065:8120":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"1:12662:763":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"2:23629:10143":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"20:2976:5903":{"crate_id":20,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:12239:25924":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"17:316:7888":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:15001:8563":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:12201:8140":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"17:14571:8173":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:42831:12665":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"14:186:20621":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:4255:12628":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"18:80:25809":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:10114:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:43431:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"6:4881:5911":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:5873:12670":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:2099:209":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"6:5512:11481":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"2:45699:239":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:13592:8286":{"crate_id":17,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"17:12663:8206":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"20:3348:5937":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Chdr"],"kind":"struct"},"17:11814:8097":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"17:3877:7910":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"16:5377:9196":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"5:4519:3003":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:14955:8556":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:8298:2977":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"16:7220:9395":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:8642:10592":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:8699:12644":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:4384:12643":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"16:7041:9149":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:15074:8579":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:11161:35214":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:12150:10485":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:10496:10474":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"16:8055:9539":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"16:5740:8030":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"6:6452:6484":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:16359:8972":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"18:598:35220":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:22188:33125":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"2:22373:2987":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"6:5395:11423":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"20:3006:5906":{"crate_id":20,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:12022:8115":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"6:5550:11482":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"16:7987:9536":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"5:7248:33467":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:40439:10161":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:44784:10260":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"20:1550:4522":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:11757:8091":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"20:3401:5943":{"crate_id":20,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:13453:17990":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:11430:2993":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"2:42512:10050":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:12864:8223":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:16658:9045":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"6:7984:7326":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"5:3686:194":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:10661:133":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:3679:2986":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"20:4881:4439":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:4869:5909":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:15763:8793":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:5932:232":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:2226:17961":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:5748:116":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"5:7762:9858":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"20:4182:6489":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:3061:10482":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:23332:10114":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"20:501:3745":{"crate_id":20,"path":["libc","unix","rusage"],"kind":"struct"},"2:3587:3246":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:41947:2676":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:10924:10065":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:12049:10076":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:23651:10145":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"2:42753:185":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:4247:12627":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"20:4913:6976":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:4921:5914":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"6:6543:11536":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"5:7627:7392":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:45513:11772":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:47817:10412":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:31732:3313":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:23013:33350":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"1:3517:3028":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:9505:3099":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"1:9674:10475":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"2:23001:12775":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"5:2810:11674":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:36998:9465":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:9551:174":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:6898:3104":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"20:1490:4515":{"crate_id":20,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:10876:165":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"20:477:3741":{"crate_id":20,"path":["libc","unix","utimbuf"],"kind":"struct"},"5:6746:33408":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:22385:10111":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:12711:8209":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:5130:12652":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:2914:214":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:14072:10101":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"1:2344:2959":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"16:6026:9142":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"5:7856:9814":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"2:12976:17993":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:6378:26070":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:12035:10075":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:8949:3070":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"17:15971:8847":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:10623:156":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:44734:3022":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"16:7935:9531":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:953:9723":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:4039:10486":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:42474:182":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:13757:8311":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:8719:10600":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"20:5058:6985":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:12331:8155":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:45042:10006":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:12173:8138":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"11:2206:8123":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"20:4811:6973":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:44704:10083":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:41558:10032":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:14322:8440":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:22:845":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"18:0:2825":{"crate_id":18,"path":["memchr"],"kind":"module"},"16:6040:9145":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:41981:10042":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:8713:10592":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:12676:996":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:32947:258":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"5:1211:35000":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"18:481:7829":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"6:5151:5935":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"16:894:9103":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"16:7355:9151":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:3524:7907":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:2820:3293":{"crate_id":2,"path":["core","clone","CloneToUninit"],"kind":"trait"},"2:31358:31582":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"2:42674:10487":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"6:4842:5908":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"16:3439:9166":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"5:1411:9720":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"20:4206:6492":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:16029:8859":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:7501:26087":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:3097:150":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:22788:2987":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"20:3370:5940":{"crate_id":20,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:8577:2982":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"5:7738:9855":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"16:8220:9545":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"6:5420:11434":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"5:724:9805":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"6:5179:5939":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:10571:8029":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:11189:25920":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"17:13996:8362":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:12665:761":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"2:4959:7482":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:10667:7883":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:6774:2676":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"6:5288:11395":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"16:6460:21544":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"6:4875:5910":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:11074:11779":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"1:3331:30407":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"20:4135:6485":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:23640:10144":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"1:9533:247":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"6:5375:6487":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:11423:21630":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"16:8230:21553":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"7:0:1957":{"crate_id":7,"path":["unwind"],"kind":"module"},"6:5568:5952":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:33003:3245":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"16:6835:9333":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"2:23396:31570":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:8687:10487":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:9538:3108":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"2:40331:224":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"16:7551:21550":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:41089:31595":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:9286:7392":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:10109:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:47965:10416":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:15062:8578":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:13186:10088":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"20:489:3743":{"crate_id":20,"path":["libc","unix","timespec"],"kind":"struct"},"20:4818:3535":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:11576:8077":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:23347:11680":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"17:11667:8083":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:13260:21618":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:10479:21615":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"6:5640:11515":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"17:16341:8966":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:12272:8148":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"14:219:9702":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:45118:18005":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:2509:2967":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"17:15792:8800":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:43587:7470":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:46985:10325":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"16:0:2823":{"crate_id":16,"path":["gimli"],"kind":"module"},"19:0:1327":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"6:5405:11429":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:16848:8362":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"2:45485:11765":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"6:5604:11503":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"20:1410:4508":{"crate_id":20,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:14431:8460":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:15102:8583":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:47270:10348":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"9:435:20528":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:14637:8491":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:3837:115":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:15324:8600":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"5:3082:11667":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:7635:7398":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"5:4292:3003":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"18:689:7864":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:0:1764":{"crate_id":1,"path":["std"],"kind":"module"},"6:8225:5971":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"8:0:2816":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"5:2251:12518":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"16:3046:20682":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:6295:232":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:8394:134":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:3042:2987":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"6:5271:11384":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:42778:7392":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:3822:32560":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"6:1551:4507":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"16:8543:9600":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:3719:223":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:10132:21603":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"6:5529:5949":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"5:3080:33609":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"6:1500:11365":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"20:4200:6491":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlattr"],"kind":"struct"},"2:4555:17831":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"2:15:2930":{"crate_id":2,"path":["core","write"],"kind":"macro"},"16:6638:9290":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"1:9219:10621":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:13608:21589":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:12588:8203":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"16:6911:9342":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:23109:12766":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"2:23385:10120":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:12787:8218":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:41549:10199":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"16:906:7889":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"2:46970:10324":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:14483:12550":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:45372:10291":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"5:7679:2950":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"16:6387:9244":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:45689:231":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:7408:25970":{"crate_id":1,"path":["std","sys","backtrace","print","DisplayBacktrace"],"kind":"struct"},"1:3934:10484":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:42770:9721":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:44643:10251":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"20:4800:6972":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"18:698:7865":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:39039:17935":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:44902:10263":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"16:3139:7921":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:44998:10266":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:43096:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"6:532:3748":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:43244:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"16:901:7888":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"16:2413:20653":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"5:3699:3071":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"6:6513:6490":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"6:4902:5912":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:2534:2975":{"crate_id":1,"path":["std","fs","exists"],"kind":"function"},"17:16828:9084":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"6:5521:5948":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"20:3071:5911":{"crate_id":20,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:11112:35213":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"18:680:7862":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"6:5357:11414":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"2:40309:222":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:47028:10328":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"16:2638:9124":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:8326:177":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"20:1398:4507":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:5381:6491":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:26660:283":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:44680:10254":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:9309:10627":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:4776:10012":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"5:5414:17978":{"crate_id":5,"path":["alloc","rc","UniqueRcUninit"],"kind":"struct"},"1:9403:25911":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:12958:8237":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:3628:12564":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:2341:2958":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:47642:10378":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"6:1494:4502":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:12146:8136":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"6:5088:5930":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:23015:17949":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"2:23516:10135":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:12659:1862":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:3072:157":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"1:8606:3019":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"18:754:7879":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:15884:8819":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:4363:12641":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:3571:3054":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:3593:153":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"5:2579:11671":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:5946:10504":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:1632:3071":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:15677:8773":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:11395:21629":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"11:389:35170":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:44612:10186":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:436:197":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:3809:17827":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:46999:10326":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"16:7804:35203":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:10860:7890":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:13509:7911":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"20:3471:5951":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:12749:8215":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:14396:8456":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:12655:1352":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"17:13700:8299":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:23607:10141":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"1:12679:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:12672:1885":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:41496:10023":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:43318:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:10733:7885":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"20:5455:5972":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"11:2540:2949":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"16:8118:222":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:12825:8221":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"6:1711:4523":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:10965:8048":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:11109:152":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"17:15198:8598":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:16051:8864":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:7250:12682":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:12385:8163":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:46801:10308":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:10333:21610":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"16:6109:9213":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:15048:8577":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"5:4990:229":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:47110:10340":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:10892:3041":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"5:5821:18022":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:14940:8552":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:45026:10090":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:4725:12646":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"20:3174:5922":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:11776:9721":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:40369:226":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:47568:10376":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"16:4954:9183":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:41505:10197":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:1885:10473":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"18:706:7867":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:8965:3072":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"5:6274:3003":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:11346:8055":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:47613:10377":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"17:10586:8030":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:10935:8171":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"1:12667:921":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"20:3363:5939":{"crate_id":20,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"18:608:7847":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:10656:123":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:40233:17938":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"17:11502:8069":{"crate_id":17,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"2:8335:3250":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"6:7407:4439":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:2258:133":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"6:7430:6975":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:2568:2672":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:44653:10252":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"3:2062:9865":{"crate_id":3,"path":["compiler_builtins","int","big","u256"],"kind":"struct"},"17:13819:8327":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"16:2858:9134":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"6:5630:5950":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:23469:31574":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:15919:8830":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:927:9706":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"16:155:9087":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:7901:25974":{"crate_id":1,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"1:9587:10640":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"6:6500:6488":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:11210:35215":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:43883:7477":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:41371:2981":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"16:5687:9200":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:1942:10475":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:43072:208":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:6060:3095":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"16:4871:9180":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:11888:8105":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:12103:8131":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:11493:11782":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:10255:21607":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:22277:10111":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"5:6513:18403":{"crate_id":5,"path":["alloc","sync","UniqueArcUninit"],"kind":"struct"},"2:44570:10245":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"6:6695:11601":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"17:10830:8035":{"crate_id":17,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"16:7505:9439":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"5:7591:222":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"6:4984:5922":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:16269:8949":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:12575:8201":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:12944:8236":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:12580:10080":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"1:4243:12626":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:5139:12653":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"2:45531:135":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"20:4904:6975":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"16:6736:35199":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"16:7786:35202":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:3371:3043":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:23052:12776":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:2235:9868":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:11469:21631":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"16:5707:21540":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"20:582:3755":{"crate_id":20,"path":["libc","unix","servent"],"kind":"struct"},"20:557:3751":{"crate_id":20,"path":["libc","unix","linger"],"kind":"struct"},"15:0:2822":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:45481:11764":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"16:2988:9140":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"16:6747:9101":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"6:559:3752":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:15624:8761":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"11:102:11339":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:1114:9715":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"16:5725:8029":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"16:6841:9334":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:47095:10339":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"16:2433:20680":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"1:9351:12676":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:41149:10006":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"20:3389:5942":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"16:8148:9160":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:45509:11771":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:10150:21604":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:15928:8833":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:11855:8103":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:41286:18060":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:44097:10232":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"16:2528:9119":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:42790:7456":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:45239:10281":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"6:6441:6483":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"11:0:2819":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"2:45761:31722":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"2:34257:12681":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:48119:10426":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"20:5441:7327":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:42861:10060":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:12656:351":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:10663:7467":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:41313:3021":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"2:42982:224":{"crate_id":2,"path":["core","range","RangeFrom"],"kind":"struct"},"2:44334:11762":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"5:928:12548":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:508:26042":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:47397:10369":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:15578:8753":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"16:8025:9537":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"6:5462:11464":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"20:4226:6493":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:10886:3043":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"6:5575:5953":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:9444:10638":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"11:2354:3071":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"2:3401:12680":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:13730:8303":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:11512:21632":{"crate_id":17,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"5:3303:33603":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:12253:10529":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:11099:2980":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"2:45682:163":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"17:16350:8970":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:595:12524":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"17:12120:8133":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:11438:8062":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:12673:1891":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:12063:10077":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:13477:17992":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:10671:218":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"1:11116:10647":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"17:10766:7886":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"5:3925:9814":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"1:12653:1925":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"6:6792:11629":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:47224:10346":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"5:1632:9813":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"6:5196:5941":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:5186:5940":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:10455:21614":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"6:0:1032":{"crate_id":6,"path":["libc"],"kind":"module"},"2:31062:12606":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"11:321:11344":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:16177:8915":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"5:6826:7392":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:5356:454":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:22176:33122":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:32922:10153":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"2:44956:10265":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"5:3858:9819":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:978:9705":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:43281:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"11:1001:9715":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"20:1574:4524":{"crate_id":20,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:619:10463":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:2834:3294":{"crate_id":2,"path":["core","clone","InitializingSlice"],"kind":"struct"},"1:8586:2985":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"16:2964:9139":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:12935:8235":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:47177:10343":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:45772:10301":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"5:1122:33408":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"20:1531:4519":{"crate_id":20,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:15174:8239":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:23362:10115":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:9321:12675":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:7471:26085":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"16:8720:150":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"16:6729:9324":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:11604:10667":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"2:41940:10040":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"5:7527:9848":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:16631:8340":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"20:3119:5915":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:45782:192":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:2422:7903":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:5323:32318":{"crate_id":2,"path":["core","ffi","va_list","sealed_trait","VaArgSafe"],"kind":"trait"},"2:23142:12765":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"1:11174:10502":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"2:45017:10268":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:14678:8497":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:10601:7880":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:4840:11677":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:13971:8357":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"16:5111:9187":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"11:1118:9719":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"16:4842:9179":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:44802:10261":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"6:7284:3667":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"20:536:3748":{"crate_id":20,"path":["libc","unix","iovec"],"kind":"struct"},"1:12038:11791":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:16730:9064":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"16:4692:9176":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"6:5311:11403":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"16:4182:9172":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:6953:3106":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"1:8276:2979":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:41395:10188":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"16:2568:9121":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"11:1878:9726":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"20:1444:4512":{"crate_id":20,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:8260:5974":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:47530:10374":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:3792:268":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:12110:10484":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:44591:10247":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"5:3792:33408":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:23066:17949":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"5:6116:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:16040:8863":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:42927:10224":{"crate_id":2,"path":["core","range","iter","IterRangeFrom"],"kind":"struct"},"2:4071:9723":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"16:8562:9603":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"16:8295:9557":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:8166:12540":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:537:12518":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:47862:10413":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:41526:10030":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:16684:9051":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"1:8636:3018":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"6:7463:6978":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:43566:7468":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"16:8633:21555":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:13482:17991":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"6:5205:5942":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:45154:10275":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"5:7200:280":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:4897:17839":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"20:3443:5948":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:22163:33119":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:33033:3302":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:38874:17932":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"5:7074:18022":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"16:6096:9208":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:3540:17937":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"20:4171:6487":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlmsgerr"],"kind":"struct"},"2:2424:9872":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"10:36:11353":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:12619:17959":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"5:6030:9723":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"9:226:3067":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:16573:9030":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"5:1623:222":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"20:1431:4510":{"crate_id":20,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"16:5447:9198":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:47663:10379":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"16:3693:9168":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:47160:10342":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:8804:162":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:12725:8213":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:22206:12688":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:12447:21724":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"6:6651:11584":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:41323:10179":{"crate_id":2,"path":["core","ffi","va_list","VaListImpl"],"kind":"struct"},"2:45168:10278":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"18:643:7831":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:1100:9445":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:14093:8378":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"16:7728:7456":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:6895:3103":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:4925:12645":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"16:7946:9155":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"6:586:3756":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"20:5461:5973":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:8976:3073":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:13014:8243":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:8428:10546":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"14:0:2821":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:12666:939":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"16:6967:9144":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:41164:17856":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:8738:10602":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"6:5249:11379":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:2521:2973":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:39618:17936":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:5154:7916":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"17:12187:8139":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"1:3688:29947":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"11:2469:20604":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"11:686:9704":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:33004:3303":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"3:2077:9866":{"crate_id":3,"path":["compiler_builtins","int","big","i256"],"kind":"struct"},"2:46771:10304":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"16:6203:21542":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"6:4947:5917":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"6:8272:5976":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:47209:10345":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"14:31:9694":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:13688:123":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"16:7189:21548":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"11:718:9705":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:4838:12624":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:14095:10196":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"1:8343:10544":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:12227:10669":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"5:6700:9723":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:10405:21612":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:13243:8261":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:15569:8749":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:3622:2675":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:988:12547":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:43058:7392":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:14055:10098":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"6:4929:5915":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:13079:8253":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"11:481:166":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:45798:10302":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:13219:8259":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"17:14776:8526":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:13460:10059":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:11956:10073":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"5:984:12549":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:14897:8546":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:2750:18089":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"5:7273:33471":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:11079:2976":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"16:8609:9162":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"5:284:33408":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"16:6419:9096":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"20:1386:4506":{"crate_id":20,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:4436:10488":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:41353:2529":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"11:292:11341":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:6470:26074":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:2908:207":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"5:2344:33499":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:10889:3045":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"16:7977:9156":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"6:5441:11449":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:12093:8130":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"6:564:3753":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:1005:9713":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:4850:11247":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"5:1535:9721":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:48108:10425":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:9863:131":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"2:44838:10075":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:3599:155":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"3:0:527":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:3396:12678":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"20:3059:5909":{"crate_id":20,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"5:7619:7392":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"16:6606:218":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:31332:7342":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"16:7398:35200":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:15699:8777":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"16:7421:21549":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:0:585":{"crate_id":2,"path":["core"],"kind":"module"},"17:14985:8559":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"6:6390:6478":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:23684:10148":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"2:43207:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:16538:9000":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"17:11690:8084":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"18:507:7831":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:0:2824":{"crate_id":17,"path":["object"],"kind":"module"},"1:8806:12664":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"18:670:7861":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"16:2746:9129":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:9424:10634":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:1506:168":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"16:2702:9127":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"16:2918:9137":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:3075:272":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:47323:10351":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:2736:3033":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:2229:2962":{"crate_id":2,"path":["core","ptr","metadata","metadata"],"kind":"function"},"6:6756:11616":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"11:1862:7392":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:4850:7480":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:22686:33127":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:13247:150":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"16:5647:9199":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:14413:8459":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:14585:8485":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:10296:32885":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"16:5142:9188":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:12889:8232":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"6:5051:11377":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:12242:8144":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"2:47994:10417":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:8823:3066":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"6:7580:6985":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"16:6438:21543":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:14476:8470":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"6:6727:11606":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"11:2519:11348":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:11752:3071":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:11102:8050":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"6:4896:5789":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:9396:10631":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"17:13771:8312":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:3426:3046":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:12007:10526":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:13304:21619":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:12737:8214":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"6:7562:6984":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:485:7891":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:14730:8502":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"20:4791:3625":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"20:4148:6471":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:523:3747":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:12035:8116":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:13630:8289":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"11:808:9722":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:14454:8463":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"20:3257:5930":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:4767:233":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"5:4362:3071":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:11151:8051":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:16791:9078":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"6:8249:11650":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:45273:10093":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"16:4764:9177":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:8330:10480":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"17:11318:8054":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"20:5013:6982":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"16:3887:7926":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"6:465:3740":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"20:3032:5908":{"crate_id":20,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"6:473:3741":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"6:1667:4517":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"16:5316:9194":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"20:3209:5926":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:14443:8462":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"6:6472:6471":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:16219:8928":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:42821:7457":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:9292:10505":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"20:4767:3667":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:10301:31780":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"9:318:11354":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:8335:10543":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"14:164:20614":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"20:4989:6980":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"6:5107:5931":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:2348:2757":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"20:4775:4435":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:42640:31600":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"5:7774:257":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:44118:3067":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"20:3137:5917":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:14178:8406":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:13231:8260":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"2:45139:10270":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"5:1781:33408":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"20:4292:6515":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:14190:8409":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"6:1657:4516":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:43875:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:3334:30408":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"6:7494:6979":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:7806:32488":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"6:6769:11623":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"6:1684:4519":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:12081:8126":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"5:7599:9851":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:11251:26076":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"6:6428:6482":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:46953:10323":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"18:613:35221":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:3043:17862":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:8447:3249":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:15595:8755":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:9262:10624":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"5:7583:7392":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"6:6617:11568":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"6:5488:11475":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"11:2440:9814":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"16:544:9094":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:10431:21613":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:10553:21617":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"16:6571:9282":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:46786:10307":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:12008:8114":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"5:1247:35001":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:14152:8401":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"11:2513:11347":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:12430:8167":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"5:7569:33496":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:3467:3041":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:2810:114":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:9447:10057":{"crate_id":2,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"6:6687:11598":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"1:12674:1897":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"11:2323:9716":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"2:24260:248":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"16:3832:9169":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"6:485:3743":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:8086:2987":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:3328:30260":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"11:2394:7392":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"2:5417:1007":{"crate_id":2,"path":["core","iter"],"kind":"module"},"16:7055:9357":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:14834:8538":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"5:4565:33418":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:4517:10489":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:4967:12633":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"6:5282:11392":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:43900:150":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"16:6711:9314":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"16:7762:9482":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:15809:8803":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:45359:10287":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:5802:10502":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:31705:208":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"6:7424:6974":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"6:5334:11411":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"17:13423:8273":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"5:3298:9727":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:3315:277":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"20:1635:4577":{"crate_id":20,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"16:6237:9223":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"5:1520:3071":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:12032:11790":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"16:6623:9288":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"16:7165:9382":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:11842:8102":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:14665:8496":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"16:5346:9195":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:15978:8848":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:9500:199":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:11084:32328":{"crate_id":2,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"2:44580:10246":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:8623:3021":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"18:563:7840":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:22987:2987":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"2:13163:10087":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"5:5960:265":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:34949:17931":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:1011:9714":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"6:5319:11407":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:8288:2980":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"1:8871:3067":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:42556:11750":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:22142:33116":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"2:48053:10420":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:41956:10041":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:44634:10250":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:4171:12621":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:8764:10491":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:11585:11786":{"crate_id":1,"path":["std","sys","exit_guard","PThread"],"kind":"struct"},"17:12373:8162":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:22675:10110":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:45493:11767":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:1123:9716":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:44321:11761":{"crate_id":2,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"17:15513:8743":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:13202:10089":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:13133:8254":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"14:201:18007":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:15013:8565":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:41426:10190":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"6:5341:11412":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"17:14971:8557":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"6:5127:5933":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:9457:25912":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:912:202":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"17:11552:8073":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"5:5134:3003":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"5:7723:18060":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:8959:3071":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"16:6157:9214":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:12635:25953":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"6:1514:4503":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:15733:8782":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:12055:8118":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"20:3489:5953":{"crate_id":20,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"6:4829:5907":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:1660:9728":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:22790:12686":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"5:7694:9844":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"11:851:9713":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:41473:10193":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"11:649:3071":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:14212:10103":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:44693:10257":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:10388:10214":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"2:43861:31665":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"2:44988:3018":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"17:15691:8776":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:683:10464":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:35122:9464":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"20:4039:6456":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"11:859:9714":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:12171:10486":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:41933:10039":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"17:15640:8764":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:4906:7481":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:41127:10169":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"16:8102:9541":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:6454:10108":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"6:5503:11480":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"17:12878:8228":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"6:491:3744":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:15785:8799":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:44551:10242":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:13489:8278":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"6:5224:5944":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"16:8206:9148":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:9236:10622":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"6:1696:4521":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"6:6360:6456":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:10810:26080":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"6:6590:11561":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:12651:1208":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"16:4239:9173":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"20:4162:6486":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlmsghdr"],"kind":"struct"},"6:4970:5920":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:43133:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:43050:9721":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"20:5467:5974":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:896:3071":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:16672:9049":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"17:12229:8143":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"20:3286:5932":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:22134:3313":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"20:55:3354":{"crate_id":20,"path":["libc","unix","DIR"],"kind":"enum"},"20:5488:7328":{"crate_id":20,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"5:7098:18023":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"9:380:20529":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"20:3276:5931":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"6:7292:4435":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:13673:8293":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"20:1361:4503":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:41104:10167":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"20:4074:6479":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"16:8040:35206":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:4134:12620":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"16:2818:9132":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:41487:10196":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:3079:271":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"17:13183:8256":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"6:7439:6976":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:16717:9058":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"1:8742:3535":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:13465:8276":{"crate_id":17,"path":["object","read","ObjectMapFile"],"kind":"struct"},"1:8629:3022":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:11577:252":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"5:1001:3071":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:42869:10222":{"crate_id":2,"path":["core","range","iter","IterRange"],"kind":"struct"},"2:3558:128":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:47936:10415":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"6:5652:11522":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:11128:2982":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"2:4501:10008":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"11:676:7392":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"16:8176:9543":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"6:497:3745":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:11989:8112":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:22257:2987":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"5:2261:9821":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"6:6858:2477":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"16:7539:9444":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:12087:26089":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:14427:164":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:12409:8165":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"16:6656:9304":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"5:3332:9726":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"5:4202:9721":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:44491:10240":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:6121:3003":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:11380:10622":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:48015:10418":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:6668:198":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"20:3111:5914":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:4:1292":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:6605:232":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:48134:10427":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:919:7392":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"6:6645:11581":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"11:2525:35164":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:40197:17826":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"18:96:25810":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:16288:8950":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"11:423:35172":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"6:5664:11527":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:4963:12630":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:8152:12539":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:2228:17962":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"1:5222:12660":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"20:568:3753":{"crate_id":20,"path":["libc","unix","itimerval"],"kind":"struct"},"1:9569:2993":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"17:16116:8908":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:8852:32884":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:4852:11249":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"20:3154:5919":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:6398:6479":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:4233:12625":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:3872:12603":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:11259:8053":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:7569:29714":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"6:6422:6481":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"6:6459:6485":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:44752:10073":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:44560:10244":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:43845:9572":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:10605:2986":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"11:2126:9716":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:2303:201":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"16:7383:9417":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:5870:3479":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"18:113:25811":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"16:6082:9203":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:15937:8834":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:22165:33121":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:41962:3051":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:15035:8576":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"5:7108:18024":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"2:45555:10293":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"16:7492:9435":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:11090:10641":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"6:5477:11473":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:8281:17914":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:48062:10421":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:8705:10598":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:40294:225":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"20:3320:5935":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:11629:8013":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"18:581:3313":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:11995:8113":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"5:3262:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:2511:2968":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"20:3065:5910":{"crate_id":20,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:4957:5918":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"5:7510:9817":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:48157:10434":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:41378:10186":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:11654:8053":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:13553:21621":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"16:5083:9186":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:34603:17929":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"6:6602:5938":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:999:9711":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:5375:3023":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"16:5253:9192":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:16315:8957":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:11266:26078":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"6:8243:11649":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"11:123:11340":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:12686:8207":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"18:491:7830":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"16:6995:9346":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"20:3127:5916":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:4653:10010":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:14160:32934":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:1919:7594":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"2:42762:3071":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:48082:10423":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:12263:8147":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"2:12946:18075":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"18:521:25820":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:46818:10311":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:1636:7392":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:15951:8841":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:44710:10258":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:16766:9073":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"1:5045:12629":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:13892:8345":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:41435:10191":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:15713:8778":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:13360:21620":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:11206:10624":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"2:4536:17830":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:45566:18114":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"20:3433:5947":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"5:1601:9704":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:6053:3094":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:5154:12654":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:15389:8651":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"16:6850:9335":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:5022:10493":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:12214:8141":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"5:1366:9445":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"6:479:3742":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:9834:151":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"6:8007:7327":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:789:166":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:7857:17909":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"20:1537:4520":{"crate_id":20,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:650:12534":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:10283:21608":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:3590:3003":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"11:2340:9732":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"2:45181:10279":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:4701:7479":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"6:5412:1279":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:41275:10177":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:9436:10636":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"5:1382:9716":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:47139:10341":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"11:2297:9715":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"16:6366:9090":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"6:6659:11586":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:8559:3050":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:3937:10485":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"18:635:7854":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"6:8175:6983":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"6:7367:4464":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"20:2982:5904":{"crate_id":20,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:3469:3042":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:3743:7909":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"20:549:3750":{"crate_id":20,"path":["libc","unix","winsize"],"kind":"struct"},"6:8231:5972":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:44089:10231":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:12664:782":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"16:3585:9167":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"6:8284:11655":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:2159:1397":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:707:12537":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"6:1690:4520":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"16:6678:9310":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"11:983:9445":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:41971:10204":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"17:321:7889":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:8438:3037":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:45033:10171":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:909:12605":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"1:3095:238":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"17:11794:21652":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"6:5557:11484":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:45748:10298":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"6:7344:3535":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:12624:12541":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:940:9707":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:3199:9873":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"2:14389:10109":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"2:6998:10031":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1:9372:3097":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:14187:217":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"1:1919:10474":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:11137:25954":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"2:33494:9458":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"6:6505:6489":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"5:1397:9715":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:13983:8360":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"10:44:9736":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:44623:10249":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:12608:8204":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"16:4150:9171":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"11:1858:3071":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"6:6702:11602":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"2:43816:7477":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"16:8500:9595":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:3576:17841":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"2:31347:7477":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:40409:2956":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"6:5007:5925":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"16:6792:9328":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"6:1727:4524":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"16:6864:21546":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"6:5450:11455":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"11:1703:168":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:10665:7468":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"16:2504:9118":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:11994:10074":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:10975:35210":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:41404:3019":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:3066:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"6:6893:11631":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"6:5366:6486":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:6810:10024":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"5:4322:3003":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"11:427:35173":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:47308:10350":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:2243:7899":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:41539:10198":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:13399:8272":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:8271:2978":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"9:412:20530":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:4928:3131":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"20:527:3747":{"crate_id":20,"path":["libc","unix","hostent"],"kind":"struct"},"20:3166:5921":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:46918:10321":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:12287:8152":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"11:1136:9720":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:12438:26093":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:8797:10603":{"crate_id":1,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"2:32915:9503":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:47547:10375":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:48172:10435":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:41042:10006":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"16:4118:9170":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:13093:8077":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"5:7710:9852":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"5:778:264":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:42961:226":{"crate_id":2,"path":["core","range","RangeInclusive"],"kind":"struct"},"18:651:7831":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"6:6878:6515":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"16:8162:9150":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:12979:8240":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:10675:7472":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:8101:10532":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"1:9214:10620":{"crate_id":1,"path":["std","pipe","PipeWriter"],"kind":"struct"},"2:45809:9734":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"1:5682:10498":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"16:3012:20681":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"16:7518:9442":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:8324:131":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:45685:176":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"15:306:20634":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"20:542:3749":{"crate_id":20,"path":["libc","unix","pollfd"],"kind":"struct"},"20:1479:4514":{"crate_id":20,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"20:1504:4516":{"crate_id":20,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:12990:8241":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:10880:8037":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"20:3104:5913":{"crate_id":20,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"15:394:20644":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"2:48036:10419":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:22383:12685":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"5:787:122":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:11200:8052":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:22259:12684":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"16:2898:9136":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"5:6169:18395":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:1996:10477":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"17:11770:21651":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"2:8090:3087":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:38929:17933":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:6197:10020":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:16241:8934":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:43833:11760":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"16:7279:9408":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:9390:119":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:5389:216":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"6:6631:11579":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:5343:10497":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:7022:245":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:4489:10007":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"16:2658:9125":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:10369:21611":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:14611:8488":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:9249:10623":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:12668:927":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"1:3697:2984":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:41747:10037":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:43355:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"11:820:12547":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"16:6171:9217":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:12072:8123":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"6:7962:3700":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:11728:8087":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"6:5387:11418":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:11670:9787":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"17:11743:8089":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:40446:9876":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:13471:7867":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"6:5217:5943":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:4703:12645":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:3373:3044":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:11069:11777":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"11:1652:35177":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:23410:10121":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:16700:9056":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"5:214:9803":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:5139:5934":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"20:3092:5912":{"crate_id":20,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:10517:10648":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"17:14883:8545":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"16:6901:9341":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"16:6950:9345":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"6:5019:5926":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"5:7668:2949":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:9209:10619":{"crate_id":1,"path":["std","pipe","PipeReader"],"kind":"struct"},"16:4927:9182":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"16:5222:9191":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:47368:10368":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:38984:17934":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:4355:12640":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:15801:8801":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:42852:7455":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:3411:9459":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:11145:25956":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:699:10465":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:8433:10547":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"1:7877:25971":{"crate_id":1,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"6:6610:5937":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"6:4997:5924":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"5:1573:9706":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"11:2099:9445":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:2772:3025":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"16:2548:9120":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"11:787:9814":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"16:4265:9174":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:41464:10019":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"20:1355:4502":{"crate_id":20,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:45477:11763":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"16:3985:7934":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"17:15908:8826":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:12652:492":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:45677:11773":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"11:357:35168":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:11868:8077":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"18:659:7855":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:16013:8856":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:40349:227":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"6:5241:5946":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:2032:813":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"1:8124:8171":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:6087:3096":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:15721:8779":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"16:7997:9157":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"16:8595:9607":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"14:213:9700":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"6:5623:11512":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"16:6586:9285":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"17:14788:8528":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"6:517:3746":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"0:73:2438":{"crate_id":0,"path":["num_cpus","get_physical"],"kind":"function"},"2:44081:10229":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"11:813:9708":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:16021:8858":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:8694:11774":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"6:5349:11413":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"1:12657:1738":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"6:6638:11580":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:12344:8157":{"crate_id":17,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"6:5165:5936":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"20:483:3742":{"crate_id":20,"path":["libc","unix","timeval"],"kind":"struct"},"1:7889:25973":{"crate_id":1,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"},"7:31:20515":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:46886:10319":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"5:7519:7392":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:45390:10094":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"5:5560:17980":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"6:545:3750":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"5:5564:17981":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:7972:7895":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"6:5611:11506":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"17:14746:8507":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:47057:10337":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:13387:8271":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"18:531:7835":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:34776:17930":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"20:1543:4521":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"16:7413:9420":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:13411:3075":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"20:0:1032":{"crate_id":20,"path":["libc"],"kind":"module"},"17:16211:8927":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:562:12533":{"crate_id":1,"path":["std","thread","thread_name_string","ThreadNameString"],"kind":"struct"},"2:7740:17858":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"11:1558:9724":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:45707:219":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"1:8568:3052":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:11485:8066":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:12318:8153":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:12650:436":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"6:8304:11660":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"16:8666:9503":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:3147:127":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:11801:3022":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"16:6500:20652":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"6:6737:11613":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"2:41417:10189":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:32911:10152":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"6:1675:4518":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"16:2588:9122":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:4333:29713":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:46865:10314":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:11963:8111":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:42714:10054":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"18:735:25818":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:974:9704":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:41517:10029":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:16613:8330":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"2:46903:10320":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"20:614:3774":{"crate_id":20,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"11:2115:9715":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"6:7539:6982":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:6523:6492":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:15844:8809":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"5:1227:33606":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:43170:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:3782:17939":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:11014:35211":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"6:6416:6480":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:13836:8330":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:14521:8476":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:10604:238":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"6:7326:6972":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"5:1612:9705":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"20:5433:7326":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:16068:8871":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"6:8266:5975":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"5:1582:9707":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:2096:210":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"20:1472:4513":{"crate_id":20,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:45008:10267":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:33035:118":{"crate_id":2,"path":["core","marker","ConstParamTy_"],"kind":"trait"},"17:13052:8250":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"16:5196:9190":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"16:6406:9251":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:44663:10253":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:14307:8436":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:15963:8844":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:22881:12770":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"6:5539:5951":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"6:7317:11637":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:10062:21602":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"12:0:2820":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:40457:10162":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:11447:11781":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"1:8653:12601":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"20:3296:5933":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:9543:3109":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"17:11915:8052":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:16058:8866":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:5136:17850":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"5:2167:9820":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"1:12675:1879":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"10:0:2818":{"crate_id":10,"path":["adler"],"kind":"module"},"20:3215:5927":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:2453:7906":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"16:8264:9553":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:2122:696":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"11:750:9706":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:41588:10034":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:41048:10163":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:15995:8852":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:13909:8347":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:23503:10134":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:42496:10048":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"11:832:9711":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"6:4964:5919":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:7982:10530":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"11:2533:11351":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:10674:28284":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"20:469:3740":{"crate_id":20,"path":["libc","unix","group"],"kind":"struct"},"17:12854:7911":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:12246:10529":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:6502:10511":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"20:5040:6984":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"16:5280:9193":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:13947:8353":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:12270:26091":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"6:7990:11641":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"16:6142:21541":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:6967:3107":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"17:15448:8703":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"6:5494:11477":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"17:1352:7898":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:44542:10241":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"11:1042:20608":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:13195:8257":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"2:23434:31572":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:12678:1460":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:11458:8065":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:15985:8849":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:11540:8072":{"crate_id":17,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"16:7904:9522":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:14558:8480":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"20:4919:6977":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:6778:3100":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:14350:8447":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"6:1489:4501":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:12621:8205":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:4140:12619":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"15:288:20633":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:16329:8964":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"16:6873:9338":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"6:5255:5947":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"16:2948:9138":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"16:7880:9255":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:16525:8326":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"6:5057:5928":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:14870:8543":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:15868:8817":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"13:0:2814":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:4922:12655":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:4965:12632":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"6:4914:5913":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"6:6679:11595":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"17:14008:8363":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:14498:8471":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:23137:12767":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"17:12643:8052":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"16:3306:9108":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:11465:174":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"2:3317:121":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:11590:8078":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:11153:10602":{"crate_id":1,"path":["std","sys","pal","unix","linux","pidfd","PidFd"],"kind":"struct"},"16:4981:9184":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:8277:17915":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"5:7872:9862":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"4:0:2815":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"17:13328:7988":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:10815:8031":{"crate_id":17,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"11:2374:9721":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"2:41252:10176":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:48187:10436":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"6:7337:6973":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:1867:722":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:10884:169":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:41078:10164":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"5:3291:3071":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"16:6267:9228":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"20:4104:6482":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"16:7072:21547":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:44128:10238":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:1665:9729":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:44884:10262":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:41574:7852":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:47740:10411":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"11:663:9721":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:42937:222":{"crate_id":2,"path":["core","range","Range"],"kind":"struct"},"20:134:3430":{"crate_id":20,"path":["libc","unix","FILE"],"kind":"enum"},"17:13959:8356":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:47418:10370":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:16395:8976":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:3707:2673":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:9484:10058":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"6:1569:4509":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:13207:8258":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"2:2129:7338":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"16:7835:21551":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"16:5755:9201":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"20:3334:5936":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:15817:8805":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"16:6887:9143":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:13344:8269":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"16:8525:9598":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:42696:10051":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:8351:3034":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:10766:10621":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:47014:10327":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:16417:8982":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"20:3451:5949":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:43806:11751":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"16:6820:21545":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"1:8281:2976":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:519:7893":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:43573:7467":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:13157:8255":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"16:7459:9431":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:34391:17923":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:5732:10501":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:8310:152":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"5:1591:9722":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"20:2995:5905":{"crate_id":20,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:32946:251":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"1:11759:26082":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"1:2663:2674":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"18:515:7828":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:12298:21723":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"6:553:3751":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:13021:21750":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:34190:12679":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"11:1027:9716":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:23095:2987":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"2:41203:10173":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"6:5025:5927":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"5:3358:9729":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:15746:8788":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:8894:3068":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:15876:8818":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:12960:10081":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"5:6566:12778":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"20:4266:6514":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"20:574:3754":{"crate_id":20,"path":["libc","unix","tms"],"kind":"struct"},"2:23496:11683":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:4816:5906":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"5:3448:9814":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"5:4488:33418":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"5:5515:33408":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"6:6710:11603":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"20:3187:5924":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:4185:12622":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:10202:21606":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"6:5117:5932":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:12045:7969":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:9477:11776":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:3426:17927":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"17:10524:21616":{"crate_id":17,"path":["object","common","RelocationFlags"],"kind":"enum"},"1:11981:10521":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:13044:8248":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:41733:10036":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"6:6670:11589":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"2:45501:11769":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:14811:8537":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"16:5058:9185":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:3424:3045":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"11:763:9707":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"2:41244:10175":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"16:5170:9189":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:9270:3071":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"5:1483:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"5:3337:33604":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"20:521:3746":{"crate_id":20,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"6:5230:5945":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:14165:8405":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"20:138:3431":{"crate_id":20,"path":["libc","unix","fpos_t"],"kind":"enum"},"17:16650:9044":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"17:15186:8594":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"6:4976:5921":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:22265:12687":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:11356:35217":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:8027:26094":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:11215:32329":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"17:12160:8137":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:3327:3297":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"1:12658:1772":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"6:5471:11470":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:42662:10217":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"17:10821:8032":{"crate_id":17,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"16:2682:9126":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"20:4190:6490":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:12562:8200":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"18:548:165":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:45489:11766":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:2872:213":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"6:1632:4514":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:4199:12624":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"16:5415:9197":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"20:3019:5907":{"crate_id":20,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:6719:11605":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"1:383:10460":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:12254:8146":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"1:6132:3098":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:12669:933":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"1:11393:10623":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"6:5658:11524":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"6:5044:11375":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"18:726:7874":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:15896:8825":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"20:4968:6979":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:14384:8454":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:3640:2983":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"18:718:7871":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:46833:10312":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"20:1416:4509":{"crate_id":20,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:8172:12581":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:22925:12771":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"6:578:3755":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:11715:8086":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"20:3238:5929":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:3158:150":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:43394:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:2339:151":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:8909:3069":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"11:1866:9723":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:5696:10499":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"6:6744:11614":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"17:12397:8164":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:12663:766":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:22152:33116":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"17:16744:9067":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"2:45324:10282":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:13120:8053":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"2:32929:7480":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"2:11844:10070":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"6:6852:6514":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:40277:12563":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"}},"external_crates":{"20":{"name":"libc","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":33}