{"root":"0:0:1818","crate_version":"1.16.0","includes_private":false,"index":{"2:12082:33782":{"id":"2:12082:33782","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:12080:33781"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12126:1954":{"id":"2:12126:1954","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11778:16581","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11945:418","str::split_whitespace":"2:12104:31510","str::rsplit":"2:12132:25169"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43558:2270","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:9229","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12135:33787":{"id":"2:12135:33787","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11778:16581","str::split":"2:12126:1954","prim@char":"1:11945:418","`DoubleEndedIterator`":"2:7306:121","str::rsplit_terminator":"2:12138:33788"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43608:9529","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:9229","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1818":{"id":"0:0:1818","crate_id":0,"name":"num_cpus","span":{"filename":"src/lib.rs","begin":[1,0],"end":[485,1]},"visibility":"public","docs":"A crate with utilities to determine the number of CPUs available on the\ncurrent system.\n\nSometimes the CPU will exaggerate the number of CPUs it contains, because it can use\n[processor tricks] to deliver increased performance when there are more threads. This \ncrate provides methods to get both the logical and physical numbers of cores.\n\nThis information can be used as a guide to how many tasks can be run in parallel.\nThere are many properties of the system architecture that will affect parallelism,\nfor example memory access speeds (for all the caches and RAM) and the physical\narchitecture of the processor, so the number of CPUs should be used as a rough guide\nonly.\n\n\n## Examples\n\nFetch the number of logical CPUs.\n\n```\nlet cpus = num_cpus::get();\n```\n\nSee [`rayon::Threadpool`] for an example of where the number of CPUs could be\nused when setting up parallel jobs (Where the threadpool example uses a fixed\nnumber 8, it could use the number of CPUs).\n\n[processor tricks]: https://en.wikipedia.org/wiki/Simultaneous_multithreading\n[`rayon::ThreadPool`]: https://docs.rs/rayon/1.*/rayon/struct.ThreadPool.html","links":{},"attrs":["#![deny(missing_docs)]","#![allow(non_snake_case)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:72:1677","0:73:1695"],"is_stripped":false}}},"2:12188:33801":{"id":"2:12188:33801","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11945:418","self::pattern":"2:11778:16581"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:9229","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12118:2019":{"id":"2:12118:2019","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41591:179","prim@char":"1:11945:418","self::pattern":"2:11778:16581"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:9229","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73:1695":{"id":"0:73:1695","crate_id":0,"name":"get_physical","span":{"filename":"src/lib.rs","begin":[108,0],"end":[110,1]},"visibility":"public","docs":"Returns the number of physical cores of the current system.\n\nThis will always return at least `1`.\n\n# Note\n\nPhysical count is supported only on Linux, mac OS and Windows platforms.\nOn other platforms, or if the physical count fails on supported platforms,\nthis function returns the same as [`get()`], which is the number of logical\nCPUS.\n\n# Examples\n\n```\nlet logical_cpus = num_cpus::get();\nlet physical_cpus = num_cpus::get_physical();\nif logical_cpus > physical_cpus {\n    println!(\"We have simultaneous multithreading with about {:.2} \\\n              logical cores to 1 physical core.\", \n              (logical_cpus as f64) / (physical_cpus as f64));\n} else if logical_cpus == physical_cpus {\n    println!(\"Either we don't have simultaneous multithreading, or our \\\n              system doesn't support getting the number of physical CPUs.\");\n} else {\n    println!(\"We have less logical CPUs than physical CPUs, maybe we only have access to \\\n              some of the CPUs on our system.\");\n}\n```\n\n[`get()`]: fn.get.html","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12167:33794":{"id":"2:12167:33794","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12076":{"id":"2:12076","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12077:816","2:12078:2035","2:12079:33780","2:12080:33781","2:12082:33782","2:12085:26309","2:12086:33783","2:12087:314","2:12088:1718","2:12089:1677","2:12091:25133","2:12093:25134","2:12095:25135","2:12097:33784","2:12098:33785","2:12099:25158","2:12100:25159","2:12101:9257","2:12102:9546","2:12103:6623","2:12104:31510","2:12105:31513","2:12106:1951","2:12107:33786","2:12108:31544","2:12109:25175","2:12112:25176","2:12115:25177","2:12118:2019","2:12122:6632","2:12126:1954","2:12129:25167","2:12132:25169","2:12135:33787","2:12138:33788","2:12141:25171","2:12144:25173","2:12147:33789","2:12150:33790","2:12153:2180","2:12156:33791","2:12159:33792","2:12162:33793","2:12165:1958","2:12167:33794","2:12169:33795","2:12171:33796","2:12172:33797","2:12173:33798","2:12176:33799","2:12179:2000","2:12182:25178","2:12185:33800","2:12188:33801","2:12191:33802","2:12194:1810","2:12196:26338","2:12197:26339","2:12198:26341","2:12199:26342","2:12200:26343","2:12201:33803","2:12203:11285","2:12204:33804"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12079:33780":{"id":"2:12079:33780","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12165:1958":{"id":"2:12165:1958","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12182:25178":{"id":"2:12182:25178","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11945:418","self::pattern":"2:11778:16581"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:9229","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:9229","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:16579","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5440:34457":{"id":"5:5440:34457","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7280:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5443:26479":{"id":"5:5443:26479","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12199:26342"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12199:26342":{"id":"2:12199:26342","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12141:25171":{"id":"2:12141:25171","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11945:418","self::pattern":"2:11778:16581","str::rsplitn":"2:12144:25173"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43662:9241","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:9229","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12098:33785":{"id":"2:12098:33785","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11951:1404","crate::ops::IndexMut":"2:2984:11308","str::slice_unchecked":"2:12097:33784"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12093:25134":{"id":"2:12093:25134","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5425:34454":{"id":"5:5425:34454","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:273:2499","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7013:9143","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:273:2499","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7013:9143","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12144:25173":{"id":"2:12144:25173","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11945:418","str::splitn":"2:12141:25171","self::pattern":"2:11778:16581"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43680:9242","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:9229","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:9229","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:16579","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12099:25158":{"id":"2:12099:25158","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_mut":"2:12100:25159"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12109:25175":{"id":"2:12109:25175","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11945:418","self::pattern":"2:11778:16581"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:9229","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12091:25133":{"id":"2:12091:25133","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41591:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12129:25167":{"id":"2:12129:25167","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11945:418","self::pattern":"2:11778:16581"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11601:9236","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:9229","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12198:26341":{"id":"2:12198:26341","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12086:33783":{"id":"2:12086:33783","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5442:2295":{"id":"5:5442:2295","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7280:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12108:31544":{"id":"2:12108:31544","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43850:9256","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12085:26309":{"id":"2:12085:26309","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11345:16582"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12138:33788":{"id":"2:12138:33788","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11778:16581","str::split":"2:12126:1954","prim@char":"1:11945:418","str::split_terminator":"2:12135:33787"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43626:9530","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:9229","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:9229","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:16579","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12204:33804":{"id":"2:12204:33804","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4536:33804"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43875:9447","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12087:314":{"id":"2:12087:314","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12088:1718","`u8`":"1:11962:1507"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12196:26338":{"id":"2:12196:26338","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12077:816":{"id":"2:12077:816","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11945:418"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12097:33784":{"id":"2:12097:33784","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11951:1404","str::slice_mut_unchecked":"2:12098:33785","crate::ops::Index":"2:2980:11307"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12171:33796":{"id":"2:12171:33796","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12185:33800":{"id":"2:12185:33800","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11945:418","self::pattern":"2:11778:16581"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:9229","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:9229","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:16579","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12150:33790":{"id":"2:12150:33790","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:9229","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:9229","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:16579","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12122:6632":{"id":"2:12122:6632","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41591:179","prim@char":"1:11945:418","self::pattern":"2:11778:16581"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:9229","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:9229","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:16579","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5426:6580":{"id":"5:5426:6580","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7280:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:9229","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12112:25176":{"id":"2:12112:25176","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11945:418","self::pattern":"2:11778:16581"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:9229","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12179:2000":{"id":"2:12179:2000","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11945:418","self::pattern":"2:11778:16581"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:9229","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12078:2035":{"id":"2:12078:2035","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12104:31510":{"id":"2:12104:31510","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12105:31513"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43832:9536","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12203:11285":{"id":"2:12203:11285","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4539:11285"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43866:9181","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5424":{"id":"5:5424","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5425:34454","5:5426:6580","5:5429:34455","5:5432:34456","5:5440:34457","5:5441:34458","5:5442:2295","5:5443:26479","5:5444:26480"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12153:2180":{"id":"2:12153:2180","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11778:16581","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11945:418","str::matches":"2:12153:2180"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43762:9533","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:9229","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12194:1810":{"id":"2:12194:1810","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11739:127","`FromStr`":"2:11738:2322"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41733:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:11738:2322","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11738:2322","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12106:1951":{"id":"2:12106:1951","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43812:2266","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5429:34455":{"id":"5:5429:34455","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7280:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:9229","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5441:34458":{"id":"5:5441:34458","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:273:2499","`String`":"5:7280:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:273:2499","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7013:9143","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12169:33795":{"id":"2:12169:33795","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12176:33799":{"id":"2:12176:33799","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11945:418","self::pattern":"2:11778:16581"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:9229","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12105:31513":{"id":"2:12105:31513","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12104:31510"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43841:9537","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12080:33781":{"id":"2:12080:33781","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12095:25135":{"id":"2:12095:25135","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12102:9546":{"id":"2:12102:9546","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11945:418"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43534:9527","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12103:6623":{"id":"2:12103:6623","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43544:2269","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:72:1677":{"id":"0:72:1677","crate_id":0,"name":"get","span":{"filename":"src/lib.rs","begin":[73,0],"end":[75,1]},"visibility":"public","docs":"Returns the number of available CPUs of the current system.\n\nThis function will get the number of logical cores. Sometimes this is different from the number\nof physical cores (See [Simultaneous multithreading on Wikipedia][smt]).\n\nThis will always return at least `1`.\n\n# Examples\n\n```\nlet cpus = num_cpus::get();\nif cpus > 1 {\n    println!(\"We are on a multicore system with {} CPUs\", cpus);\n} else {\n    println!(\"We are on a single core system\");\n}\n```\n\n# Note\n\nThis will check [sched affinity] on Linux, showing a lower number of CPUs if the current\nthread does not have access to all the computer's CPUs.\n\nThis will also check [cgroups], frequently used in containers to constrain CPU usage.\n\n[smt]: https://en.wikipedia.org/wiki/Simultaneous_multithreading\n[sched affinity]: http://www.gnu.org/software/libc/manual/html_node/CPU-Affinity.html\n[cgroups]: https://www.kernel.org/doc/Documentation/cgroup-v1/cgroups.txt","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12107:33786":{"id":"2:12107:33786","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43822:9535","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12089:1677":{"id":"2:12089:1677","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41591:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12115:25177":{"id":"2:12115:25177","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11945:418","self::pattern":"2:11778:16581"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:9229","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:9229","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:16579","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12172:33797":{"id":"2:12172:33797","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12201:33803":{"id":"2:12201:33803","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4538:33803"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43857:9448","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5444:26480":{"id":"5:5444:26480","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12200:26343"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12191:33802":{"id":"2:12191:33802","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11945:418","self::pattern":"2:11778:16581"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:9229","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:9229","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:16579","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12162:33793":{"id":"2:12162:33793","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11778:16581","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11945:418","str::match_indices":"2:12159:33792"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43726:9532","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:9229","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:9229","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:16579","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12159:33792":{"id":"2:12159:33792","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11778:16581","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11945:418","str::rmatch_indices":"2:12162:33793"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43708:9531","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:9229","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12197:26339":{"id":"2:12197:26339","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39628:26308","Self::is_ascii":"2:12196:26338"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39628:26308","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5432:34456":{"id":"5:5432:34456","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7280:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12173:33798":{"id":"2:12173:33798","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11945:418","self::pattern":"2:11778:16581"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:9229","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:9229","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11803:16578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12101:9257":{"id":"2:12101:9257","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11945:418"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43528:9249","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12100:25159":{"id":"2:12100:25159","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:12099:25158"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12147:33789":{"id":"2:12147:33789","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:9229","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12132:25169":{"id":"2:12132:25169","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11778:16581","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11945:418","str::split":"2:12126:1954"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43576:9239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:9229","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:9229","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:16579","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12200:26343":{"id":"2:12200:26343","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12156:33791":{"id":"2:12156:33791","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11778:16581","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11945:418","str::matches":"2:12153:2180"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43780:9534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:9229","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:9229","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:16579","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12088:1718":{"id":"2:12088:1718","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11962:1507"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"17:13894:8272":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"20:3111:5155":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:46093:9598":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"5:7376:7171":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:43516:9526":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"6:4992:10734":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:11888:7789":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:10897:9842":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"6:474:2981":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:4010:9183":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"16:5737:19592":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:6032:7225":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:40391:9192":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:1755:9173":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:2850:16713":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:40239:1799":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"9:426:18583":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:4380:7188":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"5:6270:7150":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:39295:199":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:14189:8370":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"6:4535:10634":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:10051:7553":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:14163:8361":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"11:1121:9058":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"5:5838:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:1931:656":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"19:0:1036":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:2984:11308":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"6:494:2984":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:2921:2493":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"16:2519:8470":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:11275:10988":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:10702:9876":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:5383:2256":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"17:12966:8001":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:7268:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:42369:6709":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"5:7022:6637":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:9990:7549":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"18:690:7361":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"11:1611:7126":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"11:657:6637":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:39455:9312":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:13971:8295":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:44535:9567":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:10529:7606":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"6:4770:10648":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:44277:10966":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"6:5836:5726":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:9217:6707":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:8901:11408":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"20:3320:5176":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"16:8210:8840":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"6:5863:10772":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"0:72:1677":{"crate_id":0,"path":["num_cpus","get"],"kind":"function"},"5:4362:7157":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:44147:9552":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"20:3059:5150":{"crate_id":20,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:3141:16715":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"20:3065:5151":{"crate_id":20,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:46215:9602":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:12840:7984":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"6:7517:5214":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"20:1398:3748":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:6651:6643":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:4760:7221":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:10870:9246":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"16:7474:8501":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"16:3220:8512":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:44190:9260":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"20:1550:3763":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:11949:312":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"17:13179:8043":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"20:1361:3744":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"6:6015:10818":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:13914:8279":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"6:547:2990":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"6:4754:5188":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:11872:7785":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:22072:10889":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"16:3744:8516":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:7877:9767":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:11566:9255":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:46807:9629":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:42900:9506":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:42869:9500":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"6:6022:10819":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:7277:2498":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:41716:6694":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:21981:9279":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"20:3127:5157":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:635:9698":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:6740:16696":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"18:699:7362":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:2691:2543":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:43108:10965":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"5:682:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:12659:7939":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"6:1709:3763":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:13096:8026":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:3424:2236":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:1080:9058":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:11957:748":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:2580:2273":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"6:7529:10857":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:21060:11416":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"2:46917:9632":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"16:7515:8874":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:8172:2269":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"16:7012:8773":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:12579:7928":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:10544:7610":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"5:3168:2318":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:2133:7399":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:8197:9816":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:11963:1504":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"16:6197:8647":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:9476:9233":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:13757:8241":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"6:1717:3764":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"18:599:35378":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:3463:2239":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:5522:2719":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"20:4151:5712":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:14329:8410":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:40484:9203":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:400:7387":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:9518:7520":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:8979:9852":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:11428:7719":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:39420:9310":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"16:7584:8878":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"5:0:286":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:14282:8396":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"20:5455:5212":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:3315:2277":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"5:4347:245":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"11:447:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:8841:19656":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:1982:185":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"5:1285:9053":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"16:2900:8486":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:11969:1132":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:13639:8210":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:13456:8159":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:11272:7709":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:10867:9734":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"1:9413:2232":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"17:9571:35367":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:8527:2320":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"20:2982:5145":{"crate_id":20,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"20:4910:6216":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:47948:9681":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:6211:7223":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:10486:7600":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"17:12035:7816":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"16:6554:8695":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"5:1408:2318":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:8202:11345":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:21236:11426":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:2160:16724":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"6:6625:2775":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:3196:16547":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:13566:8199":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"11:1858:9066":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"16:6502:8691":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:45882:9586":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:2838:16710":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:7728:9301":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"17:13155:7697":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:21966:31223":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"6:4678:5180":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"16:7038:8779":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:4436:6719":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"11:2060:9054":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"20:3080:1941":{"crate_id":20,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:42890:2314":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"6:5008:5193":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:2931:2496":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:8178:2270":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:4459:11376":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:11047:9841":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"6:4420:5155":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"18:582:2557":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:10714:2233":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"1:7043:29966":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:40046:9441":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"9:507:9124":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:11623:7733":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:44590:9571":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"2:3373:16612":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"6:6565:2908":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"5:1489:9042":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"20:527:2988":{"crate_id":20,"path":["libc","unix","hostent"],"kind":"struct"},"1:6780:11414":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:643:11287":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:4597:10471":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:43576:9239":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"16:55:8924":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"1:6355:9741":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"11:399:35337":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"5:4425:7157":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"6:5829:5725":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"16:6250:8666":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:8317:9724":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:9188:7381":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:40372:9466":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:40282:9458":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"14:202:16595":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"20:4042:5697":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"11:1048:35336":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:2925:2494":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:8191:9814":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"5:7243:9165":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:1594:9066":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:47876:9675":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:13492:8188":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:43112:9234":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"5:5754:7150":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"20:4138:5726":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:11916:11291":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:11532:9754":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:43411:9459":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:1500:3743":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:10471:7598":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"17:11542:7725":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"6:587:2996":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"11:1663:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:7647:7242":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"17:12303:7880":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"16:5100:8544":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"16:4753:8533":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"20:568:2994":{"crate_id":20,"path":["libc","unix","itimerval"],"kind":"struct"},"2:40524:9474":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"20:1350:3742":{"crate_id":20,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"20:542:2990":{"crate_id":20,"path":["libc","unix","pollfd"],"kind":"struct"},"17:12065:7820":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:8924:2344":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:4127:11371":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:44297:10971":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"6:5877:5729":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:10196:9238":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"5:2138:9146":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"5:3175:9064":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:5742:2343":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"15:327:18691":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:41986:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"14:187:18674":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:10161:7563":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:1075:7392":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:13083:8025":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"20:4095:5721":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"20:1410:3749":{"crate_id":20,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"11:97:10604":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:3155:25007":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:44301:10972":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:11127:7723":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:2376:2226":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:2505:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"6:6705:6215":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:21044:2240":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"9:0:2075":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:41504:31220":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"5:2963:34744":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:2353:189":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:10352:9244":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"20:1416:3750":{"crate_id":20,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:3158:25009":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"11:986:9053":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:43374:9515":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:12566:7927":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:12982:8005":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:8422:9229":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"6:6067:10833":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:10555:7611":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"16:2332:8457":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:857:9059":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:45638:9576":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"20:4077:5720":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:8991:9854":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:7829:2233":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"6:573:2994":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"6:4315:5147":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:13778:8246":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"6:5058:5191":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:11852:7784":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"11:667:9042":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:2683:220":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:9471:16662":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"6:7558:10861":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"11:968:8782":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:8869:11407":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:41784:9059":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:2928:2495":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:10609:7619":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:959:9052":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"5:3327:7167":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:888:9045":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"5:2240:10877":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:13732:8233":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:43822:9535":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"20:3092:5153":{"crate_id":20,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"6:6711:6216":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:9913:7543":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"16:3894:8520":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"20:477:2982":{"crate_id":20,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:2517:238":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"17:12631:7935":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"17:10931:7665":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:8418:2314":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:13981:8298":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:9879:222":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:9093:2246":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"17:9952:7499":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:953:9051":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:6508:2348":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:12526:7919":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:10293:7573":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:10038:7552":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"16:5363:19590":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:7973:2284":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:13749:8238":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:23164:9170":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:2514:133":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"6:62:2594":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"1:1568:7150":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"6:579:2995":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"18:96:23609":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"20:1355:3743":{"crate_id":20,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"5:6316:7133":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:9909:9486":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"1:10879:27064":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"17:13016:8018":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:14341:8412":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:12757:7968":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"11:2033:8782":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:11783:9229":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:8134:2238":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:3998:9182":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"5:4163:2256":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"17:11264:7707":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:42348:6707":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"16:7289:8819":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:6886:8498":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"11:793:9060":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"16:0:2081":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:41484:10956":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:43345:9511":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"6:532:2988":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:30439:31240":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:922:9042":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:8956:24341":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:40452:9202":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"20:3104:5154":{"crate_id":20,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"5:5858:2339":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"16:5689:8559":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"5:3201:9065":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:43850:9256":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:30345:6586":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:41563:9223":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"6:4833:5727":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"6:7278:10848":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:40514:9205":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:12952:7999":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:4097:29965":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"6:4489:5164":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"6:6688:3680":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:11454:7720":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"18:538:7336":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:6763:8745":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"16:4396:8523":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:41665:6637":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:41455:11346":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:10734:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:2826:8801":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:12148:7845":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:2804:8797":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"6:6618:6214":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:42226:2340":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"18:755:7376":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:11481:9884":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:11945:418":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:14395:8422":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:42671:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"17:12646:7938":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:4587:11355":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"16:3635:7418":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:43964:9539":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"20:5461:5213":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"5:5948:2256":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:7329:2497":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"16:7622:8879":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:9069:219":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:7264:134":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:7698:33728":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"16:7592:19601":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:11404:9718":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:12374:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:10581:7616":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:2544:2280":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:20637:32189":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"6:1590:3751":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"16:7484:8872":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:9016:7508":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"6:4556:5169":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:14:2183":{"crate_id":2,"path":["core","write"],"kind":"macro"},"6:562:2992":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"18:574:7329":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"16:3042:18734":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"16:7568:35359":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:44285:10968":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:3956:11354":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"16:2497:8469":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"16:2759:8480":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:8265:9814":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:13854:8263":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"16:6658:8719":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:2468:2240":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:9675:7201":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"6:4446:5158":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:13029:8019":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:9296:7386":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"5:6468:7133":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"16:7707:8882":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"6:1638:3755":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"18:727:7371":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"5:819:7139":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:11331:9247":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:39381:2202":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"17:13787:8247":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:12318:7884":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"7:32:18567":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"6:4944:10730":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"5:3180:34823":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:13140:8033":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:2511:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"1:10724:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:731:142":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:11803:16578":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:20853:31444":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"6:1557:3748":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:1973:7395":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"16:5651:8492":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:8924:19659":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:40272:7189":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:43780:9534":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:40879:1933":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"6:1575:3750":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"16:6057:18705":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:676:11288":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"15:394:18697":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"5:6137:11507":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"16:4814:8535":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:4144:9185":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:32135:9301":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"17:9528:35371":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"5:779:7136":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"5:4941:2256":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:2762:8795":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:12616:140":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:8315:11400":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:40414:9470":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:4022:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:46045:9597":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:11109:7688":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"11:285:10605":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:11967:793":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:30545:31216":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"5:1500:9043":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:40192:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"16:2352:8463":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:1048:8782":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"16:6713:8732":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:11956:645":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"6:6720:6217":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:12936:7998":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:8122:2235":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"5:2458:10878":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:45863:9585":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"20:1472:3754":{"crate_id":20,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:9436:145":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"6:5987:5178":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:12346:7891":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:3519:7406":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:2469:16658":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:40654:2268":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"6:4456:5159":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:9821:7532":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"6:1506:10629":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:12905:7992":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:42066:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:8605:19637":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"11:332:7122":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:3647:6637":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"20:3086:5031":{"crate_id":20,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"20:549:2991":{"crate_id":20,"path":["libc","unix","winsize"],"kind":"struct"},"20:4131:5725":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:11123:9745":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"17:12053:7817":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"11:2186:35335":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"11:1852:9065":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:6505:2347":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"6:5799:5722":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"6:123:2671":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"17:11276:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:40145:9450":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:10754:27874":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:40400:9467":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"6:4938:10727":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:42362:6708":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:926:9043":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:2705:2544":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"18:624:35375":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:9013:27058":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"16:4536:8527":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:43285:9509":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:7227:16694":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:2241:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:2347:182":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:40159:16654":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:11227:9750":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"16:6372:8489":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:1732:16735":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:2892:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"1:2890:210":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"20:3296:5174":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"16:7631:8880":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"20:3334:5177":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:44157:9556":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:45793:9582":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"16:6986:8772":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"20:3215:5168":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:9665:35373":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"20:3401:5184":{"crate_id":20,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"20:4193:5731":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"20:1574:3765":{"crate_id":20,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:4018:11359":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:12396:32818":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:11241:19785":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:9318:7510":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:41707:6696":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"6:6589:2866":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:8105:8942":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:39193:16550":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"17:13548:8194":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"6:4395:5031":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"16:4996:8541":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:1895:9711":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:1629:587":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"1:8943:107":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"17:12457:7912":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"16:3441:8514":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"6:5015:5194":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"20:2995:5146":{"crate_id":20,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:22453:177":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"6:1911:3818":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"13:0:2072":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:5949:206":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"16:6667:8720":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:14102:8354":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:3151:234":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"15:0:2080":{"crate_id":15,"path":["addr2line"],"kind":"module"},"6:4854:10675":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:30120:11348":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:2219:2015":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"5:875:7141":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"20:4203:5732":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlattr"],"kind":"struct"},"2:20941:11430":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"17:8740:19653":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"16:6470:8507":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:10241:9733":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"20:3187:5165":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:9225:6710":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:11340:7249":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:9716:35369":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"6:4748:10643":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:43502:9523":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:10324:9242":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"6:4818:10671":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:11155:7693":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:49869:11433":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"18:590:7339":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:4:1019":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"6:4626:5174":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:8458:2316":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"16:5720:8564":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:40443:9201":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:6156:9740":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:8949:9849":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:2832:8802":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:14026:8309":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:46853:9630":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:3181:32454":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"16:530:8444":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:40133:16653":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"16:7025:8776":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:43993:9547":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:2752:11410":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:13707:8224":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:1915:9177":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:39154:16629":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"11:1068:9056":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:10633:7621":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"20:5485:5217":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"11:644:9059":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:11257:9753":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:13055:8021":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:10744:2235":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:12106:7830":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"5:2687:10881":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"16:7539:8504":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:39434:8840":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"1:7621:9755":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:21205:2240":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"5:3668:7133":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:40465:9472":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:44484:211":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"1:3703:9718":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:13109:8027":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:11669:7737":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:7601:2240":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:11425:9719":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"5:1115:34735":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"11:311:10608":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"18:515:7326":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:22585:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:2779:8796":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:39359:203":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:21551:9267":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"6:5920:10773":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:46191:9601":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"6:4413:5154":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"20:489:2984":{"crate_id":20,"path":["libc","unix","timespec"],"kind":"struct"},"1:5933:7223":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:11388:19663":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:10963:7244":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"6:4810:10667":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"16:7855:19603":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:14380:8421":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:10199:7567":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"5:5281:16567":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:638:9700":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:2150:588":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:10945:7669":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"5:3209:9063":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"6:4518:5167":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:10223:7568":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"5:5277:16566":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:9215:6706":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"1:7701:9762":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"5:4193:2256":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"16:2611:8474":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"5:1479:9060":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"11:0:2077":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"17:12792:7979":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"6:5818:5724":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:46169:9600":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"11:844:9052":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"5:7305:9169":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:41421:9220":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:11045:7677":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:12815:7980":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"5:6389:6637":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"20:3147:5159":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:40344:9462":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:39315:202":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"6:4908:10706":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:47896:9677":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:41640:6636":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:11728:7253":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:40098:9446":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"11:1501:18662":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:4599:10473":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"20:1558:3764":{"crate_id":20,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"6:4716:5184":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:8736:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:2842:16711":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:11726:7747":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"20:1377:3746":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:21914:10886":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:10269:9240":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:7285:30586":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:4006:11357":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:32139:9302":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"5:7013:9143":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:4113:9184":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:10974:7245":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:2821:16709":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"6:5890:5731":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"20:3160:5161":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:7696:9705":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"17:9032:7509":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"6:6598:10841":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:4811:799":{"crate_id":2,"path":["core","iter"],"kind":"module"},"11:2194:10615":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"16:6317:8670":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"17:13125:8029":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"5:1423:9059":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:2508:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:43662:9241":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:9227:6711":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"5:7256:9167":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:501:7147":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"16:7553:8875":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:9336:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"20:3019:5148":{"crate_id":20,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:12377:7898":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:40074:9444":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:40432:9471":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:46139:9599":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:46493:9609":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:8949:19660":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"20:3308:5175":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"5:892:2318":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:434:7389":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"5:4031:7133":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:8761:9839":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:9064:218":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"16:2443:8467":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:8165:2268":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"6:4824:10672":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:3083:2300":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"16:6142:194":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"5:6619:7177":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:3805:9719":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"20:1368:3745":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:41589:181":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"16:8166:8948":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:2162:16725":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"2:45614:9575":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"20:5467:5214":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"16:4506:8526":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:10170:11403":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"6:4949:5144":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"6:6130:5755":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:12592:7930":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"20:4824:2775":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"20:3471:5192":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:8317:9228":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:45845:9584":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:10339:7583":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"20:4185:5730":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:8899:19658":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"16:7433:8860":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:10981:7672":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"6:7511:5213":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:11767:7756":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"6:6775:6220":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:41826:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:42355:6706":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:9223:194":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"17:13719:8227":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"16:2926:18732":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"16:7679:8506":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:11696:7743":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"6:1495:3742":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:42693:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:12361:136":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"20:4870:3677":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:40118:9181":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:9406:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"11:1831:7167":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"17:11568:19664":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"5:1099:35151":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"6:4436:5157":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"20:3226:5169":{"crate_id":20,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:40037:9440":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:41906:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"16:6128:8625":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:21954:9278":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:10854:9765":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:3162:16631":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"16:6864:8753":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"20:4107:5723":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:11269:10987":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:3700:9717":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:10338:9243":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:13659:8218":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:21792:9270":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:14197:8373":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:43364:9514":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:11905:7791":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:11798:16579":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:11354:7476":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"20:5019:6223":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:12878:7988":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:40500:7349":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"17:12479:7913":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"11:1838:9063":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"16:4965:8540":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:11952:1488":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"17:11164:7694":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:2366:2221":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"5:1511:198":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:9592:7197":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"17:9887:7540":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"6:4842:5728":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:4335:6717":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:47525:9667":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:10568:7614":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:14259:8395":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:9129:9859":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"5:775:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:10660:9871":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"20:3006:5147":{"crate_id":20,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:1924:11338":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"1:9112:9858":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"5:2956:6684":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"6:4787:10659":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:40088:9445":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:11791:7770":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"5:7092:9161":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"20:4995:6221":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:40178:9455":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"14:7:9033":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"5:7213:9162":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:10097:7559":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:14177:8367":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:9274:2269":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"20:3363:5180":{"crate_id":20,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:9059:167":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:12727:7949":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"6:5080:10764":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:8295:2775":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:13937:8287":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"12:0:2078":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"16:6939:19598":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:6432:2351":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"6:1702:3762":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"11:1538:9062":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"6:1631:3754":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:45722:9579":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:11792:7364":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:21459:11431":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"5:5874:17013":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:5716:2342":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:30915:183":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"6:0:821":{"crate_id":6,"path":["libc"],"kind":"module"},"1:6396:2345":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:11490:9250":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:9744:35365":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:14044:8312":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"16:5994:19593":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"16:6289:8668":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"16:4620:8530":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"16:8086:8939":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:43866:9181":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:13803:8251":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:3481:2237":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:2962:16549":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"17:9777:19671":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:1846:9710":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"17:9850:19673":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:7675:11289":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"6:7295:6568":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"20:3414:5186":{"crate_id":20,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:9034:10978":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:2855:7220":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"18:491:7328":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"6:6820:6223":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:6865:7233":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"6:4764:10645":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:22486:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"2:44085:9259":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:10231:9239":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:41398:155":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"2:42878:145":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:13862:8264":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:11210:7700":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:40353:9463":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:13905:8276":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"16:2465:8468":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:10119:9236":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:9083:7378":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:13332:8065":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"6:1690:3760":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"18:113:23610":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:11960:747":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"1:8831:6637":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:4010:11358":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:22420:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:43708:9531":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"6:4463:5160":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:11965:1506":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"18:766:23620":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:11591:7697":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"20:4101:5722":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"20:1635:3818":{"crate_id":20,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:11199:7699":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"17:11234:7702":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"9:52:18599":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"16:5704:8562":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:47849:9673":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"16:7525:8503":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"20:3408:5185":{"crate_id":20,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:8441:2315":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"5:5527:7165":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:14227:8380":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:5462:9734":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"20:3355:5179":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Chdr"],"kind":"struct"},"17:13069:8022":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:11189:7697":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"5:7294:9168":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"6:5051:10756":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"2:22093:9293":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:11601:9236":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:3948:11353":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:43446:9520":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:1433:144":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:1071:9054":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"18:736:23619":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"5:2959:10874":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"16:3810:8518":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"6:4524:5168":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"16:5553:8488":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:5408:9733":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:3317:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"11:836:9051":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"16:6540:8495":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"5:3799:7167":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"17:9734:7525":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"6:4781:10656":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"16:8176:19604":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"18:0:2083":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:13870:8265":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:10253:7570":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:12605:7931":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"6:7463:6224":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"5:7076:6637":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:10266:7571":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:11894:9890":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"17:12394:7901":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"20:4904:6215":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:13574:8200":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:5709:2341":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"18:636:7351":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"18:507:7329":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:8273:9822":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:12891:7989":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"6:1536:3746":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:11104:10986":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:43336:9510":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:10430:7595":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"6:6156:5756":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"16:6692:19597":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:10110:7560":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"5:6600:7165":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"11:2201:2208":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"5:626:9137":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:13882:8271":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:30367:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"18:609:7345":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:10597:7618":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:11290:19661":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"6:5044:10753":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"13:110:35343":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"16:4323:8522":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:9151:27721":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"6:5074:10761":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:22079:9292":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"20:1522:3759":{"crate_id":20,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:526:2987":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:32099:10614":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"20:3482:5193":{"crate_id":20,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"16:6239:35364":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:10389:7241":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"17:10080:7556":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:14350:8416":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"6:5994:10805":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"20:3197:5166":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"20:3380:5182":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:10671:19758":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:13303:8045":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:45947:9588":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:40225:9457":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:11467:7722":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:44332:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"6:4475:5162":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"20:4847:3705":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:13591:8201":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:2558:7201":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:6609:217":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"18:614:35376":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:9966:7522":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"16:2373:8464":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:3996:11356":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"16:2637:8475":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:8251:11374":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:25974:9171":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:45762:9581":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"20:4298:5756":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"9:330:10618":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:47603:9668":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"5:3235:9066":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:5579:206":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:7839:2230":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"16:8138:8946":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"16:8043:8934":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:3513:7150":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"17:11329:19662":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"16:2663:8476":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"5:6761:7180":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:10799:7656":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:0:496":{"crate_id":2,"path":["core"],"kind":"module"},"2:47773:9671":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"6:4800:10664":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:4704:11363":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"16:2421:8466":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:9399:7518":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:4199:9721":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:47922:9679":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"16:6232:8663":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"6:4984:10732":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:256:7384":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:10845:7660":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:40322:9461":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"6:4341:5149":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"6:4723:5185":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:7602:9695":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:22684:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:2364:2220":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"17:10511:7604":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"2:20669:32481":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:7488:7391":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"18:531:7333":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"6:5737:5697":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:47665:9669":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:12579:7211":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:47067:9633":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"16:6571:19596":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:21563:32192":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:11363:9717":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:11242:9751":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"16:5639:8558":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:7499:9887":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"6:4973:5192":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:4325:7187":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:2695:109":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:43726:9532":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"6:5900:5733":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:4045:16546":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:20650:32482":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:22618:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"20:3425:5187":{"crate_id":20,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:10863:7522":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:44548:161":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:9869:2240":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:8815:2318":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:41438:9222":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:14417:8428":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"20:3461:5191":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:48063:9686":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:11059:1988":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"16:5398:7509":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:413:165":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"16:2874:8485":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:11118:7689":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"6:4496:5165":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"11:695:9043":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:9074:9745":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:45568:9573":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"16:5882:8583":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"5:5233:7133":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"11:1103:9057":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"6:1681:3759":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:7539:7236":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"6:4568:5170":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:10654:7623":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:10123:7542":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:13847:8262":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"15:306:18687":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:4702:11361":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:10076:2270":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"20:5033:6224":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","termios2"],"kind":"struct"},"2:40668:9207":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:361:9694":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:901:7150":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"16:6484:8683":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:39255:200":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:22552:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"17:13771:8244":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"16:6438:8682":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:10837:9245":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"2:8904:33730":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:10520:7605":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"1:480:7213":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"5:3593:9059":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"6:4963:5190":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:11943:371":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"5:7196:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:45744:9580":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"11:805:11293":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"16:5916:8440":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:4926:11391":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"16:3867:8519":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"6:6607:6213":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:10361:7588":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"5:7121:6637":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:11084:7679":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"2:41725:193":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:44313:10975":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"16:8152:8508":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:11200:9883":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"16:2314:8455":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"20:4069:5719":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:2816:16708":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:14150:8355":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"6:595:2997":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:9475:7519":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:5531:9193":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:12994:8007":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:8155:2267":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:2791:16705":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"5:1669:7133":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"16:6175:8632":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:12186:7853":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"16:2857:8484":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:11007:7674":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:11600:19665":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:44365:16820":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"17:11979:7804":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:41649:2318":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"17:10499:7601":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"2:9219:6708":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:30381:31234":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"17:10148:7562":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"16:3295:8513":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"1:844:2318":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"20:1436:3752":{"crate_id":20,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:12864:7987":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:47273:9665":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:10403:7593":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:40894:2298":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:21210:11417":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"11:749:7150":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"16:5342:8546":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:3962:11355":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:46617:9626":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"16:6396:8679":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"16:6850:8751":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:4785:31555":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:1821:9708":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:10684:10984":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"1:1062:9053":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"6:5775:5720":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:585:11284":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"6:4506:5166":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:6561:2352":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"1:554:9696":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"16:7313:35361":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"5:3719:2283":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:21898:9272":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:11371:7716":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:41776:2318":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:11177:7247":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"2:7231:16693":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"5:4073:9059":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"10:36:10617":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:5589:9195":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"20:3180:5164":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:6319:166":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:10377:7590":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"20:563:2993":{"crate_id":20,"path":["libc","unix","sigval"],"kind":"struct"},"2:4254:207":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"6:1520:3744":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:46883:9631":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:5586:7223":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:21106:11418":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:40209:31237":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:5955:10794":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:4764:388":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:42106:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"16:7494:8873":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"5:1439:6637":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:13435:8151":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"5:6786:7183":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:10994:7673":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:2521:237":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1:3488:1930":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:1844:9709":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"5:258:7133":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:4401:5153":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:875:9044":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"16:4900:8538":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:8078:2234":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"17:10906:7663":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:11020:7675":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"6:541:2989":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:42186:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"16:6872:8497":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:11832:7774":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:3186:7403":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:7885:2281":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:40331:2267":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"20:2976:5144":{"crate_id":20,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:8837:9735":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"16:2567:8472":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:44281:10967":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:2745:106":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:39337:201":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"20:483:2983":{"crate_id":20,"path":["libc","unix","timeval"],"kind":"struct"},"2:46023:9596":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:40903:7195":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"17:10883:7662":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:5090:191":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:22519:9297":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:43424:9518":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:5787:2350":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:13795:8249":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:12711:7944":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:47415:9666":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:46312:9605":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"5:1270:9054":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:10832:7659":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:11086:2246":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:3904:11350":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:5471:2256":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"2:40475:9473":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"20:3348:5178":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Chdr"],"kind":"struct"},"2:43812:2266":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"1:4868:11384":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:1785:9707":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:43942:16593":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"16:5067:8543":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:2855:16714":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:10689:2229":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"6:500:2985":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"6:7505:5212":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"20:5064:6226":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"18:644:7329":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:8771:19654":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"16:2589:8473":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"16:2737:8479":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:2602:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"1:6644:9741":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"17:10330:7580":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"16:7407:8600":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:20805:11422":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"2:21454:11423":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"16:6977:8769":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:42653:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"6:4917:10712":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"14:160:9033":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"9:357:18596":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:12354:7893":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:8516:2319":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"6:1569:3749":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"18:660:7352":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:43832:9536":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:14359:8418":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"6:4380:5152":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:14015:8305":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"6:7250:2941":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"6:1603:3753":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"16:5793:8572":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:9875:7537":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:10158:9237":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"20:4919:6217":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"18:564:7338":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:8659:19651":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:8999:9856":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:9939:7546":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:8938:9846":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:2748:2550":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"6:1513:10632":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"20:4209:5733":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"16:7099:9856":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"20:3370:5181":{"crate_id":20,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:11849:16587":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"16:7073:19599":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:3156:135":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:45592:9574":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:41575:9225":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:1577:9063":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"6:6805:6222":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"10:0:2076":{"crate_id":10,"path":["adler"],"kind":"module"},"2:45993:9595":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:2350:2216":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"16:7753:8884":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"6:5979:5179":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"16:2541:8471":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:11498:7723":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:11034:7676":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"20:4278:1737":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:5793:5721":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:6834:10842":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"6:1595:3752":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:30311:6585":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"16:7061:8781":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:12552:7628":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"16:3580:8515":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"5:204:7131":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:9899:7542":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:11550:9254":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:8106:2297":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:7558:7238":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"5:3139:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"6:7586:10867":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:1746:10884":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:10679:10982":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"6:6648:3705":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:1561:2318":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:12004:112":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:12502:7918":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"6:4729:5186":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:12671:11294":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"20:614:3015":{"crate_id":20,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:44565:9570":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:6392:1933":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:4186:6716":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"1:11950:1374":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"17:11416:7718":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:8291:9824":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"9:450:18581":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:4409:2382":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:2694:225":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"20:536:2989":{"crate_id":20,"path":["libc","unix","iovec"],"kind":"struct"},"1:7626:9757":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"6:4704:5183":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:5357:9730":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:2773:16703":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:0:1396":{"crate_id":1,"path":["std"],"kind":"module"},"17:9118:7379":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"16:7833:8896":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"16:4928:8539":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:13368:8096":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"14:215:9038":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:43385:9516":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:44058:9550":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"5:7042:7150":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"16:6332:8672":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:12424:7904":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:41657:9059":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"20:501:2986":{"crate_id":20,"path":["libc","unix","rusage"],"kind":"struct"},"11:2168:10610":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:44010:9548":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:2263:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"6:4929:10721":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"17:10175:7522":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:46413:9608":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:11964:1505":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"16:6214:8653":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:12671:7940":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:10310:9241":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"6:4848:5732":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:9561:7521":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:9977:7523":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:8767:186":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"17:11520:7407":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"16:7331:35362":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:44474:205":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"20:3238:5170":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:12921:7994":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"20:1386:3747":{"crate_id":20,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"16:5414:8547":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"6:5849:5712":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:6671:3677":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"9:486:18580":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:12435:7905":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:11345:16582":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"13:226:10603":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:42853:9497":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"16:5382:7508":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:6893:27494":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:43626:9530":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:9428:141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"20:5494:6569":{"crate_id":20,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"11:736:9045":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"6:4638:5175":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:4263:9187":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:2391:1929":{"crate_id":1,"path":["std","io"],"kind":"module"},"17:13964:8294":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:13427:8148":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:8856:9845":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:12423:192":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"20:4174:5728":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlmsgerr"],"kind":"struct"},"2:42616:110":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"16:2803:8482":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"6:4740:5187":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:1666:1092":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:2910:2272":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"6:4862:10680":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"5:1461:9044":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"20:4797:2866":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:10027:2318":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:6834:16688":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"1:1565:6637":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:10313:7575":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"0:73:1695":{"crate_id":0,"path":["num_cpus","get_physical"],"kind":"function"},"1:11959:746":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"17:1184:7394":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:12161:7849":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:2620:2282":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:40423:9196":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:1636:6582":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:14315:8403":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:41792:6637":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:11527:9253":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:22354:178":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:5044:9728":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"20:0:821":{"crate_id":20,"path":["libc"],"kind":"module"},"20:3071:5152":{"crate_id":20,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:2811:16707":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:13557:8198":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:48024:9685":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:7893:2283":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:47867:9674":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:2737:2546":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"5:2167:10873":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:42146:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"8:0:2074":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:22006:31228":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:3152:30246":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"20:4974:6220":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:42026:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:43979:9544":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"3:234:210":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:13957:8293":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:21930:9273":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:8779:9840":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:21126:9269":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:30943:2557":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"5:7113:6637":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:21675:11419":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:3233:2293":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:11958:745":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"17:12333:7889":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"17:13683:8222":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"16:2962:18733":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"16:6724:8733":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:7817:2232":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:46237:9603":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"6:4872:10686":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"14:221:9040":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:10444:7596":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"2:11315:16781":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:7822:2229":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:4877:11385":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:14054:8317":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:14403:8425":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:1820:9176":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:7043:2334":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:12004:7807":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"16:5940:8589":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:9216:9709":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"6:6868:6226":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:936:11293":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"16:7255:6695":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:11525:9754":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:43841:9537":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"18:707:7364":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:2210:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:3406:1932":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:2316:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:39413:9309":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:40031:9181":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"5:4001:7150":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"16:5612:8549":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:14216:8379":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"6:4368:5150":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"6:6841:10845":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:10980:7246":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:2215:2212":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:4706:11364":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"6:5767:5719":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"5:7269:7163":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"17:261:7385":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"11:119:7120":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:8350:11395":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:12412:7902":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:2795:16704":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"9:237:2314":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:12691:7943":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:582:7391":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:9208:112":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:46729:9628":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:7272:6567":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:14205:8374":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"16:7445:8861":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:7869:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:4258:9186":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:21845:9271":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:11178:7695":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:40110:9447":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"20:1514:3758":{"crate_id":20,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:8741:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"20:5046:6225":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"6:6044:10827":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:9658:7200":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"6:4664:5177":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"20:3154:5160":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"20:3174:5163":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:12851:7985":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:47907:9678":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:6124:7229":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:47811:9672":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:8986:9853":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:14236:8382":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"5:6717:244":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:43456:9521":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"16:2399:8465":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"20:5417:2941":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"5:3567:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:20667:32477":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"16:6931:8758":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:3898:11351":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"20:138:2671":{"crate_id":20,"path":["libc","unix","fpos_t"],"kind":"enum"},"16:4698:8531":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"11:1822:6637":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:9213:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"17:10417:7594":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:41801:183":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:21:684":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"17:3395:7405":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:9361:9232":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"16:2689:8477":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"20:1537:3761":{"crate_id":20,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:21238:9269":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"10:44:9069":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"20:3257:5171":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:911:7167":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:6787:32443":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"16:4441:8524":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:43608:9529":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"16:5028:8542":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:13697:8223":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"16:2825:8483":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:46390:9607":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:8500:2317":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"6:6028:10822":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:5593:7224":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"18:671:7358":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"5:3214:34819":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:9221:6709":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:13167:8036":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:5525:11401":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:20897:11429":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"17:12826:7982":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:9418:7240":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"6:4328:5148":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:20855:16724":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"1:930:9046":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"6:4685:5181":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"16:7648:198":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:43680:9242":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:14007:8304":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:12769:7970":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:6575:2353":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:11944:941":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:11961:743":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"6:6726:6218":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:10621:7620":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"5:2967:34743":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"16:8125:8943":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"11:798:9046":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:11778:16581":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:1572:7167":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"2:21027:11421":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"1:8239:9720":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"16:8021:8933":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"17:13991:8301":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:2783:11411":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:9926:7544":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:1768:610":{"crate_id":1,"path":["std","env"],"kind":"module"},"6:4650:5176":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:8823:9844":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:9840:7534":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"11:2130:18656":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"20:3389:5183":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"5:1371:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:32226:2551":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:4148:11373":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:9806:19672":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"2:42598:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:20803:2240":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"5:7227:31237":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:7693:8496":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:2212:2211":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"6:4606:5172":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"5:1773:7167":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"6:7523:10856":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"17:10351:7587":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:8113:2299":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:6983:2297":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"9:177:18648":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:20652:32479":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:11992:7806":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"6:1696:3761":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:5377:9731":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:4389:6718":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"5:1299:9058":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:20974:11425":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"17:13620:8209":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:39271:198":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:4351:9723":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:10280:7572":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:44353:9562":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:3233:16548":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"16:7362:19600":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:12133:7839":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"20:4925:6218":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"11:1027:18661":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:10346:9839":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:45692:9578":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:48001:9684":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"16:6347:19595":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"16:7665:8505":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"20:3433:5188":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"7:79:18574":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:11815:7771":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:41540:9720":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"5:1254:8782":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:9706:7524":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"20:1531:3760":{"crate_id":20,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:11951:1404":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:21673:2240":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:22027:31221":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:39240:9305":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:10303:7456":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:43558:2270":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:2787:11413":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"5:4233:2318":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"20:4165:5727":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nlmsghdr"],"kind":"struct"},"5:2220:34837":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:20609:2557":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:11968:1561":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"17:10066:7554":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:10249:7569":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:10032:27381":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"2:3168:16630":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:2690:2491":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"17:13949:8290":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:45548:9572":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"5:3734:9145":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"6:1663:3757":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:44293:10970":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"20:495:2985":{"crate_id":20,"path":["libc","unix","rlimit"],"kind":"struct"},"1:618:9697":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:7852:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"20:4180:5729":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:40362:9464":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"20:3119:5156":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:43534:9527":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:5393:9732":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"17:504:7390":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:11194:9746":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"5:3580:2318":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:1543:2256":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:39628:26308":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"11:2049:9053":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"11:723:9044":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:11144:7692":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:43466:9522":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"20:4120:5724":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:22717:9298":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:40302:9459":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:42861:9499":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:40682:9208":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:11753:7755":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"2:20841:11424":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"14:165:18667":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:2897:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:44170:9560":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:8316:11399":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:8510:2318":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:3270:2288":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"16:2781:8481":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"6:653:3015":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:5990:9197":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:21104:2240":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"16:6456:8490":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:10812:7658":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:11955:643":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:43544:2269":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:7384:159":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:43093:9508":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"6:6796:6221":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"15:288:18686":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"20:5479:5216":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:11966:1503":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"16:6386:8678":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:9442:35366":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:40872:9211":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"17:9223:7382":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:8793:9841":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:8257:9820":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"5:2032:2283":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"11:1818:2318":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"16:4785:8534":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:43528:9249":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"1:7708:11327":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"17:11056:19783":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"16:6323:8671":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"16:7763:19602":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:7306:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:9604:7522":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:2980:11307":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"20:3443:5189":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"18:80:23608":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"16:4564:8528":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"5:1470:9045":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:43762:9533":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:12174:7850":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"6:488:2983":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:11948:1054":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:44527:9565":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:947:9049":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:11250:7704":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"16:6160:8630":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:4601:10475":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"6:1673:3758":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"16:5972:8446":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:9172:210":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"6:7546:5216":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:1589:9065":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"5:7360:7167":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:917:9060":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:8909:31985":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:11924:7796":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:3472:30391":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"20:1431:3751":{"crate_id":20,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:21229:2240":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"5:273:2499":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:13830:8255":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"18:481:7327":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:46647:9627":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"6:4469:5161":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:5013:9728":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:2693:226":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:44492:195":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:12365:7896":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:7657:11297":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:11955:7800":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:2164:7402":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:1466:1701":{"crate_id":2,"path":["core","mem"],"kind":"module"},"16:2715:8478":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:13043:8020":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"5:7062:34825":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:11220:19784":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"5:1520:9142":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:355:9693":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:46359:9606":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"16:7463:8869":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"16:7799:8892":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"6:4879:1006":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"6:4291:5145":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"5:7280:224":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:11074:7407":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"17:8872:19657":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:1985:184":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:9048:7377":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:11035:9840":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"11:1517:9061":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:12077:7821":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"20:4817:6214":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:10458:7597":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"11:760:7167":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:21112:11420":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"5:6629:7179":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"1:7690:11290":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"16:8265:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"14:31:9033":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:11738:2322":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"6:5025:10739":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"6:5068:10759":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"16:4724:8532":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"18:521:23621":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:9153:7380":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:12568:107":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"1:10013:9708":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"16:5843:8580":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:42644:71":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"6:4374:5151":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:11970:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"20:521:2987":{"crate_id":20,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:7968:9769":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"16:4476:8525":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"16:6900:8755":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"20:5473:5215":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"14:0:2079":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:7724:9765":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"20:55:2594":{"crate_id":20,"path":["libc","unix","DIR"],"kind":"enum"},"2:2311:188":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:10323:7577":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"5:7052:7145":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"6:1527:3745":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"6:1649:3756":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:9485:35374":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:9409:35368":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"0:0:1818":{"crate_id":0,"path":["num_cpus"],"kind":"module"},"5:35:7129":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:13923:8280":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"16:4032:8521":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"5:2128:7147":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"6:4543:10639":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"16:5567:8491":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"6:568:2993":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:3272:2289":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"6:6136:1737":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"14:40:7771":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:21989:9280":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"6:4389:1941":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:46571:9625":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:7812:2231":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:2767:8792":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"9:393:18582":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:7963:9768":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:42588:10957":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:40197:9456":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:8368:2313":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:4605:16647":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:12254:7855":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:8794:19655":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"5:4392:2256":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"6:4428:5156":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:2700:228":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"11:365:7124":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"16:5301:8545":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:40152:9451":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:9173:2239":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:44305:10973":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"6:554:2991":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:7661:16692":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"16:6915:35358":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:12618:7933":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"5:1135:35149":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"16:5673:19591":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:867:6637":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:45823:9583":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:12017:7808":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:11943:7797":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:9344:35372":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"1:3638:11347":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"16:6815:8747":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"6:4695:5182":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:13513:8193":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:11500:10990":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:43437:9519":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"20:3032:5149":{"crate_id":20,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"20:3209:5167":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:20988:16724":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"17:13673:8221":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:13448:8158":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"20:4887:3680":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:1783:9706":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"20:4781:3676":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"20:590:2997":{"crate_id":20,"path":["libc","unix","protoent"],"kind":"struct"},"16:4841:8536":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:0:2082":{"crate_id":17,"path":["object"],"kind":"module"},"2:40888:9212":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:40913:9214":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"20:134:2670":{"crate_id":20,"path":["libc","unix","FILE"],"kind":"enum"},"1:10494:7242":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"16:4592:8529":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"5:5684:232":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"6:5967:10798":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:14037:8310":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:1583:9064":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:11098:7684":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:10013:7550":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"20:4773:2908":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:10451:2292":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"11:817:9049":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:8632:19650":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"5:7084:198":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:4279:9722":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"6:4955:5189":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"16:3777:8517":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:7654:2321":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:530:7214":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:44122:9551":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"6:6008:10816":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:11946:1523":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:41527:9489":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"6:7609:6569":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:4550:10641":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:10082:9862":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"6:7564:10862":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"6:7540:5215":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:12118:7833":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"20:1490:3756":{"crate_id":20,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:43875:9447":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"6:4616:5173":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:42908:9507":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"5:7030:9160":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"5:7180:2209":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"11:1826:7150":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:3193:2291":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:40921:9216":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"5:2957:34741":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:10858:9121":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"17:2105:19716":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"16:6427:8681":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:11967:7801":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:42628:8911":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"20:557:2992":{"crate_id":20,"path":["libc","unix","linger"],"kind":"struct"},"1:3934:11352":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"20:4229:5734":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"18:652:7329":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"6:4895:10696":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:30351:6587":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"20:5004:6222":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:14301:8401":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:44289:10969":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"6:506:2986":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"11:403:35338":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"16:6018:19594":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"6:6744:6219":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:47971:9682":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:41946:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:2846:16712":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"5:4845:204":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:2740:2492":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:41866:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"16:6357:8675":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:47727:9670":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:6935:7234":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:22043:31222":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"16:3025:8509":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"16:8252:8955":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"6:6171:10835":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"20:4943:6219":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:2588:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1:5343:9729":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1:4662:11386":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:40126:9448":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"6:4794:10661":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:43857:9448":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:10957:7670":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:12089:7822":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:2743:2548":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:44136:16594":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"4:0:2073":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"16:7739:8494":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"16:8068:8937":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"16:7505:8502":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"16:5959:8596":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:4783:11360":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:9655:7523":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:10051:9059":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"20:574:2995":{"crate_id":20,"path":["libc","unix","tms"],"kind":"struct"},"20:3451:5190":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:5202:190":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"6:7552:5217":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:8807:9842":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"6:7575:10866":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"16:4868:8537":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:47887:9676":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:40382:9190":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"20:582:2996":{"crate_id":20,"path":["libc","unix","servent"],"kind":"struct"},"16:5590:8493":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:20622:32189":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"20:3166:5162":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"20:1479:3755":{"crate_id":20,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"20:1504:3757":{"crate_id":20,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:4437:11375":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"6:6077:5734":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"16:6789:8746":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"20:5447:6568":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:3191:2290":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"20:3137:5158":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"6:7599:10871":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"18:681:7359":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:6108:7211":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:4665:11375":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:3348:2298":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"1:11962:1507":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"1:11067:10975":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"11:1012:9054":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:4531:11381":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:2481:1931":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:45900:9587":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"20:4272:5755":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"16:5626:8553":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"6:6036:10824":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:43354:9513":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:8542:19639":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:4119:11370":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"16:6516:8693":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"11:1845:9064":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:47933:9680":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:9614:35370":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"16:7240:35363":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"20:1444:3753":{"crate_id":20,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:4135:11372":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:41733:210":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"1:10448:2290":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"16:5775:8568":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"6:1545:3747":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"6:4483:5163":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"16:6303:8487":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"11:2180:10612":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:44577:9068":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"1:3378:2256":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"11:630:2318":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"6:6850:6225":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:8997:19638":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:39441:9311":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"7:0:1551":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:40865:9210":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"20:5439:6567":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:40058:31239":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:2799:16706":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:5270:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"17:10786:7655":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:8246:10976":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:6259:206":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:11493:28032":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"2:2757:11412":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"6:4304:5146":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"6:119:2670":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:12448:9265":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"6:482:2982":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"11:2174:10611":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:45660:9577":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:22105:11349":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:10258:27378":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"1:2348:2215":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:10454:2288":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"6:5882:5730":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"20:3286:5173":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:3078:11309":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:11927:27053":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"18:719:7368":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"20:4806:6213":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:3231:2292":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:11911:30584":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"6:4887:10691":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:8885:11406":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:2244:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:13999:8302":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"20:3276:5172":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:46261:9604":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:9866:7535":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"5:673:231":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:8711:19652":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"20:469:2981":{"crate_id":20,"path":["libc","unix","group"],"kind":"struct"},"2:3385:9180":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"16:149:7116":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"17:12539:7922":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"6:4587:5171":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:9690:7206":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"17:10969:7671":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"16:6531:7119":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"6:5805:5723":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:44309:10974":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:47986:9683":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:39448:6717":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"17:10390:7592":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"16:3058:7414":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:8185:2266":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"5:1008:7133":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"3:0:442":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:3934:2256":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"16:2293:18706":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"6:1733:3765":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:22651:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"17:11642:7736":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"5:7168:2208":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:22387:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"16:5807:8573":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:41674:6695":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"20:1543:3762":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:13604:8206":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"5:5062:2339":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"20:3489:5194":{"crate_id":20,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"5:2046:9145":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"6:6573:3676":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:9183:132":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"}},"external_crates":{"20":{"name":"libc","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":26}